<QUERY> => SELECT <nouns> FROM <nouns> JOIN <nouns> ON <Condition> GROUP BY <nouns> HAVING <Condition> ORDER BY <nouns> <direction> LIMIT <number> 

SELECT => Get

<nouns> => FUNC(x) | X | Y.X | * | DISTINCT <nouns> | <nouns> and <nouns>

* => all

Y.X => X of Y

FROM Y => of Y

Y.X FROM Y => X of Y

SELECT T1.X FROM table1 AS T1 JOIN table2 AS T2 ON T1.a = T2.b => Get X of table1 that has table2

WHERE => Keep the records that

<Condition> => <nouns> <Operator> <nouns>

<Operator>:
	'>' => is greater than
	'<' => is less than 
	'>=' => is greater than or equal to
	'<=' => is less than or equal to
	'=' => is
	'!=' => is not
	'LIKE' => is in the form of
	'in' => is in
	'not in' => is not in

FUNC(x):
	COUNT(x) => the number of x
	COUNT(*) => the number
	AVG(x) => the average value of x
	MAX(x) => the maximum value of x
	MIN(x) => the minimum value of x

GROUP BY => Group the records based on

HAVING => that

ORDER BY => Order these records based on 

<direction>:
	ASC => Sort them in ascending order
	DESC => Sort them in descending order

LIMIT <number> => and return the top <number> records

<number> => N+


High-level:

A INTERSECT B =>  Start the first query, 
		 QUERY(A)
		 Start the second query,
		 QUERY(B)
		 Keep the intersection of the two query results. 

A UNION B => 	Start the first query, 
		QUERY(A)
		Start the second query,
		QUERY(B)
		Keep the union of the two query results. 

A EXCEPT B => 	Start the first query, 
	    	QUERY(A)
		Start the second query,
		QUERY(B)
		Keep the records in A but not in B. 

A in (B) => 	Start the first query, 
		QUERY(B) as #1
		The second query uses the result of the frist query,
		QUERY(A(the first result))
			




