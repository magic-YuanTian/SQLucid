Get the number of head	SELECT COUNT ( * ) FROM head
Keep the records that age is greater than 56	WHERE age > 56
Get name and born state and age of head	SELECT name , born_state , age FROM head
Order these records based on the age	ORDER BY age 
Get creation and name and budget in billions of department	SELECT creation , name , budget_in_billions FROM department
Get the maximum value of budget in billions and the minimum value of budget in billions of department	SELECT MAX ( budget_in_billions ) , MIN ( budget_in_billions ) FROM department
Get the average value of num employees of department	SELECT AVG ( num_employees ) FROM department
Keep the records that ranking is between 1 X15	WHERE ranking BETWEEN 10 AND 15
Get name of head	SELECT name FROM head
Keep the records that born state is not California	WHERE born_state != California
Get creation of department that has management and head	SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id
Keep the records that born state of head is Alabama	WHERE T3.born_state = Alabama
Get born state of head	SELECT born_state FROM head
Group the records based on the number born state 3 that the number is greater than or equal to 3	GROUP BY born_state HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get creation of department	SELECT creation FROM department
Group the records based on creation	GROUP BY creation
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and num employees of department that has management	SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id
Keep the records that temporary acting of management is Yes	WHERE T2.temporary_acting = Yes
Get the number of distinct temporary acting of management	SELECT COUNT ( DISTINCT temporary_acting ) FROM management
Get department id of management	SELECT department_id FROM management
Get the number of department	SELECT COUNT ( * ) FROM department
Keep the records that department id is not in the first query result	WHERE department_id NOT IN ( the first query result ) 
Get age of management that has head	SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id
Keep the records that temporary acting of management is Yes	WHERE T2.temporary_acting = Yes
Get born state of department that has management and head	SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id
Keep the records that name of department is Treasury	WHERE T1.name = Treasury
Get born state of department that has management and head	SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id
Keep the records that name of department is Homeland Security	WHERE T1.name = Homeland Security
Get the number and department id and name of management that has department	SELECT T1.department_id , T1.name , COUNT ( * ) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id
Group the records based on the number department id of department 1 that the number is greater than 1	GROUP BY T1.department_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get head id and name of head	SELECT head_id , name FROM head
Keep the records that name is in the form of %Ha%	WHERE name LIKE %Ha%
Get the number of farm	SELECT COUNT ( * ) FROM farm
Get the number of farm	SELECT COUNT ( * ) FROM farm
Get Total Horses of farm	SELECT Total_Horses FROM farm
Order these records based on the Total Horses and sort them in ascending ORDER	ORDER BY Total_Horses ASC 
Get Total Horses of farm	SELECT Total_Horses FROM farm
Order these records based on the Total Horses and sort them in ascending ORDER	ORDER BY Total_Horses ASC 
Get Hosts of farm competition	SELECT Hosts FROM farm_competition
Keep the records that Theme is not Aliens	WHERE Theme != Aliens
Get Hosts of farm competition	SELECT Hosts FROM farm_competition
Keep the records that Theme is not Aliens	WHERE Theme != Aliens
Get Theme of farm competition	SELECT Theme FROM farm_competition
Order these records based on the and sort them in ascending ORDER	ORDER BY ASC 
Get Theme of farm competition	SELECT Theme FROM farm_competition
Order these records based on the and sort them in ascending ORDER	ORDER BY ASC 
Get the average value of Working Horses of farm	SELECT AVG ( Working_Horses ) FROM farm
Keep the records that Total Horses is greater than 5000	WHERE Total_Horses > 5000
Get the average value of Working Horses of farm	SELECT AVG ( Working_Horses ) FROM farm
Keep the records that Total Horses is greater than 5000	WHERE Total_Horses > 5000
Get the maximum value of Cows and the minimum value of Cows of farm	SELECT MAX ( Cows ) , MIN ( Cows ) FROM farm
Get the maximum value of Cows and the minimum value of Cows of farm	SELECT MAX ( Cows ) , MIN ( Cows ) FROM farm
Get the number of distinct Status of city	SELECT COUNT ( DISTINCT Status ) FROM city
Get the number of distinct Status of city	SELECT COUNT ( DISTINCT Status ) FROM city
Get Official Name of city	SELECT Official_Name FROM city
Order these records based on the Population and sort them in descending ORDER	ORDER BY Population DESC 
Get Official Name of city	SELECT Official_Name FROM city
Order these records based on the Population and sort them in descending ORDER	ORDER BY Population DESC 
Get Official Name and Status of city	SELECT Official_Name , Status FROM city
Order these records based on the Population and sort them in descending order, and return the top 1 record	ORDER BY Population DESC LIMIT 1
Get Official Name and Status of city	SELECT Official_Name , Status FROM city
Order these records based on the Population and sort them in descending order, and return the top 1 record	ORDER BY Population DESC LIMIT 1
Get Year and Official Name of city that has farm competition	SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2
Get Year and Official Name of city that has farm competition	SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2
Get Official Name of city that has farm competition	SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
Group the records based on the number Host city ID of farm competition 1 that the number is greater than 1	GROUP BY T2.Host_city_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Official Name of city that has farm competition	SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
Group the records based on the number Host city ID of farm competition 1 that the number is greater than 1	GROUP BY T2.Host_city_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Status of city that has farm competition	SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
Group the records based on Host city ID of farm competition	GROUP BY T2.Host_city_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Status of city that has farm competition	SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
Group the records based on Host city ID of farm competition	GROUP BY T2.Host_city_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Theme of city that has farm competition	SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
Keep the records that Population of city is greater than 1000	WHERE T1.Population > 1000
Get Theme of city that has farm competition	SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID
Keep the records that Population of city is greater than 1000	WHERE T1.Population > 1000
Get the average value of Population and Status of city	SELECT Status , AVG ( Population ) FROM city
Group the records based on Status	GROUP BY Status
Get the average value of Population and Status of city	SELECT Status , AVG ( Population ) FROM city
Group the records based on Status	GROUP BY Status
Get Status of city	SELECT Status FROM city
Group the records based on Status	GROUP BY Status
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get Status of city	SELECT Status FROM city
Group the records based on Status	GROUP BY Status
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get Status of city	SELECT Status FROM city
Group the records based on Status	GROUP BY Status
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Status of city	SELECT Status FROM city
Group the records based on Status	GROUP BY Status
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Host city ID of farm competition	SELECT Host_city_ID FROM farm_competition
Get Official Name of city	SELECT Official_Name FROM city
Keep the records that City ID is not in the first query result	WHERE City_ID NOT IN ( the first query result ) 
Get Host city ID of farm competition	SELECT Host_city_ID FROM farm_competition
Get Official Name of city	SELECT Official_Name FROM city
Keep the records that City ID is not in the first query result	WHERE City_ID NOT IN ( the first query result ) 
Get Status of city	SELECT Status FROM city
Keep the records that Population is greater than 1500	WHERE Population > 1500
Get Status of city	SELECT Status FROM city
Keep the records that Population is less than 500	WHERE Population < 500
Get Status of city	SELECT Status FROM city
Keep the records that Population is greater than 1500	WHERE Population > 1500
Get Status of city	SELECT Status FROM city
Keep the records that Population is less than 500	WHERE Population < 500
Get Official Name of city	SELECT Official_Name FROM city
Keep the records that Population is greater than 1500 OR Population is less than 500	WHERE Population > 1500 OR Population < 500
Get Official Name of city	SELECT Official_Name FROM city
Keep the records that Population is greater than 1500 OR Population is less than 500	WHERE Population > 1500 OR Population < 500
Get Census Ranking of city	SELECT Census_Ranking FROM city
Keep the records that Status is not Village	WHERE Status != Village
Get Census Ranking of city	SELECT Census_Ranking FROM city
Keep the records that Status is not Village	WHERE Status != Village
Get course name of courses that has student course registrations	SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id
Group the records based on course id of courses	GROUP BY T1.course_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get course name of courses that has student course registrations	SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id
Group the records based on course id of courses	GROUP BY T1.course_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get student id of student course registrations	SELECT student_id FROM student_course_registrations
Group the records based on student id	GROUP BY student_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get student id of student course registrations	SELECT student_id FROM student_course_registrations
Group the records based on student id	GROUP BY student_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get first name and last name of candidates that has people	SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2
Get first name and last name of candidates that has people	SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get student id of students	SELECT student_id FROM students
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get student id of students	SELECT student_id FROM students
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get student id and course name of student course registrations that has courses	SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2
Get student details of student course registrations that has students	SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id
Order these records based on the registration date of student course registrations and sort them in descending order, and return the top 1 record	ORDER BY T1.registration_date DESC LIMIT 1
Get student details of student course registrations that has students	SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id
Order these records based on the registration date of student course registrations and sort them in descending order, and return the top 1 record	ORDER BY T1.registration_date DESC LIMIT 1
Get the number of courses that has student course attendance	SELECT COUNT ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of courses is English	WHERE T1.course_name = English
Get the number of courses that has student course attendance	SELECT COUNT ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of courses is English	WHERE T1.course_name = English
Get the number of courses that has student course attendance	SELECT COUNT ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
Keep the records that student id of student course attendance is 171	WHERE T2.student_id = 171
Get the number of courses that has student course attendance	SELECT COUNT ( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
Keep the records that student id of student course attendance is 171	WHERE T2.student_id = 171
Get candidate id of people that has candidates	SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id
Keep the records that email address of people is stanley.monahan@example.org	WHERE T1.email_address = stanley.monahan@example.org
Get candidate id of people that has candidates	SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id
Keep the records that email address of people is stanley.monahan@example.org	WHERE T1.email_address = stanley.monahan@example.org
Get candidate id of candidate assessments	SELECT candidate_id FROM candidate_assessments
Order these records based on the assessment date and sort them in descending order, and return the top 1 record	ORDER BY assessment_date DESC LIMIT 1
Get candidate id of candidate assessments	SELECT candidate_id FROM candidate_assessments
Order these records based on the assessment date and sort them in descending order, and return the top 1 record	ORDER BY assessment_date DESC LIMIT 1
Get student details of students that has student course registrations	SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of students	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get student details of students that has student course registrations	SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of students	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and student id of students that has student course registrations	SELECT T1.student_id , COUNT ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of students	GROUP BY T1.student_id
Get the number and student id of students that has student course registrations	SELECT T1.student_id , COUNT ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of students	GROUP BY T1.student_id
Get the number and course name of students that has student course registrations and courses	SELECT T3.course_name , COUNT ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id
Group the records based on course id of student course registrations	GROUP BY T2.course_id
Get the number and course name of students that has student course registrations and courses	SELECT T3.course_name , COUNT ( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id
Group the records based on course id of student course registrations	GROUP BY T2.course_id
Get candidate id of candidate assessments	SELECT candidate_id FROM candidate_assessments
Keep the records that asessment outcome code is Pass	WHERE asessment_outcome_code = Pass
Get candidate id of candidate assessments	SELECT candidate_id FROM candidate_assessments
Keep the records that asessment outcome code is Pass	WHERE asessment_outcome_code = Pass
Get cell mobile number of candidates that has candidate assessments and people	SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id
Keep the records that asessment outcome code of candidate assessments is Fail	WHERE T2.asessment_outcome_code = Fail
Get cell mobile number of candidates that has candidate assessments and people	SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id
Keep the records that asessment outcome code of candidate assessments is Fail	WHERE T2.asessment_outcome_code = Fail
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Keep the records that course id is 301	WHERE course_id = 301
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Keep the records that course id is 301	WHERE course_id = 301
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Keep the records that course id is 301	WHERE course_id = 301 
Order these records based on the date of attendance and sort them in descending order, and return the top 1 record	ORDER BY date_of_attendance DESC LIMIT 1
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Keep the records that course id is 301	WHERE course_id = 301 
Order these records based on the date of attendance and sort them in descending order, and return the top 1 record	ORDER BY date_of_attendance DESC LIMIT 1
Get city of addresses that has people addresses	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2
Get city of addresses that has people addresses	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2
Get city of addresses that has people addresses and students	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3
Get city of addresses that has people addresses and students	SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3
Get course name of courses	SELECT course_name FROM courses
Order these records based on the course name	ORDER BY course_name 
Get course name of courses	SELECT course_name FROM courses
Order these records based on the course name	ORDER BY course_name 
Get first name of people	SELECT first_name FROM people
Order these records based on the first name	ORDER BY first_name 
Get first name of people	SELECT first_name FROM people
Order these records based on the first name	ORDER BY first_name 
Get student id of student course registrations	SELECT student_id FROM student_course_registrations
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get student id of student course registrations	SELECT student_id FROM student_course_registrations
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get course id of student course registrations	SELECT course_id FROM student_course_registrations
Keep the records that student id is 121	WHERE student_id = 121
Get course id of student course attendance	SELECT course_id FROM student_course_attendance
Keep the records that student id is 121	WHERE student_id = 121
Get course id of student course registrations	SELECT course_id FROM student_course_registrations
Keep the records that student id is 121	WHERE student_id = 121
Get course id of student course attendance	SELECT course_id FROM student_course_attendance
Keep the records that student id is 121	WHERE student_id = 121
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get all of student course registrations	SELECT * FROM student_course_registrations
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get student id of student course attendance	SELECT student_id FROM student_course_attendance
Get all of student course registrations	SELECT * FROM student_course_registrations
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get student id of courses that has student course registrations	SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of courses is statistics	WHERE T1.course_name = statistics 
Order these records based on the registration date of student course registrations	ORDER BY T2.registration_date 
Get student id of courses that has student course registrations	SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of courses is statistics	WHERE T1.course_name = statistics 
Order these records based on the registration date of student course registrations	ORDER BY T2.registration_date 
Get student id of courses that has student course attendance	SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of courses is statistics	WHERE T1.course_name = statistics 
Order these records based on the date of attendance of student course attendance	ORDER BY T2.date_of_attendance 
Get student id of courses that has student course attendance	SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of courses is statistics	WHERE T1.course_name = statistics 
Order these records based on the date of attendance of student course attendance	ORDER BY T2.date_of_attendance 
Get of weather	SELECT DATE FROM weather
Keep the records that max temperature f is greater than 85	WHERE max_temperature_f > 85
Get of weather	SELECT DATE FROM weather
Keep the records that max temperature f is greater than 85	WHERE max_temperature_f > 85
Get name of station	SELECT name FROM station
Keep the records that lat is less than 3 7.5	WHERE lat < 3 7.5
Get name of station	SELECT name FROM station
Keep the records that lat is less than 3 7.5	WHERE lat < 3 7.5
Get the maximum value of lat and city of station	SELECT city , MAX ( lat ) FROM station
Group the records based on city	GROUP BY city
Get the maximum value of lat and city of station	SELECT city , MAX ( lat ) FROM station
Group the records based on city	GROUP BY city
Get start station name and end station name of trip	SELECT start_station_name , end_station_name FROM trip
Order these records based on the id, and return the top 3 records	ORDER BY id LIMIT 3
Get start station name and end station name of trip	SELECT start_station_name , end_station_name FROM trip
Order these records based on the id, and return the top 3 records	ORDER BY id LIMIT 3
Get the average value of lat and the average value of LONG of station	SELECT AVG ( lat ) , AVG ( LONG ) FROM station
Keep the records that city is San Jose	WHERE city = San Jose
Get the average value of lat and the average value of LONG of station	SELECT AVG ( lat ) , AVG ( LONG ) FROM station
Keep the records that city is San Jose	WHERE city = San Jose
Get id of trip	SELECT id FROM trip
Order these records based on the duration, and return the top 1 record	ORDER BY duration LIMIT 1
Get id of trip	SELECT id FROM trip
Order these records based on the duration, and return the top 1 record	ORDER BY duration LIMIT 1
Get the SUM of duration and the maximum value of duration of trip	SELECT SUM ( duration ) , MAX ( duration ) FROM trip
Keep the records that bike id is 636	WHERE bike_id = 636
Get the SUM of duration and the maximum value of duration of trip	SELECT SUM ( duration ) , MAX ( duration ) FROM trip
Keep the records that bike id is 636	WHERE bike_id = 636
Get the average value of mean temperature f and zip code of weather	SELECT zip_code , AVG ( mean_temperature_f ) FROM weather
Keep the records that is in the form of 8/%	WHERE DATE LIKE 8/% 
Group the records based on zip code	GROUP BY zip_code
Get the average value of mean temperature f and zip code of weather	SELECT zip_code , AVG ( mean_temperature_f ) FROM weather
Keep the records that is in the form of 8/%	WHERE DATE LIKE 8/% 
Group the records based on zip code	GROUP BY zip_code
Get the number of distinct bike id of trip	SELECT COUNT ( DISTINCT bike_id ) FROM trip
Get the number of distinct bike id of trip	SELECT COUNT ( DISTINCT bike_id ) FROM trip
Get the number of distinct city of station	SELECT COUNT ( DISTINCT city ) FROM station
Get the number of distinct city of station	SELECT COUNT ( DISTINCT city ) FROM station
Get the number of station	SELECT COUNT ( * ) FROM station
Keep the records that city is Mountain View	WHERE city = Mountain View
Get the number of station	SELECT COUNT ( * ) FROM station
Keep the records that city is Mountain View	WHERE city = Mountain View
Get name of station that has status	SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Keep the records that bikes available of status is 7	WHERE T2.bikes_available = 7
Get name of station that has status	SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Keep the records that bikes available of status is 7	WHERE T2.bikes_available = 7
Get start station name and start station id of trip	SELECT start_station_name , start_station_id FROM trip
Keep the records that start date is in the form of 8/%	WHERE start_date LIKE 8/% 
Group the records based on start station name	GROUP BY start_station_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get start station name and start station id of trip	SELECT start_station_name , start_station_id FROM trip
Keep the records that start date is in the form of 8/%	WHERE start_date LIKE 8/% 
Group the records based on start station name	GROUP BY start_station_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get bike id of trip	SELECT bike_id FROM trip
Keep the records that zip code is 94002	WHERE zip_code = 94002 
Group the records based on bike id	GROUP BY bike_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get bike id of trip	SELECT bike_id FROM trip
Keep the records that zip code is 94002	WHERE zip_code = 94002 
Group the records based on bike id	GROUP BY bike_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of weather	SELECT COUNT ( * ) FROM weather
Keep the records that mean humidity is greater than 50 AND mean visibility miles is greater than 8	WHERE mean_humidity > 50 AND mean_visibility_miles > 8
Get the number of weather	SELECT COUNT ( * ) FROM weather
Keep the records that mean humidity is greater than 50 AND mean visibility miles is greater than 8	WHERE mean_humidity > 50 AND mean_visibility_miles > 8
Get lat and long and city of station that has trip	SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id
Order these records based on the duration of trip, and return the top 1 record	ORDER BY T2.duration LIMIT 1
Get lat and long and city of station that has trip	SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id
Order these records based on the duration of trip, and return the top 1 record	ORDER BY T2.duration LIMIT 1
Get id of station	SELECT id FROM station
Keep the records that city is San Francisco	WHERE city = San Francisco
Get station id of status	SELECT station_id FROM status
Group the records based on the average value of bikes available station id 10 that the average value of bikes available is greater than 10	GROUP BY station_id HAVING AVG ( bikes_available ) > 10 HAVING AVG ( bikes_available ) > 10
Get id of station	SELECT id FROM station
Keep the records that city is San Francisco	WHERE city = San Francisco
Get station id of status	SELECT station_id FROM status
Group the records based on the average value of bikes available station id 10 that the average value of bikes available is greater than 10	GROUP BY station_id HAVING AVG ( bikes_available ) > 10 HAVING AVG ( bikes_available ) > 10
Get name and id of station that has status	SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Group the records based on the average value of bikes available of status station id of status 14 that the average value of bikes available of status is greater than 14	GROUP BY T2.station_id HAVING AVG ( T2.bikes_available ) > 14 HAVING AVG ( T2.bikes_available ) > 14
Get name and id of station	SELECT name , id FROM station
Keep the records that installation date is in the form of 12/%	WHERE installation_date LIKE 12/%
Get name and id of station that has status	SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Group the records based on the average value of bikes available of status station id of status 14 that the average value of bikes available of status is greater than 14	GROUP BY T2.station_id HAVING AVG ( T2.bikes_available ) > 14 HAVING AVG ( T2.bikes_available ) > 14
Get name and id of station	SELECT name , id FROM station
Keep the records that installation date is in the form of 12/%	WHERE installation_date LIKE 12/%
Get cloud cover of weather	SELECT cloud_cover FROM weather
Keep the records that zip code is 94107	WHERE zip_code = 94107 
Group the records based on cloud cover	GROUP BY cloud_cover
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get cloud cover of weather	SELECT cloud_cover FROM weather
Keep the records that zip code is 94107	WHERE zip_code = 94107 
Group the records based on cloud cover	GROUP BY cloud_cover
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get zip code of weather	SELECT zip_code FROM weather
Group the records based on zip code	GROUP BY zip_code
Order these records based on the the average value of mean sea level pressure inches, and return the top 1 record	ORDER BY AVG ( mean_sea_level_pressure_inches ) LIMIT 1
Get zip code of weather	SELECT zip_code FROM weather
Group the records based on zip code	GROUP BY zip_code
Order these records based on the the average value of mean sea level pressure inches, and return the top 1 record	ORDER BY AVG ( mean_sea_level_pressure_inches ) LIMIT 1
Get id of station	SELECT id FROM station
Keep the records that city is Palo Alto	WHERE city = Palo Alto
Get the average value of bikes available of status	SELECT AVG ( bikes_available ) FROM status
Keep the records that station id is not in the first query result	WHERE station_id NOT IN ( the first query result ) 
Get id of station	SELECT id FROM station
Keep the records that city is Palo Alto	WHERE city = Palo Alto
Get the average value of bikes available of status	SELECT AVG ( bikes_available ) FROM status
Keep the records that station id is not in the first query result	WHERE station_id NOT IN ( the first query result ) 
Get station id of status	SELECT station_id FROM status
Group the records based on the maximum value of bikes available station id 10 that the maximum value of bikes available is greater than 10	GROUP BY station_id HAVING MAX ( bikes_available ) > 10 HAVING MAX ( bikes_available ) > 10
Get the average value of LONG of station	SELECT AVG ( LONG ) FROM station
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get station id of status	SELECT station_id FROM status
Group the records based on the maximum value of bikes available station id 10 that the maximum value of bikes available is greater than 10	GROUP BY station_id HAVING MAX ( bikes_available ) > 10 HAVING MAX ( bikes_available ) > 10
Get the average value of LONG of station	SELECT AVG ( LONG ) FROM station
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get zip code of weather	SELECT DATE , zip_code FROM weather
Keep the records that max temperature f is greater than or equal to 80	WHERE max_temperature_f >= 80
Get zip code of weather	SELECT DATE , zip_code FROM weather
Keep the records that max temperature f is greater than or equal to 80	WHERE max_temperature_f >= 80
Get id of trip that has weather	SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code
Group the records based on the average value of mean temperature f of weather zip code of weather 60 that the average value of mean temperature f of weather is greater than 60	GROUP BY T2.zip_code HAVING AVG ( T2.mean_temperature_f ) > 60 HAVING AVG ( T2.mean_temperature_f ) > 60
Get id of trip that has weather	SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code
Group the records based on the average value of mean temperature f of weather zip code of weather 60 that the average value of mean temperature f of weather is greater than 60	GROUP BY T2.zip_code HAVING AVG ( T2.mean_temperature_f ) > 60 HAVING AVG ( T2.mean_temperature_f ) > 60
Get the number and zip code of weather	SELECT zip_code , COUNT ( * ) FROM weather
Keep the records that max wind Speed mph is greater than or equal to 25	WHERE max_wind_Speed_mph >= 25 
Group the records based on zip code	GROUP BY zip_code
Get the number and zip code of weather	SELECT zip_code , COUNT ( * ) FROM weather
Keep the records that max wind Speed mph is greater than or equal to 25	WHERE max_wind_Speed_mph >= 25 
Group the records based on zip code	GROUP BY zip_code
Get the minimum value of MIN dew point f of weather	SELECT MIN ( min_dew_point_f ) FROM weather
Keep the records that zip code is 94107	WHERE zip_code = 94107
Get zip code of weather	SELECT DATE , zip_code FROM weather
Keep the records that min dew point f is less than the first query result	WHERE min_dew_point_f < ( the first query result ) 
Get the minimum value of MIN dew point f of weather	SELECT MIN ( min_dew_point_f ) FROM weather
Keep the records that zip code is 94107	WHERE zip_code = 94107
Get zip code of weather	SELECT DATE , zip_code FROM weather
Keep the records that min dew point f is less than the first query result	WHERE min_dew_point_f < ( the first query result ) 
Get id and installation date of trip that has station	SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2
Get id and installation date of trip that has station	SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2
Get id of trip that has station	SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id
Order these records based on the dock count of station and sort them in descending order, and return the top 1 record	ORDER BY T2.dock_count DESC LIMIT 1
Get id of trip that has station	SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id
Order these records based on the dock count of station and sort them in descending order, and return the top 1 record	ORDER BY T2.dock_count DESC LIMIT 1
Get the number of trip that has station	SELECT COUNT ( * ) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id
Keep the records that city of station is not San Francisco	WHERE T2.city != San Francisco
Get the number of trip that has station	SELECT COUNT ( * ) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id
Keep the records that city of station is not San Francisco	WHERE T2.city != San Francisco
Get of weather	SELECT DATE FROM weather
Keep the records that zip code is 94107 AND is not Fog AND is not Rain	WHERE zip_code = 94107 AND EVENTS != Fog AND EVENTS != Rain
Get of weather	SELECT DATE FROM weather
Keep the records that zip code is 94107 AND is not Fog AND is not Rain	WHERE zip_code = 94107 AND EVENTS != Fog AND EVENTS != Rain
Get id of station	SELECT id FROM station
Keep the records that lat is greater than 3 7.4	WHERE lat > 3 7.4
Get station id of status	SELECT station_id FROM status
Group the records based on the minimum value of bikes available station id 7 that the minimum value of bikes available is less than 7	GROUP BY station_id HAVING MIN ( bikes_available ) < 7 HAVING MIN ( bikes_available ) < 7
Get id of station	SELECT id FROM station
Keep the records that lat is greater than 3 7.4	WHERE lat > 3 7.4
Get station id of status	SELECT station_id FROM status
Group the records based on the minimum value of bikes available station id 7 that the minimum value of bikes available is less than 7	GROUP BY station_id HAVING MIN ( bikes_available ) < 7 HAVING MIN ( bikes_available ) < 7
Get name of station that has status	SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Group the records based on the average value of bikes available station id of status 10 that the average value of bikes available is greater than 10	GROUP BY T2.station_id HAVING AVG ( bikes_available ) > 10 HAVING AVG ( bikes_available ) > 10
Get name of station	SELECT name FROM station
Keep the records that city is San Jose	WHERE city = San Jose
Get name of station that has status	SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Group the records based on the average value of bikes available station id of status 10 that the average value of bikes available is greater than 10	GROUP BY T2.station_id HAVING AVG ( bikes_available ) > 10 HAVING AVG ( bikes_available ) > 10
Get name of station	SELECT name FROM station
Keep the records that city is San Jose	WHERE city = San Jose
Get name and lat and city of station	SELECT name , lat , city FROM station
Order these records based on the lat, and return the top 1 record	ORDER BY lat LIMIT 1
Get name and lat and city of station	SELECT name , lat , city FROM station
Order these records based on the lat, and return the top 1 record	ORDER BY lat LIMIT 1
Get mean temperature f and mean humidity of weather	SELECT DATE , mean_temperature_f , mean_humidity FROM weather
Order these records based on the max gust speed mph and sort them in descending order, and return the top 3 records	ORDER BY max_gust_speed_mph DESC LIMIT 3
Get mean temperature f and mean humidity of weather	SELECT DATE , mean_temperature_f , mean_humidity FROM weather
Order these records based on the max gust speed mph and sort them in descending order, and return the top 3 records	ORDER BY max_gust_speed_mph DESC LIMIT 3
Get the number and city of station	SELECT city , COUNT ( * ) FROM station
Group the records based on the number city 15 that the number is greater than or equal to 15	GROUP BY city HAVING COUNT ( * ) >= 15 HAVING COUNT ( * ) >= 15
Get the number and city of station	SELECT city , COUNT ( * ) FROM station
Group the records based on the number city 15 that the number is greater than or equal to 15	GROUP BY city HAVING COUNT ( * ) >= 15 HAVING COUNT ( * ) >= 15
Get start station id and start station name of trip	SELECT start_station_id , start_station_name FROM trip
Group the records based on the number start station name 200 that the number is greater than or equal to 200	GROUP BY start_station_name HAVING COUNT ( * ) >= 200 HAVING COUNT ( * ) >= 200
Get start station id and start station name of trip	SELECT start_station_id , start_station_name FROM trip
Group the records based on the number start station name 200 that the number is greater than or equal to 200	GROUP BY start_station_name HAVING COUNT ( * ) >= 200 HAVING COUNT ( * ) >= 200
Get zip code of weather	SELECT zip_code FROM weather
Group the records based on the average value of mean visibility miles zip code 10 that the average value of mean visibility miles is less than 10	GROUP BY zip_code HAVING AVG ( mean_visibility_miles ) < 10 HAVING AVG ( mean_visibility_miles ) < 10
Get zip code of weather	SELECT zip_code FROM weather
Group the records based on the average value of mean visibility miles zip code 10 that the average value of mean visibility miles is less than 10	GROUP BY zip_code HAVING AVG ( mean_visibility_miles ) < 10 HAVING AVG ( mean_visibility_miles ) < 10
Get city of station	SELECT city FROM station
Group the records based on city	GROUP BY city
Order these records based on the the maximum value of lat and sort them in descending ORDER	ORDER BY MAX ( lat ) DESC 
Get city of station	SELECT city FROM station
Group the records based on city	GROUP BY city
Order these records based on the the maximum value of lat and sort them in descending ORDER	ORDER BY MAX ( lat ) DESC 
Get cloud cover of weather	SELECT DATE , cloud_cover FROM weather
Order these records based on the cloud cover and sort them in descending order, and return the top 5 records	ORDER BY cloud_cover DESC LIMIT 5
Get cloud cover of weather	SELECT DATE , cloud_cover FROM weather
Order these records based on the cloud cover and sort them in descending order, and return the top 5 records	ORDER BY cloud_cover DESC LIMIT 5
Get id and duration of trip	SELECT id , duration FROM trip
Order these records based on the duration and sort them in descending order, and return the top 3 records	ORDER BY duration DESC LIMIT 3
Get id and duration of trip	SELECT id , duration FROM trip
Order these records based on the duration and sort them in descending order, and return the top 3 records	ORDER BY duration DESC LIMIT 3
Get the average value of duration and name and long of station that has trip	SELECT T1.name , T1.long , AVG ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id
Group the records based on start station id of trip	GROUP BY T2.start_station_id
Get the average value of duration and name and long of station that has trip	SELECT T1.name , T1.long , AVG ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id
Group the records based on start station id of trip	GROUP BY T2.start_station_id
Get the minimum value of duration and name and lat of station that has trip	SELECT T1.name , T1.lat , MIN ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id
Group the records based on end station id of trip	GROUP BY T2.end_station_id
Get the minimum value of duration and name and lat of station that has trip	SELECT T1.name , T1.lat , MIN ( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id
Group the records based on end station id of trip	GROUP BY T2.end_station_id
Get start station name of trip	SELECT DISTINCT start_station_name FROM trip
Keep the records that duration is less than 100	WHERE duration < 100
Get start station name of trip	SELECT DISTINCT start_station_name FROM trip
Keep the records that duration is less than 100	WHERE duration < 100
Get zip code of weather	SELECT DISTINCT zip_code FROM weather
Get zip code of weather	SELECT DISTINCT zip_code FROM weather
Keep the records that max dew point f is greater than or equal to 70	WHERE max_dew_point_f >= 70
Get zip code of weather	SELECT DISTINCT zip_code FROM weather
Get zip code of weather	SELECT DISTINCT zip_code FROM weather
Keep the records that max dew point f is greater than or equal to 70	WHERE max_dew_point_f >= 70
Get the average value of duration of trip	SELECT AVG ( duration ) FROM trip
Keep the records that zip code is 94103	WHERE zip_code = 94103
Get id of trip	SELECT id FROM trip
Keep the records that duration is greater than or equal to the first query result	WHERE duration >= ( the first query result ) 
Get the average value of duration of trip	SELECT AVG ( duration ) FROM trip
Keep the records that zip code is 94103	WHERE zip_code = 94103
Get id of trip	SELECT id FROM trip
Keep the records that duration is greater than or equal to the first query result	WHERE duration >= ( the first query result ) 
Get of weather	SELECT DATE FROM weather
Keep the records that mean sea level pressure inches is between 3 0.3X123X31	WHERE mean_sea_level_pressure_inches BETWEEN 3 0.3 AND 31
Get of weather	SELECT DATE FROM weather
Keep the records that mean sea level pressure inches is between 3 0.3X123X31	WHERE mean_sea_level_pressure_inches BETWEEN 3 0.3 AND 31
Get max temperature f and min temperature f of weather	SELECT DATE , max_temperature_f - min_temperature_f FROM weather
Order these records based on the max temperature f min temperature f, and return the top 1 record	ORDER BY max_temperature_f - min_temperature_f LIMIT 1
Get max temperature f and min temperature f of weather	SELECT DATE , max_temperature_f - min_temperature_f FROM weather
Order these records based on the max temperature f min temperature f, and return the top 1 record	ORDER BY max_temperature_f - min_temperature_f LIMIT 1
Get id and name of station that has status	SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Keep the records that bikes available of status is greater than 12	WHERE T2.bikes_available > 12
Get id and name of station that has status	SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id
Keep the records that bikes available of status is greater than 12	WHERE T2.bikes_available > 12
Get zip code of weather	SELECT zip_code FROM weather
Group the records based on the average value of mean humidity zip code 70 that the average value of mean humidity is less than 70	GROUP BY zip_code HAVING AVG ( mean_humidity ) < 70 HAVING AVG ( mean_humidity ) < 70
Get zip code of trip	SELECT zip_code FROM trip
Group the records based on the number zip code 100 that the number is greater than or equal to 100	GROUP BY zip_code HAVING COUNT ( * ) >= 100 HAVING COUNT ( * ) >= 100
Get zip code of weather	SELECT zip_code FROM weather
Group the records based on the average value of mean humidity zip code 70 that the average value of mean humidity is less than 70	GROUP BY zip_code HAVING AVG ( mean_humidity ) < 70 HAVING AVG ( mean_humidity ) < 70
Get zip code of trip	SELECT zip_code FROM trip
Group the records based on the number zip code 100 that the number is greater than or equal to 100	GROUP BY zip_code HAVING COUNT ( * ) >= 100 HAVING COUNT ( * ) >= 100
Get name of station	SELECT name FROM station
Keep the records that city is Palo Alto	WHERE city = Palo Alto
Get end station name of trip	SELECT end_station_name FROM trip
Group the records based on the number end station name 100 that the number is greater than 100	GROUP BY end_station_name HAVING COUNT ( * ) > 100 HAVING COUNT ( * ) > 100
Get name of station	SELECT name FROM station
Keep the records that city is Palo Alto	WHERE city = Palo Alto
Get end station name of trip	SELECT end_station_name FROM trip
Group the records based on the number end station name 100 that the number is greater than 100	GROUP BY end_station_name HAVING COUNT ( * ) > 100 HAVING COUNT ( * ) > 100
Get the number of station that has trip AND station	SELECT COUNT ( * ) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id
Keep the records that city of station is Mountain View AND city of station is Palo Alto	WHERE T1.city = Mountain View AND T3.city = Palo Alto
Get the number of station that has trip AND station	SELECT COUNT ( * ) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id
Keep the records that city of station is Mountain View AND city of station is Palo Alto	WHERE T1.city = Mountain View AND T3.city = Palo Alto
Get the average value of lat and the average value of long of station that has trip	SELECT AVG ( T1.lat ) , AVG ( T1.long ) FROM station AS T1 JOIN trip AS T2
Get the average value of lat and the average value of long of station that has trip	SELECT AVG ( T1.lat ) , AVG ( T1.long ) FROM station AS T1 JOIN trip AS T2
Get the number of book	SELECT COUNT ( * ) FROM book
Get Writer of book	SELECT Writer FROM book
Order these records based on the Writer and sort them in ascending ORDER	ORDER BY Writer ASC 
Get Title of book	SELECT Title FROM book
Order these records based on the Issues and sort them in ascending ORDER	ORDER BY Issues ASC 
Get Title of book	SELECT Title FROM book
Keep the records that Writer is not Elaine Lee	WHERE Writer != Elaine Lee
Get Title and Issues of book	SELECT Title , Issues FROM book
Get Publication Date of publication	SELECT Publication_Date FROM publication
Order these records based on the Price and sort them in descending ORDER	ORDER BY Price DESC 
Get Publisher of publication	SELECT DISTINCT Publisher FROM publication
Keep the records that Price is greater than 5000000	WHERE Price > 5000000
Get Publisher of publication	SELECT Publisher FROM publication
Order these records based on the Price and sort them in descending order, and return the top 1 record	ORDER BY Price DESC LIMIT 1
Get Publication Date of publication	SELECT Publication_Date FROM publication
Order these records based on the Price and sort them in ascending order, and return the top 3 records	ORDER BY Price ASC LIMIT 3
Get Title and Publication Date of book that has publication	SELECT T1.Title , T2.Publication_Date FROM book AS T1 JOIN publication AS T2
Get Writer of book that has publication	SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID
Keep the records that Price of publication is greater than 4000000	WHERE T2.Price > 4000000
Get Title of book that has publication	SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID
Order these records based on the Price of publication and sort them in descending ORDER	ORDER BY T2.Price DESC 
Get Publisher of publication	SELECT Publisher FROM publication
Group the records based on the number Publisher 1 that the number is greater than 1	GROUP BY Publisher HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number and Publisher of publication	SELECT Publisher , COUNT ( * ) FROM publication
Group the records based on Publisher	GROUP BY Publisher
Get Publication Date of publication	SELECT Publication_Date FROM publication
Group the records based on Publication Date	GROUP BY Publication_Date
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Writer of book	SELECT Writer FROM book
Group the records based on the number Writer 1 that the number is greater than 1	GROUP BY Writer HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Book ID of publication	SELECT Book_ID FROM publication
Get Title of book	SELECT Title FROM book
Keep the records that Book ID is not in the first query result	WHERE Book_ID NOT IN ( the first query result ) 
Get Publisher of publication	SELECT Publisher FROM publication
Keep the records that Price is greater than 10000000	WHERE Price > 10000000
Get Publisher of publication	SELECT Publisher FROM publication
Keep the records that Price is less than 5000000	WHERE Price < 5000000
Get the number of distinct Publication Date of publication	SELECT COUNT ( DISTINCT Publication_Date ) FROM publication
Get the number of distinct Publication Date of publication	SELECT COUNT ( DISTINCT Publication_Date ) FROM publication
Get Price of publication	SELECT Price FROM publication
Keep the records that Publisher is Person OR Publisher is Wiley	WHERE Publisher = Person OR Publisher = Wiley
Get the number of actor	SELECT COUNT ( * ) FROM actor
Get the number of actor	SELECT COUNT ( * ) FROM actor
Get Name of actor	SELECT Name FROM actor
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of actor	SELECT Name FROM actor
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Duration of actor	SELECT CHARACTER , Duration FROM actor
Get Duration of actor	SELECT CHARACTER , Duration FROM actor
Get Name of actor	SELECT Name FROM actor
Keep the records that Age is not 20	WHERE Age != 20
Get Name of actor	SELECT Name FROM actor
Keep the records that Age is not 20	WHERE Age != 20
Get of actor	SELECT CHARACTER FROM actor
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get of actor	SELECT CHARACTER FROM actor
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get Duration of actor	SELECT Duration FROM actor
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Duration of actor	SELECT Duration FROM actor
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Name of musical	SELECT Name FROM musical
Keep the records that Nominee is Bob Fosse	WHERE Nominee = Bob Fosse
Get Name of musical	SELECT Name FROM musical
Keep the records that Nominee is Bob Fosse	WHERE Nominee = Bob Fosse
Get Nominee of musical	SELECT DISTINCT Nominee FROM musical
Keep the records that Award is not Tony Award	WHERE Award != Tony Award
Get Nominee of musical	SELECT DISTINCT Nominee FROM musical
Keep the records that Award is not Tony Award	WHERE Award != Tony Award
Get Name and Name of actor that has musical	SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2
Get Name and Name of actor that has musical	SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2
Get Name of actor that has musical	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Keep the records that Name of musical is The Phantom of the Opera	WHERE T2.Name = The Phantom of the Opera
Get Name of actor that has musical	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Keep the records that Name of musical is The Phantom of the Opera	WHERE T2.Name = The Phantom of the Opera
Get Name of actor that has musical	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Order these records based on the Year of musical and sort them in descending ORDER	ORDER BY T2.Year DESC 
Get Name of actor that has musical	SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Order these records based on the Year of musical and sort them in descending ORDER	ORDER BY T2.Year DESC 
Get the number and Name of actor that has musical	SELECT T2.Name , COUNT ( * ) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Group the records based on Musical ID of actor	GROUP BY T1.Musical_ID
Get the number and Name of actor that has musical	SELECT T2.Name , COUNT ( * ) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Group the records based on Musical ID of actor	GROUP BY T1.Musical_ID
Get Name of actor that has musical	SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Group the records based on the number Musical ID of actor 3 that the number is greater than or equal to 3	GROUP BY T1.Musical_ID HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get Name of actor that has musical	SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID
Group the records based on the number Musical ID of actor 3 that the number is greater than or equal to 3	GROUP BY T1.Musical_ID HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get the number and Nominee of musical	SELECT Nominee , COUNT ( * ) FROM musical
Group the records based on Nominee	GROUP BY Nominee
Get the number and Nominee of musical	SELECT Nominee , COUNT ( * ) FROM musical
Group the records based on Nominee	GROUP BY Nominee
Get Nominee of musical	SELECT Nominee FROM musical
Group the records based on Nominee	GROUP BY Nominee
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nominee of musical	SELECT Nominee FROM musical
Group the records based on Nominee	GROUP BY Nominee
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of musical	SELECT RESULT FROM musical
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of musical	SELECT RESULT FROM musical
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nominee of musical	SELECT Nominee FROM musical
Group the records based on the number Nominee 2 that the number is greater than 2	GROUP BY Nominee HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Nominee of musical	SELECT Nominee FROM musical
Group the records based on the number Nominee 2 that the number is greater than 2	GROUP BY Nominee HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Musical ID of actor	SELECT Musical_ID FROM actor
Get Name of musical	SELECT Name FROM musical
Keep the records that Musical ID is not in the first query result	WHERE Musical_ID NOT IN ( the first query result ) 
Get Musical ID of actor	SELECT Musical_ID FROM actor
Get Name of musical	SELECT Name FROM musical
Keep the records that Musical ID is not in the first query result	WHERE Musical_ID NOT IN ( the first query result ) 
Get Nominee of musical	SELECT Nominee FROM musical
Keep the records that Award is Tony Award	WHERE Award = Tony Award
Get Nominee of musical	SELECT Nominee FROM musical
Keep the records that Award is Drama Desk Award	WHERE Award = Drama Desk Award
Get Nominee of musical	SELECT Nominee FROM musical
Keep the records that Award is Tony Award	WHERE Award = Tony Award
Get Nominee of musical	SELECT Nominee FROM musical
Keep the records that Award is Drama Desk Award	WHERE Award = Drama Desk Award
Get Nominee of musical	SELECT Nominee FROM musical
Keep the records that Award is Tony Award OR Award is Cleavant Derricks	WHERE Award = Tony Award OR Award = Cleavant Derricks
Get Nominee of musical	SELECT Nominee FROM musical
Keep the records that Award is Tony Award OR Award is Cleavant Derricks	WHERE Award = Tony Award OR Award = Cleavant Derricks
Get email of user profiles	SELECT email FROM user_profiles
Keep the records that name is Mary	WHERE name = Mary
Get partitionid of user profiles	SELECT partitionid FROM user_profiles
Keep the records that name is Iron Man	WHERE name = Iron Man
Get the number of user profiles	SELECT COUNT ( * ) FROM user_profiles
Get the number of follows	SELECT COUNT ( * ) FROM follows
Get the number of follows	SELECT COUNT ( * ) FROM follows
Group the records based on f1	GROUP BY f1
Get the number of tweets	SELECT COUNT ( * ) FROM tweets
Get the number of distinct UID of tweets	SELECT COUNT ( DISTINCT UID ) FROM tweets
Get name and email of user profiles	SELECT name , email FROM user_profiles
Keep the records that name is in the form of %Swift%	WHERE name LIKE %Swift%
Get name of user profiles	SELECT name FROM user_profiles
Keep the records that email is in the form of %superstar% OR email is in the form of %edu%	WHERE email LIKE %superstar% OR email LIKE %edu%
Get of tweets	SELECT TEXT FROM tweets
Keep the records that is in the form of %intern%	WHERE TEXT LIKE %intern%
Get name and email of user profiles	SELECT name , email FROM user_profiles
Keep the records that followers is greater than 1000	WHERE followers > 1000
Get the number of user profiles that has follows	SELECT COUNT ( * ) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1
Keep the records that name of user profiles is Tyler Swift	WHERE T1.name = Tyler Swift
Get name of user profiles that has follows	SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1
Group the records based on the number f1 of follows the first query result that the number is greater than the first query result	GROUP BY T2.f1 HAVING COUNT ( * ) > ( the first query result )  HAVING COUNT ( * ) > ( the first query result ) 
Get name and email of user profiles that has follows	SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1
Group the records based on the number f1 of follows 1 that the number is greater than 1	GROUP BY T2.f1 HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of user profiles that has tweets	SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid
Group the records based on the number uid of tweets 1 that the number is greater than 1	GROUP BY T2.uid HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get f1 of user profiles that has follows	SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2
Keep the records that name of user profiles is Mary	WHERE T1.name = Mary
Get f1 of user profiles that has follows	SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2
Keep the records that name of user profiles is Susan	WHERE T1.name = Susan
Get f1 of user profiles that has follows	SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2
Keep the records that name of user profiles is Mary OR name of user profiles is Susan	WHERE T1.name = Mary OR T1.name = Susan
Get name of user profiles	SELECT name FROM user_profiles
Order these records based on the followers and sort them in descending order, and return the top 1 record	ORDER BY followers DESC LIMIT 1
Get name and email of user profiles	SELECT name , email FROM user_profiles
Order these records based on the followers, and return the top 1 record	ORDER BY followers LIMIT 1
Get name and followers of user profiles	SELECT name , followers FROM user_profiles
Order these records based on the followers and sort them in descending ORDER	ORDER BY followers DESC 
Get name of user profiles	SELECT name FROM user_profiles
Order these records based on the followers and sort them in descending order, and return the top 5 records	ORDER BY followers DESC LIMIT 5
Get of tweets	SELECT TEXT FROM tweets
Order these records based on the createdate	ORDER BY createdate 
Get the number and name of user profiles that has tweets	SELECT T1.name , COUNT ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid
Group the records based on uid of tweets	GROUP BY T2.uid
Get name and partitionid of user profiles that has tweets	SELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid
Group the records based on the number uid of tweets 2 that the number is less than 2	GROUP BY T2.uid HAVING COUNT ( * ) < 2 HAVING COUNT ( * ) < 2
Get the number and name of user profiles that has tweets	SELECT T1.name , COUNT ( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid
Group the records based on the number uid of tweets 1 that the number is greater than 1	GROUP BY T2.uid HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get of tweets	SELECT UID FROM tweets
Get the average value of followers of user profiles	SELECT AVG ( followers ) FROM user_profiles
Keep the records that is not in the first query result	WHERE UID NOT IN ( the first query result ) 
Get of tweets	SELECT UID FROM tweets
Get the average value of followers of user profiles	SELECT AVG ( followers ) FROM user_profiles
Keep the records that is in the first query result	WHERE UID IN ( the first query result ) 
Get the maximum value of followers and the SUM of followers of user profiles	SELECT MAX ( followers ) , SUM ( followers ) FROM user_profiles
Get catalog entry name of catalog contents	SELECT DISTINCT ( catalog_entry_name ) FROM catalog_contents
Get catalog entry name of catalog contents	SELECT DISTINCT ( catalog_entry_name ) FROM catalog_contents
Get attribute data type of Attribute Definitions	SELECT attribute_data_type FROM Attribute_Definitions
Group the records based on the number attribute data type 3 that the number is greater than 3	GROUP BY attribute_data_type HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get attribute data type of Attribute Definitions	SELECT attribute_data_type FROM Attribute_Definitions
Group the records based on the number attribute data type 3 that the number is greater than 3	GROUP BY attribute_data_type HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get attribute data type of Attribute Definitions	SELECT attribute_data_type FROM Attribute_Definitions
Keep the records that attribute name is Green	WHERE attribute_name = Green
Get attribute data type of Attribute Definitions	SELECT attribute_data_type FROM Attribute_Definitions
Keep the records that attribute name is Green	WHERE attribute_name = Green
Get catalog level name AND catalog level number of Catalog Structure	SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure
Keep the records that catalog level number is between 5 AND 10	WHERE catalog_level_number BETWEEN 5 AND 10
Get catalog level name AND catalog level number of Catalog Structure	SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure
Keep the records that catalog level number is between 5 AND 10	WHERE catalog_level_number BETWEEN 5 AND 10
Get catalog publisher of catalogs	SELECT DISTINCT ( catalog_publisher ) FROM catalogs
Keep the records that catalog publisher is in the form of %Murray%	WHERE catalog_publisher LIKE %Murray%
Get catalog publisher of catalogs	SELECT DISTINCT ( catalog_publisher ) FROM catalogs
Keep the records that catalog publisher is in the form of %Murray%	WHERE catalog_publisher LIKE %Murray%
Get catalog publisher of catalogs	SELECT catalog_publisher FROM catalogs
Group the records based on catalog publisher	GROUP BY catalog_publisher
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get catalog publisher of catalogs	SELECT catalog_publisher FROM catalogs
Group the records based on catalog publisher	GROUP BY catalog_publisher
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get catalog name and date of publication of catalogs that has catalog structure	SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id
Keep the records that catalog level number is greater than 5	WHERE catalog_level_number > 5
Get catalog name and date of publication of catalogs that has catalog structure	SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id
Keep the records that catalog level number is greater than 5	WHERE catalog_level_number > 5
Get attribute value of Catalog Contents Additional Attributes	SELECT attribute_value FROM Catalog_Contents_Additional_Attributes
Group the records based on attribute value	GROUP BY attribute_value
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get catalog entry name of Catalog Contents that has Catalog Contents Additional Attributes	SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id
Keep the records that attribute value of Catalog Contents Additional Attributes is the first query result	WHERE t2.attribute_value = ( the first query result ) 
Get attribute value of Catalog Contents Additional Attributes	SELECT attribute_value FROM Catalog_Contents_Additional_Attributes
Group the records based on attribute value	GROUP BY attribute_value
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get catalog entry name of Catalog Contents that has Catalog Contents Additional Attributes	SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id
Keep the records that attribute value of Catalog Contents Additional Attributes is the first query result	WHERE t2.attribute_value = ( the first query result ) 
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Order these records based on the price in dollars and sort them in descending order, and return the top 1 record	ORDER BY price_in_dollars DESC LIMIT 1
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Order these records based on the price in dollars and sort them in descending order, and return the top 1 record	ORDER BY price_in_dollars DESC LIMIT 1
Get catalog level name of catalog contents that has catalog structure	SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number
Order these records based on the price in dollars of catalog contents, and return the top 1 record	ORDER BY t1.price_in_dollars LIMIT 1
Get catalog level name of catalog contents that has catalog structure	SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number
Order these records based on the price in dollars of catalog contents, and return the top 1 record	ORDER BY t1.price_in_dollars LIMIT 1
Get the average value of price in euros and the minimum value of price in euros of catalog contents	SELECT AVG ( price_in_euros ) , MIN ( price_in_euros ) FROM catalog_contents
Get the average value of price in euros and the minimum value of price in euros of catalog contents	SELECT AVG ( price_in_euros ) , MIN ( price_in_euros ) FROM catalog_contents
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Order these records based on the height and sort them in descending order, and return the top 1 record	ORDER BY height DESC LIMIT 1
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Order these records based on the height and sort them in descending order, and return the top 1 record	ORDER BY height DESC LIMIT 1
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Order these records based on the capacity and sort them in ascending order, and return the top 1 record	ORDER BY capacity ASC LIMIT 1
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Order these records based on the capacity and sort them in ascending order, and return the top 1 record	ORDER BY capacity ASC LIMIT 1
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Keep the records that product stock number is in the form of 2%	WHERE product_stock_number LIKE 2%
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Keep the records that product stock number is in the form of 2%	WHERE product_stock_number LIKE 2%
Get catalog entry name of Catalog Contents that has Catalog Contents Additional Attributes	SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id
Keep the records that catalog level number of Catalog Contents Additional Attributes is 8	WHERE t2.catalog_level_number = 8
Get catalog entry name of Catalog Contents that has Catalog Contents Additional Attributes	SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id
Keep the records that catalog level number of Catalog Contents Additional Attributes is 8	WHERE t2.catalog_level_number = 8
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Keep the records that is less than 3 OR width is greater than 5	WHERE LENGTH < 3 OR width > 5
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Keep the records that is less than 3 OR width is greater than 5	WHERE LENGTH < 3 OR width > 5
Get attribute name and attribute id of Attribute Definitions that has Catalog Contents Additional Attributes	SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id
Keep the records that attribute value of Catalog Contents Additional Attributes is 0	WHERE t2.attribute_value = 0
Get attribute name and attribute id of Attribute Definitions that has Catalog Contents Additional Attributes	SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id
Keep the records that attribute value of Catalog Contents Additional Attributes is 0	WHERE t2.attribute_value = 0
Get catalog entry name and capacity of Catalog Contents	SELECT catalog_entry_name , capacity FROM Catalog_Contents
Keep the records that price in dollars is greater than 700	WHERE price_in_dollars > 700
Get catalog entry name and capacity of Catalog Contents	SELECT catalog_entry_name , capacity FROM Catalog_Contents
Keep the records that price in dollars is greater than 700	WHERE price_in_dollars > 700
Get date of latest revision of Catalogs	SELECT date_of_latest_revision FROM Catalogs
Group the records based on the number date of latest revision 1 that the number is greater than 1	GROUP BY date_of_latest_revision HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get date of latest revision of Catalogs	SELECT date_of_latest_revision FROM Catalogs
Group the records based on the number date of latest revision 1 that the number is greater than 1	GROUP BY date_of_latest_revision HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number of catalog contents	SELECT COUNT ( * ) FROM catalog_contents
Get the number of catalog contents	SELECT COUNT ( * ) FROM catalog_contents
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Keep the records that next entry id is greater than 8	WHERE next_entry_id > 8
Get catalog entry name of catalog contents	SELECT catalog_entry_name FROM catalog_contents
Keep the records that next entry id is greater than 8	WHERE next_entry_id > 8
Get the number of Aircraft	SELECT COUNT ( * ) FROM Aircraft
Get the number of Aircraft	SELECT COUNT ( * ) FROM Aircraft
Get name and distance of Aircraft	SELECT name , distance FROM Aircraft
Get name and distance of Aircraft	SELECT name , distance FROM Aircraft
Get aid of Aircraft	SELECT aid FROM Aircraft
Keep the records that distance is greater than 1000	WHERE distance > 1000
Get aid of Aircraft	SELECT aid FROM Aircraft
Keep the records that distance is greater than 1000	WHERE distance > 1000
Get the number of Aircraft	SELECT COUNT ( * ) FROM Aircraft
Keep the records that distance is between 100 X5000	WHERE distance BETWEEN 1000 AND 5000
Get the number of Aircraft	SELECT COUNT ( * ) FROM Aircraft
Keep the records that distance is between 100 X5000	WHERE distance BETWEEN 1000 AND 5000
Get name and distance of Aircraft	SELECT name , distance FROM Aircraft
Keep the records that aid is 12	WHERE aid = 12
Get name and distance of Aircraft	SELECT name , distance FROM Aircraft
Keep the records that aid is 12	WHERE aid = 12
Get the minimum value of distance and the average value of distance and the maximum value of distance of Aircraft	SELECT MIN ( distance ) , AVG ( distance ) , MAX ( distance ) FROM Aircraft
Get the minimum value of distance and the average value of distance and the maximum value of distance of Aircraft	SELECT MIN ( distance ) , AVG ( distance ) , MAX ( distance ) FROM Aircraft
Get aid and name of Aircraft	SELECT aid , name FROM Aircraft
Order these records based on the distance and sort them in descending order, and return the top 1 record	ORDER BY distance DESC LIMIT 1
Get aid and name of Aircraft	SELECT aid , name FROM Aircraft
Order these records based on the distance and sort them in descending order, and return the top 1 record	ORDER BY distance DESC LIMIT 1
Get name of Aircraft	SELECT name FROM Aircraft
Order these records based on the distance, and return the top 3 records	ORDER BY distance LIMIT 3
Get name of Aircraft	SELECT name FROM Aircraft
Order these records based on the distance, and return the top 3 records	ORDER BY distance LIMIT 3
Get the average value of distance of Aircraft	SELECT AVG ( distance ) FROM Aircraft
Get name of Aircraft	SELECT name FROM Aircraft
Keep the records that distance is greater than the first query result	WHERE distance > ( the first query result ) 
Get the average value of distance of Aircraft	SELECT AVG ( distance ) FROM Aircraft
Get name of Aircraft	SELECT name FROM Aircraft
Keep the records that distance is greater than the first query result	WHERE distance > ( the first query result ) 
Get the number of Employee	SELECT COUNT ( * ) FROM Employee
Get the number of Employee	SELECT COUNT ( * ) FROM Employee
Get name and salary of Employee	SELECT name , salary FROM Employee
Order these records based on the salary	ORDER BY salary 
Get name and salary of Employee	SELECT name , salary FROM Employee
Order these records based on the salary	ORDER BY salary 
Get eid of Employee	SELECT eid FROM Employee
Keep the records that salary is greater than 100000	WHERE salary > 100000
Get eid of Employee	SELECT eid FROM Employee
Keep the records that salary is greater than 100000	WHERE salary > 100000
Get the number of Employee	SELECT COUNT ( * ) FROM Employee
Keep the records that salary is between 10000 X200000	WHERE salary BETWEEN 100000 AND 200000
Get the number of Employee	SELECT COUNT ( * ) FROM Employee
Keep the records that salary is between 10000 X200000	WHERE salary BETWEEN 100000 AND 200000
Get name and salary of Employee	SELECT name , salary FROM Employee
Keep the records that eid is 242518965	WHERE eid = 242518965
Get name and salary of Employee	SELECT name , salary FROM Employee
Keep the records that eid is 242518965	WHERE eid = 242518965
Get the average value of salary and the maximum value of salary of Employee	SELECT AVG ( salary ) , MAX ( salary ) FROM Employee
Get the average value of salary and the maximum value of salary of Employee	SELECT AVG ( salary ) , MAX ( salary ) FROM Employee
Get eid and name of Employee	SELECT eid , name FROM Employee
Order these records based on the salary and sort them in descending order, and return the top 1 record	ORDER BY salary DESC LIMIT 1
Get eid and name of Employee	SELECT eid , name FROM Employee
Order these records based on the salary and sort them in descending order, and return the top 1 record	ORDER BY salary DESC LIMIT 1
Get name of Employee	SELECT name FROM Employee
Order these records based on the salary and sort them in ascending order, and return the top 3 records	ORDER BY salary ASC LIMIT 3
Get name of Employee	SELECT name FROM Employee
Order these records based on the salary and sort them in ascending order, and return the top 3 records	ORDER BY salary ASC LIMIT 3
Get the average value of salary of Employee	SELECT AVG ( salary ) FROM Employee
Get name of Employee	SELECT name FROM Employee
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the average value of salary of Employee	SELECT AVG ( salary ) FROM Employee
Get name of Employee	SELECT name FROM Employee
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get eid and salary of Employee	SELECT eid , salary FROM Employee
Keep the records that name is Mark Young	WHERE name = Mark Young
Get eid and salary of Employee	SELECT eid , salary FROM Employee
Keep the records that name is Mark Young	WHERE name = Mark Young
Get the number of Flight	SELECT COUNT ( * ) FROM Flight
Get the number of Flight	SELECT COUNT ( * ) FROM Flight
Get flno and origin and destination of Flight	SELECT flno , origin , destination FROM Flight
Order these records based on the origin	ORDER BY origin 
Get flno and origin and destination of Flight	SELECT flno , origin , destination FROM Flight
Order these records based on the origin	ORDER BY origin 
Get flno of Flight	SELECT flno FROM Flight
Keep the records that origin is Los Angeles	WHERE origin = Los Angeles
Get flno of Flight	SELECT flno FROM Flight
Keep the records that origin is Los Angeles	WHERE origin = Los Angeles
Get origin of Flight	SELECT origin FROM Flight
Keep the records that destination is Honolulu	WHERE destination = Honolulu
Get origin of Flight	SELECT origin FROM Flight
Keep the records that destination is Honolulu	WHERE destination = Honolulu
Get departure date AND arrival date of Flight	SELECT departure_date , arrival_date FROM Flight
Keep the records that origin is Los Angeles AND destination is Honolulu	WHERE origin = Los Angeles AND destination = Honolulu
Get departure date AND arrival date of Flight	SELECT departure_date , arrival_date FROM Flight
Keep the records that origin is Los Angeles AND destination is Honolulu	WHERE origin = Los Angeles AND destination = Honolulu
Get flno of Flight	SELECT flno FROM Flight
Keep the records that distance is greater than 2000	WHERE distance > 2000
Get flno of Flight	SELECT flno FROM Flight
Keep the records that distance is greater than 2000	WHERE distance > 2000
Get the average value of price of Flight	SELECT AVG ( price ) FROM Flight
Keep the records that origin is Los Angeles AND destination is Honolulu	WHERE origin = Los Angeles AND destination = Honolulu
Get the average value of price of Flight	SELECT AVG ( price ) FROM Flight
Keep the records that origin is Los Angeles AND destination is Honolulu	WHERE origin = Los Angeles AND destination = Honolulu
Get origin and destination of Flight	SELECT origin , destination FROM Flight
Keep the records that price is greater than 300	WHERE price > 300
Get origin and destination of Flight	SELECT origin , destination FROM Flight
Keep the records that price is greater than 300	WHERE price > 300
Get flno and distance of Flight	SELECT flno , distance FROM Flight
Order these records based on the price and sort them in descending order, and return the top 1 record	ORDER BY price DESC LIMIT 1
Get flno and distance of Flight	SELECT flno , distance FROM Flight
Order these records based on the price and sort them in descending order, and return the top 1 record	ORDER BY price DESC LIMIT 1
Get flno of Flight	SELECT flno FROM Flight
Order these records based on the distance and sort them in ascending order, and return the top 3 records	ORDER BY distance ASC LIMIT 3
Get flno of Flight	SELECT flno FROM Flight
Order these records based on the distance and sort them in ascending order, and return the top 3 records	ORDER BY distance ASC LIMIT 3
Get the average value of distance and the average value of price of Flight	SELECT AVG ( distance ) , AVG ( price ) FROM Flight
Keep the records that origin is Los Angeles	WHERE origin = Los Angeles
Get the average value of distance and the average value of price of Flight	SELECT AVG ( distance ) , AVG ( price ) FROM Flight
Keep the records that origin is Los Angeles	WHERE origin = Los Angeles
Get the number and origin of Flight	SELECT origin , COUNT ( * ) FROM Flight
Group the records based on origin	GROUP BY origin
Get the number and origin of Flight	SELECT origin , COUNT ( * ) FROM Flight
Group the records based on origin	GROUP BY origin
Get the number and destination of Flight	SELECT destination , COUNT ( * ) FROM Flight
Group the records based on destination	GROUP BY destination
Get the number and destination of Flight	SELECT destination , COUNT ( * ) FROM Flight
Group the records based on destination	GROUP BY destination
Get origin of Flight	SELECT origin FROM Flight
Group the records based on origin	GROUP BY origin
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get origin of Flight	SELECT origin FROM Flight
Group the records based on origin	GROUP BY origin
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get destination of Flight	SELECT destination FROM Flight
Group the records based on destination	GROUP BY destination
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get destination of Flight	SELECT destination FROM Flight
Group the records based on destination	GROUP BY destination
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get name of Flight that has Aircraft	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Keep the records that flno of Flight is 99	WHERE T1.flno = 99
Get name of Flight that has Aircraft	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Keep the records that flno of Flight is 99	WHERE T1.flno = 99
Get flno of Flight that has Aircraft	SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Keep the records that name of Aircraft is Airbus A340-300	WHERE T2.name = Airbus A340-300
Get flno of Flight that has Aircraft	SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Keep the records that name of Aircraft is Airbus A340-300	WHERE T2.name = Airbus A340-300
Get the number and name of Flight that has Aircraft	SELECT T2.name , COUNT ( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Group the records based on aid of Flight	GROUP BY T1.aid
Get the number and name of Flight that has Aircraft	SELECT T2.name , COUNT ( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Group the records based on aid of Flight	GROUP BY T1.aid
Get name of Flight that has Aircraft	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Group the records based on the number aid of Flight 2 that the number is greater than or equal to 2	GROUP BY T1.aid HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of Flight that has Aircraft	SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid
Group the records based on the number aid of Flight 2 that the number is greater than or equal to 2	GROUP BY T1.aid HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number of distinct eid of Certificate	SELECT COUNT ( DISTINCT eid ) FROM Certificate
Get the number of distinct eid of Certificate	SELECT COUNT ( DISTINCT eid ) FROM Certificate
Get eid of Employee	SELECT eid FROM Employee
Get eid of Certificate	SELECT eid FROM Certificate
Get eid of Employee	SELECT eid FROM Employee
Get eid of Certificate	SELECT eid FROM Certificate
Get name of Employee that has Certificate and Aircraft	SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Employee is John Williams	WHERE T1.name = John Williams
Get name of Employee that has Certificate and Aircraft	SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Employee is John Williams	WHERE T1.name = John Williams
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Boeing 737-800	WHERE T3.name = Boeing 737-800
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Boeing 737-800	WHERE T3.name = Boeing 737-800
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Boeing 737-800	WHERE T3.name = Boeing 737-800
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Airbus A340-300	WHERE T3.name = Airbus A340-300
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Boeing 737-800	WHERE T3.name = Boeing 737-800
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Airbus A340-300	WHERE T3.name = Airbus A340-300
Get name of Employee	SELECT name FROM Employee
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Boeing 737-800	WHERE T3.name = Boeing 737-800
Get name of Employee	SELECT name FROM Employee
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that name of Aircraft is Boeing 737-800	WHERE T3.name = Boeing 737-800
Get name of Certificate that has Aircraft	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid
Group the records based on aid of Certificate	GROUP BY T1.aid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Certificate that has Aircraft	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid
Group the records based on aid of Certificate	GROUP BY T1.aid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Certificate that has Aircraft	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid
Keep the records that distance of Aircraft is greater than 5000	WHERE T2.distance > 5000 
Group the records based on aid of Certificate	GROUP BY T1.aid
Order these records based on the the number 5	ORDER BY COUNT ( * ) >= 5 
Get name of Certificate that has Aircraft	SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid
Keep the records that distance of Aircraft is greater than 5000	WHERE T2.distance > 5000 
Group the records based on aid of Certificate	GROUP BY T1.aid
Order these records based on the the number 5	ORDER BY COUNT ( * ) >= 5 
Get name and salary of Employee that has Certificate	SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid
Group the records based on eid of Employee	GROUP BY T1.eid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and salary of Employee that has Certificate	SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid
Group the records based on eid of Employee	GROUP BY T1.eid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that distance of Aircraft is greater than 5000	WHERE T3.distance > 5000 
Group the records based on eid of Employee	GROUP BY T1.eid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Employee that has Certificate and Aircraft	SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid
Keep the records that distance of Aircraft is greater than 5000	WHERE T3.distance > 5000 
Group the records based on eid of Employee	GROUP BY T1.eid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of distinct allergy of Allergy type	SELECT COUNT ( DISTINCT allergy ) FROM Allergy_type
Get the number of distinct allergy of Allergy type	SELECT COUNT ( DISTINCT allergy ) FROM Allergy_type
Get the number of distinct allergytype of Allergy type	SELECT COUNT ( DISTINCT allergytype ) FROM Allergy_type
Get the number of distinct allergytype of Allergy type	SELECT COUNT ( DISTINCT allergytype ) FROM Allergy_type
Get allergytype of Allergy type	SELECT DISTINCT allergytype FROM Allergy_type
Get allergytype of Allergy type	SELECT DISTINCT allergytype FROM Allergy_type
Get allergy and allergytype of Allergy type	SELECT allergy , allergytype FROM Allergy_type
Get allergy and allergytype of Allergy type	SELECT allergy , allergytype FROM Allergy_type
Get allergy of Allergy type	SELECT DISTINCT allergy FROM Allergy_type
Keep the records that allergytype is food	WHERE allergytype = food
Get allergy of Allergy type	SELECT DISTINCT allergy FROM Allergy_type
Keep the records that allergytype is food	WHERE allergytype = food
Get allergytype of Allergy type	SELECT allergytype FROM Allergy_type
Keep the records that allergy is Cat	WHERE allergy = Cat
Get allergytype of Allergy type	SELECT allergytype FROM Allergy_type
Keep the records that allergy is Cat	WHERE allergy = Cat
Get the number of Allergy type	SELECT COUNT ( * ) FROM Allergy_type
Keep the records that allergytype is animal	WHERE allergytype = animal
Get the number of Allergy type	SELECT COUNT ( * ) FROM Allergy_type
Keep the records that allergytype is animal	WHERE allergytype = animal
Get the number and allergytype of Allergy type	SELECT allergytype , COUNT ( * ) FROM Allergy_type
Group the records based on allergytype	GROUP BY allergytype
Get the number and allergytype of Allergy type	SELECT allergytype , COUNT ( * ) FROM Allergy_type
Group the records based on allergytype	GROUP BY allergytype
Get allergytype of Allergy type	SELECT allergytype FROM Allergy_type
Group the records based on allergytype	GROUP BY allergytype
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get allergytype of Allergy type	SELECT allergytype FROM Allergy_type
Group the records based on allergytype	GROUP BY allergytype
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get allergytype of Allergy type	SELECT allergytype FROM Allergy_type
Group the records based on allergytype	GROUP BY allergytype
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get allergytype of Allergy type	SELECT allergytype FROM Allergy_type
Group the records based on allergytype	GROUP BY allergytype
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number of Student	SELECT COUNT ( * ) FROM Student
Get the number of Student	SELECT COUNT ( * ) FROM Student
Get Fname and Lname of Student	SELECT Fname , Lname FROM Student
Get Fname and Lname of Student	SELECT Fname , Lname FROM Student
Get the number of distinct advisor of Student	SELECT COUNT ( DISTINCT advisor ) FROM Student
Get the number of distinct advisor of Student	SELECT COUNT ( DISTINCT advisor ) FROM Student
Get Major of Student	SELECT DISTINCT Major FROM Student
Get Major of Student	SELECT DISTINCT Major FROM Student
Get city code of Student	SELECT DISTINCT city_code FROM Student
Get city code of Student	SELECT DISTINCT city_code FROM Student
Get Fname and Lname and Age of Student	SELECT Fname , Lname , Age FROM Student
Keep the records that Sex is F	WHERE Sex = F
Get Fname and Lname and Age of Student	SELECT Fname , Lname , Age FROM Student
Keep the records that Sex is F	WHERE Sex = F
Get StuID of Student	SELECT StuID FROM Student
Keep the records that Sex is M	WHERE Sex = M
Get StuID of Student	SELECT StuID FROM Student
Keep the records that Sex is M	WHERE Sex = M
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that age is 18	WHERE age = 18
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that age is 18	WHERE age = 18
Get StuID of Student	SELECT StuID FROM Student
Keep the records that age is greater than 20	WHERE age > 20
Get StuID of Student	SELECT StuID FROM Student
Keep the records that age is greater than 20	WHERE age > 20
Get city code of Student	SELECT city_code FROM Student
Keep the records that LName is Kim	WHERE LName = Kim
Get city code of Student	SELECT city_code FROM Student
Keep the records that LName is Kim	WHERE LName = Kim
Get Advisor of Student	SELECT Advisor FROM Student
Keep the records that StuID is 1004	WHERE StuID = 1004
Get Advisor of Student	SELECT Advisor FROM Student
Keep the records that StuID is 1004	WHERE StuID = 1004
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that city code is HKG OR city code is CHI	WHERE city_code = HKG OR city_code = CHI
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that city code is HKG OR city code is CHI	WHERE city_code = HKG OR city_code = CHI
Get the minimum value of age and the average value of age and the maximum value of age of Student	SELECT MIN ( age ) , AVG ( age ) , MAX ( age ) FROM Student
Get the minimum value of age and the average value of age and the maximum value of age of Student	SELECT MIN ( age ) , AVG ( age ) , MAX ( age ) FROM Student
Get the minimum value of age of Student	SELECT MIN ( age ) FROM Student
Get LName of Student	SELECT LName FROM Student
Keep the records that age is the first query result	WHERE age = ( the first query result ) 
Get the minimum value of age of Student	SELECT MIN ( age ) FROM Student
Get LName of Student	SELECT LName FROM Student
Keep the records that age is the first query result	WHERE age = ( the first query result ) 
Get the maximum value of age of Student	SELECT MAX ( age ) FROM Student
Get StuID of Student	SELECT StuID FROM Student
Keep the records that age is the first query result	WHERE age = ( the first query result ) 
Get the maximum value of age of Student	SELECT MAX ( age ) FROM Student
Get StuID of Student	SELECT StuID FROM Student
Keep the records that age is the first query result	WHERE age = ( the first query result ) 
Get the number and major of Student	SELECT major , COUNT ( * ) FROM Student
Group the records based on major	GROUP BY major
Get the number and major of Student	SELECT major , COUNT ( * ) FROM Student
Group the records based on major	GROUP BY major
Get major of Student	SELECT major FROM Student
Group the records based on major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get major of Student	SELECT major FROM Student
Group the records based on major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and age of Student	SELECT age , COUNT ( * ) FROM Student
Group the records based on age	GROUP BY age
Get the number and age of Student	SELECT age , COUNT ( * ) FROM Student
Group the records based on age	GROUP BY age
Get the average value of age and sex of Student	SELECT AVG ( age ) , sex FROM Student
Group the records based on sex	GROUP BY sex
Get the average value of age and sex of Student	SELECT AVG ( age ) , sex FROM Student
Group the records based on sex	GROUP BY sex
Get the number and city code of Student	SELECT city_code , COUNT ( * ) FROM Student
Group the records based on city code	GROUP BY city_code
Get the number and city code of Student	SELECT city_code , COUNT ( * ) FROM Student
Group the records based on city code	GROUP BY city_code
Get the number and advisor of Student	SELECT advisor , COUNT ( * ) FROM Student
Group the records based on advisor	GROUP BY advisor
Get the number and advisor of Student	SELECT advisor , COUNT ( * ) FROM Student
Group the records based on advisor	GROUP BY advisor
Get advisor of Student	SELECT advisor FROM Student
Group the records based on advisor	GROUP BY advisor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get advisor of Student	SELECT advisor FROM Student
Group the records based on advisor	GROUP BY advisor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of Has Allergy	SELECT COUNT ( * ) FROM Has_allergy
Keep the records that Allergy is Cat	WHERE Allergy = Cat
Get the number of Has Allergy	SELECT COUNT ( * ) FROM Has_allergy
Keep the records that Allergy is Cat	WHERE Allergy = Cat
Get StuID of Has allergy	SELECT StuID FROM Has_allergy
Group the records based on the number StuID 2 that the number is greater than or equal to 2	GROUP BY StuID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get StuID of Has allergy	SELECT StuID FROM Has_allergy
Group the records based on the number StuID 2 that the number is greater than or equal to 2	GROUP BY StuID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Has allergy	SELECT StuID FROM Has_allergy
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Has allergy	SELECT StuID FROM Has_allergy
Get the number of has allergy that has Student	SELECT COUNT ( * ) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that sex of Student is F AND allergy of has allergy is Milk OR allergy of has allergy is Eggs	WHERE T2.sex = F AND T1.allergy = Milk OR T1.allergy = Eggs
Get the number of has allergy that has Student	SELECT COUNT ( * ) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that sex of Student is F AND allergy of has allergy is Milk OR allergy of has allergy is Eggs	WHERE T2.sex = F AND T1.allergy = Milk OR T1.allergy = Eggs
Get the number of Has allergy that has Allergy type	SELECT COUNT ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy
Keep the records that allergytype of Allergy type is food	WHERE T2.allergytype = food
Get the number of Has allergy that has Allergy type	SELECT COUNT ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy
Keep the records that allergytype of Allergy type is food	WHERE T2.allergytype = food
Get Allergy of Has Allergy	SELECT Allergy FROM Has_allergy
Group the records based on Allergy	GROUP BY Allergy
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Allergy of Has Allergy	SELECT Allergy FROM Has_allergy
Group the records based on Allergy	GROUP BY Allergy
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Allergy of Has Allergy	SELECT Allergy , COUNT ( * ) FROM Has_allergy
Group the records based on Allergy	GROUP BY Allergy
Get the number and Allergy of Has Allergy	SELECT Allergy , COUNT ( * ) FROM Has_allergy
Group the records based on Allergy	GROUP BY Allergy
Get the number and allergytype of Has allergy that has Allergy type	SELECT T2.allergytype , COUNT ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy
Group the records based on allergytype of Allergy type	GROUP BY T2.allergytype
Get the number and allergytype of Has allergy that has Allergy type	SELECT T2.allergytype , COUNT ( * ) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy
Group the records based on allergytype of Allergy type	GROUP BY T2.allergytype
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Milk	WHERE Allergy = Milk
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Cat	WHERE Allergy = Cat
Get lname and age of Student	SELECT lname , age FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Milk	WHERE Allergy = Milk
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Cat	WHERE Allergy = Cat
Get lname and age of Student	SELECT lname , age FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get Allergy and AllergyType of Allergy type that has Has allergy and Student	SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID
Keep the records that Fname of Student is Lisa	WHERE T3.Fname = Lisa 
Order these records based on the Allergy of Allergy type	ORDER BY T1.Allergy 
Get Allergy and AllergyType of Allergy type that has Has allergy and Student	SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID
Keep the records that Fname of Student is Lisa	WHERE T3.Fname = Lisa 
Order these records based on the Allergy of Allergy type	ORDER BY T1.Allergy 
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Milk	WHERE Allergy = Milk
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Cat	WHERE Allergy = Cat
Get fname and sex of Student	SELECT fname , sex FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Milk	WHERE Allergy = Milk
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Cat	WHERE Allergy = Cat
Get fname and sex of Student	SELECT fname , sex FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food	WHERE T2.allergytype = food
Get StuID of Has allergy that has Allergy Type	SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is animal	WHERE T2.allergytype = animal
Get the average value of age of Student	SELECT AVG ( age ) FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food	WHERE T2.allergytype = food
Get StuID of Has allergy that has Allergy Type	SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is animal	WHERE T2.allergytype = animal
Get the average value of age of Student	SELECT AVG ( age ) FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food	WHERE T2.allergytype = food
Get fname and lname of Student	SELECT fname , lname FROM Student
Keep the records that StuID is not in the first query result	WHERE StuID NOT IN ( the first query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food	WHERE T2.allergytype = food
Get fname and lname of Student	SELECT fname , lname FROM Student
Keep the records that StuID is not in the first query result	WHERE StuID NOT IN ( the first query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food	WHERE T2.allergytype = food
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that sex is M AND StuID is in the first query result	WHERE sex = M AND StuID IN ( the first query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food	WHERE T2.allergytype = food
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that sex is M AND StuID is in the first query result	WHERE sex = M AND StuID IN ( the first query result ) 
Get fname and city code of Student that has Has Allergy	SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid
Keep the records that Allergy of Has Allergy is Milk OR Allergy of Has Allergy is Cat	WHERE T2.Allergy = Milk OR T2.Allergy = Cat
Get fname and city code of Student that has Has Allergy	SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid
Keep the records that Allergy of Has Allergy is Milk OR Allergy of Has Allergy is Cat	WHERE T2.Allergy = Milk OR T2.Allergy = Cat
Get StuID of Has allergy that has Allergy Type	SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food OR allergytype of Allergy Type is animal	WHERE T2.allergytype = food OR T2.allergytype = animal
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that age is greater than 18 AND StuID is not in the first query result	WHERE age > 18 AND StuID NOT IN ( the first query result ) 
Get StuID of Has allergy that has Allergy Type	SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy
Keep the records that allergytype of Allergy Type is food OR allergytype of Allergy Type is animal	WHERE T2.allergytype = food OR T2.allergytype = animal
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that age is greater than 18 AND StuID is not in the first query result	WHERE age > 18 AND StuID NOT IN ( the first query result ) 
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Soy	WHERE Allergy = Soy
Get fname and major of Student	SELECT fname , major FROM Student
Keep the records that StuID is not in the first query result	WHERE StuID NOT IN ( the first query result ) 
Get StuID of Has Allergy	SELECT StuID FROM Has_allergy
Keep the records that Allergy is Soy	WHERE Allergy = Soy
Get fname and major of Student	SELECT fname , major FROM Student
Keep the records that StuID is not in the first query result	WHERE StuID NOT IN ( the first query result ) 
Get the number and billing country of invoices	SELECT billing_country , COUNT ( * ) FROM invoices
Group the records based on billing country	GROUP BY billing_country
Order these records based on the the number and sort them in descending order, and return the top 5 records	ORDER BY COUNT ( * ) DESC LIMIT 5
Get the number and billing country of invoices	SELECT billing_country , COUNT ( * ) FROM invoices
Group the records based on billing country	GROUP BY billing_country
Order these records based on the the number and sort them in descending order, and return the top 5 records	ORDER BY COUNT ( * ) DESC LIMIT 5
Get the SUM of total and billing country of invoices	SELECT billing_country , SUM ( total ) FROM invoices
Group the records based on billing country	GROUP BY billing_country
Order these records based on the the SUM of total and sort them in descending order, and return the top 8 records	ORDER BY SUM ( total ) DESC LIMIT 8
Get the SUM of total and billing country of invoices	SELECT billing_country , SUM ( total ) FROM invoices
Group the records based on billing country	GROUP BY billing_country
Order these records based on the the SUM of total and sort them in descending order, and return the top 8 records	ORDER BY SUM ( total ) DESC LIMIT 8
Get the average value of total and billing country of invoices	SELECT billing_country , AVG ( total ) FROM invoices
Group the records based on billing country	GROUP BY billing_country
Order these records based on the the average value of total and sort them in descending order, and return the top 10 records	ORDER BY AVG ( total ) DESC LIMIT 10
Get the average value of total and billing country of invoices	SELECT billing_country , AVG ( total ) FROM invoices
Group the records based on billing country	GROUP BY billing_country
Order these records based on the the average value of total and sort them in descending order, and return the top 10 records	ORDER BY AVG ( total ) DESC LIMIT 10
Get first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Order these records based on the invoice date of invoices and sort them in descending order, and return the top 5 records	ORDER BY T2.invoice_date DESC LIMIT 5
Get first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Order these records based on the invoice date of invoices and sort them in descending order, and return the top 5 records	ORDER BY T2.invoice_date DESC LIMIT 5
Get the number and first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Group the records based on id of customers	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 10 records	ORDER BY COUNT ( * ) DESC LIMIT 10
Get the number and first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name , COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Group the records based on id of customers	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 10 records	ORDER BY COUNT ( * ) DESC LIMIT 10
Get the SUM of total and first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name , SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Group the records based on id of customers	GROUP BY T1.id
Order these records based on the the SUM of total of invoices and sort them in descending order, and return the top 10 records	ORDER BY SUM ( T2.total ) DESC LIMIT 10
Get the SUM of total and first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name , SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Group the records based on id of customers	GROUP BY T1.id
Order these records based on the the SUM of total of invoices and sort them in descending order, and return the top 10 records	ORDER BY SUM ( T2.total ) DESC LIMIT 10
Get the number and name of genres that has tracks	SELECT T1.name , COUNT ( * ) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id
Group the records based on id of genres	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 5 records	ORDER BY COUNT ( * ) DESC LIMIT 5
Get the number and name of genres that has tracks	SELECT T1.name , COUNT ( * ) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id
Group the records based on id of genres	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 5 records	ORDER BY COUNT ( * ) DESC LIMIT 5
Get title of albums	SELECT title FROM albums
Get title of albums	SELECT title FROM albums
Get title of albums	SELECT title FROM albums
Order these records based on the title	ORDER BY title 
Get title of albums	SELECT title FROM albums
Order these records based on the title	ORDER BY title 
Get title of albums	SELECT title FROM albums
Keep the records that title is in the form of A%	WHERE title LIKE A% 
Order these records based on the title	ORDER BY title 
Get title of albums	SELECT title FROM albums
Keep the records that title is in the form of A%	WHERE title LIKE A% 
Order these records based on the title	ORDER BY title 
Get first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Order these records based on the total, and return the top 10 records	ORDER BY total LIMIT 10
Get first name and last name of customers that has invoices	SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id
Order these records based on the total, and return the top 10 records	ORDER BY total LIMIT 10
Get the SUM of total of invoices	SELECT SUM ( total ) FROM invoices
Keep the records that billing city is Chicago AND billing state is IL	WHERE billing_city = Chicago AND billing_state = IL
Get the SUM of total of invoices	SELECT SUM ( total ) FROM invoices
Keep the records that billing city is Chicago AND billing state is IL	WHERE billing_city = Chicago AND billing_state = IL
Get the number of invoices	SELECT COUNT ( * ) FROM invoices
Keep the records that billing city is Chicago AND billing state is IL	WHERE billing_city = Chicago AND billing_state = IL
Get the number of invoices	SELECT COUNT ( * ) FROM invoices
Keep the records that billing city is Chicago AND billing state is IL	WHERE billing_city = Chicago AND billing_state = IL
Get the number and billing state of invoices	SELECT billing_state , COUNT ( * ) FROM invoices
Keep the records that billing country is USA	WHERE billing_country = USA 
Group the records based on billing state	GROUP BY billing_state
Get the number and billing state of invoices	SELECT billing_state , COUNT ( * ) FROM invoices
Keep the records that billing country is USA	WHERE billing_country = USA 
Group the records based on billing state	GROUP BY billing_state
Get the number and billing state of invoices	SELECT billing_state , COUNT ( * ) FROM invoices
Keep the records that billing country is USA	WHERE billing_country = USA 
Group the records based on billing state	GROUP BY billing_state
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and billing state of invoices	SELECT billing_state , COUNT ( * ) FROM invoices
Keep the records that billing country is USA	WHERE billing_country = USA 
Group the records based on billing state	GROUP BY billing_state
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and the SUM of total and billing state of invoices	SELECT billing_state , COUNT ( * ) , SUM ( total ) FROM invoices
Keep the records that billing state is CA	WHERE billing_state = CA
Get the number and the SUM of total and billing state of invoices	SELECT billing_state , COUNT ( * ) , SUM ( total ) FROM invoices
Keep the records that billing state is CA	WHERE billing_state = CA
Get title of albums that has artists	SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id
Keep the records that name of artists is Aerosmith	WHERE T2.name = Aerosmith
Get title of albums that has artists	SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id
Keep the records that name of artists is Aerosmith	WHERE T2.name = Aerosmith
Get the number of albums that has artists	SELECT COUNT ( * ) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id
Keep the records that name of artists is Billy Cobham	WHERE T2.name = Billy Cobham
Get the number of albums that has artists	SELECT COUNT ( * ) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id
Keep the records that name of artists is Billy Cobham	WHERE T2.name = Billy Cobham
Get company of customers	SELECT company FROM customers
Keep the records that first name is Eduardo AND last name is Martins	WHERE first_name = Eduardo AND last_name = Martins
Get company of customers	SELECT company FROM customers
Keep the records that first name is Eduardo AND last name is Martins	WHERE first_name = Eduardo AND last_name = Martins
Get email AND phone of customers	SELECT email , phone FROM customers
Keep the records that first name is Astrid AND last name is Gruber	WHERE first_name = Astrid AND last_name = Gruber
Get email AND phone of customers	SELECT email , phone FROM customers
Keep the records that first name is Astrid AND last name is Gruber	WHERE first_name = Astrid AND last_name = Gruber
Get the number of customers	SELECT COUNT ( * ) FROM customers
Keep the records that city is Prague	WHERE city = Prague
Get the number of customers	SELECT COUNT ( * ) FROM customers
Keep the records that city is Prague	WHERE city = Prague
Get the number of customers	SELECT COUNT ( * ) FROM customers
Keep the records that state is CA	WHERE state = CA
Get the number of customers	SELECT COUNT ( * ) FROM customers
Keep the records that state is CA	WHERE state = CA
Get country of customers	SELECT country FROM customers
Keep the records that first name is Roberto AND last name is Almeida	WHERE first_name = Roberto AND last_name = Almeida
Get country of customers	SELECT country FROM customers
Keep the records that first name is Roberto AND last name is Almeida	WHERE first_name = Roberto AND last_name = Almeida
Get title of artists that has albums	SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id
Keep the records that name of artists is in the form of %Led%	WHERE T1.name LIKE %Led%
Get title of artists that has albums	SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id
Keep the records that name of artists is in the form of %Led%	WHERE T1.name LIKE %Led%
Get the number of employees that has customers	SELECT COUNT ( * ) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id
Keep the records that first name of employees is Steve AND last name of employees is Johnson	WHERE T1.first_name = Steve AND T1.last_name = Johnson
Get the number of employees that has customers	SELECT COUNT ( * ) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id
Keep the records that first name of employees is Steve AND last name of employees is Johnson	WHERE T1.first_name = Steve AND T1.last_name = Johnson
Get title AND phone AND hire date of employees	SELECT title , phone , hire_date FROM employees
Keep the records that first name is Nancy AND last name is Edwards	WHERE first_name = Nancy AND last_name = Edwards
Get title AND phone AND hire date of employees	SELECT title , phone , hire_date FROM employees
Keep the records that first name is Nancy AND last name is Edwards	WHERE first_name = Nancy AND last_name = Edwards
Get first name AND last name of employees that has employees	SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to
Keep the records that first name of employees is Nancy AND last name of employees is Edwards	WHERE T1.first_name = Nancy AND T1.last_name = Edwards
Get first name AND last name of employees that has employees	SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to
Keep the records that first name of employees is Nancy AND last name of employees is Edwards	WHERE T1.first_name = Nancy AND T1.last_name = Edwards
Get address of employees	SELECT address FROM employees
Keep the records that first name is Nancy AND last name is Edwards	WHERE first_name = Nancy AND last_name = Edwards
Get address of employees	SELECT address FROM employees
Keep the records that first name is Nancy AND last name is Edwards	WHERE first_name = Nancy AND last_name = Edwards
Get first name and last name of employees that has customers	SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id
Group the records based on id of employees	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name and last name of employees that has customers	SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id
Group the records based on id of employees	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of employees	SELECT COUNT ( * ) FROM employees
Keep the records that country is Canada	WHERE country = Canada
Get the number of employees	SELECT COUNT ( * ) FROM employees
Keep the records that country is Canada	WHERE country = Canada
Get phone of employees	SELECT phone FROM employees
Keep the records that first name is Nancy AND last name is Edwards	WHERE first_name = Nancy AND last_name = Edwards
Get phone of employees	SELECT phone FROM employees
Keep the records that first name is Nancy AND last name is Edwards	WHERE first_name = Nancy AND last_name = Edwards
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Order these records based on the birth date and sort them in descending order, and return the top 1 record	ORDER BY birth_date DESC LIMIT 1
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Order these records based on the birth date and sort them in descending order, and return the top 1 record	ORDER BY birth_date DESC LIMIT 1
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Order these records based on the hire date and sort them in ascending order, and return the top 10 records	ORDER BY hire_date ASC LIMIT 10
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Order these records based on the hire date and sort them in ascending order, and return the top 10 records	ORDER BY hire_date ASC LIMIT 10
Get the number and city of employees	SELECT COUNT ( * ) , city FROM employees
Keep the records that title is IT Staff	WHERE title = IT Staff 
Group the records based on city	GROUP BY city
Get the number and city of employees	SELECT COUNT ( * ) , city FROM employees
Keep the records that title is IT Staff	WHERE title = IT Staff 
Group the records based on city	GROUP BY city
Get the number of reports to and first name and last name of employees that has employees	SELECT T2.first_name , T2.last_name , COUNT ( T1.reports_to ) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id
Group the records based on reports to of employees	GROUP BY T1.reports_to
Order these records based on the the number of reports to of employees and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( T1.reports_to ) DESC LIMIT 1
Get the number of reports to and first name and last name of employees that has employees	SELECT T2.first_name , T2.last_name , COUNT ( T1.reports_to ) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id
Group the records based on reports to of employees	GROUP BY T1.reports_to
Order these records based on the the number of reports to of employees and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( T1.reports_to ) DESC LIMIT 1
Get the number of customers that has invoices	SELECT COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id
Keep the records that first name of customers is Lucas AND last name of customers is Mancini	WHERE T1.first_name = Lucas AND T1.last_name = Mancini
Get the number of customers that has invoices	SELECT COUNT ( * ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id
Keep the records that first name of customers is Lucas AND last name of customers is Mancini	WHERE T1.first_name = Lucas AND T1.last_name = Mancini
Get the SUM of total of customers that has invoices	SELECT SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id
Keep the records that first name of customers is Lucas AND last name of customers is Mancini	WHERE T1.first_name = Lucas AND T1.last_name = Mancini
Get the SUM of total of customers that has invoices	SELECT SUM ( T2.total ) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id
Keep the records that first name of customers is Lucas AND last name of customers is Mancini	WHERE T1.first_name = Lucas AND T1.last_name = Mancini
Get name of media types	SELECT name FROM media_types
Get name of media types	SELECT name FROM media_types
Get name of genres	SELECT DISTINCT name FROM genres
Get name of genres	SELECT DISTINCT name FROM genres
Get name of playlists	SELECT name FROM playlists
Get name of playlists	SELECT name FROM playlists
Get composer of tracks	SELECT composer FROM tracks
Keep the records that name is Fast As a Shark	WHERE name = Fast As a Shark
Get composer of tracks	SELECT composer FROM tracks
Keep the records that name is Fast As a Shark	WHERE name = Fast As a Shark
Get milliseconds of tracks	SELECT milliseconds FROM tracks
Keep the records that name is Fast As a Shark	WHERE name = Fast As a Shark
Get milliseconds of tracks	SELECT milliseconds FROM tracks
Keep the records that name is Fast As a Shark	WHERE name = Fast As a Shark
Get name of genres that has tracks	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that name of genres is Rock	WHERE T1.name = Rock
Get name of genres that has tracks	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that name of genres is Rock	WHERE T1.name = Rock
Get title of albums that has tracks	SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that name of tracks is Balls to the Wall	WHERE T2.name = Balls to the Wall
Get title of albums that has tracks	SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that name of tracks is Balls to the Wall	WHERE T2.name = Balls to the Wall
Get name of albums that has tracks	SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that title of albums is Balls to the Wall	WHERE T1.title = Balls to the Wall
Get name of albums that has tracks	SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that title of albums is Balls to the Wall	WHERE T1.title = Balls to the Wall
Get title of albums that has tracks	SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id
Group the records based on the number of id of albums id of albums 10 that the number of id of albums is greater than 10	GROUP BY T1.id HAVING COUNT ( T1.id ) > 10 HAVING COUNT ( T1.id ) > 10
Get title of albums that has tracks	SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id
Group the records based on the number of id of albums id of albums 10 that the number of id of albums is greater than 10	GROUP BY T1.id HAVING COUNT ( T1.id ) > 10 HAVING COUNT ( T1.id ) > 10
Get name of genres that has tracks AND media types	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id
Keep the records that name of genres is Rock AND name of media types is MPEG audio file	WHERE T1.name = Rock AND T3.name = MPEG audio file
Get name of genres that has tracks AND media types	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id
Keep the records that name of genres is Rock AND name of media types is MPEG audio file	WHERE T1.name = Rock AND T3.name = MPEG audio file
Get name of genres that has tracks and media types	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id
Keep the records that name of genres is Rock OR name of media types is MPEG audio file	WHERE T1.name = Rock OR T3.name = MPEG audio file
Get name of genres that has tracks and media types	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id
Keep the records that name of genres is Rock OR name of media types is MPEG audio file	WHERE T1.name = Rock OR T3.name = MPEG audio file
Get name of genres that has tracks	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that name of genres is Rock OR name of genres is Jazz	WHERE T1.name = Rock OR T1.name = Jazz
Get name of genres that has tracks	SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Keep the records that name of genres is Rock OR name of genres is Jazz	WHERE T1.name = Rock OR T1.name = Jazz
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id
Keep the records that name of playlists is Movies	WHERE T3.name = Movies
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id
Keep the records that name of playlists is Movies	WHERE T3.name = Movies
Get name of playlist tracks that has playlists	SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id
Group the records based on the number of track id of playlist tracks playlist id of playlist tracks 100 that the number of track id of playlist tracks is greater than 100	GROUP BY T1.playlist_id HAVING COUNT ( T1.track_id ) > 100 HAVING COUNT ( T1.track_id ) > 100
Get name of playlist tracks that has playlists	SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id
Group the records based on the number of track id of playlist tracks playlist id of playlist tracks 100 that the number of track id of playlist tracks is greater than 100	GROUP BY T1.playlist_id HAVING COUNT ( T1.track_id ) > 100 HAVING COUNT ( T1.track_id ) > 100
Get name of tracks that has invoice lines AND invoices AND customers	SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id
Keep the records that first name of customers is Daan AND last name of customers is Peeters	WHERE T4.first_name = Daan AND T4.last_name = Peeters
Get name of tracks that has invoice lines AND invoices AND customers	SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id
Keep the records that first name of customers is Daan AND last name of customers is Peeters	WHERE T4.first_name = Daan AND T4.last_name = Peeters
Get unit price of tracks	SELECT unit_price FROM tracks
Keep the records that name is Fast As a Shark	WHERE name = Fast As a Shark
Get unit price of tracks	SELECT unit_price FROM tracks
Keep the records that name is Fast As a Shark	WHERE name = Fast As a Shark
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Movies	WHERE T3.name = Movies
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Music	WHERE T3.name = Music
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Movies	WHERE T3.name = Movies
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Music	WHERE T3.name = Music
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Movies	WHERE T3.name = Movies
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Music	WHERE T3.name = Music
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Movies	WHERE T3.name = Movies
Get name of tracks that has playlist tracks and playlists	SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id
Keep the records that name of playlists is Music	WHERE T3.name = Music
Get the number and name of genres that has tracks	SELECT COUNT ( * ) , T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Group the records based on name of genres	GROUP BY T1.name
Get the number and name of genres that has tracks	SELECT COUNT ( * ) , T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id
Group the records based on name of genres	GROUP BY T1.name
Get the number of editor	SELECT COUNT ( * ) FROM editor
Get Name of editor	SELECT Name FROM editor
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Name and Age of editor	SELECT Name , Age FROM editor
Get Name of editor	SELECT Name FROM editor
Keep the records that Age is greater than 25	WHERE Age > 25
Get Name of editor	SELECT Name FROM editor
Keep the records that Age is 24 OR Age is 25	WHERE Age = 24 OR Age = 25
Get Name of editor	SELECT Name FROM editor
Order these records based on the Age and sort them in ascending order, and return the top 1 record	ORDER BY Age ASC LIMIT 1
Get the number and Age of editor	SELECT Age , COUNT ( * ) FROM editor
Group the records based on Age	GROUP BY Age
Get Age of editor	SELECT Age FROM editor
Group the records based on Age	GROUP BY Age
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Theme of journal	SELECT DISTINCT Theme FROM journal
Get Name and Theme of journal committee that has editor and journal	SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3
Get Name and Theme of journal committee that has editor and journal	SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3
Get Name and age and Theme of journal committee that has editor and journal	SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID
Order these records based on the Theme of journal and sort them in ascending ORDER	ORDER BY T3.Theme ASC 
Get Name of journal committee that has editor and journal	SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID
Keep the records that Sales of journal is greater than 3000	WHERE T3.Sales > 3000
Get the number and editor id and Name of editor that has journal committee	SELECT T1.editor_id , T1.Name , COUNT ( * ) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID
Group the records based on editor id of editor	GROUP BY T1.editor_id
Get Name of editor that has journal committee	SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID
Group the records based on the number Name of editor 2 that the number is greater than or equal to 2	GROUP BY T1.Name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get editor id of journal committee	SELECT editor_id FROM journal_committee
Get Name of editor	SELECT Name FROM editor
Keep the records that editor id is not in the first query result	WHERE editor_id NOT IN ( the first query result ) 
Get theme and sales of journal	SELECT DATE , theme , sales FROM journal
Get date and theme and sales of journal that has journal committee	SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2
Get the average value of sales of journal that has journal committee	SELECT AVG ( T1.sales ) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID
Keep the records that work type of journal committee is Photo	WHERE T2.work_type = Photo
Get the number of Accounts	SELECT COUNT ( * ) FROM Accounts
Get the number of Accounts	SELECT COUNT ( * ) FROM Accounts
Get account id and customer id and account name of Accounts	SELECT account_id , customer_id , account_name FROM Accounts
Get account id and customer id and account name of Accounts	SELECT account_id , customer_id , account_name FROM Accounts
Get other account details of Accounts	SELECT other_account_details FROM Accounts
Keep the records that account name is 338	WHERE account_name = 338
Get other account details of Accounts	SELECT other_account_details FROM Accounts
Keep the records that account name is 338	WHERE account_name = 338
Get customer first name and customer last name and customer phone of Accounts that has Customers	SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that account name of Accounts is 162	WHERE T1.account_name = 162
Get customer first name and customer last name and customer phone of Accounts that has Customers	SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that account name of Accounts is 162	WHERE T1.account_name = 162
Get the number of Accounts that has Customers	SELECT COUNT ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Art AND customer last name of Customers is Turcotte	WHERE T2.customer_first_name = Art AND T2.customer_last_name = Turcotte
Get the number of Accounts that has Customers	SELECT COUNT ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Art AND customer last name of Customers is Turcotte	WHERE T2.customer_first_name = Art AND T2.customer_last_name = Turcotte
Get the number and customer id of Accounts	SELECT customer_id , COUNT ( * ) FROM Accounts
Group the records based on customer id	GROUP BY customer_id
Get the number and customer id of Accounts	SELECT customer_id , COUNT ( * ) FROM Accounts
Group the records based on customer id	GROUP BY customer_id
Get the number and customer id of Accounts	SELECT customer_id , COUNT ( * ) FROM Accounts
Group the records based on customer id	GROUP BY customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and customer id of Accounts	SELECT customer_id , COUNT ( * ) FROM Accounts
Group the records based on customer id	GROUP BY customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer first name and customer last name and customer id of Accounts that has Customers	SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Accounts	GROUP BY T1.customer_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get customer first name and customer last name and customer id of Accounts that has Customers	SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Accounts	GROUP BY T1.customer_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get customer id of Accounts	SELECT customer_id FROM Accounts
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer id of Accounts	SELECT customer_id FROM Accounts
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer first name and customer last name of Customers	SELECT customer_first_name , customer_last_name FROM Customers
Get customer first name and customer last name of Customers that has Accounts	SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2
Get customer first name and customer last name of Customers	SELECT customer_first_name , customer_last_name FROM Customers
Get customer first name and customer last name of Customers that has Accounts	SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2
Get customer first name and customer last name of Customers that has Accounts	SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2
Get customer first name and customer last name of Customers that has Accounts	SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2
Get the number of distinct customer id of Accounts	SELECT COUNT ( DISTINCT customer_id ) FROM Accounts
Get the number of distinct customer id of Accounts	SELECT COUNT ( DISTINCT customer_id ) FROM Accounts
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Get customer id and customer first name and customer last name and customer phone of Customers	SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers
Get customer id and customer first name and customer last name and customer phone of Customers	SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers
Get customer phone AND customer email of Customers	SELECT customer_phone , customer_email FROM Customers
Keep the records that customer first name is Aniyah AND customer last name is Feest	WHERE customer_first_name = Aniyah AND customer_last_name = Feest
Get customer phone AND customer email of Customers	SELECT customer_phone , customer_email FROM Customers
Keep the records that customer first name is Aniyah AND customer last name is Feest	WHERE customer_first_name = Aniyah AND customer_last_name = Feest
Get the number of Customers cards	SELECT COUNT ( * ) FROM Customers_cards
Get the number of Customers cards	SELECT COUNT ( * ) FROM Customers_cards
Get card id and customer id and card type code and card number of Customers cards	SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards
Get card id and customer id and card type code and card number of Customers cards	SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards
Get date valid FROM and date valid to of Customers cards	SELECT date_valid_from , date_valid_to FROM Customers_cards
Keep the records that card number is 4560596484842	WHERE card_number = 4560596484842
Get date valid FROM and date valid to of Customers cards	SELECT date_valid_from , date_valid_to FROM Customers_cards
Keep the records that card number is 4560596484842	WHERE card_number = 4560596484842
Get customer first name and customer last name and customer phone of Customers cards that has Customers	SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that card number of Customers cards is 4560596484842	WHERE T1.card_number = 4560596484842
Get customer first name and customer last name and customer phone of Customers cards that has Customers	SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that card number of Customers cards is 4560596484842	WHERE T1.card_number = 4560596484842
Get the number of Customers cards that has Customers	SELECT COUNT ( * ) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Art AND customer last name of Customers is Turcotte	WHERE T2.customer_first_name = Art AND T2.customer_last_name = Turcotte
Get the number of Customers cards that has Customers	SELECT COUNT ( * ) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Art AND customer last name of Customers is Turcotte	WHERE T2.customer_first_name = Art AND T2.customer_last_name = Turcotte
Get the number of Customers cards	SELECT COUNT ( * ) FROM Customers_cards
Keep the records that card type code is Debit	WHERE card_type_code = Debit
Get the number of Customers cards	SELECT COUNT ( * ) FROM Customers_cards
Keep the records that card type code is Debit	WHERE card_type_code = Debit
Get the number of Customers cards that has Customers	SELECT COUNT ( * ) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Blanche AND customer last name of Customers is Huels AND card type code of Customers cards is Credit	WHERE T2.customer_first_name = Blanche AND T2.customer_last_name = Huels AND T1.card_type_code = Credit
Get the number of Customers cards that has Customers	SELECT COUNT ( * ) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Blanche AND customer last name of Customers is Huels AND card type code of Customers cards is Credit	WHERE T2.customer_first_name = Blanche AND T2.customer_last_name = Huels AND T1.card_type_code = Credit
Get the number and customer id of Customers cards	SELECT customer_id , COUNT ( * ) FROM Customers_cards
Group the records based on customer id	GROUP BY customer_id
Get the number and customer id of Customers cards	SELECT customer_id , COUNT ( * ) FROM Customers_cards
Group the records based on customer id	GROUP BY customer_id
Get the number and customer id of Customers cards	SELECT customer_id , COUNT ( * ) FROM Customers_cards
Group the records based on customer id	GROUP BY customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and customer id of Customers cards	SELECT customer_id , COUNT ( * ) FROM Customers_cards
Group the records based on customer id	GROUP BY customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer id and customer first name and customer last name of Customers cards that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Customers cards 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer id and customer first name and customer last name of Customers cards that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Customers cards 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer id and customer first name and customer last name of Customers cards that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Customers cards	GROUP BY T1.customer_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get customer id and customer first name and customer last name of Customers cards that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Customers cards	GROUP BY T1.customer_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number and card type code of Customers cards	SELECT card_type_code , COUNT ( * ) FROM Customers_cards
Group the records based on card type code	GROUP BY card_type_code
Get the number and card type code of Customers cards	SELECT card_type_code , COUNT ( * ) FROM Customers_cards
Group the records based on card type code	GROUP BY card_type_code
Get card type code of Customers cards	SELECT card_type_code FROM Customers_cards
Group the records based on card type code	GROUP BY card_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get card type code of Customers cards	SELECT card_type_code FROM Customers_cards
Group the records based on card type code	GROUP BY card_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get card type code of Customers cards	SELECT card_type_code FROM Customers_cards
Group the records based on the number card type code 5 that the number is greater than or equal to 5	GROUP BY card_type_code HAVING COUNT ( * ) >= 5 HAVING COUNT ( * ) >= 5
Get card type code of Customers cards	SELECT card_type_code FROM Customers_cards
Group the records based on the number card type code 5 that the number is greater than or equal to 5	GROUP BY card_type_code HAVING COUNT ( * ) >= 5 HAVING COUNT ( * ) >= 5
Get the number of distinct customer id and card type code of Customers cards	SELECT card_type_code , COUNT ( DISTINCT customer_id ) FROM Customers_cards
Group the records based on card type code	GROUP BY card_type_code
Get the number of distinct customer id and card type code of Customers cards	SELECT card_type_code , COUNT ( DISTINCT customer_id ) FROM Customers_cards
Group the records based on card type code	GROUP BY card_type_code
Get customer id and customer first name of Customers	SELECT customer_id , customer_first_name FROM Customers
Get customer id and customer first name of Customers cards that has Customers	SELECT T1.customer_id , T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that card type code is Credit	WHERE card_type_code = Credit
Get customer id and customer first name of Customers	SELECT customer_id , customer_first_name FROM Customers
Get customer id and customer first name of Customers cards that has Customers	SELECT T1.customer_id , T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that card type code is Credit	WHERE card_type_code = Credit
Get card type code of Customers Cards	SELECT DISTINCT card_type_code FROM Customers_Cards
Get card type code of Customers Cards	SELECT DISTINCT card_type_code FROM Customers_Cards
Get the number of distinct card type code of Customers Cards	SELECT COUNT ( DISTINCT card_type_code ) FROM Customers_Cards
Get the number of distinct card type code of Customers Cards	SELECT COUNT ( DISTINCT card_type_code ) FROM Customers_Cards
Get transaction type of Financial Transactions	SELECT DISTINCT transaction_type FROM Financial_Transactions
Get transaction type of Financial Transactions	SELECT DISTINCT transaction_type FROM Financial_Transactions
Get the number of distinct transaction type of Financial Transactions	SELECT COUNT ( DISTINCT transaction_type ) FROM Financial_Transactions
Get the number of distinct transaction type of Financial Transactions	SELECT COUNT ( DISTINCT transaction_type ) FROM Financial_Transactions
Get the average value of transaction amount and the SUM of transaction amount of Financial transactions	SELECT AVG ( transaction_amount ) , SUM ( transaction_amount ) FROM Financial_transactions
Get the average value of transaction amount and the SUM of transaction amount of Financial transactions	SELECT AVG ( transaction_amount ) , SUM ( transaction_amount ) FROM Financial_transactions
Get the number and card type code of Financial transactions that has Customers cards	SELECT T2.card_type_code , COUNT ( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id
Group the records based on card type code of Customers cards	GROUP BY T2.card_type_code
Get the number and card type code of Financial transactions that has Customers cards	SELECT T2.card_type_code , COUNT ( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id
Group the records based on card type code of Customers cards	GROUP BY T2.card_type_code
Get the number and transaction type of Financial transactions	SELECT transaction_type , COUNT ( * ) FROM Financial_transactions
Group the records based on transaction type	GROUP BY transaction_type
Get the number and transaction type of Financial transactions	SELECT transaction_type , COUNT ( * ) FROM Financial_transactions
Group the records based on transaction type	GROUP BY transaction_type
Get transaction type of Financial transactions	SELECT transaction_type FROM Financial_transactions
Group the records based on transaction type	GROUP BY transaction_type
Order these records based on the the SUM of transaction amount and sort them in descending order, and return the top 1 record	ORDER BY SUM ( transaction_amount ) DESC LIMIT 1
Get transaction type of Financial transactions	SELECT transaction_type FROM Financial_transactions
Group the records based on transaction type	GROUP BY transaction_type
Order these records based on the the SUM of transaction amount and sort them in descending order, and return the top 1 record	ORDER BY SUM ( transaction_amount ) DESC LIMIT 1
Get the number and account id of Financial transactions	SELECT account_id , COUNT ( * ) FROM Financial_transactions
Group the records based on account id	GROUP BY account_id
Get the number and account id of Financial transactions	SELECT account_id , COUNT ( * ) FROM Financial_transactions
Group the records based on account id	GROUP BY account_id
Get the number of track	SELECT COUNT ( * ) FROM track
Get the number of track	SELECT COUNT ( * ) FROM track
Get name of track	SELECT name , LOCATION FROM track
Get name of track	SELECT name , LOCATION FROM track
Get name and seating of track	SELECT name , seating FROM track
Keep the records that year opened is greater than 2000	WHERE year_opened > 2000 
Order these records based on the seating	ORDER BY seating 
Get name and seating of track	SELECT name , seating FROM track
Keep the records that year opened is greater than 2000	WHERE year_opened > 2000 
Order these records based on the seating	ORDER BY seating 
Get name and seating of track	SELECT name , LOCATION , seating FROM track
Order these records based on the year opened and sort them in descending order, and return the top 1 record	ORDER BY year_opened DESC LIMIT 1
Get name and seating of track	SELECT name , LOCATION , seating FROM track
Order these records based on the year opened and sort them in descending order, and return the top 1 record	ORDER BY year_opened DESC LIMIT 1
Get the minimum value of seating and the maximum value of seating and the average value of seating of track	SELECT MIN ( seating ) , MAX ( seating ) , AVG ( seating ) FROM track
Get the minimum value of seating and the maximum value of seating and the average value of seating of track	SELECT MIN ( seating ) , MAX ( seating ) , AVG ( seating ) FROM track
Get the average value of seating of track	SELECT AVG ( seating ) FROM track
Get name and year opened of track	SELECT name , LOCATION , year_opened FROM track
Keep the records that seating is greater than the first query result	WHERE seating > ( the first query result ) 
Get the average value of seating of track	SELECT AVG ( seating ) FROM track
Get name and year opened of track	SELECT name , LOCATION , year_opened FROM track
Keep the records that seating is greater than the first query result	WHERE seating > ( the first query result ) 
Get of track	SELECT DISTINCT LOCATION FROM track
Get of track	SELECT DISTINCT LOCATION FROM track
Get the number of race	SELECT COUNT ( * ) FROM race
Get the number of race	SELECT COUNT ( * ) FROM race
Get of race	SELECT DISTINCT CLASS FROM race
Get of race	SELECT DISTINCT CLASS FROM race
Get name of race	SELECT name , CLASS , DATE FROM race
Get name of race	SELECT name , CLASS , DATE FROM race
Get the number of race	SELECT CLASS , COUNT ( * ) FROM race
Group the records based on	GROUP BY
Get the number of race	SELECT CLASS , COUNT ( * ) FROM race
Group the records based on	GROUP BY
Get of race	SELECT CLASS FROM race
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of race	SELECT CLASS FROM race
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of race	SELECT CLASS FROM race
Group the records based on that the number is greater than or equal to 2	GROUP BY HAVING COUNT ( * ) >= 2
Get of race	SELECT CLASS FROM race
Group the records based on that the number is greater than or equal to 2	GROUP BY HAVING COUNT ( * ) >= 2
Get name of track	SELECT name FROM track
Get name of race that has track	SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Keep the records that class of race is GT	WHERE T1.class = GT
Get name of track	SELECT name FROM track
Get name of race that has track	SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Keep the records that class of race is GT	WHERE T1.class = GT
Get track id of race	SELECT track_id FROM race
Get name of track	SELECT name FROM track
Keep the records that track id is not in the first query result	WHERE track_id NOT IN ( the first query result ) 
Get track id of race	SELECT track_id FROM race
Get name of track	SELECT name FROM track
Keep the records that track id is not in the first query result	WHERE track_id NOT IN ( the first query result ) 
Get year opened of track	SELECT year_opened FROM track
Keep the records that seating is between 400 X5000	WHERE seating BETWEEN 4000 AND 5000
Get year opened of track	SELECT year_opened FROM track
Keep the records that seating is between 400 X5000	WHERE seating BETWEEN 4000 AND 5000
Get the number and name of race that has track	SELECT T2.name , COUNT ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Group the records based on track id of race	GROUP BY T1.track_id
Get the number and name of race that has track	SELECT T2.name , COUNT ( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Group the records based on track id of race	GROUP BY T1.track_id
Get name of race that has track	SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Group the records based on track id of race	GROUP BY T1.track_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of race that has track	SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Group the records based on track id of race	GROUP BY T1.track_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and date and name of race that has track	SELECT T1.name , T1.date , T2.name FROM race AS T1 JOIN track AS T2
Get name and date and name of race that has track	SELECT T1.name , T1.date , T2.name FROM race AS T1 JOIN track AS T2
Get name and location of race that has track	SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Group the records based on the number track id of race 1 that the number is 1	GROUP BY T1.track_id HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get name and location of race that has track	SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id
Group the records based on the number track id of race 1 that the number is 1	GROUP BY T1.track_id HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get of track	SELECT LOCATION FROM track
Keep the records that seating is greater than 90000	WHERE seating > 90000
Get of track	SELECT LOCATION FROM track
Keep the records that seating is less than 70000	WHERE seating < 70000
Get of track	SELECT LOCATION FROM track
Keep the records that seating is greater than 90000	WHERE seating > 90000
Get of track	SELECT LOCATION FROM track
Keep the records that seating is less than 70000	WHERE seating < 70000
Get the number of member	SELECT COUNT ( * ) FROM member
Keep the records that Membership card is Black	WHERE Membership_card = Black
Get the number and address of member	SELECT COUNT ( * ) , address FROM member
Group the records based on address	GROUP BY address
Get name of member	SELECT name FROM member
Keep the records that address is Harford OR address is Waterbury	WHERE address = Harford OR address = Waterbury
Get name and member id of member	SELECT name , member_id FROM member
Keep the records that Membership card is Black OR age is less than 30	WHERE Membership_card = Black OR age < 30
Get Time of purchase and age and address of member	SELECT Time_of_purchase , age , address FROM member
Order these records based on the Time of purchase	ORDER BY Time_of_purchase 
Get Membership card of member	SELECT Membership_card FROM member
Group the records based on the number Membership card 5 that the number is greater than 5	GROUP BY Membership_card HAVING COUNT ( * ) > 5 HAVING COUNT ( * ) > 5
Get address of member	SELECT address FROM member
Keep the records that age is less than 30	WHERE age < 30
Get address of member	SELECT address FROM member
Keep the records that age is greater than 40	WHERE age > 40
Get membership card of member	SELECT membership_card FROM member
Keep the records that address is Hartford	WHERE address = Hartford
Get membership card of member	SELECT membership_card FROM member
Keep the records that address is Waterbury	WHERE address = Waterbury
Get the number of member	SELECT COUNT ( * ) FROM member
Keep the records that address is not Hartford	WHERE address != Hartford
Get address of member	SELECT address FROM member
Get address of member	SELECT address FROM member
Keep the records that Membership card is Black	WHERE Membership_card = Black
Get address of shop	SELECT address FROM shop
Order these records based on the open year	ORDER BY open_year 
Get the average value of num of staff and the average value of score of shop	SELECT AVG ( num_of_staff ) , AVG ( score ) FROM shop
Get the average value of score of shop	SELECT AVG ( score ) FROM shop
Get shop id and address of shop	SELECT shop_id , address FROM shop
Keep the records that score is less than the first query result	WHERE score < ( the first query result ) 
Get shop id of happy hour	SELECT shop_id FROM happy_hour
Get address and num of staff of shop	SELECT address , num_of_staff FROM shop
Keep the records that shop id is not in the first query result	WHERE shop_id NOT IN ( the first query result ) 
Get address and shop id of shop that has happy hour	SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id
Keep the records that is May	WHERE MONTH = May
Get the number and shop id of happy hour	SELECT shop_id , COUNT ( * ) FROM happy_hour
Group the records based on shop id	GROUP BY shop_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of happy hour	SELECT MONTH FROM happy_hour
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of happy hour	SELECT MONTH FROM happy_hour
Group the records based on that the number is greater than 2	GROUP BY HAVING COUNT ( * ) > 2
Get the number of ALBUM	SELECT COUNT ( * ) FROM ALBUM
Get the number of ALBUM	SELECT COUNT ( * ) FROM ALBUM
Get Name of GENRE	SELECT Name FROM GENRE
Get Name of GENRE	SELECT Name FROM GENRE
Get all of CUSTOMER	SELECT * FROM CUSTOMER
Keep the records that State is NY	WHERE State = NY
Get all of CUSTOMER	SELECT * FROM CUSTOMER
Keep the records that State is NY	WHERE State = NY
Get FirstName and LastName of EMPLOYEE	SELECT FirstName , LastName FROM EMPLOYEE
Keep the records that City is Calgary	WHERE City = Calgary
Get FirstName and LastName of EMPLOYEE	SELECT FirstName , LastName FROM EMPLOYEE
Keep the records that City is Calgary	WHERE City = Calgary
Get BillingCountry of INVOICE	SELECT DISTINCT ( BillingCountry ) FROM INVOICE
Get BillingCountry of INVOICE	SELECT DISTINCT ( BillingCountry ) FROM INVOICE
Get Name of ARTIST	SELECT Name FROM ARTIST
Keep the records that Name is in the form of %a%	WHERE Name LIKE %a%
Get Name of ARTIST	SELECT Name FROM ARTIST
Keep the records that Name is in the form of %a%	WHERE Name LIKE %a%
Get Title of ALBUM that has ARTIST	SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Keep the records that Name of ARTIST is AC/DC	WHERE T2.Name = AC/DC
Get Title of ALBUM that has ARTIST	SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Keep the records that Name of ARTIST is AC/DC	WHERE T2.Name = AC/DC
Get the number of ALBUM that has ARTIST	SELECT COUNT ( * ) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Keep the records that Name of ARTIST is Metallica	WHERE T2.Name = Metallica
Get the number of ALBUM that has ARTIST	SELECT COUNT ( * ) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Keep the records that Name of ARTIST is Metallica	WHERE T2.Name = Metallica
Get Name of ALBUM that has ARTIST	SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Keep the records that Title of ALBUM is Balls to the Wall	WHERE T1.Title = Balls to the Wall
Get Name of ALBUM that has ARTIST	SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Keep the records that Title of ALBUM is Balls to the Wall	WHERE T1.Title = Balls to the Wall
Get Name of ALBUM that has ARTIST	SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Group the records based on Name of ARTIST	GROUP BY T2.Name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of ALBUM that has ARTIST	SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId
Group the records based on Name of ARTIST	GROUP BY T2.Name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of TRACK	SELECT Name FROM TRACK
Keep the records that Name is in the form of %you%	WHERE Name LIKE %you%
Get Name of TRACK	SELECT Name FROM TRACK
Keep the records that Name is in the form of %you%	WHERE Name LIKE %you%
Get the average value of UnitPrice of TRACK	SELECT AVG ( UnitPrice ) FROM TRACK
Get the average value of UnitPrice of TRACK	SELECT AVG ( UnitPrice ) FROM TRACK
Get the maximum value of Milliseconds and the minimum value of Milliseconds of TRACK	SELECT MAX ( Milliseconds ) , MIN ( Milliseconds ) FROM TRACK
Get the maximum value of Milliseconds and the minimum value of Milliseconds of TRACK	SELECT MAX ( Milliseconds ) , MIN ( Milliseconds ) FROM TRACK
Get the number and Title and AlbumID of ALBUM that has TRACK	SELECT T1.Title , T2.AlbumID , COUNT ( * ) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId
Group the records based on AlbumID of TRACK	GROUP BY T2.AlbumID
Get the number and Title and AlbumID of ALBUM that has TRACK	SELECT T1.Title , T2.AlbumID , COUNT ( * ) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId
Group the records based on AlbumID of TRACK	GROUP BY T2.AlbumID
Get Name of GENRE that has TRACK	SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Group the records based on GenreId of TRACK	GROUP BY T2.GenreId
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of GENRE that has TRACK	SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Group the records based on GenreId of TRACK	GROUP BY T2.GenreId
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of MEDIATYPE that has TRACK	SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId
Group the records based on MediaTypeId of TRACK	GROUP BY T2.MediaTypeId
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Name of MEDIATYPE that has TRACK	SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId
Group the records based on MediaTypeId of TRACK	GROUP BY T2.MediaTypeId
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Title and AlbumID of ALBUM that has TRACK	SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId
Keep the records that UnitPrice of TRACK is greater than 1	WHERE T2.UnitPrice > 1 
Group the records based on AlbumID of TRACK	GROUP BY T2.AlbumID
Get Title and AlbumID of ALBUM that has TRACK	SELECT T1.Title , T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId
Keep the records that UnitPrice of TRACK is greater than 1	WHERE T2.UnitPrice > 1 
Group the records based on AlbumID of TRACK	GROUP BY T2.AlbumID
Get the number of GENRE that has TRACK	SELECT COUNT ( * ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Rock	WHERE T1.Name = Rock
Get the number of GENRE that has TRACK	SELECT COUNT ( * ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Rock	WHERE T1.Name = Rock
Get the average value of UnitPrice of GENRE that has TRACK	SELECT AVG ( UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Jazz	WHERE T1.Name = Jazz
Get the average value of UnitPrice of GENRE that has TRACK	SELECT AVG ( UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Jazz	WHERE T1.Name = Jazz
Get FirstName and LastName of CUSTOMER	SELECT FirstName , LastName FROM CUSTOMER
Keep the records that Email is luisg@embraer.com.br	WHERE Email = luisg@embraer.com.br
Get FirstName and LastName of CUSTOMER	SELECT FirstName , LastName FROM CUSTOMER
Keep the records that Email is luisg@embraer.com.br	WHERE Email = luisg@embraer.com.br
Get the number of CUSTOMER	SELECT COUNT ( * ) FROM CUSTOMER
Keep the records that Email is in the form of %gmail.com%	WHERE Email LIKE %gmail.com%
Get the number of CUSTOMER	SELECT COUNT ( * ) FROM CUSTOMER
Keep the records that Email is in the form of %gmail.com%	WHERE Email LIKE %gmail.com%
Get FirstName and LastName of CUSTOMER that has EMPLOYEE	SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Keep the records that FirstName of CUSTOMER is Leonie	WHERE T1.FirstName = Leonie
Get FirstName and LastName of CUSTOMER that has EMPLOYEE	SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Keep the records that FirstName of CUSTOMER is Leonie	WHERE T1.FirstName = Leonie
Get City of CUSTOMER that has EMPLOYEE	SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Keep the records that PostalCode of CUSTOMER is 70174	WHERE T1.PostalCode = 70174
Get City of CUSTOMER that has EMPLOYEE	SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Keep the records that PostalCode of CUSTOMER is 70174	WHERE T1.PostalCode = 70174
Get the number of distinct city of EMPLOYEE	SELECT COUNT ( DISTINCT city ) FROM EMPLOYEE
Get the number of distinct city of EMPLOYEE	SELECT COUNT ( DISTINCT city ) FROM EMPLOYEE
Get InvoiceDate of CUSTOMER that has INVOICE	SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that FirstName of CUSTOMER is Astrid AND LastName is Gruber	WHERE T1.FirstName = Astrid AND LastName = Gruber
Get InvoiceDate of CUSTOMER that has INVOICE	SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that FirstName of CUSTOMER is Astrid AND LastName is Gruber	WHERE T1.FirstName = Astrid AND LastName = Gruber
Get LastName of CUSTOMER	SELECT LastName FROM CUSTOMER
Get LastName of CUSTOMER that has Invoice	SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that total of Invoice is greater than 20	WHERE T2.total > 20
Get LastName of CUSTOMER	SELECT LastName FROM CUSTOMER
Get LastName of CUSTOMER that has Invoice	SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that total of Invoice is greater than 20	WHERE T2.total > 20
Get FirstName of CUSTOMER that has INVOICE	SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that country of CUSTOMER is Brazil	WHERE T1.country = Brazil
Get FirstName of CUSTOMER that has INVOICE	SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that country of CUSTOMER is Brazil	WHERE T1.country = Brazil
Get Address of CUSTOMER that has INVOICE	SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that country of CUSTOMER is Germany	WHERE T1.country = Germany
Get Address of CUSTOMER that has INVOICE	SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId
Keep the records that country of CUSTOMER is Germany	WHERE T1.country = Germany
Get Phone of EMPLOYEE	SELECT Phone FROM EMPLOYEE
Get Phone of EMPLOYEE	SELECT Phone FROM EMPLOYEE
Get the number of MEDIATYPE that has TRACK	SELECT COUNT ( * ) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId
Keep the records that Name of MEDIATYPE is AAC audio file	WHERE T1.Name = AAC audio file
Get the number of MEDIATYPE that has TRACK	SELECT COUNT ( * ) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId
Keep the records that Name of MEDIATYPE is AAC audio file	WHERE T1.Name = AAC audio file
Get the average value of Milliseconds of GENRE that has TRACK	SELECT AVG ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Latin OR Name of GENRE is Pop	WHERE T1.Name = Latin OR T1.Name = Pop
Get the average value of Milliseconds of GENRE that has TRACK	SELECT AVG ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Latin OR Name of GENRE is Pop	WHERE T1.Name = Latin OR T1.Name = Pop
Get FirstName and SupportRepId of CUSTOMER that has EMPLOYEE	SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Group the records based on the number SupportRepId of CUSTOMER 10 that the number is greater than or equal to 10	GROUP BY T1.SupportRepId HAVING COUNT ( * ) >= 10 HAVING COUNT ( * ) >= 10
Get FirstName and SupportRepId of CUSTOMER that has EMPLOYEE	SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Group the records based on the number SupportRepId of CUSTOMER 10 that the number is greater than or equal to 10	GROUP BY T1.SupportRepId HAVING COUNT ( * ) >= 10 HAVING COUNT ( * ) >= 10
Get LastName of CUSTOMER that has EMPLOYEE	SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Group the records based on the number SupportRepId of CUSTOMER 20 that the number is less than or equal to 20	GROUP BY T1.SupportRepId HAVING COUNT ( * ) <= 20 HAVING COUNT ( * ) <= 20
Get LastName of CUSTOMER that has EMPLOYEE	SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId
Group the records based on the number SupportRepId of CUSTOMER 20 that the number is less than or equal to 20	GROUP BY T1.SupportRepId HAVING COUNT ( * ) <= 20 HAVING COUNT ( * ) <= 20
Get Title of ALBUM	SELECT Title FROM ALBUM
Order these records based on the Title	ORDER BY Title 
Get Title of ALBUM	SELECT Title FROM ALBUM
Order these records based on the Title	ORDER BY Title 
Get Name and ArtistId of ALBUM that has ARTIST	SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID
Group the records based on the number ArtistId of ALBUM 3 that the number is greater than or equal to 3	GROUP BY T1.ArtistId HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Order these records based on the Name of ARTIST	ORDER BY T2.Name 
Get Name and ArtistId of ALBUM that has ARTIST	SELECT T2.Name , T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID
Group the records based on the number ArtistId of ALBUM 3 that the number is greater than or equal to 3	GROUP BY T1.ArtistId HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Order these records based on the Name of ARTIST	ORDER BY T2.Name 
Get Name of ARTIST	SELECT Name FROM ARTIST
Get Name of ALBUM that has ARTIST	SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2
Get Name of ARTIST	SELECT Name FROM ARTIST
Get Name of ALBUM that has ARTIST	SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2
Get the average value of UnitPrice of GENRE that has TRACK	SELECT AVG ( T2.UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Rock	WHERE T1.Name = Rock
Get the average value of UnitPrice of GENRE that has TRACK	SELECT AVG ( T2.UnitPrice ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Rock	WHERE T1.Name = Rock
Get the maximum value of Milliseconds and the minimum value of Milliseconds of GENRE that has TRACK	SELECT MAX ( Milliseconds ) , MIN ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Pop	WHERE T1.Name = Pop
Get the maximum value of Milliseconds and the minimum value of Milliseconds of GENRE that has TRACK	SELECT MAX ( Milliseconds ) , MIN ( Milliseconds ) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId
Keep the records that Name of GENRE is Pop	WHERE T1.Name = Pop
Get BirthDate of EMPLOYEE	SELECT BirthDate FROM EMPLOYEE
Keep the records that City is Edmonton	WHERE City = Edmonton
Get BirthDate of EMPLOYEE	SELECT BirthDate FROM EMPLOYEE
Keep the records that City is Edmonton	WHERE City = Edmonton
Get UnitPrice of TRACK	SELECT DISTINCT ( UnitPrice ) FROM TRACK
Get UnitPrice of TRACK	SELECT DISTINCT ( UnitPrice ) FROM TRACK
Get artistid of ALBUM	SELECT artistid FROM ALBUM
Get the number of ARTIST	SELECT COUNT ( * ) FROM ARTIST
Keep the records that artistid is not in the first query result	WHERE artistid NOT IN ( the first query result ) 
Get artistid of ALBUM	SELECT artistid FROM ALBUM
Get the number of ARTIST	SELECT COUNT ( * ) FROM ARTIST
Keep the records that artistid is not in the first query result	WHERE artistid NOT IN ( the first query result ) 
Get Title of Album that has Track and Genre	SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID
Keep the records that Name of Genre is Reggae	WHERE T3.Name = Reggae
Get Title of Album that has Track and Genre	SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID
Keep the records that Name of Genre is Rock	WHERE T3.Name = Rock
Get Title of Album that has Track and Genre	SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID
Keep the records that Name of Genre is Reggae	WHERE T3.Name = Reggae
Get Title of Album that has Track and Genre	SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID
Keep the records that Name of Genre is Rock	WHERE T3.Name = Rock
Get customer phone of available policies	SELECT customer_phone FROM available_policies
Get customer phone of available policies	SELECT customer_phone FROM available_policies
Get customer phone of available policies	SELECT customer_phone FROM available_policies
Keep the records that policy type code is Life Insurance	WHERE policy_type_code = Life Insurance
Get customer phone of available policies	SELECT customer_phone FROM available_policies
Keep the records that policy type code is Life Insurance	WHERE policy_type_code = Life Insurance
Get policy type code of available policies	SELECT policy_type_code FROM available_policies
Group the records based on policy type code	GROUP BY policy_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of available policies	SELECT policy_type_code FROM available_policies
Group the records based on policy type code	GROUP BY policy_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of available policies	SELECT policy_type_code FROM available_policies
Group the records based on policy type code	GROUP BY policy_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer phone of available policies	SELECT customer_phone FROM available_policies
Keep the records that policy type code is the first query result	WHERE policy_type_code = ( the first query result ) 
Get policy type code of available policies	SELECT policy_type_code FROM available_policies
Group the records based on policy type code	GROUP BY policy_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer phone of available policies	SELECT customer_phone FROM available_policies
Keep the records that policy type code is the first query result	WHERE policy_type_code = ( the first query result ) 
Get policy type code of available policies	SELECT policy_type_code FROM available_policies
Group the records based on the number policy type code 4 that the number is greater than 4	GROUP BY policy_type_code HAVING COUNT ( * ) > 4 HAVING COUNT ( * ) > 4
Get policy type code of available policies	SELECT policy_type_code FROM available_policies
Group the records based on the number policy type code 4 that the number is greater than 4	GROUP BY policy_type_code HAVING COUNT ( * ) > 4 HAVING COUNT ( * ) > 4
Get the SUM of settlement amount and the average value of settlement amount of settlements	SELECT SUM ( settlement_amount ) , AVG ( settlement_amount ) FROM settlements
Get the SUM of settlement amount and the average value of settlement amount of settlements	SELECT SUM ( settlement_amount ) , AVG ( settlement_amount ) FROM settlements
Get service name of first notification of loss that has services	SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id
Group the records based on the number service id of first notification of loss 2 that the number is greater than 2	GROUP BY t1.service_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get service name of first notification of loss that has services	SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id
Group the records based on the number service id of first notification of loss 2 that the number is greater than 2	GROUP BY t1.service_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Effective Date of claims that has settlements	SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id
Group the records based on claim id of claims	GROUP BY t1.claim_id
Order these records based on the the SUM of settlement amount of settlements and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t2.settlement_amount ) DESC LIMIT 1
Get Effective Date of claims that has settlements	SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id
Group the records based on claim id of claims	GROUP BY t1.claim_id
Order these records based on the the SUM of settlement amount of settlements and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t2.settlement_amount ) DESC LIMIT 1
Get the number of customers that has customers policies	SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is Dayana Robel	WHERE t1.customer_name = Dayana Robel
Get the number of customers that has customers policies	SELECT COUNT ( * ) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is Dayana Robel	WHERE t1.customer_name = Dayana Robel
Get customer name of customers that has customers policies	SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name of customers that has customers policies	SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of customers that has customers policies and available policies	SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id
Keep the records that customer name of customers is Dayana Robel	WHERE t1.customer_name = Dayana Robel
Get policy type code of customers that has customers policies and available policies	SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id
Keep the records that customer name of customers is Dayana Robel	WHERE t1.customer_name = Dayana Robel
Get customer name of customers that has customers policies	SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of customers that has customers policies and available policies	SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id
Keep the records that customer name of customers is the first query result	WHERE t1.customer_name = ( the first query result ) 
Get customer name of customers that has customers policies	SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of customers that has customers policies and available policies	SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id
Keep the records that customer name of customers is the first query result	WHERE t1.customer_name = ( the first query result ) 
Get service name of services	SELECT service_name FROM services
Order these records based on the service name	ORDER BY service_name 
Get service name of services	SELECT service_name FROM services
Order these records based on the service name	ORDER BY service_name 
Get the number of services	SELECT COUNT ( * ) FROM services
Get the number of services	SELECT COUNT ( * ) FROM services
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has first notification of loss	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has first notification of loss	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2
Get customer name of customers that has first notification of loss and services	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id
Keep the records that service name of services is Close a policy OR service name of services is Upgrade a policy	WHERE t3.service_name = Close a policy OR t3.service_name = Upgrade a policy
Get customer name of customers that has first notification of loss and services	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id
Keep the records that service name of services is Close a policy OR service name of services is Upgrade a policy	WHERE t3.service_name = Close a policy OR t3.service_name = Upgrade a policy
Get customer name of customers that has first notification of loss and services	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id
Keep the records that service name of services is Close a policy	WHERE t3.service_name = Close a policy
Get customer name of customers that has first notification of loss and services	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id
Keep the records that service name of services is New policy application	WHERE t3.service_name = New policy application
Get customer name of customers that has first notification of loss and services	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id
Keep the records that service name of services is Close a policy	WHERE t3.service_name = Close a policy
Get customer name of customers that has first notification of loss and services	SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id
Keep the records that service name of services is New policy application	WHERE t3.service_name = New policy application
Get customer id of customers	SELECT customer_id FROM customers
Keep the records that customer name is in the form of %Diana%	WHERE customer_name LIKE %Diana%
Get customer id of customers	SELECT customer_id FROM customers
Keep the records that customer name is in the form of %Diana%	WHERE customer_name LIKE %Diana%
Get the maximum value of settlement amount and the minimum value of settlement amount of settlements	SELECT MAX ( settlement_amount ) , MIN ( settlement_amount ) FROM settlements
Get the maximum value of settlement amount and the minimum value of settlement amount of settlements	SELECT MAX ( settlement_amount ) , MIN ( settlement_amount ) FROM settlements
Get customer id and customer name of customers	SELECT customer_id , customer_name FROM customers
Order these records based on the customer id and sort them in ascending ORDER	ORDER BY customer_id ASC 
Get customer id and customer name of customers	SELECT customer_id , customer_name FROM customers
Order these records based on the customer id and sort them in ascending ORDER	ORDER BY customer_id ASC 
Get date opened and date closed of customers that has customers policies	SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is in the form of %Diana%	WHERE t1.customer_name LIKE %Diana%
Get date opened and date closed of customers that has customers policies	SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is in the form of %Diana%	WHERE t1.customer_name LIKE %Diana%
Get the number of enzyme	SELECT COUNT ( * ) FROM enzyme
Get the number of enzyme	SELECT COUNT ( * ) FROM enzyme
Get name of enzyme	SELECT name FROM enzyme
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name of enzyme	SELECT name FROM enzyme
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name of enzyme	SELECT name , LOCATION FROM enzyme
Get name of enzyme	SELECT name , LOCATION FROM enzyme
Get the maximum value of OMIM of enzyme	SELECT MAX ( OMIM ) FROM enzyme
Get the maximum value of OMIM of enzyme	SELECT MAX ( OMIM ) FROM enzyme
Get product and chromosome and porphyria of enzyme	SELECT product , chromosome , porphyria FROM enzyme
Keep the records that is Cytosol	WHERE LOCATION = Cytosol
Get product and chromosome and porphyria of enzyme	SELECT product , chromosome , porphyria FROM enzyme
Keep the records that is Cytosol	WHERE LOCATION = Cytosol
Get name of enzyme	SELECT name FROM enzyme
Keep the records that product is not Heme	WHERE product != Heme
Get name of enzyme	SELECT name FROM enzyme
Keep the records that product is not Heme	WHERE product != Heme
Get name and trade name of medicine	SELECT name , trade_name FROM medicine
Keep the records that FDA approved is Yes	WHERE FDA_approved = Yes
Get name and trade name of medicine	SELECT name , trade_name FROM medicine
Keep the records that FDA approved is Yes	WHERE FDA_approved = Yes
Get name of enzyme that has medicine enzyme interaction AND medicine	SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id
Keep the records that name of medicine is Amisulpride AND interaction type of medicine enzyme interaction is inhibitor	WHERE T3.name = Amisulpride AND T2.interaction_type = inhibitor
Get name of enzyme that has medicine enzyme interaction AND medicine	SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id
Keep the records that name of medicine is Amisulpride AND interaction type of medicine enzyme interaction is inhibitor	WHERE T3.name = Amisulpride AND T2.interaction_type = inhibitor
Get id and Name of medicine that has medicine enzyme interaction	SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Group the records based on the number id of medicine 2 that the number is greater than or equal to 2	GROUP BY T1.id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get id and Name of medicine that has medicine enzyme interaction	SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Group the records based on the number id of medicine 2 that the number is greater than or equal to 2	GROUP BY T1.id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get id and Name and FDA approved of medicine that has medicine enzyme interaction	SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Group the records based on id of medicine	GROUP BY T1.id
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get id and Name and FDA approved of medicine that has medicine enzyme interaction	SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Group the records based on id of medicine	GROUP BY T1.id
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get id and name of enzyme that has medicine enzyme interaction	SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id
Keep the records that interaction type of medicine enzyme interaction is activitor	WHERE T2.interaction_type = activitor 
Group the records based on id of enzyme	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get id and name of enzyme that has medicine enzyme interaction	SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id
Keep the records that interaction type of medicine enzyme interaction is activitor	WHERE T2.interaction_type = activitor 
Group the records based on id of enzyme	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get interaction type of medicine enzyme interaction that has medicine AND enzyme	SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id
Keep the records that name of enzyme is ALA synthase AND name of medicine is Aripiprazole	WHERE T3.name = ALA synthase AND T2.name = Aripiprazole
Get interaction type of medicine enzyme interaction that has medicine AND enzyme	SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id
Keep the records that name of enzyme is ALA synthase AND name of medicine is Aripiprazole	WHERE T3.name = ALA synthase AND T2.name = Aripiprazole
Get the number and interaction type of medicine enzyme interaction	SELECT interaction_type , COUNT ( * ) FROM medicine_enzyme_interaction
Group the records based on interaction type	GROUP BY interaction_type
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and interaction type of medicine enzyme interaction	SELECT interaction_type , COUNT ( * ) FROM medicine_enzyme_interaction
Group the records based on interaction type	GROUP BY interaction_type
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of medicine	SELECT COUNT ( * ) FROM medicine
Keep the records that FDA approved is No	WHERE FDA_approved = No
Get the number of medicine	SELECT COUNT ( * ) FROM medicine
Keep the records that FDA approved is No	WHERE FDA_approved = No
Get enzyme id of medicine enzyme interaction	SELECT enzyme_id FROM medicine_enzyme_interaction
Get the number of enzyme	SELECT COUNT ( * ) FROM enzyme
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get enzyme id of medicine enzyme interaction	SELECT enzyme_id FROM medicine_enzyme_interaction
Get the number of enzyme	SELECT COUNT ( * ) FROM enzyme
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get id and trade name of medicine that has medicine enzyme interaction	SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Group the records based on the number id of medicine 3 that the number is greater than or equal to 3	GROUP BY T1.id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get id and trade name of medicine that has medicine enzyme interaction	SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Group the records based on the number id of medicine 3 that the number is greater than or equal to 3	GROUP BY T1.id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get name and location and product of enzyme that has medicine enzyme interaction	SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id
Keep the records that interaction type of medicine enzyme interaction is inhibitor	WHERE T2.interaction_type = inhibitor
Get name and location and product of enzyme that has medicine enzyme interaction	SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id
Keep the records that interaction type of medicine enzyme interaction is inhibitor	WHERE T2.interaction_type = inhibitor
Get name and trade name of medicine that has medicine enzyme interaction	SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Keep the records that interaction type is inhibitor	WHERE interaction_type = inhibitor
Get name and trade name of medicine that has medicine enzyme interaction	SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Keep the records that interaction type is activitor	WHERE interaction_type = activitor
Get name and trade name of medicine that has medicine enzyme interaction	SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Keep the records that interaction type is inhibitor	WHERE interaction_type = inhibitor
Get name and trade name of medicine that has medicine enzyme interaction	SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id
Keep the records that interaction type is activitor	WHERE interaction_type = activitor
Get name and trade name of medicine	SELECT name , trade_name FROM medicine
Get name and trade name of medicine that has medicine enzyme interaction and enzyme	SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id
Keep the records that product of enzyme is Protoporphyrinogen IX	WHERE T3.product = Protoporphyrinogen IX
Get name and trade name of medicine	SELECT name , trade_name FROM medicine
Get name and trade name of medicine that has medicine enzyme interaction and enzyme	SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id
Keep the records that product of enzyme is Protoporphyrinogen IX	WHERE T3.product = Protoporphyrinogen IX
Get the number of distinct FDA approved of medicine	SELECT COUNT ( DISTINCT FDA_approved ) FROM medicine
Get the number of distinct FDA approved of medicine	SELECT COUNT ( DISTINCT FDA_approved ) FROM medicine
Get name of enzyme	SELECT name FROM enzyme
Keep the records that name is in the form of %ALA%	WHERE name LIKE %ALA%
Get name of enzyme	SELECT name FROM enzyme
Keep the records that name is in the form of %ALA%	WHERE name LIKE %ALA%
Get the number and trade name of medicine	SELECT trade_name , COUNT ( * ) FROM medicine
Group the records based on trade name	GROUP BY trade_name
Get the number and trade name of medicine	SELECT trade_name , COUNT ( * ) FROM medicine
Group the records based on trade name	GROUP BY trade_name
Get school and nickname of university	SELECT school , nickname FROM university
Order these records based on the founded	ORDER BY founded 
Get school and nickname of university	SELECT school , nickname FROM university
Order these records based on the founded	ORDER BY founded 
Get school of university	SELECT school , LOCATION FROM university
Keep the records that affiliation is Public	WHERE affiliation = Public
Get school of university	SELECT school , LOCATION FROM university
Keep the records that affiliation is Public	WHERE affiliation = Public
Get founded of university	SELECT founded FROM university
Order these records based on the enrollment and sort them in descending order, and return the top 1 record	ORDER BY enrollment DESC LIMIT 1
Get founded of university	SELECT founded FROM university
Order these records based on the enrollment and sort them in descending order, and return the top 1 record	ORDER BY enrollment DESC LIMIT 1
Get founded of university	SELECT founded FROM university
Keep the records that affiliation is not Public	WHERE affiliation != Public 
Order these records based on the founded and sort them in descending order, and return the top 1 record	ORDER BY founded DESC LIMIT 1
Get founded of university	SELECT founded FROM university
Keep the records that affiliation is not Public	WHERE affiliation != Public 
Order these records based on the founded and sort them in descending order, and return the top 1 record	ORDER BY founded DESC LIMIT 1
Get the number of distinct school id of basketball match	SELECT COUNT ( DISTINCT school_id ) FROM basketball_match
Get the number of distinct school id of basketball match	SELECT COUNT ( DISTINCT school_id ) FROM basketball_match
Get acc percent of basketball match	SELECT acc_percent FROM basketball_match
Order these records based on the acc percent and sort them in descending order, and return the top 1 record	ORDER BY acc_percent DESC LIMIT 1
Get acc percent of basketball match	SELECT acc_percent FROM basketball_match
Order these records based on the acc percent and sort them in descending order, and return the top 1 record	ORDER BY acc_percent DESC LIMIT 1
Get Primary conference of university that has basketball match	SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Order these records based on the acc percent of basketball match, and return the top 1 record	ORDER BY t2.acc_percent LIMIT 1
Get Primary conference of university that has basketball match	SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Order these records based on the acc percent of basketball match, and return the top 1 record	ORDER BY t2.acc_percent LIMIT 1
Get team name and ACC Regular Season of university that has basketball match	SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Order these records based on the founded of university, and return the top 1 record	ORDER BY t1.founded LIMIT 1
Get team name and ACC Regular Season of university that has basketball match	SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Order these records based on the founded of university, and return the top 1 record	ORDER BY t1.founded LIMIT 1
Get All Games and location of university that has basketball match	SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Keep the records that team name is Clemson	WHERE team_name = Clemson
Get All Games and location of university that has basketball match	SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Keep the records that team name is Clemson	WHERE team_name = Clemson
Get the average value of enrollment of university	SELECT AVG ( enrollment ) FROM university
Keep the records that founded is less than 1850	WHERE founded < 1850
Get the average value of enrollment of university	SELECT AVG ( enrollment ) FROM university
Keep the records that founded is less than 1850	WHERE founded < 1850
Get enrollment and primary conference of university	SELECT enrollment , primary_conference FROM university
Order these records based on the founded, and return the top 1 record	ORDER BY founded LIMIT 1
Get enrollment and primary conference of university	SELECT enrollment , primary_conference FROM university
Order these records based on the founded, and return the top 1 record	ORDER BY founded LIMIT 1
Get the SUM of enrollment and the minimum value of enrollment of university	SELECT SUM ( enrollment ) , MIN ( enrollment ) FROM university
Get the SUM of enrollment and the minimum value of enrollment of university	SELECT SUM ( enrollment ) , MIN ( enrollment ) FROM university
Get the SUM of enrollment and affiliation of university	SELECT SUM ( enrollment ) , affiliation FROM university
Group the records based on affiliation	GROUP BY affiliation
Get the SUM of enrollment and affiliation of university	SELECT SUM ( enrollment ) , affiliation FROM university
Group the records based on affiliation	GROUP BY affiliation
Get school id of basketball match	SELECT school_id FROM basketball_match
Get the number of university	SELECT COUNT ( * ) FROM university
Keep the records that school id is not in the first query result	WHERE school_id NOT IN ( the first query result ) 
Get school id of basketball match	SELECT school_id FROM basketball_match
Get the number of university	SELECT COUNT ( * ) FROM university
Keep the records that school id is not in the first query result	WHERE school_id NOT IN ( the first query result ) 
Get school of university	SELECT school FROM university
Keep the records that founded is greater than 1850 OR affiliation is Public	WHERE founded > 1850 OR affiliation = Public
Get school of university	SELECT school FROM university
Keep the records that founded is greater than 1850 OR affiliation is Public	WHERE founded > 1850 OR affiliation = Public
Get the number of distinct affiliation of university	SELECT COUNT ( DISTINCT affiliation ) FROM university
Get the number of distinct affiliation of university	SELECT COUNT ( DISTINCT affiliation ) FROM university
Get the number of university	SELECT COUNT ( * ) FROM university
Keep the records that is in the form of %NY%	WHERE LOCATION LIKE %NY%
Get the number of university	SELECT COUNT ( * ) FROM university
Keep the records that is in the form of %NY%	WHERE LOCATION LIKE %NY%
Get the average value of enrollment of university	SELECT AVG ( enrollment ) FROM university
Get team name of university that has basketball match	SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Keep the records that enrollment is less than the first query result	WHERE enrollment < ( the first query result ) 
Get the average value of enrollment of university	SELECT AVG ( enrollment ) FROM university
Get team name of university that has basketball match	SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id
Keep the records that enrollment is less than the first query result	WHERE enrollment < ( the first query result ) 
Get the number and affiliation of university	SELECT COUNT ( * ) , affiliation FROM university
Keep the records that enrollment is greater than 20000	WHERE enrollment > 20000 
Group the records based on affiliation	GROUP BY affiliation
Get the number and affiliation of university	SELECT COUNT ( * ) , affiliation FROM university
Keep the records that enrollment is greater than 20000	WHERE enrollment > 20000 
Group the records based on affiliation	GROUP BY affiliation
Get the SUM of Enrollment and affiliation of university	SELECT SUM ( Enrollment ) , affiliation FROM university
Keep the records that founded is greater than 1850	WHERE founded > 1850 
Group the records based on affiliation	GROUP BY affiliation
Get the SUM of Enrollment and affiliation of university	SELECT SUM ( Enrollment ) , affiliation FROM university
Keep the records that founded is greater than 1850	WHERE founded > 1850 
Group the records based on affiliation	GROUP BY affiliation
Get the maximum value of Enrollment of university	SELECT MAX ( Enrollment ) FROM university
Get the maximum value of Enrollment of university	SELECT MAX ( Enrollment ) FROM university
Get all of basketball match	SELECT * FROM basketball_match
Get all of basketball match	SELECT * FROM basketball_match
Get team name of basketball match	SELECT team_name FROM basketball_match
Order these records based on the All Home and sort them in descending ORDER	ORDER BY All_Home DESC 
Get team name of basketball match	SELECT team_name FROM basketball_match
Order these records based on the All Home and sort them in descending ORDER	ORDER BY All_Home DESC 
Get Model name of chip model	SELECT Model_name FROM chip_model
Keep the records that Launch year is between 200 2X123X2004	WHERE Launch_year BETWEEN 2002 AND 2004
Get Model name and RAM MiB of chip model	SELECT Model_name , RAM_MiB FROM chip_model
Order these records based on the RAM MiB and sort them in ascending order, and return the top 1 record	ORDER BY RAM_MiB ASC LIMIT 1
Get chip model and screen mode of phone	SELECT chip_model , screen_mode FROM phone
Keep the records that Hardware Model name is LG-P760	WHERE Hardware_Model_name = LG-P760
Get the number of phone	SELECT COUNT ( * ) FROM phone
Keep the records that Company name is Nokia Corporation	WHERE Company_name = Nokia Corporation
Get the maximum value of RAM MiB and the minimum value of RAM MiB of chip model that has phone	SELECT MAX ( T1.RAM_MiB ) , MIN ( T1.RAM_MiB ) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model
Keep the records that Company name of phone is Nokia Corporation	WHERE T2.Company_name = Nokia Corporation
Get the average value of ROM MiB of chip model that has phone	SELECT AVG ( T1.ROM_MiB ) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model
Keep the records that Company name of phone is Nokia Corporation	WHERE T2.Company_name = Nokia Corporation
Get Hardware Model name and Company name of chip model that has phone	SELECT T2.Hardware_Model_name , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model
Keep the records that Launch year of chip model is 2002 OR RAM MiB of chip model is greater than 32	WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32
Get Hardware Model name and Company name of phone	SELECT Hardware_Model_name , Company_name FROM phone
Keep the records that Accreditation type is in the form of Full	WHERE Accreditation_type LIKE Full
Get Char cells and Pixels and Hardware colours of screen mode that has phone	SELECT T1.Char_cells , T1.Pixels , T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
Keep the records that Hardware Model name of phone is LG-P760	WHERE T2.Hardware_Model_name = LG-P760
Get Hardware Model name and Company name of screen mode that has phone	SELECT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
Keep the records that Type of screen mode is Graphics	WHERE T1.Type = Graphics
Get the number and Company name of phone	SELECT Company_name , COUNT ( * ) FROM phone
Group the records based on Company name	GROUP BY Company_name
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Company name of phone	SELECT Company_name FROM phone
Group the records based on the number Company name 1 that the number is greater than 1	GROUP BY Company_name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the maximum value of used kb and the minimum value of used kb and the average value of used kb of screen mode	SELECT MAX ( used_kb ) , MIN ( used_kb ) , AVG ( used_kb ) FROM screen_mode
Get Hardware Model name of chip model that has phone	SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model
Keep the records that Launch year of chip model is 2002	WHERE T1.Launch_year = 2002 
Order these records based on the RAM MiB of chip model and sort them in descending order, and return the top 1 record	ORDER BY T1.RAM_MiB DESC LIMIT 1
Get WiFi and Type of chip model that has phone and screen mode	SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode
Keep the records that Hardware Model name of phone is LG-P760	WHERE T2.Hardware_Model_name = LG-P760
Get Hardware Model name of chip model that has phone and screen mode	SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode
Keep the records that Type of screen mode is Text OR RAM MiB of chip model is greater than 32	WHERE T3.Type = Text OR T1.RAM_MiB > 32
Get Hardware Model name of screen mode that has phone	SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
Keep the records that Type of screen mode is Graphics OR Company name of T2 is Nokia Corporation	WHERE T1.Type = Graphics OR t2.Company_name = Nokia Corporation
Get Hardware Model name of screen mode that has phone	SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
Keep the records that Company name of T2 is Nokia Corporation AND Type of screen mode is not Text	WHERE t2.Company_name = Nokia Corporation AND T1.Type != Text
Get Hardware Model name AND Company name of screen mode that has phone	SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode
Keep the records that used kb of screen mode is between 1 X15	WHERE T1.used_kb BETWEEN 10 AND 15
Get the number and Accreditation type of phone	SELECT Accreditation_type , COUNT ( * ) FROM phone
Group the records based on Accreditation type	GROUP BY Accreditation_type
Get the number and Accreditation type of phone	SELECT Accreditation_type , COUNT ( * ) FROM phone
Group the records based on Accreditation type	GROUP BY Accreditation_type
Get Accreditation level of phone	SELECT Accreditation_level FROM phone
Group the records based on the number Accreditation level 3 that the number is greater than 3	GROUP BY Accreditation_level HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get all of chip model	SELECT * FROM chip_model
Get the number of chip model	SELECT COUNT ( * ) FROM chip_model
Keep the records that wifi is No	WHERE wifi = No
Get the number of chip model	SELECT COUNT ( * ) FROM chip_model
Keep the records that wifi is No	WHERE wifi = No
Get model name of chip model	SELECT model_name FROM chip_model
Order these records based on the launch year	ORDER BY launch_year 
Get chip model of phone	SELECT chip_model FROM phone
Get the average value of RAM MiB of chip model	SELECT AVG ( RAM_MiB ) FROM chip_model
Keep the records that model name is not in the first query result	WHERE model_name NOT IN ( the first query result ) 
Get model name of chip model	SELECT model_name FROM chip_model
Get chip model of phone	SELECT chip_model FROM phone
Keep the records that Accreditation type is Full	WHERE Accreditation_type = Full
Get pixels of screen mode that has phone	SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode
Keep the records that Accreditation type of phone is Provisional	WHERE t2.Accreditation_type = Provisional
Get pixels of screen mode that has phone	SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode
Keep the records that Accreditation type of phone is Full	WHERE t2.Accreditation_type = Full
Get the number of country	SELECT COUNT ( * ) FROM country
Get the number of country	SELECT COUNT ( * ) FROM country
Get Country name and Capital of country	SELECT Country_name , Capital FROM country
Get Country name and Capital of country	SELECT Country_name , Capital FROM country
Get Official native language of country	SELECT Official_native_language FROM country
Keep the records that Official native language is in the form of %English%	WHERE Official_native_language LIKE %English%
Get Official native language of country	SELECT Official_native_language FROM country
Keep the records that Official native language is in the form of %English%	WHERE Official_native_language LIKE %English%
Get of match season	SELECT DISTINCT POSITION FROM match_season
Get of match season	SELECT DISTINCT POSITION FROM match_season
Get Player of match season	SELECT Player FROM match_season
Keep the records that College is UCLA	WHERE College = UCLA
Get Player of match season	SELECT Player FROM match_season
Keep the records that College is UCLA	WHERE College = UCLA
Get of match season	SELECT DISTINCT POSITION FROM match_season
Keep the records that College is UCLA OR College is Duke	WHERE College = UCLA OR College = Duke
Get of match season	SELECT DISTINCT POSITION FROM match_season
Keep the records that College is UCLA OR College is Duke	WHERE College = UCLA OR College = Duke
Get Draft Pick Number and Draft Class of match season	SELECT Draft_Pick_Number , Draft_Class FROM match_season
Keep the records that is Defender	WHERE POSITION = Defender
Get Draft Pick Number and Draft Class of match season	SELECT Draft_Pick_Number , Draft_Class FROM match_season
Keep the records that is Defender	WHERE POSITION = Defender
Get the number of distinct Team of match season	SELECT COUNT ( DISTINCT Team ) FROM match_season
Get the number of distinct Team of match season	SELECT COUNT ( DISTINCT Team ) FROM match_season
Get Player and Years Played of Player	SELECT Player , Years_Played FROM player
Get Player and Years Played of Player	SELECT Player , Years_Played FROM player
Get Name of Team	SELECT Name FROM Team
Get Name of Team	SELECT Name FROM Team
Get Season and Player and Country name of country that has match season	SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2
Get Season and Player and Country name of country that has match season	SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2
Get Player of country that has match season	SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Country name of country is Indonesia	WHERE T1.Country_name = Indonesia
Get Player of country that has match season	SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Country name of country is Indonesia	WHERE T1.Country_name = Indonesia
Get Position of country that has match season	SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Capital of country is Dublin	WHERE T1.Capital = Dublin
Get Position of country that has match season	SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Capital of country is Dublin	WHERE T1.Capital = Dublin
Get Official native language of country that has match season	SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that College of match season is Maryland OR College of match season is Duke	WHERE T2.College = Maryland OR T2.College = Duke
Get Official native language of country that has match season	SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that College of match season is Maryland OR College of match season is Duke	WHERE T2.College = Maryland OR T2.College = Duke
Get the number of distinct Official native language of country that has match season	SELECT COUNT ( DISTINCT T1.Official_native_language ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Position of match season is Defender	WHERE T2.Position = Defender
Get the number of distinct Official native language of country that has match season	SELECT COUNT ( DISTINCT T1.Official_native_language ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Position of match season is Defender	WHERE T2.Position = Defender
Get Season and Player and Name of match season that has team	SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2
Get Season and Player and Name of match season that has team	SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2
Get Position of match season that has team	SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
Keep the records that Name of team is Ryley Goldner	WHERE T2.Name = Ryley Goldner
Get Position of match season that has team	SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
Keep the records that Name of team is Ryley Goldner	WHERE T2.Name = Ryley Goldner
Get the number of distinct College of match season that has team	SELECT COUNT ( DISTINCT T1.College ) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
Keep the records that Name of team is Columbus Crew	WHERE T2.Name = Columbus Crew
Get the number of distinct College of match season that has team	SELECT COUNT ( DISTINCT T1.College ) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
Keep the records that Name of team is Columbus Crew	WHERE T2.Name = Columbus Crew
Get Player and Years Played of player that has team	SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
Keep the records that Name of team is Columbus Crew	WHERE T2.Name = Columbus Crew
Get Player and Years Played of player that has team	SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id
Keep the records that Name of team is Columbus Crew	WHERE T2.Name = Columbus Crew
Get the number of match season	SELECT POSITION , COUNT ( * ) FROM match_season
Group the records based on	GROUP BY
Get the number of match season	SELECT POSITION , COUNT ( * ) FROM match_season
Group the records based on	GROUP BY
Get the number and Country name of country that has match season	SELECT Country_name , COUNT ( * ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Group the records based on Country name of country	GROUP BY T1.Country_name
Get the number and Country name of country that has match season	SELECT Country_name , COUNT ( * ) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Group the records based on Country name of country	GROUP BY T1.Country_name
Get player of match season	SELECT player FROM match_season
Order these records based on the College and sort them in ascending ORDER	ORDER BY College ASC 
Get player of match season	SELECT player FROM match_season
Order these records based on the College and sort them in ascending ORDER	ORDER BY College ASC 
Get of match season	SELECT POSITION FROM match_season
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of match season	SELECT POSITION FROM match_season
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get College of match season	SELECT College FROM match_season
Group the records based on College	GROUP BY College
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get College of match season	SELECT College FROM match_season
Group the records based on College	GROUP BY College
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get College of match season	SELECT College FROM match_season
Group the records based on the number College 2 that the number is greater than or equal to 2	GROUP BY College HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get College of match season	SELECT College FROM match_season
Group the records based on the number College 2 that the number is greater than or equal to 2	GROUP BY College HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get College of match season	SELECT College FROM match_season
Group the records based on the number College 2 that the number is greater than or equal to 2	GROUP BY College HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Order these records based on the College and sort them in descending ORDER	ORDER BY College DESC 
Get College of match season	SELECT College FROM match_season
Group the records based on the number College 2 that the number is greater than or equal to 2	GROUP BY College HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Order these records based on the College and sort them in descending ORDER	ORDER BY College DESC 
Get Team of match season	SELECT Team FROM match_season
Get Name of team	SELECT Name FROM team
Keep the records that Team id is not in the first query result	WHERE Team_id NOT IN ( the first query result ) 
Get Team of match season	SELECT Team FROM match_season
Get Name of team	SELECT Name FROM team
Keep the records that Team id is not in the first query result	WHERE Team_id NOT IN ( the first query result ) 
Get Country name of country that has match season	SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Position of match season is Forward	WHERE T2.Position = Forward
Get Country name of country that has match season	SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Position of match season is Defender	WHERE T2.Position = Defender
Get Country name of country that has match season	SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Position of match season is Forward	WHERE T2.Position = Forward
Get Country name of country that has match season	SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country
Keep the records that Position of match season is Defender	WHERE T2.Position = Defender
Get College of match season	SELECT College FROM match_season
Keep the records that is Midfielder	WHERE POSITION = Midfielder
Get College of match season	SELECT College FROM match_season
Keep the records that is Defender	WHERE POSITION = Defender
Get College of match season	SELECT College FROM match_season
Keep the records that is Midfielder	WHERE POSITION = Midfielder
Get College of match season	SELECT College FROM match_season
Keep the records that is Defender	WHERE POSITION = Defender
Get the number of climber	SELECT COUNT ( * ) FROM climber
Get the number of climber	SELECT COUNT ( * ) FROM climber
Get Name of climber	SELECT Name FROM climber
Order these records based on the Points and sort them in descending ORDER	ORDER BY Points DESC 
Get Name of climber	SELECT Name FROM climber
Order these records based on the Points and sort them in descending ORDER	ORDER BY Points DESC 
Get Name of climber	SELECT Name FROM climber
Keep the records that Country is not Switzerland	WHERE Country != Switzerland
Get Name of climber	SELECT Name FROM climber
Keep the records that Country is not Switzerland	WHERE Country != Switzerland
Get the maximum value of Points of climber	SELECT MAX ( Points ) FROM climber
Keep the records that Country is United Kingdom	WHERE Country = United Kingdom
Get the maximum value of Points of climber	SELECT MAX ( Points ) FROM climber
Keep the records that Country is United Kingdom	WHERE Country = United Kingdom
Get the number of distinct Country of climber	SELECT COUNT ( DISTINCT Country ) FROM climber
Get the number of distinct Country of climber	SELECT COUNT ( DISTINCT Country ) FROM climber
Get Name of mountain	SELECT Name FROM mountain
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of mountain	SELECT Name FROM mountain
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Country of mountain	SELECT Country FROM mountain
Keep the records that Height is greater than 5000	WHERE Height > 5000
Get Country of mountain	SELECT Country FROM mountain
Keep the records that Height is greater than 5000	WHERE Height > 5000
Get Name of mountain	SELECT Name FROM mountain
Order these records based on the Height and sort them in descending order, and return the top 1 record	ORDER BY Height DESC LIMIT 1
Get Name of mountain	SELECT Name FROM mountain
Order these records based on the Height and sort them in descending order, and return the top 1 record	ORDER BY Height DESC LIMIT 1
Get of mountain	SELECT DISTINCT RANGE FROM mountain
Order these records based on the Prominence and sort them in descending order, and return the top 3 records	ORDER BY Prominence DESC LIMIT 3
Get of mountain	SELECT DISTINCT RANGE FROM mountain
Order these records based on the Prominence and sort them in descending order, and return the top 3 records	ORDER BY Prominence DESC LIMIT 3
Get Name and Name of climber that has mountain	SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2
Get Name and Name of climber that has mountain	SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2
Get Name and Height of climber that has mountain	SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2
Get Name and Height of climber that has mountain	SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2
Get Height of climber that has mountain	SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Order these records based on the Points of climber and sort them in descending order, and return the top 1 record	ORDER BY T1.Points DESC LIMIT 1
Get Height of climber that has mountain	SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Order these records based on the Points of climber and sort them in descending order, and return the top 1 record	ORDER BY T1.Points DESC LIMIT 1
Get Name of climber that has mountain	SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Keep the records that Country of climber is West Germany	WHERE T1.Country = West Germany
Get Name of climber that has mountain	SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Keep the records that Country of climber is West Germany	WHERE T1.Country = West Germany
Get Time of climber that has mountain	SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Keep the records that Country of mountain is Uganda	WHERE T2.Country = Uganda
Get Time of climber that has mountain	SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID
Keep the records that Country of mountain is Uganda	WHERE T2.Country = Uganda
Get the number and Country of climber	SELECT Country , COUNT ( * ) FROM climber
Group the records based on Country	GROUP BY Country
Get the number and Country of climber	SELECT Country , COUNT ( * ) FROM climber
Group the records based on Country	GROUP BY Country
Get Country of mountain	SELECT Country FROM mountain
Group the records based on the number Country 1 that the number is greater than 1	GROUP BY Country HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Country of mountain	SELECT Country FROM mountain
Group the records based on the number Country 1 that the number is greater than 1	GROUP BY Country HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Mountain ID of climber	SELECT Mountain_ID FROM climber
Get Name of mountain	SELECT Name FROM mountain
Keep the records that Mountain ID is not in the first query result	WHERE Mountain_ID NOT IN ( the first query result ) 
Get Mountain ID of climber	SELECT Mountain_ID FROM climber
Get Name of mountain	SELECT Name FROM mountain
Keep the records that Mountain ID is not in the first query result	WHERE Mountain_ID NOT IN ( the first query result ) 
Get Country of mountain	SELECT Country FROM mountain
Keep the records that Height is greater than 5600	WHERE Height > 5600
Get Country of mountain	SELECT Country FROM mountain
Keep the records that Height is less than 5200	WHERE Height < 5200
Get Country of mountain	SELECT Country FROM mountain
Keep the records that Height is greater than 5600	WHERE Height > 5600
Get Country of mountain	SELECT Country FROM mountain
Keep the records that Height is less than 5200	WHERE Height < 5200
Get of mountain	SELECT RANGE FROM mountain
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of mountain	SELECT RANGE FROM mountain
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of mountain	SELECT Name FROM mountain
Keep the records that Height is greater than 5000 OR Prominence is greater than 1000	WHERE Height > 5000 OR Prominence > 1000
Get Name of mountain	SELECT Name FROM mountain
Keep the records that Height is greater than 5000 OR Prominence is greater than 1000	WHERE Height > 5000 OR Prominence > 1000
Get the number of body builder	SELECT COUNT ( * ) FROM body_builder
Get Total of body builder	SELECT Total FROM body_builder
Order these records based on the Total and sort them in ascending ORDER	ORDER BY Total ASC 
Get Snatch and Clean Jerk of body builder	SELECT Snatch , Clean_Jerk FROM body_builder
Order these records based on the Snatch and sort them in ascending ORDER	ORDER BY Snatch ASC 
Get the average value of Snatch of body builder	SELECT AVG ( Snatch ) FROM body_builder
Get Clean Jerk of body builder	SELECT Clean_Jerk FROM body_builder
Order these records based on the Total and sort them in descending order, and return the top 1 record	ORDER BY Total DESC LIMIT 1
Get Birth Date of People	SELECT Birth_Date FROM People
Order these records based on the Height and sort them in ascending ORDER	ORDER BY Height ASC 
Get Name of body builder that has people	SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2
Get Name of body builder that has people	SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Total of body builder is greater than 300	WHERE T1.Total > 300
Get Name of body builder that has people	SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Weight of people and sort them in descending order, and return the top 1 record	ORDER BY T2.Weight DESC LIMIT 1
Get Birth Date and Birth Place of body builder that has people	SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Total of body builder and sort them in descending order, and return the top 1 record	ORDER BY T1.Total DESC LIMIT 1
Get Height of body builder that has people	SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Total of body builder is less than 315	WHERE T1.Total < 315
Get the average value of Total of body builder that has people	SELECT AVG ( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Height of people is greater than 200	WHERE T2.Height > 200
Get Name of body builder that has people	SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Total of body builder and sort them in descending ORDER	ORDER BY T1.Total DESC 
Get the number and Birth Place of people	SELECT Birth_Place , COUNT ( * ) FROM people
Group the records based on Birth Place	GROUP BY Birth_Place
Get Birth Place of people	SELECT Birth_Place FROM people
Group the records based on Birth Place	GROUP BY Birth_Place
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Birth Place of people	SELECT Birth_Place FROM people
Group the records based on the number Birth Place 2 that the number is greater than or equal to 2	GROUP BY Birth_Place HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Height and Weight of people	SELECT Height , Weight FROM people
Order these records based on the Height and sort them in descending ORDER	ORDER BY Height DESC 
Get all of body builder	SELECT * FROM body_builder
Get Name and birth place of people	SELECT Name , birth_place FROM people
Get Name and birth place of people that has body builder	SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2
Get the number of distinct Birth Place of people	SELECT COUNT ( DISTINCT Birth_Place ) FROM people
Get People ID of body builder	SELECT People_ID FROM body_builder
Get the number of people	SELECT COUNT ( * ) FROM people
Keep the records that people id is not in the first query result	WHERE people_id NOT IN ( the first query result ) 
Get weight of body builder that has people	SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id
Keep the records that snatch of body builder is greater than 140 OR height of people is greater than 200	WHERE T1.snatch > 140 OR T2.height > 200
Get total of body builder that has people	SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id
Keep the records that Birth Date of people is in the form of %January%	WHERE T2.Birth_Date LIKE %January%
Get the minimum value of snatch of body builder	SELECT MIN ( snatch ) FROM body_builder
Get the number of election	SELECT COUNT ( * ) FROM election
Get Votes of election	SELECT Votes FROM election
Order these records based on the Votes and sort them in descending ORDER	ORDER BY Votes DESC 
Get Vote Percent of election	SELECT DATE , Vote_Percent FROM election
Get the minimum value of Vote Percent and the maximum value of Vote Percent of election	SELECT MIN ( Vote_Percent ) , MAX ( Vote_Percent ) FROM election
Get Name and Party of representative	SELECT Name , Party FROM representative
Get Name of Representative	SELECT Name FROM Representative
Keep the records that Party is not Republican	WHERE Party != Republican
Get Lifespan of representative	SELECT Lifespan FROM representative
Keep the records that State is New York OR State is Indiana	WHERE State = New York OR State = Indiana
Get Name and Date of election that has representative	SELECT T2.Name , T1.Date FROM election AS T1 JOIN representative AS T2
Get Name of election that has representative	SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
Keep the records that Votes is greater than 10000	WHERE Votes > 10000
Get Name of election that has representative	SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
Order these records based on the votes and sort them in descending ORDER	ORDER BY votes DESC 
Get Party of election that has representative	SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
Order these records based on the votes and sort them in ascending order, and return the top 1 record	ORDER BY votes ASC LIMIT 1
Get Lifespan of election that has representative	SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
Order these records based on the Vote Percent and sort them in descending ORDER	ORDER BY Vote_Percent DESC 
Get the average value of Votes of election that has representative	SELECT AVG ( T1.Votes ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID
Keep the records that Party of representative is Republican	WHERE T2.Party = Republican
Get the number and Party of representative	SELECT Party , COUNT ( * ) FROM representative
Group the records based on Party	GROUP BY Party
Get the number and Party of representative	SELECT Party , COUNT ( * ) FROM representative
Group the records based on Party	GROUP BY Party
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Party of representative	SELECT Party FROM representative
Group the records based on the number Party 3 that the number is greater than or equal to 3	GROUP BY Party HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get State of representative	SELECT State FROM representative
Group the records based on the number State 2 that the number is greater than or equal to 2	GROUP BY State HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Representative ID of election	SELECT Representative_ID FROM election
Get Name of representative	SELECT Name FROM representative
Keep the records that Representative ID is not in the first query result	WHERE Representative_ID NOT IN ( the first query result ) 
Get Party of representative	SELECT Party FROM representative
Keep the records that State is New York	WHERE State = New York
Get Party of representative	SELECT Party FROM representative
Keep the records that State is Pennsylvania	WHERE State = Pennsylvania
Get the number of distinct Party of representative	SELECT COUNT ( DISTINCT Party ) FROM representative
Get the number of Apartment Bookings	SELECT COUNT ( * ) FROM Apartment_Bookings
Get the number of Apartment Bookings	SELECT COUNT ( * ) FROM Apartment_Bookings
Get booking start date and booking end date of Apartment Bookings	SELECT booking_start_date , booking_end_date FROM Apartment_Bookings
Get booking start date and booking end date of Apartment Bookings	SELECT booking_start_date , booking_end_date FROM Apartment_Bookings
Get building description of Apartment Buildings	SELECT DISTINCT building_description FROM Apartment_Buildings
Get building description of Apartment Buildings	SELECT DISTINCT building_description FROM Apartment_Buildings
Get building short name of Apartment Buildings	SELECT building_short_name FROM Apartment_Buildings
Keep the records that building manager is Emma	WHERE building_manager = Emma
Get building short name of Apartment Buildings	SELECT building_short_name FROM Apartment_Buildings
Keep the records that building manager is Emma	WHERE building_manager = Emma
Get building address and building phone of Apartment Buildings	SELECT building_address , building_phone FROM Apartment_Buildings
Keep the records that building manager is Brenden	WHERE building_manager = Brenden
Get building address and building phone of Apartment Buildings	SELECT building_address , building_phone FROM Apartment_Buildings
Keep the records that building manager is Brenden	WHERE building_manager = Brenden
Get building full name of Apartment Buildings	SELECT building_full_name FROM Apartment_Buildings
Keep the records that building full name is in the form of %court%	WHERE building_full_name LIKE %court%
Get building full name of Apartment Buildings	SELECT building_full_name FROM Apartment_Buildings
Keep the records that building full name is in the form of %court%	WHERE building_full_name LIKE %court%
Get the minimum value of bathroom count and the maximum value of bathroom count of Apartments	SELECT MIN ( bathroom_count ) , MAX ( bathroom_count ) FROM Apartments
Get the minimum value of bathroom count and the maximum value of bathroom count of Apartments	SELECT MIN ( bathroom_count ) , MAX ( bathroom_count ) FROM Apartments
Get the average value of bedroom count of Apartments	SELECT AVG ( bedroom_count ) FROM Apartments
Get the average value of bedroom count of Apartments	SELECT AVG ( bedroom_count ) FROM Apartments
Get apt number and room count of Apartments	SELECT apt_number , room_count FROM Apartments
Get apt number and room count of Apartments	SELECT apt_number , room_count FROM Apartments
Get the average value of room count of Apartments	SELECT AVG ( room_count ) FROM Apartments
Keep the records that apt type code is Studio	WHERE apt_type_code = Studio
Get the average value of room count of Apartments	SELECT AVG ( room_count ) FROM Apartments
Keep the records that apt type code is Studio	WHERE apt_type_code = Studio
Get apt number of Apartments	SELECT apt_number FROM Apartments
Keep the records that apt type code is Flat	WHERE apt_type_code = Flat
Get apt number of Apartments	SELECT apt_number FROM Apartments
Keep the records that apt type code is Flat	WHERE apt_type_code = Flat
Get guest first name and guest last name of Guests	SELECT guest_first_name , guest_last_name FROM Guests
Get guest first name and guest last name of Guests	SELECT guest_first_name , guest_last_name FROM Guests
Get date of birth of Guests	SELECT date_of_birth FROM Guests
Keep the records that gender code is Male	WHERE gender_code = Male
Get date of birth of Guests	SELECT date_of_birth FROM Guests
Keep the records that gender code is Male	WHERE gender_code = Male
Get apt number and booking start date and booking start date of Apartment Bookings that has Apartments	SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2
Get apt number and booking start date and booking start date of Apartment Bookings that has Apartments	SELECT T2.apt_number , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2
Get booking start date and booking start date of Apartment Bookings that has Apartments	SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that apt type code of Apartments is Duplex	WHERE T2.apt_type_code = Duplex
Get booking start date and booking start date of Apartment Bookings that has Apartments	SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that apt type code of Apartments is Duplex	WHERE T2.apt_type_code = Duplex
Get booking start date and booking start date of Apartment Bookings that has Apartments	SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that bedroom count of Apartments is greater than 2	WHERE T2.bedroom_count > 2
Get booking start date and booking start date of Apartment Bookings that has Apartments	SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that bedroom count of Apartments is greater than 2	WHERE T2.bedroom_count > 2
Get booking status code of Apartment Bookings that has Apartments	SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that apt number of Apartments is Suite 634	WHERE T2.apt_number = Suite 634
Get booking status code of Apartment Bookings that has Apartments	SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that apt number of Apartments is Suite 634	WHERE T2.apt_number = Suite 634
Get apt number of Apartment Bookings that has Apartments	SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Confirmed	WHERE T1.booking_status_code = Confirmed
Get apt number of Apartment Bookings that has Apartments	SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Confirmed	WHERE T1.booking_status_code = Confirmed
Get the average value of room count of Apartment Bookings that has Apartments	SELECT AVG ( room_count ) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Provisional	WHERE T1.booking_status_code = Provisional
Get the average value of room count of Apartment Bookings that has Apartments	SELECT AVG ( room_count ) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Provisional	WHERE T1.booking_status_code = Provisional
Get guest first name and booking start date and booking start date of Apartment Bookings that has Guests	SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2
Get guest first name and booking start date and booking start date of Apartment Bookings that has Guests	SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2
Get booking start date and booking start date of Apartment Bookings that has Guests	SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
Keep the records that gender code of Guests is Female	WHERE T2.gender_code = Female
Get booking start date and booking start date of Apartment Bookings that has Guests	SELECT T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
Keep the records that gender code of Guests is Female	WHERE T2.gender_code = Female
Get guest first name and guest last name of Apartment Bookings that has Guests	SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
Keep the records that booking status code of Apartment Bookings is Confirmed	WHERE T1.booking_status_code = Confirmed
Get guest first name and guest last name of Apartment Bookings that has Guests	SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id
Keep the records that booking status code of Apartment Bookings is Confirmed	WHERE T1.booking_status_code = Confirmed
Get facility code of Apartment Facilities that has Apartments	SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that bedroom count of Apartments is greater than 4	WHERE T2.bedroom_count > 4
Get facility code of Apartment Facilities that has Apartments	SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that bedroom count of Apartments is greater than 4	WHERE T2.bedroom_count > 4
Get the SUM of room count of Apartment Facilities that has Apartments	SELECT SUM ( T2.room_count ) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that facility code of Apartment Facilities is Gym	WHERE T1.facility_code = Gym
Get the SUM of room count of Apartment Facilities that has Apartments	SELECT SUM ( T2.room_count ) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that facility code of Apartment Facilities is Gym	WHERE T1.facility_code = Gym
Get the SUM of room count of Apartment Buildings that has Apartments	SELECT SUM ( T2.room_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
Keep the records that building short name of Apartment Buildings is Columbus Square	WHERE T1.building_short_name = Columbus Square
Get the SUM of room count of Apartment Buildings that has Apartments	SELECT SUM ( T2.room_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
Keep the records that building short name of Apartment Buildings is Columbus Square	WHERE T1.building_short_name = Columbus Square
Get building address of Apartment Buildings that has Apartments	SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
Keep the records that bathroom count of Apartments is greater than 2	WHERE T2.bathroom_count > 2
Get building address of Apartment Buildings that has Apartments	SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
Keep the records that bathroom count of Apartments is greater than 2	WHERE T2.bathroom_count > 2
Get apt type code and apt number of Apartment Buildings that has Apartments	SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
Keep the records that building manager of Apartment Buildings is Kyle	WHERE T1.building_manager = Kyle
Get apt type code and apt number of Apartment Buildings that has Apartments	SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id
Keep the records that building manager of Apartment Buildings is Kyle	WHERE T1.building_manager = Kyle
Get the number and booking status code of Apartment Bookings	SELECT booking_status_code , COUNT ( * ) FROM Apartment_Bookings
Group the records based on booking status code	GROUP BY booking_status_code
Get the number and booking status code of Apartment Bookings	SELECT booking_status_code , COUNT ( * ) FROM Apartment_Bookings
Group the records based on booking status code	GROUP BY booking_status_code
Get apt number of Apartments	SELECT apt_number FROM Apartments
Order these records based on the room count and sort them in ascending ORDER	ORDER BY room_count ASC 
Get apt number of Apartments	SELECT apt_number FROM Apartments
Order these records based on the room count and sort them in ascending ORDER	ORDER BY room_count ASC 
Get apt number of Apartments	SELECT apt_number FROM Apartments
Order these records based on the bedroom count and sort them in descending order, and return the top 1 record	ORDER BY bedroom_count DESC LIMIT 1
Get apt number of Apartments	SELECT apt_number FROM Apartments
Order these records based on the bedroom count and sort them in descending order, and return the top 1 record	ORDER BY bedroom_count DESC LIMIT 1
Get the number and apt type code of Apartments	SELECT apt_type_code , COUNT ( * ) FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get the number and apt type code of Apartments	SELECT apt_type_code , COUNT ( * ) FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get apt type code of Apartments	SELECT apt_type_code FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the average value of room count and sort them in descending order, and return the top 3 records	ORDER BY AVG ( room_count ) DESC LIMIT 3
Get apt type code of Apartments	SELECT apt_type_code FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the average value of room count and sort them in descending order, and return the top 3 records	ORDER BY AVG ( room_count ) DESC LIMIT 3
Get apt type code and bathroom count and bedroom count of Apartments	SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the SUM of room count and sort them in descending order, and return the top 1 record	ORDER BY SUM ( room_count ) DESC LIMIT 1
Get apt type code and bathroom count and bedroom count of Apartments	SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the SUM of room count and sort them in descending order, and return the top 1 record	ORDER BY SUM ( room_count ) DESC LIMIT 1
Get apt type code of Apartments	SELECT apt_type_code FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get apt type code of Apartments	SELECT apt_type_code FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get apt type code of Apartments	SELECT apt_type_code FROM Apartments
Keep the records that bathroom COUNT is greater than 1	WHERE bathroom_count > 1 
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get apt type code of Apartments	SELECT apt_type_code FROM Apartments
Keep the records that bathroom COUNT is greater than 1	WHERE bathroom_count > 1 
Group the records based on apt type code	GROUP BY apt_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the maximum value of room count and the minimum value of room count and apt type code of Apartments	SELECT apt_type_code , MAX ( room_count ) , MIN ( room_count ) FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Get the maximum value of room count and the minimum value of room count and apt type code of Apartments	SELECT apt_type_code , MAX ( room_count ) , MIN ( room_count ) FROM Apartments
Group the records based on apt type code	GROUP BY apt_type_code
Get the number and gender code of Guests	SELECT gender_code , COUNT ( * ) FROM Guests
Group the records based on gender code	GROUP BY gender_code
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and gender code of Guests	SELECT gender_code , COUNT ( * ) FROM Guests
Group the records based on gender code	GROUP BY gender_code
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get apt id of Apartment Facilities	SELECT apt_id FROM Apartment_Facilities
Get the number of Apartments	SELECT COUNT ( * ) FROM Apartments
Keep the records that apt id is not in the first query result	WHERE apt_id NOT IN ( the first query result ) 
Get apt id of Apartment Facilities	SELECT apt_id FROM Apartment_Facilities
Get the number of Apartments	SELECT COUNT ( * ) FROM Apartments
Keep the records that apt id is not in the first query result	WHERE apt_id NOT IN ( the first query result ) 
Get apt number of Apartment Bookings that has Apartments	SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Confirmed	WHERE T1.booking_status_code = Confirmed
Get apt number of Apartment Bookings that has Apartments	SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Provisional	WHERE T1.booking_status_code = Provisional
Get apt number of Apartment Bookings that has Apartments	SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Confirmed	WHERE T1.booking_status_code = Confirmed
Get apt number of Apartment Bookings that has Apartments	SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id
Keep the records that booking status code of Apartment Bookings is Provisional	WHERE T1.booking_status_code = Provisional
Get apt number of Apartments that has View Unit Status	SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
Keep the records that available yn of View Unit Status is 0	WHERE T2.available_yn = 0
Get apt number of Apartments that has View Unit Status	SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
Keep the records that available yn of View Unit Status is 1	WHERE T2.available_yn = 1
Get apt number of Apartments that has View Unit Status	SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
Keep the records that available yn of View Unit Status is 0	WHERE T2.available_yn = 0
Get apt number of Apartments that has View Unit Status	SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id
Keep the records that available yn of View Unit Status is 1	WHERE T2.available_yn = 1
Get the number of game	SELECT COUNT ( * ) FROM game
Keep the records that season is greater than 2007	WHERE season > 2007
Get of game	SELECT DATE FROM game
Order these records based on the home team and sort them in descending ORDER	ORDER BY home_team DESC 
Get season and home team and away team of game	SELECT season , home_team , away_team FROM game
Get the maximum value of home games and the minimum value of home games and the average value of home games of stadium	SELECT MAX ( home_games ) , MIN ( home_games ) , AVG ( home_games ) FROM stadium
Get average attendance of stadium	SELECT average_attendance FROM stadium
Keep the records that capacity percentage is greater than 100	WHERE capacity_percentage > 100
Get player and number of matches of injury accident	SELECT player , number_of_matches , SOURCE FROM injury_accident
Keep the records that injury is not Knee problem	WHERE injury != Knee problem
Get season of game that has injury accident	SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id
Keep the records that player of injury accident is Walter Samuel	WHERE T2.player = Walter Samuel
Get id and score and date of game that has injury accident	SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id
Group the records based on the number id of game 2 that the number is greater than or equal to 2	GROUP BY T1.id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get id and name of stadium that has game and injury accident	SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id
Group the records based on id of stadium	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get id and name of stadium that has game and injury accident	SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id
Group the records based on id of stadium	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get season and name of game that has stadium and injury accident	SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id
Keep the records that injury of injury accident is Foot injury OR injury of injury accident is Knee problem	WHERE T3.injury = Foot injury OR T3.injury = Knee problem
Get the number of distinct SOURCE of injury accident	SELECT COUNT ( DISTINCT SOURCE ) FROM injury_accident
Get game id of injury accident	SELECT game_id FROM injury_accident
Get the number of game	SELECT COUNT ( * ) FROM game
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get the number of distinct injury of injury accident that has game	SELECT COUNT ( DISTINCT T1.injury ) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id
Keep the records that season of game is greater than 2010	WHERE T2.season > 2010
Get name of game that has stadium and injury accident	SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id
Keep the records that player of injury accident is Walter Samuel	WHERE T3.player = Walter Samuel
Get name of game that has stadium and injury accident	SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id
Keep the records that player of injury accident is Thiago Motta	WHERE T3.player = Thiago Motta
Get name and average attendance and total attendance of stadium	SELECT name , average_attendance , total_attendance FROM stadium
Get name and average attendance and total attendance of game that has stadium and injury accident	SELECT T2.name , T2.average_attendance , T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3
Get name of stadium	SELECT name FROM stadium
Keep the records that name is in the form of %Bank%	WHERE name LIKE %Bank%
Get the number and id of stadium that has game	SELECT T1.id , COUNT ( * ) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id
Group the records based on id of stadium	GROUP BY T1.id
Get date and player of game that has injury accident	SELECT T1.date , T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id
Order these records based on the season of game and sort them in descending ORDER	ORDER BY T1.season DESC 
Get name and name of Country that has League	SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2
Get the number of Country that has League	SELECT COUNT ( * ) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id
Keep the records that name of Country is England	WHERE T1.name = England
Get the average value of weight of Player	SELECT AVG ( weight ) FROM Player
Get the maximum value of weight and the minimum value of weight of Player	SELECT MAX ( weight ) , MIN ( weight ) FROM Player
Get the average value of overall rating of Player Attributes	SELECT AVG ( overall_rating ) FROM Player_Attributes
Get Player name of Player that has Player Attributes	SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
Keep the records that overall rating of Player Attributes is greater than the first query result	WHERE T2.overall_rating > ( the first query result ) 
Get the maximum value of overall rating of Player Attributes	SELECT MAX ( overall_rating ) FROM Player_Attributes
Get Player name of Player that has Player Attributes	SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
Keep the records that dribbling of Player Attributes is the first query result	WHERE T2.dribbling = ( the first query result ) 
Get Player name of Player that has Player Attributes	SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
Keep the records that crossing of Player Attributes is greater than 90 AND preferred foot of Player Attributes is right	WHERE T2.crossing > 90 AND T2.preferred_foot = right
Get Player name of Player that has Player Attributes	SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
Keep the records that preferred foot of Player Attributes is left AND overall rating of Player Attributes is greater than or equal to 85 AND overall rating of Player Attributes is less than or equal to 90	WHERE T2.preferred_foot = left AND T2.overall_rating >= 85 AND T2.overall_rating <= 90
Get the average value of overall rating and preferred foot of Player Attributes	SELECT preferred_foot , AVG ( overall_rating ) FROM Player_Attributes
Group the records based on preferred foot	GROUP BY preferred_foot
Get the number and preferred foot of Player Attributes	SELECT preferred_foot , COUNT ( * ) FROM Player_Attributes
Keep the records that overall rating is greater than 80	WHERE overall_rating > 80 
Group the records based on preferred foot	GROUP BY preferred_foot
Get Player api id of Player	SELECT player_api_id FROM Player
Keep the records that height is greater than or equal to 180	WHERE height >= 180
Get player api id of Player Attributes	SELECT player_api_id FROM Player_Attributes
Keep the records that overall rating is greater than 85	WHERE overall_rating > 85
Get Player api id of Player	SELECT player_api_id FROM Player
Keep the records that height is greater than or equal to 180 AND height is less than or equal to 190	WHERE height >= 180 AND height <= 190
Get player api id of Player Attributes	SELECT player_api_id FROM Player_Attributes
Keep the records that preferred foot is left	WHERE preferred_foot = left
Get Player name of Player that has Player Attributes	SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
Order these records based on the overall rating and sort them in descending order, and return the top 3 records	ORDER BY overall_rating DESC LIMIT 3
Get Player name and birthday of Player that has Player Attributes	SELECT DISTINCT T1.player_name , T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
Order these records based on the potential and sort them in descending order, and return the top 5 records	ORDER BY potential DESC LIMIT 5
Get the number of performance	SELECT COUNT ( * ) FROM performance
Get of performance	SELECT HOST FROM performance
Order these records based on the Attendance and sort them in ascending ORDER	ORDER BY Attendance ASC 
Get of performance	SELECT DATE , LOCATION FROM performance
Get Attendance of performance	SELECT Attendance FROM performance
Keep the records that is TD Garden OR is Bell Centre	WHERE LOCATION = TD Garden OR LOCATION = Bell Centre
Get the average value of Attendance of performance	SELECT AVG ( Attendance ) FROM performance
Get of performance	SELECT DATE FROM performance
Order these records based on the Attendance and sort them in descending order, and return the top 1 record	ORDER BY Attendance DESC LIMIT 1
Get the number of performance	SELECT LOCATION , COUNT ( * ) FROM performance
Group the records based on	GROUP BY
Get of performance	SELECT LOCATION FROM performance
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of performance	SELECT LOCATION FROM performance
Group the records based on that the number is greater than or equal to 2	GROUP BY HAVING COUNT ( * ) >= 2
Get of performance	SELECT LOCATION FROM performance
Keep the records that Attendance is greater than 2000	WHERE Attendance > 2000
Get of performance	SELECT LOCATION FROM performance
Keep the records that Attendance is less than 1000	WHERE Attendance < 1000
Get Name and Location of member attendance that has member and performance	SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3
Get Name and Location of member attendance that has member and performance	SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
Order these records based on the Name of member and sort them in ascending ORDER	ORDER BY T2.Name ASC 
Get Date of member attendance that has member and performance	SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
Keep the records that Role of member is Violin	WHERE T2.Role = Violin
Get Name and Date of member attendance that has member and performance	SELECT T2.Name , T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID
Order these records based on the Attendance of performance and sort them in descending ORDER	ORDER BY T3.Attendance DESC 
Get Member ID of member attendance	SELECT Member_ID FROM member_attendance
Get Name of member	SELECT Name FROM member
Keep the records that Member ID is not in the first query result	WHERE Member_ID NOT IN ( the first query result ) 
Get building of classroom	SELECT DISTINCT building FROM classroom
Keep the records that capacity is greater than 50	WHERE capacity > 50
Get building of classroom	SELECT DISTINCT building FROM classroom
Keep the records that capacity is greater than 50	WHERE capacity > 50
Get the number of classroom	SELECT COUNT ( * ) FROM classroom
Keep the records that building is not Lamberton	WHERE building != Lamberton
Get the number of classroom	SELECT COUNT ( * ) FROM classroom
Keep the records that building is not Lamberton	WHERE building != Lamberton
Get the average value of budget of department	SELECT AVG ( budget ) FROM department
Get dept name and building of department	SELECT dept_name , building FROM department
Keep the records that budget is greater than the first query result	WHERE budget > ( the first query result ) 
Get the average value of budget of department	SELECT AVG ( budget ) FROM department
Get dept name and building of department	SELECT dept_name , building FROM department
Keep the records that budget is greater than the first query result	WHERE budget > ( the first query result ) 
Get building AND room number of classroom	SELECT building , room_number FROM classroom
Keep the records that capacity is between 5 X100	WHERE capacity BETWEEN 50 AND 100
Get building AND room number of classroom	SELECT building , room_number FROM classroom
Keep the records that capacity is between 5 X100	WHERE capacity BETWEEN 50 AND 100
Get dept name and building of department	SELECT dept_name , building FROM department
Order these records based on the budget and sort them in descending order, and return the top 1 record	ORDER BY budget DESC LIMIT 1
Get dept name and building of department	SELECT dept_name , building FROM department
Order these records based on the budget and sort them in descending order, and return the top 1 record	ORDER BY budget DESC LIMIT 1
Get name of student	SELECT name FROM student
Keep the records that dept name is History	WHERE dept_name = History 
Order these records based on the tot cred and sort them in descending order, and return the top 1 record	ORDER BY tot_cred DESC LIMIT 1
Get name of student	SELECT name FROM student
Keep the records that dept name is History	WHERE dept_name = History 
Order these records based on the tot cred and sort them in descending order, and return the top 1 record	ORDER BY tot_cred DESC LIMIT 1
Get the number of classroom	SELECT COUNT ( * ) FROM classroom
Keep the records that building is Lamberton	WHERE building = Lamberton
Get the number of classroom	SELECT COUNT ( * ) FROM classroom
Keep the records that building is Lamberton	WHERE building = Lamberton
Get the number of distinct s id of advisor	SELECT COUNT ( DISTINCT s_id ) FROM advisor
Get the number of distinct s id of advisor	SELECT COUNT ( DISTINCT s_id ) FROM advisor
Get the number of distinct dept name of course	SELECT COUNT ( DISTINCT dept_name ) FROM course
Get the number of distinct dept name of course	SELECT COUNT ( DISTINCT dept_name ) FROM course
Get the number of distinct course id of course	SELECT COUNT ( DISTINCT course_id ) FROM course
Keep the records that dept name is Physics	WHERE dept_name = Physics
Get the number of distinct course id of course	SELECT COUNT ( DISTINCT course_id ) FROM course
Keep the records that dept name is Physics	WHERE dept_name = Physics
Get title of course that has prereq	SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course id of prereq 2 that the number is 2	GROUP BY T2.course_id HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get title of course that has prereq	SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course id of prereq 2 that the number is 2	GROUP BY T2.course_id HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get title and credits and dept name of course that has prereq	SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course id of prereq 1 that the number is greater than 1	GROUP BY T2.course_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get title and credits and dept name of course that has prereq	SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course id of prereq 1 that the number is greater than 1	GROUP BY T2.course_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get course id of prereq	SELECT course_id FROM prereq
Get the number of course	SELECT COUNT ( * ) FROM course
Keep the records that course id is not in the first query result	WHERE course_id NOT IN ( the first query result ) 
Get course id of prereq	SELECT course_id FROM prereq
Get the number of course	SELECT COUNT ( * ) FROM course
Keep the records that course id is not in the first query result	WHERE course_id NOT IN ( the first query result ) 
Get course id of prereq	SELECT course_id FROM prereq
Get title of course	SELECT title FROM course
Keep the records that course id is not in the first query result	WHERE course_id NOT IN ( the first query result ) 
Get course id of prereq	SELECT course_id FROM prereq
Get title of course	SELECT title FROM course
Keep the records that course id is not in the first query result	WHERE course_id NOT IN ( the first query result ) 
Get the number of distinct id of teaches	SELECT COUNT ( DISTINCT id ) FROM teaches
Get the number of distinct id of teaches	SELECT COUNT ( DISTINCT id ) FROM teaches
Get the SUM of budget of department	SELECT SUM ( budget ) FROM department
Keep the records that dept name is Marketing OR dept name is Finance	WHERE dept_name = Marketing OR dept_name = Finance
Get the SUM of budget of department	SELECT SUM ( budget ) FROM department
Keep the records that dept name is Marketing OR dept name is Finance	WHERE dept_name = Marketing OR dept_name = Finance
Get dept name of instructor	SELECT dept_name FROM instructor
Keep the records that name is in the form of %Soisalon%	WHERE name LIKE %Soisalon%
Get dept name of instructor	SELECT dept_name FROM instructor
Keep the records that name is in the form of %Soisalon%	WHERE name LIKE %Soisalon%
Get the number of classroom	SELECT COUNT ( * ) FROM classroom
Keep the records that building is Lamberton AND capacity is less than 50	WHERE building = Lamberton AND capacity < 50
Get the number of classroom	SELECT COUNT ( * ) FROM classroom
Keep the records that building is Lamberton AND capacity is less than 50	WHERE building = Lamberton AND capacity < 50
Get the average value of budget of department	SELECT AVG ( budget ) FROM department
Get dept name and budget of department	SELECT dept_name , budget FROM department
Keep the records that budget is greater than the first query result	WHERE budget > ( the first query result ) 
Get the average value of budget of department	SELECT AVG ( budget ) FROM department
Get dept name and budget of department	SELECT dept_name , budget FROM department
Keep the records that budget is greater than the first query result	WHERE budget > ( the first query result ) 
Get name of instructor	SELECT name FROM instructor
Keep the records that dept name is Statistics	WHERE dept_name = Statistics 
Order these records based on the salary, and return the top 1 record	ORDER BY salary LIMIT 1
Get name of instructor	SELECT name FROM instructor
Keep the records that dept name is Statistics	WHERE dept_name = Statistics 
Order these records based on the salary, and return the top 1 record	ORDER BY salary LIMIT 1
Get title of course	SELECT title FROM course
Keep the records that dept name is Statistics	WHERE dept_name = Statistics
Get title of course	SELECT title FROM course
Keep the records that dept name is Psychology	WHERE dept_name = Psychology
Get title of course	SELECT title FROM course
Keep the records that dept name is Statistics	WHERE dept_name = Statistics
Get title of course	SELECT title FROM course
Keep the records that dept name is Psychology	WHERE dept_name = Psychology
Get title of course	SELECT title FROM course
Keep the records that dept name is Statistics	WHERE dept_name = Statistics
Get title of course	SELECT title FROM course
Keep the records that dept name is Psychology	WHERE dept_name = Psychology
Get title of course	SELECT title FROM course
Keep the records that dept name is Statistics	WHERE dept_name = Statistics
Get title of course	SELECT title FROM course
Keep the records that dept name is Psychology	WHERE dept_name = Psychology
Get id of teaches	SELECT id FROM teaches
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get id of teaches	SELECT id FROM teaches
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get id of teaches	SELECT id FROM teaches
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get id of teaches	SELECT id FROM teaches
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get name of student that has takes	SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id
Keep the records that is 2009 OR is 2010	WHERE YEAR = 2009 OR YEAR = 2010
Get name of student that has takes	SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id
Keep the records that is 2009 OR is 2010	WHERE YEAR = 2009 OR YEAR = 2010
Get dept name of course	SELECT dept_name FROM course
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get dept name of course	SELECT dept_name FROM course
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get dept name of course	SELECT dept_name FROM course
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the SUM of credits and sort them in descending order, and return the top 1 record	ORDER BY SUM ( credits ) DESC LIMIT 1
Get dept name of course	SELECT dept_name FROM course
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the SUM of credits and sort them in descending order, and return the top 1 record	ORDER BY SUM ( credits ) DESC LIMIT 1
Get title of course	SELECT title FROM course
Order these records based on the title credits	ORDER BY title , credits 
Get title of course	SELECT title FROM course
Order these records based on the title credits	ORDER BY title , credits 
Get dept name of department	SELECT dept_name FROM department
Order these records based on the budget, and return the top 1 record	ORDER BY budget LIMIT 1
Get dept name of department	SELECT dept_name FROM department
Order these records based on the budget, and return the top 1 record	ORDER BY budget LIMIT 1
Get dept name and building of department	SELECT dept_name , building FROM department
Order these records based on the budget and sort them in descending ORDER	ORDER BY budget DESC 
Get dept name and building of department	SELECT dept_name , building FROM department
Order these records based on the budget and sort them in descending ORDER	ORDER BY budget DESC 
Get name of instructor	SELECT name FROM instructor
Order these records based on the salary and sort them in descending order, and return the top 1 record	ORDER BY salary DESC LIMIT 1
Get name of instructor	SELECT name FROM instructor
Order these records based on the salary and sort them in descending order, and return the top 1 record	ORDER BY salary DESC LIMIT 1
Get all of instructor	SELECT * FROM instructor
Order these records based on the salary	ORDER BY salary 
Get all of instructor	SELECT * FROM instructor
Order these records based on the salary	ORDER BY salary 
Get name and dept name of student	SELECT name , dept_name FROM student
Order these records based on the tot cred	ORDER BY tot_cred 
Get name and dept name of student	SELECT name , dept_name FROM student
Order these records based on the tot cred	ORDER BY tot_cred 
Get title and name of course that has teaches and instructor	SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id
Keep the records that is 2008	WHERE YEAR = 2008 
Order these records based on the title of course	ORDER BY T1.title 
Get title and name of course that has teaches and instructor	SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id
Keep the records that is 2008	WHERE YEAR = 2008 
Order these records based on the title of course	ORDER BY T1.title 
Get name of instructor that has advisor	SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id
Group the records based on the number i id of advisor 1 that the number is greater than 1	GROUP BY T2.i_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of instructor that has advisor	SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id
Group the records based on the number i id of advisor 1 that the number is greater than 1	GROUP BY T2.i_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of student that has advisor	SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id
Group the records based on the number s id of advisor 1 that the number is greater than 1	GROUP BY T2.s_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of student that has advisor	SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id
Group the records based on the number s id of advisor 1 that the number is greater than 1	GROUP BY T2.s_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number and building of classroom	SELECT COUNT ( * ) , building FROM classroom
Keep the records that capacity is greater than 50	WHERE capacity > 50 
Group the records based on building	GROUP BY building
Get the number and building of classroom	SELECT COUNT ( * ) , building FROM classroom
Keep the records that capacity is greater than 50	WHERE capacity > 50 
Group the records based on building	GROUP BY building
Get the maximum value of capacity and the average value of capacity and building of classroom	SELECT MAX ( capacity ) , AVG ( capacity ) , building FROM classroom
Group the records based on building	GROUP BY building
Get the maximum value of capacity and the average value of capacity and building of classroom	SELECT MAX ( capacity ) , AVG ( capacity ) , building FROM classroom
Group the records based on building	GROUP BY building
Get title of course	SELECT title FROM course
Group the records based on the number title 1 that the number is greater than 1	GROUP BY title HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get title of course	SELECT title FROM course
Group the records based on the number title 1 that the number is greater than 1	GROUP BY title HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the SUM of credits and dept name of course	SELECT SUM ( credits ) , dept_name FROM course
Group the records based on dept name	GROUP BY dept_name
Get the SUM of credits and dept name of course	SELECT SUM ( credits ) , dept_name FROM course
Group the records based on dept name	GROUP BY dept_name
Get the average value of salary of instructor	SELECT AVG ( salary ) FROM instructor
Get the minimum value of salary and dept name of instructor	SELECT MIN ( salary ) , dept_name FROM instructor
Group the records based on the average value of salary dept name the first query result that the average value of salary is greater than the first query result	GROUP BY dept_name HAVING AVG ( salary ) > ( the first query result )  HAVING AVG ( salary ) > ( the first query result ) 
Get the average value of salary of instructor	SELECT AVG ( salary ) FROM instructor
Get the minimum value of salary and dept name of instructor	SELECT MIN ( salary ) , dept_name FROM instructor
Group the records based on the average value of salary dept name the first query result that the average value of salary is greater than the first query result	GROUP BY dept_name HAVING AVG ( salary ) > ( the first query result )  HAVING AVG ( salary ) > ( the first query result ) 
Get the number and semester of	SELECT COUNT ( * ) , semester , YEAR FROM
Group the records based on semester	GROUP BY semester ,
Get the number and semester of	SELECT COUNT ( * ) , semester , YEAR FROM
Group the records based on semester	GROUP BY semester ,
Get of	SELECT YEAR FROM
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of	SELECT YEAR FROM
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get semester of	SELECT semester , YEAR FROM
Group the records based on semester	GROUP BY semester ,
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get semester of	SELECT semester , YEAR FROM
Group the records based on semester	GROUP BY semester ,
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dept name of student	SELECT dept_name FROM student
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dept name of student	SELECT dept_name FROM student
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and dept name of student	SELECT COUNT ( * ) , dept_name FROM student
Group the records based on dept name	GROUP BY dept_name
Get the number and dept name of student	SELECT COUNT ( * ) , dept_name FROM student
Group the records based on dept name	GROUP BY dept_name
Get semester of takes	SELECT semester , YEAR FROM takes
Group the records based on semester	GROUP BY semester ,
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get semester of takes	SELECT semester , YEAR FROM takes
Group the records based on semester	GROUP BY semester ,
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get i id of advisor that has student	SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id
Keep the records that dept name of student is History	WHERE T2.dept_name = History
Get i id of advisor that has student	SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id
Keep the records that dept name of student is History	WHERE T2.dept_name = History
Get name and salary of advisor that has instructor and student	SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Keep the records that dept name of student is History	WHERE T3.dept_name = History
Get name and salary of advisor that has instructor and student	SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Keep the records that dept name of student is History	WHERE T3.dept_name = History
Get course id of course	SELECT course_id FROM course
Get course id of prereq	SELECT course_id FROM prereq
Get course id of course	SELECT course_id FROM course
Get course id of prereq	SELECT course_id FROM prereq
Get course id of prereq	SELECT course_id FROM prereq
Get title of course	SELECT title FROM course
Keep the records that course id is not in the first query result	WHERE course_id NOT IN ( the first query result ) 
Get course id of prereq	SELECT course_id FROM prereq
Get title of course	SELECT title FROM course
Keep the records that course id is not in the first query result	WHERE course_id NOT IN ( the first query result ) 
Get prereq id of prereq that has course	SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id
Keep the records that title of course is International Finance	WHERE T2.title = International Finance
Get title of course	SELECT title FROM course
Keep the records that course id is in the first query result	WHERE course_id IN ( the first query result ) 
Get prereq id of prereq that has course	SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id
Keep the records that title of course is International Finance	WHERE T2.title = International Finance
Get title of course	SELECT title FROM course
Keep the records that course id is in the first query result	WHERE course_id IN ( the first query result ) 
Get course id of prereq that has course	SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id
Keep the records that title of course is Differential Geometry	WHERE T2.title = Differential Geometry
Get title of course	SELECT title FROM course
Keep the records that course id is in the first query result	WHERE course_id IN ( the first query result ) 
Get course id of prereq that has course	SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id
Keep the records that title of course is Differential Geometry	WHERE T2.title = Differential Geometry
Get title of course	SELECT title FROM course
Keep the records that course id is in the first query result	WHERE course_id IN ( the first query result ) 
Get id of takes	SELECT id FROM takes
Keep the records that semester is Fall AND is 2003	WHERE semester = Fall AND YEAR = 2003
Get name of student	SELECT name FROM student
Keep the records that id is in the first query result	WHERE id IN ( the first query result ) 
Get id of takes	SELECT id FROM takes
Keep the records that semester is Fall AND is 2003	WHERE semester = Fall AND YEAR = 2003
Get name of student	SELECT name FROM student
Keep the records that id is in the first query result	WHERE id IN ( the first query result ) 
Get title of course that has SECTION	SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id
Keep the records that building is Chandler AND semester is Fall AND is 2010	WHERE building = Chandler AND semester = Fall AND YEAR = 2010
Get title of course that has SECTION	SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id
Keep the records that building is Chandler AND semester is Fall AND is 2010	WHERE building = Chandler AND semester = Fall AND YEAR = 2010
Get name of instructor that has teaches and course	SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id
Keep the records that title of course is C Programming	WHERE T3.title = C Programming
Get name of instructor that has teaches and course	SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id
Keep the records that title of course is C Programming	WHERE T3.title = C Programming
Get name and salary of advisor that has instructor and student	SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Keep the records that dept name of student is Math	WHERE T3.dept_name = Math
Get name and salary of advisor that has instructor and student	SELECT T2.name , T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Keep the records that dept name of student is Math	WHERE T3.dept_name = Math
Get name of advisor that has instructor and student	SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Keep the records that dept name of student is Math	WHERE T3.dept_name = Math 
Order these records based on the tot cred of student	ORDER BY T3.tot_cred 
Get name of advisor that has instructor and student	SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Keep the records that dept name of student is Math	WHERE T3.dept_name = Math 
Order these records based on the tot cred of student	ORDER BY T3.tot_cred 
Get prereq id of prereq that has course	SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id
Keep the records that title of course is Mobile Computing	WHERE T2.title = Mobile Computing
Get title of course	SELECT title FROM course
Keep the records that course id is in the first query result	WHERE course_id IN ( the first query result ) 
Get prereq id of prereq that has course	SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id
Keep the records that title of course is Mobile Computing	WHERE T2.title = Mobile Computing
Get title of course	SELECT title FROM course
Keep the records that course id is in the first query result	WHERE course_id IN ( the first query result ) 
Get name of advisor that has instructor and student	SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Order these records based on the tot cred of student and sort them in descending order, and return the top 1 record	ORDER BY T3.tot_cred DESC LIMIT 1
Get name of advisor that has instructor and student	SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id
Order these records based on the tot cred of student and sort them in descending order, and return the top 1 record	ORDER BY T3.tot_cred DESC LIMIT 1
Get id of teaches	SELECT id FROM teaches
Get name of instructor	SELECT name FROM instructor
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get id of teaches	SELECT id FROM teaches
Get name of instructor	SELECT name FROM instructor
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get id of instructor	SELECT id FROM instructor
Get id of teaches	SELECT id FROM teaches
Get id of instructor	SELECT id FROM instructor
Get id of teaches	SELECT id FROM teaches
Get id of teaches	SELECT id FROM teaches
Keep the records that semester is Spring	WHERE semester = Spring
Get name of instructor	SELECT name FROM instructor
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get id of teaches	SELECT id FROM teaches
Keep the records that semester is Spring	WHERE semester = Spring
Get name of instructor	SELECT name FROM instructor
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get dept name of instructor	SELECT dept_name FROM instructor
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the average value of salary and sort them in descending order, and return the top 1 record	ORDER BY AVG ( salary ) DESC LIMIT 1
Get dept name of instructor	SELECT dept_name FROM instructor
Group the records based on dept name	GROUP BY dept_name
Order these records based on the the average value of salary and sort them in descending order, and return the top 1 record	ORDER BY AVG ( salary ) DESC LIMIT 1
Get the average value of salary and the number of instructor that has department	SELECT AVG ( T1.salary ) , COUNT ( * ) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name
Order these records based on the budget of department and sort them in descending order, and return the top 1 record	ORDER BY T2.budget DESC LIMIT 1
Get the average value of salary and the number of instructor that has department	SELECT AVG ( T1.salary ) , COUNT ( * ) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name
Order these records based on the budget of department and sort them in descending order, and return the top 1 record	ORDER BY T2.budget DESC LIMIT 1
Get the maximum value of capacity of classroom	SELECT MAX ( capacity ) FROM classroom
Get title AND credits of classroom that has SECTION AND course	SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id
Keep the records that capacity of classroom is the first query result	WHERE T1.capacity = ( the first query result ) 
Get the maximum value of capacity of classroom	SELECT MAX ( capacity ) FROM classroom
Get title AND credits of classroom that has SECTION AND course	SELECT T3.title , T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id
Keep the records that capacity of classroom is the first query result	WHERE T1.capacity = ( the first query result ) 
Get id of takes that has course	SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id
Keep the records that dept name of course is Biology	WHERE T2.dept_name = Biology
Get name of student	SELECT name FROM student
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get id of takes that has course	SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id
Keep the records that dept name of course is Biology	WHERE T2.dept_name = Biology
Get name of student	SELECT name FROM student
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get the number of distinct id and the number of distinct id and dept name of department that has student and instructor	SELECT COUNT ( DISTINCT T2.id ) , COUNT ( DISTINCT T3.id ) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name
Group the records based on dept name of instructor	GROUP BY T3.dept_name
Get the number of distinct id and the number of distinct id and dept name of department that has student and instructor	SELECT COUNT ( DISTINCT T2.id ) , COUNT ( DISTINCT T3.id ) , T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name
Group the records based on dept name of instructor	GROUP BY T3.dept_name
Get prereq id of course that has prereq	SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id
Keep the records that title of course is International Finance	WHERE T3.title = International Finance
Get name of student that has takes	SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id
Keep the records that course id of takes is in the first query result	WHERE T2.course_id IN ( the first query result ) 
Get prereq id of course that has prereq	SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id
Keep the records that title of course is International Finance	WHERE T3.title = International Finance
Get name of student that has takes	SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id
Keep the records that course id of takes is in the first query result	WHERE T2.course_id IN ( the first query result ) 
Get the average value of salary of instructor	SELECT AVG ( salary ) FROM instructor
Keep the records that dept name is Physics	WHERE dept_name = Physics
Get name and salary of instructor	SELECT name , salary FROM instructor
Keep the records that salary is less than the first query result	WHERE salary < ( the first query result ) 
Get the average value of salary of instructor	SELECT AVG ( salary ) FROM instructor
Keep the records that dept name is Physics	WHERE dept_name = Physics
Get name and salary of instructor	SELECT name , salary FROM instructor
Keep the records that salary is less than the first query result	WHERE salary < ( the first query result ) 
Get name of course that has takes and student	SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id
Keep the records that dept name of course is Statistics	WHERE T1.dept_name = Statistics
Get name of course that has takes and student	SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id
Keep the records that dept name of course is Statistics	WHERE T1.dept_name = Statistics
Get building and room number and semester and year of course that has SECTION	SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id
Keep the records that dept name of course is Psychology	WHERE T1.dept_name = Psychology 
Order these records based on the title of course	ORDER BY T1.title 
Get building and room number and semester and year of course that has SECTION	SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id
Keep the records that dept name of course is Psychology	WHERE T1.dept_name = Psychology 
Order these records based on the title of course	ORDER BY T1.title 
Get name of instructor	SELECT name FROM instructor
Keep the records that dept name is Comp. Sci.	WHERE dept_name = Comp. Sci.
Get name of instructor	SELECT name FROM instructor
Keep the records that dept name is Comp. Sci.	WHERE dept_name = Comp. Sci.
Get name of instructor	SELECT name FROM instructor
Keep the records that dept name is Comp. Sci. AND salary is greater than 80000	WHERE dept_name = Comp. Sci. AND salary > 80000
Get name of instructor	SELECT name FROM instructor
Keep the records that dept name is Comp. Sci. AND salary is greater than 80000	WHERE dept_name = Comp. Sci. AND salary > 80000
Get name and course id of instructor that has teaches	SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2
Get name and course id of instructor that has teaches	SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2
Get name and course id of instructor that has teaches	SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID
Keep the records that dept name of instructor is Art	WHERE T1.dept_name = Art
Get name and course id of instructor that has teaches	SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID
Keep the records that dept name of instructor is Art	WHERE T1.dept_name = Art
Get name of instructor	SELECT name FROM instructor
Keep the records that name is in the form of %dar%	WHERE name LIKE %dar%
Get name of instructor	SELECT name FROM instructor
Keep the records that name is in the form of %dar%	WHERE name LIKE %dar%
Get name of instructor	SELECT DISTINCT name FROM instructor
Order these records based on the name	ORDER BY name 
Get name of instructor	SELECT DISTINCT name FROM instructor
Order these records based on the name	ORDER BY name 
Get course id of	SELECT course_id FROM
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get course id of	SELECT course_id FROM
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get course id of	SELECT course_id FROM
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get course id of	SELECT course_id FROM
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get course id of	SELECT course_id FROM
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get course id of	SELECT course_id FROM
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get course id of	SELECT course_id FROM
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get course id of	SELECT course_id FROM
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get course id of	SELECT course_id FROM
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get course id of	SELECT course_id FROM
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get course id of	SELECT course_id FROM
Keep the records that semester is Fall AND is 2009	WHERE semester = Fall AND YEAR = 2009
Get course id of	SELECT course_id FROM
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get the maximum value of salary of instructor	SELECT MAX ( salary ) FROM instructor
Get salary of instructor	SELECT DISTINCT salary FROM instructor
Keep the records that salary is less than the first query result	WHERE salary < ( the first query result ) 
Get the maximum value of salary of instructor	SELECT MAX ( salary ) FROM instructor
Get salary of instructor	SELECT DISTINCT salary FROM instructor
Keep the records that salary is less than the first query result	WHERE salary < ( the first query result ) 
Get the number of distinct ID of teaches	SELECT COUNT ( DISTINCT ID ) FROM teaches
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get the number of distinct ID of teaches	SELECT COUNT ( DISTINCT ID ) FROM teaches
Keep the records that semester is Spring AND is 2010	WHERE semester = Spring AND YEAR = 2010
Get the average value of salary and dept name of instructor	SELECT dept_name , AVG ( salary ) FROM instructor
Group the records based on the average value of salary dept name 42000 that the average value of salary is greater than 42000	GROUP BY dept_name HAVING AVG ( salary ) > 42000 HAVING AVG ( salary ) > 42000
Get the average value of salary and dept name of instructor	SELECT dept_name , AVG ( salary ) FROM instructor
Group the records based on the average value of salary dept name 42000 that the average value of salary is greater than 42000	GROUP BY dept_name HAVING AVG ( salary ) > 42000 HAVING AVG ( salary ) > 42000
Get the minimum value of salary of instructor	SELECT MIN ( salary ) FROM instructor
Keep the records that dept name is Biology	WHERE dept_name = Biology
Get name of instructor	SELECT name FROM instructor
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the minimum value of salary of instructor	SELECT MIN ( salary ) FROM instructor
Keep the records that dept name is Biology	WHERE dept_name = Biology
Get name of instructor	SELECT name FROM instructor
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the maximum value of salary of instructor	SELECT MAX ( salary ) FROM instructor
Keep the records that dept name is Biology	WHERE dept_name = Biology
Get name of instructor	SELECT name FROM instructor
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the maximum value of salary of instructor	SELECT MAX ( salary ) FROM instructor
Keep the records that dept name is Biology	WHERE dept_name = Biology
Get name of instructor	SELECT name FROM instructor
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the number of debate	SELECT COUNT ( * ) FROM debate
Get Venue of debate	SELECT Venue FROM debate
Order these records based on the Num of Audience and sort them in ascending ORDER	ORDER BY Num_of_Audience ASC 
Get Venue of debate	SELECT DATE , Venue FROM debate
Get of debate	SELECT DATE FROM debate
Keep the records that Num of Audience is greater than 150	WHERE Num_of_Audience > 150
Get Name of people	SELECT Name FROM people
Keep the records that Age is 35 OR Age is 36	WHERE Age = 35 OR Age = 36
Get Party of people	SELECT Party FROM people
Order these records based on the Age and sort them in ascending order, and return the top 1 record	ORDER BY Age ASC LIMIT 1
Get the number and Party of people	SELECT Party , COUNT ( * ) FROM people
Group the records based on Party	GROUP BY Party
Get Party of people	SELECT Party FROM people
Group the records based on Party	GROUP BY Party
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Venue of debate	SELECT DISTINCT Venue FROM debate
Get Name and Date and Venue of debate people that has debate and people	SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3
Get Name and Date and Venue of debate people that has debate and people	SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID
Order these records based on the Name of people and sort them in ascending ORDER	ORDER BY T3.Name ASC 
Get Name of debate people that has debate and people	SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID
Keep the records that Num of Audience of debate is greater than 200	WHERE T2.Num_of_Audience > 200
Get the number and Name of debate people that has people	SELECT T2.Name , COUNT ( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID
Group the records based on Name of people	GROUP BY T2.Name
Get Name of debate people that has people	SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID
Group the records based on the number Name of people 2 that the number is greater than or equal to 2	GROUP BY T2.Name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Affirmative of debate people	SELECT Affirmative FROM debate_people
Get Name of people	SELECT Name FROM people
Keep the records that People id is not in the first query result	WHERE People_id NOT IN ( the first query result ) 
Get customer details of customers	SELECT customer_details FROM customers
Order these records based on the customer details	ORDER BY customer_details 
Get customer details of customers	SELECT customer_details FROM customers
Order these records based on the customer details	ORDER BY customer_details 
Get policy type code of policies that has customers	SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer details of customers is Dayana Robel	WHERE t2.customer_details = Dayana Robel
Get policy type code of policies that has customers	SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer details of customers is Dayana Robel	WHERE t2.customer_details = Dayana Robel
Get policy type code of policies	SELECT policy_type_code FROM policies
Group the records based on policy type code	GROUP BY policy_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of policies	SELECT policy_type_code FROM policies
Group the records based on policy type code	GROUP BY policy_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get policy type code of policies	SELECT policy_type_code FROM policies
Group the records based on the number policy type code 2 that the number is greater than 2	GROUP BY policy_type_code HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get policy type code of policies	SELECT policy_type_code FROM policies
Group the records based on the number policy type code 2 that the number is greater than 2	GROUP BY policy_type_code HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the SUM of amount piad and the average value of amount piad of claim headers	SELECT SUM ( amount_piad ) , AVG ( amount_piad ) FROM claim_headers
Get the SUM of amount piad and the average value of amount piad of claim headers	SELECT SUM ( amount_piad ) , AVG ( amount_piad ) FROM claim_headers
Get created date of claims documents	SELECT created_date FROM claims_documents
Order these records based on the created date, and return the top 1 record	ORDER BY created_date LIMIT 1
Get the SUM of amount claimed of claim headers that has claims documents	SELECT SUM ( t1.amount_claimed ) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id
Keep the records that created date of claims documents is the first query result	WHERE t2.created_date = ( the first query result ) 
Get created date of claims documents	SELECT created_date FROM claims_documents
Order these records based on the created date, and return the top 1 record	ORDER BY created_date LIMIT 1
Get the SUM of amount claimed of claim headers that has claims documents	SELECT SUM ( t1.amount_claimed ) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id
Keep the records that created date of claims documents is the first query result	WHERE t2.created_date = ( the first query result ) 
Get the maximum value of amount claimed of claim headers	SELECT MAX ( amount_claimed ) FROM claim_headers
Get customer details of claim headers that has policies and customers	SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id
Keep the records that amount claimed of claim headers is the first query result	WHERE t1.amount_claimed = ( the first query result ) 
Get the maximum value of amount claimed of claim headers	SELECT MAX ( amount_claimed ) FROM claim_headers
Get customer details of claim headers that has policies and customers	SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id
Keep the records that amount claimed of claim headers is the first query result	WHERE t1.amount_claimed = ( the first query result ) 
Get the minimum value of amount piad of claim headers	SELECT MIN ( amount_piad ) FROM claim_headers
Get customer details of claim headers that has policies and customers	SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id
Keep the records that amount piad of claim headers is the first query result	WHERE t1.amount_piad = ( the first query result ) 
Get the minimum value of amount piad of claim headers	SELECT MIN ( amount_piad ) FROM claim_headers
Get customer details of claim headers that has policies and customers	SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id
Keep the records that amount piad of claim headers is the first query result	WHERE t1.amount_piad = ( the first query result ) 
Get customer details of customers	SELECT customer_details FROM customers
Get customer details of policies that has customers	SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2
Get customer details of customers	SELECT customer_details FROM customers
Get customer details of policies that has customers	SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2
Get the number of claims processing stages	SELECT COUNT ( * ) FROM claims_processing_stages
Get the number of claims processing stages	SELECT COUNT ( * ) FROM claims_processing_stages
Get claim status name of claims processing that has claims processing stages	SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id
Group the records based on claim stage id of claims processing	GROUP BY t1.claim_stage_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get claim status name of claims processing that has claims processing stages	SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id
Group the records based on claim stage id of claims processing	GROUP BY t1.claim_stage_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer details of customers	SELECT customer_details FROM customers
Keep the records that customer details is in the form of %Diana%	WHERE customer_details LIKE %Diana%
Get customer details of customers	SELECT customer_details FROM customers
Keep the records that customer details is in the form of %Diana%	WHERE customer_details LIKE %Diana%
Get customer details of policies that has customers	SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that policy type code of policies is Deputy	WHERE t1.policy_type_code = Deputy
Get customer details of policies that has customers	SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that policy type code of policies is Deputy	WHERE t1.policy_type_code = Deputy
Get customer details of policies that has customers	SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that policy type code of policies is Deputy OR policy type code of policies is Uniform	WHERE t1.policy_type_code = Deputy OR t1.policy_type_code = Uniform
Get customer details of policies that has customers	SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that policy type code of policies is Deputy OR policy type code of policies is Uniform	WHERE t1.policy_type_code = Deputy OR t1.policy_type_code = Uniform
Get customer details of customers	SELECT customer_details FROM customers
Get staff details of staff	SELECT staff_details FROM staff
Get customer details of customers	SELECT customer_details FROM customers
Get staff details of staff	SELECT staff_details FROM staff
Get the number and policy type code of policies	SELECT policy_type_code , COUNT ( * ) FROM policies
Group the records based on policy type code	GROUP BY policy_type_code
Get the number and policy type code of policies	SELECT policy_type_code , COUNT ( * ) FROM policies
Group the records based on policy type code	GROUP BY policy_type_code
Get customer details of policies that has customers	SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer details of customers	GROUP BY t2.customer_details
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer details of policies that has customers	SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer details of customers	GROUP BY t2.customer_details
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get claim status description of claims processing stages	SELECT claim_status_description FROM claims_processing_stages
Keep the records that claim status name is Open	WHERE claim_status_name = Open
Get claim status description of claims processing stages	SELECT claim_status_description FROM claims_processing_stages
Keep the records that claim status name is Open	WHERE claim_status_name = Open
Get the number of distinct claim outcome code of claims processing	SELECT COUNT ( DISTINCT claim_outcome_code ) FROM claims_processing
Get the number of distinct claim outcome code of claims processing	SELECT COUNT ( DISTINCT claim_outcome_code ) FROM claims_processing
Get the maximum value of start date of policies	SELECT MAX ( start_date ) FROM policies
Get customer details of policies that has customers	SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that start date of policies is the first query result	WHERE t1.start_date = ( the first query result ) 
Get the maximum value of start date of policies	SELECT MAX ( start_date ) FROM policies
Get customer details of policies that has customers	SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id
Keep the records that start date of policies is the first query result	WHERE t1.start_date = ( the first query result ) 
Get the number of Accounts	SELECT COUNT ( * ) FROM Accounts
Get the number of Accounts	SELECT COUNT ( * ) FROM Accounts
Get the number of distinct customer id of Accounts	SELECT COUNT ( DISTINCT customer_id ) FROM Accounts
Get the number of distinct customer id of Accounts	SELECT COUNT ( DISTINCT customer_id ) FROM Accounts
Get account id and date account opened and account name and other account details of Accounts	SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts
Get account id and date account opened and account name and other account details of Accounts	SELECT account_id , date_account_opened , account_name , other_account_details FROM Accounts
Get account id and date account opened and account name and other account details of Accounts that has Customers	SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Meaghan	WHERE T2.customer_first_name = Meaghan
Get account id and date account opened and account name and other account details of Accounts that has Customers	SELECT T1.account_id , T1.date_account_opened , T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Meaghan	WHERE T2.customer_first_name = Meaghan
Get account name AND other account details of Accounts that has Customers	SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Meaghan AND customer last name of Customers is Keeling	WHERE T2.customer_first_name = Meaghan AND T2.customer_last_name = Keeling
Get account name AND other account details of Accounts that has Customers	SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer first name of Customers is Meaghan AND customer last name of Customers is Keeling	WHERE T2.customer_first_name = Meaghan AND T2.customer_last_name = Keeling
Get customer first name and customer last name of Accounts that has Customers	SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that account name of Accounts is 900	WHERE T1.account_name = 900
Get customer first name and customer last name of Accounts that has Customers	SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that account name of Accounts is 900	WHERE T1.account_name = 900
Get customer id of Accounts	SELECT customer_id FROM Accounts
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer id of Accounts	SELECT customer_id FROM Accounts
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer first name and customer last name and phone number of Customers that has Accounts	SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2
Get customer first name and customer last name and phone number of Customers that has Accounts	SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2
Get customer id of Customers	SELECT customer_id FROM Customers
Get customer id of Accounts	SELECT customer_id FROM Accounts
Get customer id of Customers	SELECT customer_id FROM Customers
Get customer id of Accounts	SELECT customer_id FROM Accounts
Get the number and customer id of Accounts	SELECT COUNT ( * ) , customer_id FROM Accounts
Group the records based on customer id	GROUP BY customer_id
Get the number and customer id of Accounts	SELECT COUNT ( * ) , customer_id FROM Accounts
Group the records based on customer id	GROUP BY customer_id
Get customer id and customer first name and customer last name of Accounts that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Accounts	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer id and customer first name and customer last name of Accounts that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Accounts	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and customer id and customer first name and customer last name of Accounts that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , COUNT ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Accounts	GROUP BY T1.customer_id
Get the number and customer id and customer first name and customer last name of Accounts that has Customers	SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name , COUNT ( * ) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Accounts	GROUP BY T1.customer_id
Get customer first name and customer id of Accounts that has Customers	SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Accounts 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer first name and customer id of Accounts that has Customers	SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Accounts 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Get the number and gender of Customers	SELECT gender , COUNT ( * ) FROM Customers
Group the records based on gender	GROUP BY gender
Get the number and gender of Customers	SELECT gender , COUNT ( * ) FROM Customers
Group the records based on gender	GROUP BY gender
Get the number of Financial transactions	SELECT COUNT ( * ) FROM Financial_transactions
Get the number of Financial transactions	SELECT COUNT ( * ) FROM Financial_transactions
Get the number and account id of Financial transactions	SELECT COUNT ( * ) , account_id FROM Financial_transactions
Get the number and account id of Financial transactions	SELECT COUNT ( * ) , account_id FROM Financial_transactions
Get the number of Financial transactions that has Accounts	SELECT COUNT ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
Keep the records that account name of Accounts is 337	WHERE T2.account_name = 337
Get the number of Financial transactions that has Accounts	SELECT COUNT ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
Keep the records that account name of Accounts is 337	WHERE T2.account_name = 337
Get the average value of transaction amount and the minimum value of transaction amount and the maximum value of transaction amount and the SUM of transaction amount of Financial transactions	SELECT AVG ( transaction_amount ) , MIN ( transaction_amount ) , MAX ( transaction_amount ) , SUM ( transaction_amount ) FROM Financial_transactions
Get the average value of transaction amount and the minimum value of transaction amount and the maximum value of transaction amount and the SUM of transaction amount of Financial transactions	SELECT AVG ( transaction_amount ) , MIN ( transaction_amount ) , MAX ( transaction_amount ) , SUM ( transaction_amount ) FROM Financial_transactions
Get the average value of transaction amount of Financial transactions	SELECT AVG ( transaction_amount ) FROM Financial_transactions
Get transaction id of Financial transactions	SELECT transaction_id FROM Financial_transactions
Keep the records that transaction amount is greater than the first query result	WHERE transaction_amount > ( the first query result ) 
Get the average value of transaction amount of Financial transactions	SELECT AVG ( transaction_amount ) FROM Financial_transactions
Get transaction id of Financial transactions	SELECT transaction_id FROM Financial_transactions
Keep the records that transaction amount is greater than the first query result	WHERE transaction_amount > ( the first query result ) 
Get the SUM of transaction amount and transaction type of Financial transactions	SELECT transaction_type , SUM ( transaction_amount ) FROM Financial_transactions
Group the records based on transaction type	GROUP BY transaction_type
Get the SUM of transaction amount and transaction type of Financial transactions	SELECT transaction_type , SUM ( transaction_amount ) FROM Financial_transactions
Group the records based on transaction type	GROUP BY transaction_type
Get the number and account name and account id of Financial transactions that has Accounts	SELECT T2.account_name , T1.account_id , COUNT ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
Group the records based on account id of Financial transactions	GROUP BY T1.account_id
Get the number and account name and account id of Financial transactions that has Accounts	SELECT T2.account_name , T1.account_id , COUNT ( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
Group the records based on account id of Financial transactions	GROUP BY T1.account_id
Get account id of Financial transactions	SELECT account_id FROM Financial_transactions
Group the records based on account id	GROUP BY account_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get account id of Financial transactions	SELECT account_id FROM Financial_transactions
Group the records based on account id	GROUP BY account_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get account id and account name of Financial transactions that has Accounts	SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
Group the records based on the number account id of Financial transactions 4 that the number is greater than or equal to 4	GROUP BY T1.account_id HAVING COUNT ( * ) >= 4 HAVING COUNT ( * ) >= 4
Get account id and account name of Financial transactions that has Accounts	SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id
Group the records based on the number account id of Financial transactions 4 that the number is greater than or equal to 4	GROUP BY T1.account_id HAVING COUNT ( * ) >= 4 HAVING COUNT ( * ) >= 4
Get product size of Products	SELECT DISTINCT product_size FROM Products
Get product size of Products	SELECT DISTINCT product_size FROM Products
Get product color of Products	SELECT DISTINCT product_color FROM Products
Get product color of Products	SELECT DISTINCT product_color FROM Products
Get the number and invoice number of Financial transactions	SELECT invoice_number , COUNT ( * ) FROM Financial_transactions
Group the records based on invoice number	GROUP BY invoice_number
Get the number and invoice number of Financial transactions	SELECT invoice_number , COUNT ( * ) FROM Financial_transactions
Group the records based on invoice number	GROUP BY invoice_number
Get invoice number and invoice date of Financial transactions that has Invoices	SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
Group the records based on invoice number of Financial transactions	GROUP BY T1.invoice_number
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get invoice number and invoice date of Financial transactions that has Invoices	SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
Group the records based on invoice number of Financial transactions	GROUP BY T1.invoice_number
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of Invoices	SELECT COUNT ( * ) FROM Invoices
Get the number of Invoices	SELECT COUNT ( * ) FROM Invoices
Get invoice date and order id and order details of Invoices that has Orders	SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2
Get invoice date and order id and order details of Invoices that has Orders	SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2
Get the number and order id of Invoices	SELECT order_id , COUNT ( * ) FROM Invoices
Group the records based on order id	GROUP BY order_id
Get the number and order id of Invoices	SELECT order_id , COUNT ( * ) FROM Invoices
Group the records based on order id	GROUP BY order_id
Get order id and order details of Invoices that has Orders	SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id
Group the records based on the number order id of Orders 2 that the number is greater than 2	GROUP BY T2.order_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get order id and order details of Invoices that has Orders	SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id
Group the records based on the number order id of Orders 2 that the number is greater than 2	GROUP BY T2.order_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get customer last name and customer id and phone number of Orders that has Customers	SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Orders	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer last name and customer id and phone number of Orders that has Customers	SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Orders	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product name of Products	SELECT product_name FROM Products
Get product name of Products that has Order items	SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2
Get product name of Products	SELECT product_name FROM Products
Get product name of Products that has Order items	SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2
Get the SUM of product quantity and product name of Order items that has Products	SELECT T2.product_name , SUM ( T1.product_quantity ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id
Group the records based on product name of Products	GROUP BY T2.product_name
Get the SUM of product quantity and product name of Order items that has Products	SELECT T2.product_name , SUM ( T1.product_quantity ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id
Group the records based on product name of Products	GROUP BY T2.product_name
Get the number and order id of Order items	SELECT order_id , COUNT ( * ) FROM Order_items
Group the records based on order id	GROUP BY order_id
Get the number and order id of Order items	SELECT order_id , COUNT ( * ) FROM Order_items
Group the records based on order id	GROUP BY order_id
Get the number of distinct order id and product id of Order items	SELECT product_id , COUNT ( DISTINCT order_id ) FROM Order_items
Group the records based on product id	GROUP BY product_id
Get the number of distinct order id and product id of Order items	SELECT product_id , COUNT ( DISTINCT order_id ) FROM Order_items
Group the records based on product id	GROUP BY product_id
Get the number and product name of Order items that has Products and Orders	SELECT T2.product_name , COUNT ( * ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id
Group the records based on product name of Products	GROUP BY T2.product_name
Get the number and product name of Order items that has Products and Orders	SELECT T2.product_name , COUNT ( * ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id
Group the records based on product name of Products	GROUP BY T2.product_name
Get the number of distinct product id and order id of Order items	SELECT order_id , COUNT ( DISTINCT product_id ) FROM Order_items
Group the records based on order id	GROUP BY order_id
Get the number of distinct product id and order id of Order items	SELECT order_id , COUNT ( DISTINCT product_id ) FROM Order_items
Group the records based on order id	GROUP BY order_id
Get the SUM of product quantity and order id of Order items	SELECT order_id , SUM ( product_quantity ) FROM Order_items
Group the records based on order id	GROUP BY order_id
Get the SUM of product quantity and order id of Order items	SELECT order_id , SUM ( product_quantity ) FROM Order_items
Group the records based on order id	GROUP BY order_id
Get product id of Order items	SELECT product_id FROM Order_items
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product id is not in the first query result	WHERE product_id NOT IN ( the first query result ) 
Get product id of Order items	SELECT product_id FROM Order_items
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product id is not in the first query result	WHERE product_id NOT IN ( the first query result ) 
Get the number of Church	SELECT COUNT ( * ) FROM Church
Keep the records that Open Date is less than 1850	WHERE Open_Date < 1850
Get name and open date and organized by of Church	SELECT name , open_date , organized_by FROM Church
Get name of church	SELECT name FROM church
Order these records based on the open date and sort them in descending ORDER	ORDER BY open_date DESC 
Get open date of church	SELECT open_date FROM church
Group the records based on the number open date 2 that the number is greater than or equal to 2	GROUP BY open_date HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get organized by AND name of church	SELECT organized_by , name FROM church
Keep the records that open date is between 183 X1840	WHERE open_date BETWEEN 1830 AND 1840
Get the number and open date of church	SELECT open_date , COUNT ( * ) FROM church
Group the records based on open date	GROUP BY open_date
Get name and open date of church	SELECT name , open_date FROM church
Order these records based on the open date and sort them in descending order, and return the top 3 records	ORDER BY open_date DESC LIMIT 3
Get the number of people	SELECT COUNT ( * ) FROM people
Keep the records that is male is F AND age is greater than 30	WHERE is_male = F AND age > 30
Get country of people	SELECT country FROM people
Keep the records that age is less than 25	WHERE age < 25
Get country of people	SELECT country FROM people
Keep the records that age is greater than 30	WHERE age > 30
Get the minimum value of age and the maximum value of age and the average value of age of people	SELECT MIN ( age ) , MAX ( age ) , AVG ( age ) FROM people
Get the average value of age of people	SELECT AVG ( age ) FROM people
Get name and country of people	SELECT name , country FROM people
Keep the records that age is less than the first query result	WHERE age < ( the first query result ) 
Get name and name of wedding that has people	SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id
Keep the records that year of wedding is greater than 2014	WHERE T1.year > 2014
Get male id of wedding	SELECT male_id FROM wedding
Get name AND age of people	SELECT name , age FROM people
Keep the records that is male is T AND people id is not in the first query result	WHERE is_male = T AND people_id NOT IN ( the first query result ) 
Get name of church	SELECT name FROM church
Get name of church that has wedding	SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id
Keep the records that year of wedding is 2015	WHERE T2.year = 2015
Get name of church that has wedding	SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id
Group the records based on the number church id of church 2 that the number is greater than or equal to 2	GROUP BY T1.church_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of wedding that has people	SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id
Keep the records that year of wedding is 2016 AND is male of people is F AND country of people is Canada	WHERE T1.year = 2016 AND T2.is_male = F AND T2.country = Canada
Get the number of wedding	SELECT COUNT ( * ) FROM wedding
Keep the records that is 2016	WHERE YEAR = 2016
Get name of wedding that has people and church	SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id
Keep the records that age of people is greater than 30 OR age of people is greater than 30	WHERE T2.age > 30 OR T3.age > 30
Get the number and country of people	SELECT country , COUNT ( * ) FROM people
Group the records based on country	GROUP BY country
Get the number of distinct church id of wedding	SELECT COUNT ( DISTINCT church_id ) FROM wedding
Keep the records that is 2016	WHERE YEAR = 2016
Get the number of artist	SELECT COUNT ( * ) FROM artist
Get the number of artist	SELECT COUNT ( * ) FROM artist
Get name and age and country of artist	SELECT name , age , country FROM artist
Order these records based on the Year Join	ORDER BY Year_Join 
Get name and age and country of artist	SELECT name , age , country FROM artist
Order these records based on the Year Join	ORDER BY Year_Join 
Get country of artist	SELECT DISTINCT country FROM artist
Get country of artist	SELECT DISTINCT country FROM artist
Get name and year join of artist	SELECT name , year_join FROM artist
Keep the records that country is not United States	WHERE country != United States
Get name and year join of artist	SELECT name , year_join FROM artist
Keep the records that country is not United States	WHERE country != United States
Get the number of artist	SELECT COUNT ( * ) FROM artist
Keep the records that age is greater than 46 AND year join is greater than 1990	WHERE age > 46 AND year_join > 1990
Get the number of artist	SELECT COUNT ( * ) FROM artist
Keep the records that age is greater than 46 AND year join is greater than 1990	WHERE age > 46 AND year_join > 1990
Get the average value of age and the minimum value of age of artist	SELECT AVG ( age ) , MIN ( age ) FROM artist
Keep the records that country is United States	WHERE country = United States
Get the average value of age and the minimum value of age of artist	SELECT AVG ( age ) , MIN ( age ) FROM artist
Keep the records that country is United States	WHERE country = United States
Get name of artist	SELECT name FROM artist
Order these records based on the year join and sort them in descending order, and return the top 1 record	ORDER BY year_join DESC LIMIT 1
Get name of artist	SELECT name FROM artist
Order these records based on the year join and sort them in descending order, and return the top 1 record	ORDER BY year_join DESC LIMIT 1
Get the number of exhibition	SELECT COUNT ( * ) FROM exhibition
Keep the records that is greater than or equal to 2005	WHERE YEAR >= 2005
Get the number of exhibition	SELECT COUNT ( * ) FROM exhibition
Keep the records that is greater than or equal to 2005	WHERE YEAR >= 2005
Get theme of exhibition	SELECT theme , YEAR FROM exhibition
Keep the records that ticket price is less than 15	WHERE ticket_price < 15
Get theme of exhibition	SELECT theme , YEAR FROM exhibition
Keep the records that ticket price is less than 15	WHERE ticket_price < 15
Get the number and name of exhibition that has artist	SELECT T2.name , COUNT ( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Group the records based on artist id of exhibition	GROUP BY T1.artist_id
Get the number and name of exhibition that has artist	SELECT T2.name , COUNT ( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Group the records based on artist id of exhibition	GROUP BY T1.artist_id
Get name and country of exhibition that has artist	SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Group the records based on artist id of exhibition	GROUP BY T1.artist_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and country of exhibition that has artist	SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Group the records based on artist id of exhibition	GROUP BY T1.artist_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get artist id of exhibition	SELECT artist_id FROM exhibition
Get name of artist	SELECT name FROM artist
Keep the records that artist id is not in the first query result	WHERE artist_id NOT IN ( the first query result ) 
Get artist id of exhibition	SELECT artist_id FROM exhibition
Get name of artist	SELECT name FROM artist
Keep the records that artist id is not in the first query result	WHERE artist_id NOT IN ( the first query result ) 
Get the average value of ticket price of exhibition	SELECT AVG ( ticket_price ) FROM exhibition
Get theme and name of exhibition that has artist	SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Keep the records that ticket price of exhibition is greater than the first query result	WHERE T1.ticket_price > ( the first query result ) 
Get the average value of ticket price of exhibition	SELECT AVG ( ticket_price ) FROM exhibition
Get theme and name of exhibition that has artist	SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Keep the records that ticket price of exhibition is greater than the first query result	WHERE T1.ticket_price > ( the first query result ) 
Get the average value of ticket price and the minimum value of ticket price and the maximum value of ticket price of exhibition	SELECT AVG ( ticket_price ) , MIN ( ticket_price ) , MAX ( ticket_price ) FROM exhibition
Keep the records that is less than 2009	WHERE YEAR < 2009
Get the average value of ticket price and the minimum value of ticket price and the maximum value of ticket price of exhibition	SELECT AVG ( ticket_price ) , MIN ( ticket_price ) , MAX ( ticket_price ) FROM exhibition
Keep the records that is less than 2009	WHERE YEAR < 2009
Get theme of exhibition	SELECT theme , YEAR FROM exhibition
Order these records based on the ticket price and sort them in descending ORDER	ORDER BY ticket_price DESC 
Get theme of exhibition	SELECT theme , YEAR FROM exhibition
Order these records based on the ticket price and sort them in descending ORDER	ORDER BY ticket_price DESC 
Get theme and date and attendance of exhibition record that has exhibition	SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that year of exhibition is 2004	WHERE T2.year = 2004
Get theme and date and attendance of exhibition record that has exhibition	SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that year of exhibition is 2004	WHERE T2.year = 2004
Get name of artist	SELECT name FROM artist
Get name of exhibition that has artist	SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Keep the records that year of exhibition is 2004	WHERE T1.year = 2004
Get name of artist	SELECT name FROM artist
Get name of exhibition that has artist	SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id
Keep the records that year of exhibition is 2004	WHERE T1.year = 2004
Get theme of exhibition record that has exhibition	SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that attendance of exhibition record is less than 100	WHERE T1.attendance < 100
Get theme of exhibition record that has exhibition	SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that attendance of exhibition record is greater than 500	WHERE T1.attendance > 500
Get theme of exhibition record that has exhibition	SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that attendance of exhibition record is less than 100	WHERE T1.attendance < 100
Get theme of exhibition record that has exhibition	SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that attendance of exhibition record is greater than 500	WHERE T1.attendance > 500
Get the number of exhibition record that has exhibition	SELECT COUNT ( * ) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that attendance of exhibition record is greater than 100 OR ticket price of exhibition is less than 10	WHERE T1.attendance > 100 OR T2.ticket_price < 10
Get the number of exhibition record that has exhibition	SELECT COUNT ( * ) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id
Keep the records that attendance of exhibition record is greater than 100 OR ticket price of exhibition is less than 10	WHERE T1.attendance > 100 OR T2.ticket_price < 10
Get name of exhibition record that has exhibition and artist	SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id
Group the records based on the average value of attendance of exhibition record artist id of artist 200 that the average value of attendance of exhibition record is greater than 200	GROUP BY T3.artist_id HAVING AVG ( T1.attendance ) > 200 HAVING AVG ( T1.attendance ) > 200
Get name of exhibition record that has exhibition and artist	SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id
Group the records based on the average value of attendance of exhibition record artist id of artist 200 that the average value of attendance of exhibition record is greater than 200	GROUP BY T3.artist_id HAVING AVG ( T1.attendance ) > 200 HAVING AVG ( T1.attendance ) > 200
Get i id of item	SELECT i_id FROM item
Keep the records that title is orange	WHERE title = orange
Get all of item	SELECT * FROM item
Get the number of review	SELECT COUNT ( * ) FROM review
Get the number of useracct	SELECT COUNT ( * ) FROM useracct
Get the average value of rating and the maximum value of rating of review	SELECT AVG ( rating ) , MAX ( rating ) FROM review
Get the minimum value of rank of review	SELECT MIN ( rank ) FROM review
Get the number of distinct u id of review	SELECT COUNT ( DISTINCT u_id ) FROM review
Get the number of distinct i id of review	SELECT COUNT ( DISTINCT i_id ) FROM review
Get i id of review	SELECT i_id FROM review
Get the number of item	SELECT COUNT ( * ) FROM item
Keep the records that i id is not in the first query result	WHERE i_id NOT IN ( the first query result ) 
Get u id of review	SELECT u_id FROM review
Get name of useracct	SELECT name FROM useracct
Keep the records that u id is not in the first query result	WHERE u_id NOT IN ( the first query result ) 
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Keep the records that rating of review is 10	WHERE T2.rating = 10
Get the average value of rating of review	SELECT AVG ( rating ) FROM review
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Keep the records that rating of review is greater than the first query result	WHERE T2.rating > ( the first query result ) 
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Keep the records that rating of review is less than 5	WHERE T2.rating < 5
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Keep the records that rating of review is greater than 8	WHERE T2.rating > 8
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Keep the records that rating of review is less than 5	WHERE T2.rating < 5
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Keep the records that rank of review is greater than 3	WHERE T2.rank > 3
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Group the records based on the average value of rating of review i id of review 5 that the average value of rating of review is greater than 5	GROUP BY T2.i_id HAVING AVG ( T2.rating ) > 5 HAVING AVG ( T2.rating ) > 5
Get title of item that has review	SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Group the records based on i id of review	GROUP BY T2.i_id
Order these records based on the the average value of rating of review, and return the top 1 record	ORDER BY AVG ( T2.rating ) LIMIT 1
Get title of item	SELECT title FROM item
Order these records based on the title	ORDER BY title 
Get name of useracct that has review	SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
Group the records based on u id of review	GROUP BY T2.u_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title and i id of item that has review	SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Group the records based on i id of review	GROUP BY T2.i_id
Order these records based on the the average value of rating of review and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T2.rating ) DESC LIMIT 1
Get title and i id of item that has review	SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id
Group the records based on i id of review	GROUP BY T2.i_id
Order these records based on the the average value of rank of review and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T2.rank ) DESC LIMIT 1
Get the average value of rating and name of useracct that has review	SELECT T1.name , AVG ( T2.rating ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
Group the records based on u id of review	GROUP BY T2.u_id
Get the number and name of useracct that has review	SELECT T1.name , COUNT ( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
Group the records based on u id of review	GROUP BY T2.u_id
Get name of useracct that has review	SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id
Order these records based on the rating of review and sort them in descending order, and return the top 1 record	ORDER BY T2.rating DESC LIMIT 1
Get name of useracct that has trust	SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id
Group the records based on source u id of trust	GROUP BY T2.source_u_id
Order these records based on the the average value of trust and sort them in descending order, and return the top 1 record	ORDER BY AVG ( trust ) DESC LIMIT 1
Get the average value of trust and name of useracct that has trust	SELECT T1.name , AVG ( trust ) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id
Group the records based on target u id of trust	GROUP BY T2.target_u_id
Get name of useracct that has trust	SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id
Order these records based on the trust, and return the top 1 record	ORDER BY trust LIMIT 1
Get i id of review	SELECT i_id FROM review
Get title of item	SELECT title FROM item
Keep the records that i id is not in the first query result	WHERE i_id NOT IN ( the first query result ) 
Get u id of review	SELECT u_id FROM review
Get name of useracct	SELECT name FROM useracct
Keep the records that u id is not in the first query result	WHERE u_id NOT IN ( the first query result ) 
Get u id of review	SELECT u_id FROM review
Get the number of useracct	SELECT COUNT ( * ) FROM useracct
Keep the records that u id is not in the first query result	WHERE u_id NOT IN ( the first query result ) 
Get i id of review	SELECT i_id FROM review
Get the number of item	SELECT COUNT ( * ) FROM item
Keep the records that i id is not in the first query result	WHERE i_id NOT IN ( the first query result ) 
Get the number of player	SELECT COUNT ( * ) FROM player
Get Player name of player	SELECT Player_name FROM player
Order these records based on the Votes and sort them in ascending ORDER	ORDER BY Votes ASC 
Get Gender and Occupation of player	SELECT Gender , Occupation FROM player
Get Player name and residence of player	SELECT Player_name , residence FROM player
Keep the records that Occupation is not Researcher	WHERE Occupation != Researcher
Get Sponsor name of player	SELECT Sponsor_name FROM player
Keep the records that Residence is Brandon OR Residence is Birtle	WHERE Residence = Brandon OR Residence = Birtle
Get Player name of player	SELECT Player_name FROM player
Order these records based on the Votes and sort them in descending order, and return the top 1 record	ORDER BY Votes DESC LIMIT 1
Get the number and Occupation of player	SELECT Occupation , COUNT ( * ) FROM player
Group the records based on Occupation	GROUP BY Occupation
Get Occupation of player	SELECT Occupation FROM player
Group the records based on Occupation	GROUP BY Occupation
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Residence of player	SELECT Residence FROM player
Group the records based on the number Residence 2 that the number is greater than or equal to 2	GROUP BY Residence HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Player name and coach name of player coach that has coach and player	SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3
Get Player name of player coach that has coach and player	SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
Keep the records that Rank of coach is 1	WHERE T2.Rank = 1
Get Player name and gender of player coach that has coach and player	SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
Keep the records that Starting year of player coach is greater than 2011	WHERE T1.Starting_year > 2011
Get Player name and coach name of player coach that has coach and player	SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID
Order these records based on the Votes of player and sort them in descending ORDER	ORDER BY T3.Votes DESC 
Get Player ID of player coach	SELECT Player_ID FROM player_coach
Get Player name of player	SELECT Player_name FROM player
Keep the records that Player ID is not in the first query result	WHERE Player_ID NOT IN ( the first query result ) 
Get Residence of player	SELECT Residence FROM player
Keep the records that gender is M	WHERE gender = M
Get Residence of player	SELECT Residence FROM player
Keep the records that gender is F	WHERE gender = F
Get the number and club id and club name of club that has coach	SELECT T1.club_id , T1.club_name , COUNT ( * ) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id
Group the records based on club id of club	GROUP BY T1.club_id
Get club id and gold of match result that has coach	SELECT T1.club_id , T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id
Group the records based on club id of match result	GROUP BY T1.club_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of gymnast	SELECT COUNT ( * ) FROM gymnast
Get the number of gymnast	SELECT COUNT ( * ) FROM gymnast
Get Total Points of gymnast	SELECT Total_Points FROM gymnast
Order these records based on the Total Points and sort them in descending ORDER	ORDER BY Total_Points DESC 
Get Total Points of gymnast	SELECT Total_Points FROM gymnast
Order these records based on the Total Points and sort them in descending ORDER	ORDER BY Total_Points DESC 
Get Total Points of gymnast	SELECT Total_Points FROM gymnast
Order these records based on the Floor Exercise Points and sort them in descending ORDER	ORDER BY Floor_Exercise_Points DESC 
Get Total Points of gymnast	SELECT Total_Points FROM gymnast
Order these records based on the Floor Exercise Points and sort them in descending ORDER	ORDER BY Floor_Exercise_Points DESC 
Get the average value of Horizontal Bar Points of gymnast	SELECT AVG ( Horizontal_Bar_Points ) FROM gymnast
Get the average value of Horizontal Bar Points of gymnast	SELECT AVG ( Horizontal_Bar_Points ) FROM gymnast
Get Name of People	SELECT Name FROM People
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of People	SELECT Name FROM People
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of gymnast that has people	SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2
Get Name of gymnast that has people	SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2
Get Name of gymnast that has people	SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Keep the records that Hometown of people is not Santo Domingo	WHERE T2.Hometown != Santo Domingo
Get Name of gymnast that has people	SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Keep the records that Hometown of people is not Santo Domingo	WHERE T2.Hometown != Santo Domingo
Get Age of people	SELECT Age FROM people
Order these records based on the Height and sort them in descending order, and return the top 1 record	ORDER BY Height DESC LIMIT 1
Get Age of people	SELECT Age FROM people
Order these records based on the Height and sort them in descending order, and return the top 1 record	ORDER BY Height DESC LIMIT 1
Get Name of People	SELECT Name FROM People
Order these records based on the Age and sort them in descending order, and return the top 5 records	ORDER BY Age DESC LIMIT 5
Get Name of People	SELECT Name FROM People
Order these records based on the Age and sort them in descending order, and return the top 5 records	ORDER BY Age DESC LIMIT 5
Get Total Points of gymnast that has people	SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Order these records based on the Age of people and sort them in ascending order, and return the top 1 record	ORDER BY T2.Age ASC LIMIT 1
Get Total Points of gymnast that has people	SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Order these records based on the Age of people and sort them in ascending order, and return the top 1 record	ORDER BY T2.Age ASC LIMIT 1
Get the average value of Age of gymnast that has people	SELECT AVG ( T2.Age ) FROM gymnast AS T1 JOIN people AS T2
Get the average value of Age of gymnast that has people	SELECT AVG ( T2.Age ) FROM gymnast AS T1 JOIN people AS T2
Get Hometown of gymnast that has people	SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Keep the records that Total Points of gymnast is greater than 5 7.5	WHERE T1.Total_Points > 5 7.5
Get Hometown of gymnast that has people	SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Keep the records that Total Points of gymnast is greater than 5 7.5	WHERE T1.Total_Points > 5 7.5
Get the number and Hometown of gymnast that has people	SELECT T2.Hometown , COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Group the records based on Hometown of people	GROUP BY T2.Hometown
Get the number and Hometown of gymnast that has people	SELECT T2.Hometown , COUNT ( * ) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Group the records based on Hometown of people	GROUP BY T2.Hometown
Get Hometown of gymnast that has people	SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Group the records based on Hometown of people	GROUP BY T2.Hometown
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Hometown of gymnast that has people	SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Group the records based on Hometown of people	GROUP BY T2.Hometown
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Hometown of gymnast that has people	SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Group the records based on the number Hometown of people 2 that the number is greater than or equal to 2	GROUP BY T2.Hometown HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Hometown of gymnast that has people	SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Group the records based on the number Hometown of people 2 that the number is greater than or equal to 2	GROUP BY T2.Hometown HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name of gymnast that has people	SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Order these records based on the Height of people and sort them in ascending ORDER	ORDER BY T2.Height ASC 
Get Name of gymnast that has people	SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Order these records based on the Height of people and sort them in ascending ORDER	ORDER BY T2.Height ASC 
Get Hometown of people	SELECT DISTINCT Hometown FROM people
Get Hometown of gymnast that has people	SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2
Get Hometown of people	SELECT DISTINCT Hometown FROM people
Get Hometown of gymnast that has people	SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2
Get Hometown of people	SELECT Hometown FROM people
Keep the records that Age is greater than 23	WHERE Age > 23
Get Hometown of people	SELECT Hometown FROM people
Keep the records that Age is less than 20	WHERE Age < 20
Get Hometown of people	SELECT Hometown FROM people
Keep the records that Age is greater than 23	WHERE Age > 23
Get Hometown of people	SELECT Hometown FROM people
Keep the records that Age is less than 20	WHERE Age < 20
Get the number of distinct Hometown of people	SELECT COUNT ( DISTINCT Hometown ) FROM people
Get the number of distinct Hometown of people	SELECT COUNT ( DISTINCT Hometown ) FROM people
Get Age of gymnast that has people	SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Order these records based on the Total Points of gymnast and sort them in descending ORDER	ORDER BY T1.Total_Points DESC 
Get Age of gymnast that has people	SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID
Order these records based on the Total Points of gymnast and sort them in descending ORDER	ORDER BY T1.Total_Points DESC 
Get the SUM of balance of accounts that has savings	SELECT SUM ( T2.balance ) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Keep the records that name of accounts is not Brown	WHERE T1.name != Brown
Get the SUM of balance of accounts that has savings	SELECT SUM ( T2.balance ) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Keep the records that name of accounts is not Brown	WHERE T1.name != Brown
Get the number of accounts	SELECT COUNT ( * ) FROM accounts
Get the number of accounts	SELECT COUNT ( * ) FROM accounts
Get the SUM of balance of checking	SELECT SUM ( balance ) FROM checking
Get the SUM of balance of checking	SELECT SUM ( balance ) FROM checking
Get the average value of balance of checking	SELECT AVG ( balance ) FROM checking
Get the average value of balance of checking	SELECT AVG ( balance ) FROM checking
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get the number of savings	SELECT COUNT ( * ) FROM savings
Keep the records that balance is greater than the first query result	WHERE balance > ( the first query result ) 
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get the number of savings	SELECT COUNT ( * ) FROM savings
Keep the records that balance is greater than the first query result	WHERE balance > ( the first query result ) 
Get the maximum value of balance of checking	SELECT MAX ( balance ) FROM checking
Get custid and name of accounts that has checking	SELECT T1.custid , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that balance of checking is less than the first query result	WHERE T2.balance < ( the first query result ) 
Get the maximum value of balance of checking	SELECT MAX ( balance ) FROM checking
Get custid and name of accounts that has checking	SELECT T1.custid , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that balance of checking is less than the first query result	WHERE T2.balance < ( the first query result ) 
Get balance of accounts that has checking	SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that name of accounts is in the form of %ee%	WHERE T1.name LIKE %ee%
Get balance of accounts that has checking	SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that name of accounts is in the form of %ee%	WHERE T1.name LIKE %ee%
Get balance and balance of accounts that has checking and savings	SELECT T2.balance , T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that name of accounts is Brown	WHERE T1.name = Brown
Get balance and balance of accounts that has checking and savings	SELECT T2.balance , T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that name of accounts is Brown	WHERE T1.name = Brown
Get the average value of balance of checking	SELECT AVG ( balance ) FROM checking
Get name of accounts that has checking	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that balance of savings is greater than the first query result	WHERE T2.balance > ( the first query result ) 
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get name of accounts that has savings	SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Keep the records that balance of savings is less than the third query result	WHERE T2.balance < ( the third query result ) 
Get the average value of balance of checking	SELECT AVG ( balance ) FROM checking
Get name of accounts that has checking	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that balance of savings is greater than the first query result	WHERE T2.balance > ( the first query result ) 
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get name of accounts that has savings	SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Keep the records that balance of savings is less than the third query result	WHERE T2.balance < ( the third query result ) 
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get name of accounts that has savings	SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Keep the records that balance of savings is greater than the first query result	WHERE T2.balance > ( the first query result ) 
Get balance of accounts that has checking	SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that name of accounts is in the second query result	WHERE T1.name IN ( the second query result ) 
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get name of accounts that has savings	SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Keep the records that balance of savings is greater than the first query result	WHERE T2.balance > ( the first query result ) 
Get balance of accounts that has checking	SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that name of accounts is in the second query result	WHERE T1.name IN ( the second query result ) 
Get name of accounts	SELECT name FROM accounts
Order these records based on the name	ORDER BY name 
Get name of accounts	SELECT name FROM accounts
Order these records based on the name	ORDER BY name 
Get name of accounts that has checking and savings	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of checking balance of savings, and return the top 1 record	ORDER BY T2.balance + T3.balance LIMIT 1
Get name of accounts that has checking and savings	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of checking balance of savings, and return the top 1 record	ORDER BY T2.balance + T3.balance LIMIT 1
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get name and balance and balance of accounts that has checking and savings	SELECT T1.name , T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that balance of savings is greater than the first query result	WHERE T3.balance > ( the first query result ) 
Get the average value of balance of savings	SELECT AVG ( balance ) FROM savings
Get name and balance and balance of accounts that has checking and savings	SELECT T1.name , T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that balance of savings is greater than the first query result	WHERE T3.balance > ( the first query result ) 
Get name and balance of accounts that has checking and savings	SELECT T1.name , T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of savings, and return the top 1 record	ORDER BY T3.balance LIMIT 1
Get name and balance of accounts that has checking and savings	SELECT T1.name , T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of savings, and return the top 1 record	ORDER BY T3.balance LIMIT 1
Get the number and name of accounts that has checking	SELECT COUNT ( * ) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Group the records based on name of accounts	GROUP BY T1.name
Get the number and name of accounts that has checking	SELECT COUNT ( * ) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Group the records based on name of accounts	GROUP BY T1.name
Get the SUM of balance and name of accounts that has savings	SELECT SUM ( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Group the records based on name of accounts	GROUP BY T1.name
Get the SUM of balance and name of accounts that has savings	SELECT SUM ( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Group the records based on name of accounts	GROUP BY T1.name
Get the average value of balance of checking	SELECT AVG ( balance ) FROM checking
Get name of accounts that has checking	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that balance of checking is less than the first query result	WHERE T2.balance < ( the first query result ) 
Get the average value of balance of checking	SELECT AVG ( balance ) FROM checking
Get name of accounts that has checking	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid
Keep the records that balance of checking is less than the first query result	WHERE T2.balance < ( the first query result ) 
Get balance of accounts that has checking and savings	SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of checking and sort them in descending order, and return the top 1 record	ORDER BY T2.balance DESC LIMIT 1
Get balance of accounts that has checking and savings	SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of checking and sort them in descending order, and return the top 1 record	ORDER BY T2.balance DESC LIMIT 1
Get balance and balance of checking that has savings	SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Order these records based on the balance of checking balance of savings	ORDER BY T1.balance + T2.balance 
Get balance and balance of checking that has savings	SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Order these records based on the balance of checking balance of savings	ORDER BY T1.balance + T2.balance 
Get balance and name of accounts that has checking and savings	SELECT T2.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of savings, and return the top 1 record	ORDER BY T3.balance LIMIT 1
Get balance and name of accounts that has checking and savings	SELECT T2.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of savings, and return the top 1 record	ORDER BY T3.balance LIMIT 1
Get balance and balance and name of accounts that has checking and savings	SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3
Get balance and balance and name of accounts that has checking and savings	SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3
Get balance and balance and name of accounts that has checking and savings	SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of checking balance of savings and sort them in descending ORDER	ORDER BY T2.balance + T3.balance DESC 
Get balance and balance and name of accounts that has checking and savings	SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Order these records based on the balance of checking balance of savings and sort them in descending ORDER	ORDER BY T2.balance + T3.balance DESC 
Get name of accounts that has checking and savings	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that balance of checking is greater than balance of savings	WHERE T2.balance > T3.balance
Get name of accounts that has checking and savings	SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that balance of checking is greater than balance of savings	WHERE T2.balance > T3.balance
Get name and balance and balance of accounts that has checking and savings	SELECT T1.name , T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that balance of savings is less than balance of checking	WHERE T3.balance < T2.balance
Get name and balance and balance of accounts that has checking and savings	SELECT T1.name , T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid
Keep the records that balance of savings is less than balance of checking	WHERE T3.balance < T2.balance
Get name and balance of accounts that has savings	SELECT T1.name , T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Order these records based on the balance of savings and sort them in descending order, and return the top 3 records	ORDER BY T2.balance DESC LIMIT 3
Get name and balance of accounts that has savings	SELECT T1.name , T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid
Order these records based on the balance of savings and sort them in descending order, and return the top 3 records	ORDER BY T2.balance DESC LIMIT 3
Get the number of browser	SELECT COUNT ( * ) FROM browser
Keep the records that market share is greater than or equal to 5	WHERE market_share >= 5
Get name of browser	SELECT name FROM browser
Order these records based on the market share and sort them in descending ORDER	ORDER BY market_share DESC 
Get id and name and market share of browser	SELECT id , name , market_share FROM browser
Get the maximum value of market share and the minimum value of market share and the average value of market share of browser	SELECT MAX ( market_share ) , MIN ( market_share ) , AVG ( market_share ) FROM browser
Get id and market share of browser	SELECT id , market_share FROM browser
Keep the records that name is Safari	WHERE name = Safari
Get name and operating system of web client accelerator	SELECT name , operating_system FROM web_client_accelerator
Keep the records that is not Broadband	WHERE CONNECTION != Broadband
Get name of browser that has accelerator compatible browser AND web client accelerator	SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id
Keep the records that name of web client accelerator is CProxy AND compatible since year of accelerator compatible browser is greater than 1998	WHERE T3.name = CProxy AND T2.compatible_since_year > 1998
Get id and Name of web client accelerator that has accelerator compatible browser	SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id
Group the records based on the number id of web client accelerator 2 that the number is greater than or equal to 2	GROUP BY T1.id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get id and name of browser that has accelerator compatible browser	SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id
Group the records based on id of browser	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get compatible since year of accelerator compatible browser that has browser AND web client accelerator	SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id
Keep the records that name of web client accelerator is CACHEbox AND name of browser is Internet Explorer	WHERE T3.name = CACHEbox AND T2.name = Internet Explorer
Get the number of distinct client of web client accelerator	SELECT COUNT ( DISTINCT client ) FROM web_client_accelerator
Get accelerator id of accelerator compatible browser	SELECT accelerator_id FROM accelerator_compatible_browser
Get the number of web client accelerator	SELECT COUNT ( * ) FROM web_client_accelerator
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get name of web client accelerator that has accelerator compatible browser and browser	SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id
Keep the records that market share of browser is greater than 15	WHERE T3.market_share > 15
Get name of web client accelerator that has accelerator compatible browser and browser	SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id
Keep the records that name of web client accelerator is CACHEbox	WHERE T1.name = CACHEbox
Get name of web client accelerator that has accelerator compatible browser and browser	SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id
Keep the records that name of web client accelerator is Fasterfox	WHERE T1.name = Fasterfox
Get name and operating system of web client accelerator	SELECT name , operating_system FROM web_client_accelerator
Get name and operating system of web client accelerator that has accelerator compatible browser and browser	SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id
Keep the records that name of browser is Opera	WHERE T3.name = Opera
Get name of web client accelerator	SELECT name FROM web_client_accelerator
Keep the records that name is in the form of %Opera%	WHERE name LIKE %Opera%
Get the number and Operating system of web client accelerator	SELECT Operating_system , COUNT ( * ) FROM web_client_accelerator
Group the records based on Operating system	GROUP BY Operating_system
Get name and name of accelerator compatible browser that has browser and web client accelerator	SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id
Order these records based on the compatible since year of accelerator compatible browser and sort them in descending ORDER	ORDER BY T1.compatible_since_year DESC 
Get the number of wrestler	SELECT COUNT ( * ) FROM wrestler
Get the number of wrestler	SELECT COUNT ( * ) FROM wrestler
Get Name of wrestler	SELECT Name FROM wrestler
Order these records based on the Days held and sort them in descending ORDER	ORDER BY Days_held DESC 
Get Name of wrestler	SELECT Name FROM wrestler
Order these records based on the Days held and sort them in descending ORDER	ORDER BY Days_held DESC 
Get Name of wrestler	SELECT Name FROM wrestler
Order these records based on the Days held and sort them in ascending order, and return the top 1 record	ORDER BY Days_held ASC LIMIT 1
Get Name of wrestler	SELECT Name FROM wrestler
Order these records based on the Days held and sort them in ascending order, and return the top 1 record	ORDER BY Days_held ASC LIMIT 1
Get Reign of wrestler	SELECT DISTINCT Reign FROM wrestler
Keep the records that is not Tokyo , Japan	WHERE LOCATION != Tokyo , Japan
Get Reign of wrestler	SELECT DISTINCT Reign FROM wrestler
Keep the records that is not Tokyo , Japan	WHERE LOCATION != Tokyo , Japan
Get Name of wrestler	SELECT Name , LOCATION FROM wrestler
Get Name of wrestler	SELECT Name , LOCATION FROM wrestler
Get Elimination Move of Elimination	SELECT Elimination_Move FROM Elimination
Keep the records that Team is Team Orton	WHERE Team = Team Orton
Get Elimination Move of Elimination	SELECT Elimination_Move FROM Elimination
Keep the records that Team is Team Orton	WHERE Team = Team Orton
Get Name and Elimination Move of elimination that has wrestler	SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2
Get Name and Elimination Move of elimination that has wrestler	SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2
Get Name and Team of elimination that has wrestler	SELECT T2.Name , T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
Order these records based on the Days held of wrestler and sort them in descending ORDER	ORDER BY T2.Days_held DESC 
Get Name and Team of elimination that has wrestler	SELECT T2.Name , T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
Order these records based on the Days held of wrestler and sort them in descending ORDER	ORDER BY T2.Days_held DESC 
Get Time of elimination that has wrestler	SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
Order these records based on the Days held of wrestler and sort them in descending order, and return the top 1 record	ORDER BY T2.Days_held DESC LIMIT 1
Get Time of elimination that has wrestler	SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
Order these records based on the Days held of wrestler and sort them in descending order, and return the top 1 record	ORDER BY T2.Days_held DESC LIMIT 1
Get Time of elimination that has wrestler	SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
Keep the records that Days held of wrestler is greater than 50	WHERE T2.Days_held > 50
Get Time of elimination that has wrestler	SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID
Keep the records that Days held of wrestler is greater than 50	WHERE T2.Days_held > 50
Get the number and Team of elimination	SELECT Team , COUNT ( * ) FROM elimination
Group the records based on Team	GROUP BY Team
Get the number and Team of elimination	SELECT Team , COUNT ( * ) FROM elimination
Group the records based on Team	GROUP BY Team
Get Team of elimination	SELECT Team FROM elimination
Group the records based on the number Team 3 that the number is greater than 3	GROUP BY Team HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get Team of elimination	SELECT Team FROM elimination
Group the records based on the number Team 3 that the number is greater than 3	GROUP BY Team HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get Reign and Days held of wrestler	SELECT Reign , Days_held FROM wrestler
Get Reign and Days held of wrestler	SELECT Reign , Days_held FROM wrestler
Get Name of wrestler	SELECT Name FROM wrestler
Keep the records that Days held is less than 100	WHERE Days_held < 100
Get Name of wrestler	SELECT Name FROM wrestler
Keep the records that Days held is less than 100	WHERE Days_held < 100
Get Reign of wrestler	SELECT Reign FROM wrestler
Group the records based on Reign	GROUP BY Reign
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Reign of wrestler	SELECT Reign FROM wrestler
Group the records based on Reign	GROUP BY Reign
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of wrestler	SELECT LOCATION FROM wrestler
Group the records based on that the number is greater than 2	GROUP BY HAVING COUNT ( * ) > 2
Get of wrestler	SELECT LOCATION FROM wrestler
Group the records based on that the number is greater than 2	GROUP BY HAVING COUNT ( * ) > 2
Get Wrestler ID of elimination	SELECT Wrestler_ID FROM elimination
Get Name of wrestler	SELECT Name FROM wrestler
Keep the records that Wrestler ID is not in the first query result	WHERE Wrestler_ID NOT IN ( the first query result ) 
Get Wrestler ID of elimination	SELECT Wrestler_ID FROM elimination
Get Name of wrestler	SELECT Name FROM wrestler
Keep the records that Wrestler ID is not in the first query result	WHERE Wrestler_ID NOT IN ( the first query result ) 
Get Team of Elimination	SELECT Team FROM Elimination
Keep the records that Eliminated By is Orton	WHERE Eliminated_By = Orton
Get Team of Elimination	SELECT Team FROM Elimination
Keep the records that Eliminated By is Benjamin	WHERE Eliminated_By = Benjamin
Get Team of Elimination	SELECT Team FROM Elimination
Keep the records that Eliminated By is Orton	WHERE Eliminated_By = Orton
Get Team of Elimination	SELECT Team FROM Elimination
Keep the records that Eliminated By is Benjamin	WHERE Eliminated_By = Benjamin
Get the number of distinct team of elimination	SELECT COUNT ( DISTINCT team ) FROM elimination
Get the number of distinct team of elimination	SELECT COUNT ( DISTINCT team ) FROM elimination
Get of elimination	SELECT TIME FROM elimination
Keep the records that Eliminated By is Punk OR Eliminated By is Orton	WHERE Eliminated_By = Punk OR Eliminated_By = Orton
Get of elimination	SELECT TIME FROM elimination
Keep the records that Eliminated By is Punk OR Eliminated By is Orton	WHERE Eliminated_By = Punk OR Eliminated_By = Orton
Get the number of school	SELECT COUNT ( * ) FROM school
Get the number of school	SELECT COUNT ( * ) FROM school
Get school name of school	SELECT school_name FROM school
Order these records based on the school name	ORDER BY school_name 
Get school name and mascot of school	SELECT school_name , LOCATION , mascot FROM school
Get the SUM of enrollment and the average value of enrollment of school	SELECT SUM ( enrollment ) , AVG ( enrollment ) FROM school
Get the average value of enrollment of school	SELECT AVG ( enrollment ) FROM school
Get mascot of school	SELECT mascot FROM school
Keep the records that enrollment is greater than the first query result	WHERE enrollment > ( the first query result ) 
Get school name of school	SELECT school_name FROM school
Order these records based on the enrollment, and return the top 1 record	ORDER BY enrollment LIMIT 1
Get the average value of enrollment and the maximum value of enrollment and the minimum value of enrollment of school	SELECT AVG ( enrollment ) , MAX ( enrollment ) , MIN ( enrollment ) FROM school
Get the number and the SUM of enrollment and county of school	SELECT county , COUNT ( * ) , SUM ( enrollment ) FROM school
Group the records based on county	GROUP BY county
Get the number of distinct donator name of endowment that has school	SELECT COUNT ( DISTINCT T1.donator_name ) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Keep the records that school name of school is Glenn	WHERE T2.school_name = Glenn
Get the SUM of amount and donator name of endowment	SELECT donator_name , SUM ( amount ) FROM endowment
Group the records based on donator name	GROUP BY donator_name
Order these records based on the the SUM of amount and sort them in descending ORDER	ORDER BY SUM ( amount ) DESC 
Get school id of endowment	SELECT school_id FROM endowment
Get school name of school	SELECT school_name FROM school
Keep the records that school id is not in the first query result	WHERE school_id NOT IN ( the first query result ) 
Get school name of endowment that has school	SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Group the records based on the SUM of amount of endowment school id of endowment 10 that the SUM of amount of endowment is less than or equal to 10	GROUP BY T1.school_id HAVING SUM ( T1.amount ) <= 10 HAVING SUM ( T1.amount ) <= 10
Get donator name of endowment that has school	SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Keep the records that school name of school is Glenn	WHERE T2.school_name = Glenn
Get donator name of endowment that has school	SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Keep the records that school name of school is Triton	WHERE T2.school_name = Triton
Get donator name of endowment	SELECT donator_name FROM endowment
Get donator name of endowment	SELECT donator_name FROM endowment
Keep the records that amount is less than 9	WHERE amount < 9
Get amount and donator name of endowment	SELECT amount , donator_name FROM endowment
Order these records based on the amount and sort them in descending order, and return the top 1 record	ORDER BY amount DESC LIMIT 1
Get the number of budget	SELECT COUNT ( * ) FROM budget
Keep the records that budgeted is greater than 3000 AND is less than or equal to 2001	WHERE budgeted > 3000 AND YEAR <= 2001
Get the number of budget	SELECT COUNT ( * ) FROM budget
Keep the records that budgeted is greater than 3000 AND is less than or equal to 2001	WHERE budgeted > 3000 AND YEAR <= 2001
Get school name and budgeted and invested of budget that has school	SELECT T2.school_name , T1.budgeted , T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Keep the records that year of budget is greater than or equal to 2002	WHERE T1.year >= 2002
Get donator name of endowment	SELECT DISTINCT donator_name FROM endowment
Get the number of budget	SELECT COUNT ( * ) FROM budget
Keep the records that budgeted is less than invested	WHERE budgeted < invested
Get the SUM of budgeted of budget that has school	SELECT SUM ( T1.budgeted ) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Keep the records that school name of school is Glenn	WHERE T2.school_name = Glenn
Get school name of budget that has school and endowment	SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id
Group the records based on the SUM of budgeted of budget the SUM of amount of endowment school name of school 100 10 that the SUM of budgeted of budget is greater than 100 OR the SUM of amount of endowment is greater than 10	GROUP BY T2.school_name HAVING SUM ( T1.budgeted ) > 100 OR SUM ( T3.amount ) > 10 HAVING SUM ( T1.budgeted ) > 100 OR SUM ( T3.amount ) > 10
Get School name of endowment that has school	SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Keep the records that amount of endowment is greater than 8.5	WHERE T1.amount > 8.5 
Group the records based on the number school id of endowment 1 that the number is greater than 1	GROUP BY T1.school_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get all of endowment	SELECT * FROM endowment
Keep the records that amount is greater than 8.5	WHERE amount > 8.5 
Group the records based on the number school id 1 that the number is greater than 1	GROUP BY school_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number of the first query result	SELECT COUNT ( * ) FROM ( the first query result ) 
Get School name and Mascot and IHSAA Football Class of school that has budget	SELECT T1.School_name , T1.Mascot , T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id
Keep the records that Budgeted is greater than 6000 OR is less than 2003	WHERE Budgeted > 6000 OR YEAR < 2003 
Order these records based on the total budget percent invested of budget total budget percent Budgeted of budget	ORDER BY T2.total_budget_percent_invested , T2.total_budget_percent_budgeted 
Get the number of building	SELECT COUNT ( * ) FROM building
Get name and street address and floors of building	SELECT name , street_address , floors FROM building
Order these records based on the floors	ORDER BY floors 
Get name of building	SELECT name FROM building
Order these records based on the height feet and sort them in descending order, and return the top 1 record	ORDER BY height_feet DESC LIMIT 1
Get the average value of floors and the maximum value of floors and the minimum value of floors of building	SELECT AVG ( floors ) , MAX ( floors ) , MIN ( floors ) FROM building
Get the average value of height feet of building	SELECT AVG ( height_feet ) FROM building
Get the number of building	SELECT COUNT ( * ) FROM building
Keep the records that height feet is greater than the first query result OR floors is greater than SELECT AVG ( floors the average value of floors	WHERE height_feet > ( the first query result )  OR floors > ( SELECT AVG ( floors ) FROM building )
Get name of building	SELECT name FROM building
Keep the records that height feet is greater than or equal to 200 AND floors is greater than or equal to 20	WHERE height_feet >= 200 AND floors >= 20
Get institution of institution	SELECT institution , LOCATION FROM institution
Keep the records that founded is greater than 1990 AND is Private	WHERE founded > 1990 AND TYPE = Private
Get the number and the SUM of enrollment of institution	SELECT TYPE , COUNT ( * ) , SUM ( enrollment ) FROM institution
Group the records based on	GROUP BY
Get of institution	SELECT TYPE FROM institution
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of institution	SELECT TYPE FROM institution
Keep the records that founded is greater than 1990 AND enrollment is greater than or equal to 1000	WHERE founded > 1990 AND enrollment >= 1000
Get building id of institution	SELECT building_id FROM institution
Get name of building	SELECT name FROM building
Keep the records that building id is not in the first query result	WHERE building_id NOT IN ( the first query result ) 
Get name of building	SELECT name FROM building
Get name of building that has institution	SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id
Keep the records that founded of institution is 2003	WHERE T2.founded = 2003
Get the number and name of building that has institution	SELECT T1.name , COUNT ( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id
Group the records based on building id of building	GROUP BY T1.building_id
Get name and height feet of building that has institution	SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id
Keep the records that founded of institution is greater than 1880	WHERE T2.founded > 1880 
Group the records based on the number building id of building 2 that the number is greater than or equal to 2	GROUP BY T1.building_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get of institution	SELECT DISTINCT TYPE FROM institution
Get the number and institution of institution that has protein	SELECT T1.institution , COUNT ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id
Group the records based on institution id of institution	GROUP BY T1.institution_id
Get the number of institution that has protein	SELECT COUNT ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id
Keep the records that founded of institution is greater than 1880 OR type of institution is Private	WHERE T1.founded > 1880 OR T1.type = Private
Get protein name and institution of institution that has protein	SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2
Get the number of institution that has protein and building	SELECT COUNT ( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id
Keep the records that floors of building is greater than or equal to 20	WHERE T3.floors >= 20
Get institution id of protein	SELECT institution_id FROM protein
Get the number of institution	SELECT COUNT ( * ) FROM institution
Keep the records that institution id is not in the first query result	WHERE institution_id NOT IN ( the first query result ) 
Get of cinema	SELECT LOCATION FROM cinema
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that capacity is greater than 800	WHERE capacity > 800
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that openning year is 2010	WHERE openning_year = 2010
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that openning year is 2011	WHERE openning_year = 2011
Get the number of cinema	SELECT COUNT ( * ) FROM cinema
Get the number of cinema	SELECT COUNT ( * ) FROM cinema
Get name and openning year and capacity of cinema	SELECT name , openning_year , capacity FROM cinema
Get the average value of capacity of cinema	SELECT AVG ( capacity ) FROM cinema
Get name of cinema	SELECT name , LOCATION FROM cinema
Keep the records that capacity is greater than the first query result	WHERE capacity > ( the first query result ) 
Get of cinema	SELECT DISTINCT LOCATION FROM cinema
Get of cinema	SELECT DISTINCT LOCATION FROM cinema
Get name and openning year of cinema	SELECT name , openning_year FROM cinema
Order these records based on the openning year and sort them in descending ORDER	ORDER BY openning_year DESC 
Get name of cinema	SELECT name , LOCATION FROM cinema
Order these records based on the capacity and sort them in descending order, and return the top 1 record	ORDER BY capacity DESC LIMIT 1
Get the average value of capacity and the minimum value of capacity and the maximum value of capacity of cinema	SELECT AVG ( capacity ) , MIN ( capacity ) , MAX ( capacity ) FROM cinema
Keep the records that openning year is greater than or equal to 2011	WHERE openning_year >= 2011
Get the number of cinema	SELECT LOCATION , COUNT ( * ) FROM cinema
Group the records based on	GROUP BY
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that openning year is greater than or equal to 2010	WHERE openning_year >= 2010 
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that capacity is greater than 300	WHERE capacity > 300 
Group the records based on that the number is greater than or equal to 2	GROUP BY HAVING COUNT ( * ) >= 2
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that capacity is greater than 300	WHERE capacity > 300 
Group the records based on that the number is greater than or equal to 2	GROUP BY HAVING COUNT ( * ) >= 2
Get title and directed by of film	SELECT title , directed_by FROM film
Get title and directed by of film	SELECT title , directed_by FROM film
Get directed by of film	SELECT DISTINCT directed_by FROM film
Get directed by of film	SELECT DISTINCT directed_by FROM film
Get the number and directed BY of film	SELECT directed_by , COUNT ( * ) FROM film
Group the records based on directed BY	GROUP BY directed_by
Get the SUM of show times per day and name of schedule that has cinema	SELECT T2.name , SUM ( T1.show_times_per_day ) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id
Group the records based on cinema id of schedule	GROUP BY T1.cinema_id
Get the maximum value of price and title of schedule that has film	SELECT T2.title , MAX ( T1.price ) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id
Group the records based on film id of schedule	GROUP BY T1.film_id
Get the maximum value of price and title of schedule that has film	SELECT T2.title , MAX ( T1.price ) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id
Group the records based on film id of schedule	GROUP BY T1.film_id
Get name and title and date and price of schedule that has film and cinema	SELECT T3.name , T2.title , T1.date , T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3
Get film id of schedule	SELECT film_id FROM schedule
Get title and directed by of film	SELECT title , directed_by FROM film
Keep the records that film id is not in the first query result	WHERE film_id NOT IN ( the first query result ) 
Get directed BY of schedule that has film	SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id
Group the records based on directed BY of film	GROUP BY T2.directed_by
Order these records based on the the SUM of show times per day of schedule and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.show_times_per_day ) DESC LIMIT 1
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that capacity is greater than 300	WHERE capacity > 300 
Group the records based on that the number is greater than 1	GROUP BY HAVING COUNT ( * ) > 1
Get of cinema	SELECT LOCATION FROM cinema
Keep the records that capacity is greater than 300	WHERE capacity > 300 
Group the records based on that the number is greater than 1	GROUP BY HAVING COUNT ( * ) > 1
Get the number of film	SELECT COUNT ( * ) FROM film
Keep the records that title is in the form of %Dummy%	WHERE title LIKE %Dummy%
Get the number of film	SELECT COUNT ( * ) FROM film
Keep the records that title is in the form of %Dummy%	WHERE title LIKE %Dummy%
Get good or bad customer of customers that has discount coupons	SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id
Keep the records that coupon amount of discount coupons is 500	WHERE T2.coupon_amount = 500
Get the number and customer id and first name of Customers that has bookings	SELECT T1.customer_id , T1.first_name , COUNT ( * ) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of Customers	GROUP BY T1.customer_id
Get the SUM of amount paid and customer id of Payments	SELECT customer_id , SUM ( amount_paid ) FROM Payments
Group the records based on customer id	GROUP BY customer_id
Order these records based on the the SUM of amount paid and sort them in descending order, and return the top 1 record	ORDER BY SUM ( amount_paid ) DESC LIMIT 1
Get booking id and amount of refund of Bookings that has Payments	SELECT T1.booking_id , T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id
Group the records based on booking id of Bookings	GROUP BY T1.booking_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product id of products booked	SELECT product_id FROM products_booked
Group the records based on the number product id 3 that the number is 3	GROUP BY product_id HAVING COUNT ( * ) = 3 HAVING COUNT ( * ) = 3
Get product description of products booked that has products for hire	SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id
Keep the records that booked amount of products booked is 10 2.76	WHERE T1.booked_amount = 10 2.76
Get booking start date and booking end date of Products for hire that has products booked and bookings	SELECT T3.booking_start_date , T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id
Keep the records that product name of Products for hire is Book collection A	WHERE T1.product_name = Book collection A
Get product name of view product availability that has products for hire	SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id
Keep the records that available yn of view product availability is 1	WHERE T1.available_yn = 1
Get the number of distinct product type code of products for hire	SELECT COUNT ( DISTINCT product_type_code ) FROM products_for_hire
Get first name and last name and gender mf of customers	SELECT first_name , last_name , gender_mf FROM customers
Keep the records that good or bad customer is good	WHERE good_or_bad_customer = good 
Order these records based on the last name	ORDER BY last_name 
Get the average value of amount due of payments	SELECT AVG ( amount_due ) FROM payments
Get the maximum value of booked count and the minimum value of booked count and the average value of booked count of products booked	SELECT MAX ( booked_count ) , MIN ( booked_count ) , AVG ( booked_count ) FROM products_booked
Get payment type code of payments	SELECT DISTINCT payment_type_code FROM payments
Get daily hire cost of Products for hire	SELECT daily_hire_cost FROM Products_for_hire
Keep the records that product name is in the form of %Book%	WHERE product_name LIKE %Book%
Get product id of products booked	SELECT product_id FROM products_booked
Keep the records that booked amount is greater than 200	WHERE booked_amount > 200
Get the number of Products for hire	SELECT COUNT ( * ) FROM Products_for_hire
Keep the records that product id is not in the first query result	WHERE product_id NOT IN ( the first query result ) 
Get coupon amount of Discount Coupons that has customers	SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id
Keep the records that good or bad customer of customers is good	WHERE T2.good_or_bad_customer = good
Get coupon amount of Discount Coupons that has customers	SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id
Keep the records that good or bad customer of customers is bad	WHERE T2.good_or_bad_customer = bad
Get payment date of payments	SELECT payment_date FROM payments
Keep the records that amount paid is greater than 300 OR payment type code is Check	WHERE amount_paid > 300 OR payment_type_code = Check
Get product name AND product description of products for hire	SELECT product_name , product_description FROM products_for_hire
Keep the records that product type code is Cutlery AND daily hire cost is less than 20	WHERE product_type_code = Cutlery AND daily_hire_cost < 20
Get the number of phone	SELECT COUNT ( * ) FROM phone
Get Name of phone	SELECT Name FROM phone
Order these records based on the Price and sort them in ascending ORDER	ORDER BY Price ASC 
Get Memory in G and Carrier of phone	SELECT Memory_in_G , Carrier FROM phone
Get Carrier of phone	SELECT DISTINCT Carrier FROM phone
Keep the records that Memory in G is greater than 32	WHERE Memory_in_G > 32
Get Name of phone	SELECT Name FROM phone
Keep the records that Carrier is Sprint OR Carrier is TMobile	WHERE Carrier = Sprint OR Carrier = TMobile
Get Carrier of phone	SELECT Carrier FROM phone
Order these records based on the Price and sort them in descending order, and return the top 1 record	ORDER BY Price DESC LIMIT 1
Get the number and Carrier of phone	SELECT Carrier , COUNT ( * ) FROM phone
Group the records based on Carrier	GROUP BY Carrier
Get Carrier of phone	SELECT Carrier FROM phone
Group the records based on Carrier	GROUP BY Carrier
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Carrier of phone	SELECT Carrier FROM phone
Keep the records that Memory in G is less than 32	WHERE Memory_in_G < 32
Get Carrier of phone	SELECT Carrier FROM phone
Keep the records that Memory in G is greater than 64	WHERE Memory_in_G > 64
Get Name and District of phone market that has market and phone	SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3
Get Name and District of phone market that has market and phone	SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
Order these records based on the Ranking of market	ORDER BY T2.Ranking 
Get Name of phone market that has market and phone	SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID
Keep the records that Num of shops of market is greater than 50	WHERE T2.Num_of_shops > 50
Get the SUM of Num of stock and Name of phone market that has phone	SELECT T2.Name , SUM ( T1.Num_of_stock ) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID
Group the records based on Name of phone	GROUP BY T2.Name
Get Name of phone market that has phone	SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID
Group the records based on the SUM of Num of stock of phone market Name of phone 2000 that the SUM of Num of stock of phone market is greater than or equal to 2000	GROUP BY T2.Name HAVING SUM ( T1.Num_of_stock ) >= 2000 HAVING SUM ( T1.Num_of_stock ) >= 2000
Order these records based on the the SUM of Num of stock of phone market and sort them in descending ORDER	ORDER BY SUM ( T1.Num_of_stock ) DESC 
Get Phone ID of phone market	SELECT Phone_ID FROM phone_market
Get Name of phone	SELECT Name FROM phone
Keep the records that Phone id is not in the first query result	WHERE Phone_id NOT IN ( the first query result ) 
Get the number of company	SELECT COUNT ( * ) FROM company
Get the number of company	SELECT COUNT ( * ) FROM company
Get company and rank of company	SELECT company , rank FROM company
Order these records based on the Sales billion and sort them in descending ORDER	ORDER BY Sales_billion DESC 
Get company and rank of company	SELECT company , rank FROM company
Order these records based on the Sales billion and sort them in descending ORDER	ORDER BY Sales_billion DESC 
Get company and main industry of company	SELECT company , main_industry FROM company
Keep the records that headquarters is not USA	WHERE headquarters != USA
Get company and main industry of company	SELECT company , main_industry FROM company
Keep the records that headquarters is not USA	WHERE headquarters != USA
Get company and headquarters of company	SELECT company , headquarters FROM company
Order these records based on the market value and sort them in descending ORDER	ORDER BY market_value DESC 
Get company and headquarters of company	SELECT company , headquarters FROM company
Order these records based on the market value and sort them in descending ORDER	ORDER BY market_value DESC 
Get the minimum value of market value and the maximum value of market value and the average value of market value of company	SELECT MIN ( market_value ) , MAX ( market_value ) , AVG ( market_value ) FROM company
Get the minimum value of market value and the maximum value of market value and the average value of market value of company	SELECT MIN ( market_value ) , MAX ( market_value ) , AVG ( market_value ) FROM company
Get main industry of company	SELECT DISTINCT main_industry FROM company
Get main industry of company	SELECT DISTINCT main_industry FROM company
Get the number and headquarters of company	SELECT headquarters , COUNT ( * ) FROM company
Group the records based on headquarters	GROUP BY headquarters
Get the number and headquarters of company	SELECT headquarters , COUNT ( * ) FROM company
Group the records based on headquarters	GROUP BY headquarters
Get the SUM of market value and main industry of company	SELECT main_industry , SUM ( market_value ) FROM company
Group the records based on main industry	GROUP BY main_industry
Get the SUM of market value and main industry of company	SELECT main_industry , SUM ( market_value ) FROM company
Group the records based on main industry	GROUP BY main_industry
Get the number and main industry of company	SELECT main_industry , COUNT ( * ) FROM company
Group the records based on main industry	GROUP BY main_industry
Order these records based on the the SUM of market value and sort them in descending order, and return the top 1 record	ORDER BY SUM ( market_value ) DESC LIMIT 1
Get the number and main industry of company	SELECT main_industry , COUNT ( * ) FROM company
Group the records based on main industry	GROUP BY main_industry
Order these records based on the the SUM of market value and sort them in descending order, and return the top 1 record	ORDER BY SUM ( market_value ) DESC LIMIT 1
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking 
Group the records based on the number headquarters 2 that the number is greater than or equal to 2	GROUP BY headquarters HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking 
Group the records based on the number headquarters 2 that the number is greater than or equal to 2	GROUP BY headquarters HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get station id and manager name of gas station	SELECT station_id , LOCATION , manager_name FROM gas_station
Order these records based on the open year	ORDER BY open_year 
Get station id and manager name of gas station	SELECT station_id , LOCATION , manager_name FROM gas_station
Order these records based on the open year	ORDER BY open_year 
Get the number of gas station	SELECT COUNT ( * ) FROM gas_station
Keep the records that open year is between 200 X2005	WHERE open_year BETWEEN 2000 AND 2005
Get the number of gas station	SELECT COUNT ( * ) FROM gas_station
Keep the records that open year is between 200 X2005	WHERE open_year BETWEEN 2000 AND 2005
Get the number of gas station	SELECT LOCATION , COUNT ( * ) FROM gas_station
Group the records based on	GROUP BY
Order these records based on the the number	ORDER BY COUNT ( * ) 
Get the number of gas station	SELECT LOCATION , COUNT ( * ) FROM gas_station
Group the records based on	GROUP BY
Order these records based on the the number	ORDER BY COUNT ( * ) 
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Oil and gas	WHERE main_industry = Oil and gas
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Oil and gas	WHERE main_industry = Oil and gas
Get headquarters of company	SELECT headquarters FROM company
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking
Get headquarters of company	SELECT headquarters FROM company
Get headquarters of company	SELECT headquarters FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking
Get the number and company of station company that has company	SELECT T2.company , COUNT ( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id
Group the records based on company id of station company	GROUP BY T1.company_id
Get the number and company of station company that has company	SELECT T2.company , COUNT ( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id
Group the records based on company id of station company	GROUP BY T1.company_id
Get company id of station company	SELECT company_id FROM station_company
Get company and main industry of company	SELECT company , main_industry FROM company
Keep the records that company id is not in the first query result	WHERE company_id NOT IN ( the first query result ) 
Get company id of station company	SELECT company_id FROM station_company
Get company and main industry of company	SELECT company , main_industry FROM company
Keep the records that company id is not in the first query result	WHERE company_id NOT IN ( the first query result ) 
Get manager name of station company that has company and gas station	SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id
Keep the records that company of company is ExxonMobil	WHERE T2.company = ExxonMobil
Get manager name of station company that has company and gas station	SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id
Keep the records that company of company is ExxonMobil	WHERE T2.company = ExxonMobil
Get location of station company that has company and gas station	SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id
Keep the records that market value of company is greater than 100	WHERE T2.market_value > 100
Get location of station company that has company and gas station	SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id
Keep the records that market value of company is greater than 100	WHERE T2.market_value > 100
Get manager name of gas station	SELECT manager_name FROM gas_station
Keep the records that open year is greater than 2000	WHERE open_year > 2000 
Group the records based on manager name	GROUP BY manager_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get manager name of gas station	SELECT manager_name FROM gas_station
Keep the records that open year is greater than 2000	WHERE open_year > 2000 
Group the records based on manager name	GROUP BY manager_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of gas station	SELECT LOCATION FROM gas_station
Order these records based on the open year	ORDER BY open_year 
Get of gas station	SELECT LOCATION FROM gas_station
Order these records based on the open year	ORDER BY open_year 
Get rank and company and market value of company	SELECT rank , company , market_value FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking 
Order these records based on the sales billion profits billion	ORDER BY sales_billion , profits_billion 
Get rank and company and market value of company	SELECT rank , company , market_value FROM company
Keep the records that main industry is Banking	WHERE main_industry = Banking 
Order these records based on the sales billion profits billion	ORDER BY sales_billion , profits_billion 
Get location and Representative Name of station company that has company and gas station	SELECT T3.location , T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id
Order these records based on the Assets billion of company and sort them in descending order, and return the top 3 records	ORDER BY T2.Assets_billion DESC LIMIT 3
Get location and Representative Name of station company that has company and gas station	SELECT T3.location , T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id
Order these records based on the Assets billion of company and sort them in descending order, and return the top 3 records	ORDER BY T2.Assets_billion DESC LIMIT 3
Get the number of region	SELECT COUNT ( * ) FROM region
Get the number of region	SELECT COUNT ( * ) FROM region
Get region name of region	SELECT DISTINCT region_name FROM region
Order these records based on the Label	ORDER BY Label 
Get region name of region	SELECT DISTINCT region_name FROM region
Order these records based on the Label	ORDER BY Label 
Get the number of distinct party name of party	SELECT COUNT ( DISTINCT party_name ) FROM party
Get the number of distinct party name of party	SELECT COUNT ( DISTINCT party_name ) FROM party
Get minister and took office and left office of party	SELECT minister , took_office , left_office FROM party
Order these records based on the left office	ORDER BY left_office 
Get minister and took office and left office of party	SELECT minister , took_office , left_office FROM party
Order these records based on the left office	ORDER BY left_office 
Get minister of party	SELECT minister FROM party
Keep the records that took office is greater than 1961 OR took office is less than 1959	WHERE took_office > 1961 OR took_office < 1959
Get minister of party	SELECT minister FROM party
Keep the records that took office is greater than 1961 OR took office is less than 1959	WHERE took_office > 1961 OR took_office < 1959
Get minister of party	SELECT minister FROM party
Keep the records that party name is not Progress Party	WHERE party_name != Progress Party
Get minister of party	SELECT minister FROM party
Keep the records that party name is not Progress Party	WHERE party_name != Progress Party
Get minister and party name of party	SELECT minister , party_name FROM party
Order these records based on the took office and sort them in descending ORDER	ORDER BY took_office DESC 
Get minister and party name of party	SELECT minister , party_name FROM party
Order these records based on the took office and sort them in descending ORDER	ORDER BY took_office DESC 
Get minister of party	SELECT minister FROM party
Order these records based on the left office and sort them in descending order, and return the top 1 record	ORDER BY left_office DESC LIMIT 1
Get minister of party	SELECT minister FROM party
Order these records based on the left office and sort them in descending order, and return the top 1 record	ORDER BY left_office DESC LIMIT 1
Get Member name and party name of Member that has party	SELECT T1.member_name , T2.party_name FROM Member AS T1 JOIN party AS T2
Get Member name and party name of Member that has party	SELECT T1.member_name , T2.party_name FROM Member AS T1 JOIN party AS T2
Get the number and party name of Member that has party	SELECT T2.party_name , COUNT ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on party id of Member	GROUP BY T1.party_id
Get the number and party name of Member that has party	SELECT T2.party_name , COUNT ( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on party id of Member	GROUP BY T1.party_id
Get party name of Member that has party	SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on party id of Member	GROUP BY T1.party_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get party name of Member that has party	SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on party id of Member	GROUP BY T1.party_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get party name and region name of party that has region	SELECT T1.party_name , T2.region_name FROM party AS T1 JOIN region AS T2
Get party name and region name of party that has region	SELECT T1.party_name , T2.region_name FROM party AS T1 JOIN region AS T2
Get party id of Member	SELECT party_id FROM Member
Get party name of party	SELECT party_name FROM party
Keep the records that party id is not in the first query result	WHERE party_id NOT IN ( the first query result ) 
Get party id of Member	SELECT party_id FROM Member
Get party name of party	SELECT party_name FROM party
Keep the records that party id is not in the first query result	WHERE party_id NOT IN ( the first query result ) 
Get member name of member	SELECT member_name FROM member
Keep the records that party id is 3	WHERE party_id = 3
Get member name of member	SELECT member_name FROM member
Keep the records that party id is 1	WHERE party_id = 1
Get member name of member	SELECT member_name FROM member
Keep the records that party id is 3	WHERE party_id = 3
Get member name of member	SELECT member_name FROM member
Keep the records that party id is 1	WHERE party_id = 1
Get Member name of Member that has party	SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Keep the records that Party name of party is not Progress Party	WHERE T2.Party_name != Progress Party
Get Member name of Member that has party	SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Keep the records that Party name of party is not Progress Party	WHERE T2.Party_name != Progress Party
Get the number of party events	SELECT COUNT ( * ) FROM party_events
Get the number of party events	SELECT COUNT ( * ) FROM party_events
Get the number and party name of party events that has party	SELECT T2.party_name , COUNT ( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on party id of party events	GROUP BY T1.party_id
Get the number and party name of party events that has party	SELECT T2.party_name , COUNT ( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on party id of party events	GROUP BY T1.party_id
Get member name of member	SELECT member_name FROM member
Get member name of member that has party events	SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2
Get member name of member	SELECT member_name FROM member
Get member name of member that has party events	SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2
Get party name of party events that has party	SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on the number party id of party events 2 that the number is greater than or equal to 2	GROUP BY T1.party_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get party name of party events that has party	SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id
Group the records based on the number party id of party events 2 that the number is greater than or equal to 2	GROUP BY T1.party_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get member name of member that has party events	SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
Group the records based on member in charge id of party events	GROUP BY T2.member_in_charge_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get member name of member that has party events	SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id
Group the records based on member in charge id of party events	GROUP BY T2.member_in_charge_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get event name of party events	SELECT event_name FROM party_events
Group the records based on the number event name 2 that the number is greater than 2	GROUP BY event_name HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get event name of party events	SELECT event_name FROM party_events
Group the records based on the number event name 2 that the number is greater than 2	GROUP BY event_name HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of region that has party AND party events	SELECT COUNT ( * ) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id
Keep the records that region name of region is United Kingdom AND Event Name of party events is Annaual Meeting	WHERE t1.region_name = United Kingdom AND t3.Event_Name = Annaual Meeting
Get the number of region that has party AND party events	SELECT COUNT ( * ) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id
Keep the records that region name of region is United Kingdom AND Event Name of party events is Annaual Meeting	WHERE t1.region_name = United Kingdom AND t3.Event_Name = Annaual Meeting
Get the number of pilot	SELECT COUNT ( * ) FROM pilot
Get Pilot name of pilot	SELECT Pilot_name FROM pilot
Order these records based on the Rank and sort them in ascending ORDER	ORDER BY Rank ASC 
Get Team of pilot	SELECT POSITION , Team FROM pilot
Get of pilot	SELECT DISTINCT POSITION FROM pilot
Keep the records that Age is greater than 30	WHERE Age > 30
Get Pilot name of pilot	SELECT Pilot_name FROM pilot
Keep the records that Team is Bradley OR Team is Fordham	WHERE Team = Bradley OR Team = Fordham
Get Join Year of pilot	SELECT Join_Year FROM pilot
Order these records based on the Rank and sort them in ascending order, and return the top 1 record	ORDER BY Rank ASC LIMIT 1
Get the number and Nationality of pilot	SELECT Nationality , COUNT ( * ) FROM pilot
Group the records based on Nationality	GROUP BY Nationality
Get Nationality of pilot	SELECT Nationality FROM pilot
Group the records based on Nationality	GROUP BY Nationality
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of pilot	SELECT POSITION FROM pilot
Keep the records that Join Year is less than 2000	WHERE Join_Year < 2000
Get of pilot	SELECT POSITION FROM pilot
Keep the records that Join Year is greater than 2005	WHERE Join_Year > 2005
Get Pilot name and Model of pilot record that has aircraft and pilot	SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3
Get Pilot name and Fleet Series of pilot record that has aircraft and pilot	SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
Order these records based on the Rank of pilot	ORDER BY T3.Rank 
Get Fleet Series of pilot record that has aircraft and pilot	SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID
Keep the records that Age of pilot is less than 34	WHERE T3.Age < 34
Get the number and Pilot name of pilot record that has pilot	SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID
Group the records based on Pilot name of pilot	GROUP BY T2.Pilot_name
Get the number and Pilot name of pilot record that has pilot	SELECT T2.Pilot_name , COUNT ( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID
Group the records based on the number Pilot name of pilot 1 that the number is greater than 1	GROUP BY T2.Pilot_name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Pilot ID of pilot record	SELECT Pilot_ID FROM pilot_record
Get Pilot name of pilot	SELECT Pilot_name FROM pilot
Keep the records that Pilot ID is not in the first query result	WHERE Pilot_ID NOT IN ( the first query result ) 
Get document status code of Ref Document Status	SELECT document_status_code FROM Ref_Document_Status
Get document status description of Ref Document Status	SELECT document_status_description FROM Ref_Document_Status
Keep the records that document status code is working	WHERE document_status_code = working
Get document type code of Ref Document Types	SELECT document_type_code FROM Ref_Document_Types
Get document type description of Ref Document Types	SELECT document_type_description FROM Ref_Document_Types
Keep the records that document type code is Paper	WHERE document_type_code = Paper
Get shipping agent name of Ref Shipping Agents	SELECT shipping_agent_name FROM Ref_Shipping_Agents
Get shipping agent code of Ref Shipping Agents	SELECT shipping_agent_code FROM Ref_Shipping_Agents
Keep the records that shipping agent name is UPS	WHERE shipping_agent_name = UPS
Get role code of	SELECT role_code FROM
Get role description of	SELECT role_description FROM
Keep the records that role code is ED	WHERE role_code = ED
Get the number of Employees	SELECT COUNT ( * ) FROM Employees
Get role description of ROLES that has Employees	SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code
Keep the records that employee name of Employees is Koby	WHERE T2.employee_name = Koby
Get document id and receipt date of Documents	SELECT document_id , receipt_date FROM Documents
Get the number and role description and role code of ROLES that has Employees	SELECT T1.role_description , T2.role_code , COUNT ( * ) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code
Group the records based on role code of Employees	GROUP BY T2.role_code
Get the number of employee id and role description of ROLES that has Employees	SELECT Roles.role_description , COUNT ( Employees.employee_id ) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code
Group the records based on the number of employee id of Employees role code of Employees 1 that the number of employee id of Employees is greater than 1	GROUP BY Employees.role_code HAVING COUNT ( Employees.employee_id ) > 1 HAVING COUNT ( Employees.employee_id ) > 1
Get document status description of Ref Document Status that has Documents	SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code
Keep the records that document id of Documents is 1	WHERE Documents.document_id = 1
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Keep the records that document status code is done	WHERE document_status_code = done
Get document type code of Documents	SELECT document_type_code FROM Documents
Keep the records that document id is 2	WHERE document_id = 2
Get document id of Documents	SELECT document_id FROM Documents
Keep the records that document status code is done AND document type code is Paper	WHERE document_status_code = done AND document_type_code = Paper
Get shipping agent name of Ref Shipping Agents that has Documents	SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Keep the records that document id of Documents is 2	WHERE Documents.document_id = 2
Get the number of Ref Shipping Agents that has Documents	SELECT COUNT ( * ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Keep the records that shipping agent name of Ref Shipping Agents is USPS	WHERE Ref_Shipping_Agents.shipping_agent_name = USPS
Get the number of document id and shipping agent name of Ref Shipping Agents that has Documents	SELECT Ref_Shipping_Agents.shipping_agent_name , COUNT ( Documents.document_id ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Group the records based on shipping agent code of Ref Shipping Agents	GROUP BY Ref_Shipping_Agents.shipping_agent_code
Order these records based on the the number of document id of Documents and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( Documents.document_id ) DESC LIMIT 1
Get receipt date of Documents	SELECT receipt_date FROM Documents
Keep the records that document id is 3	WHERE document_id = 3
Get address details of Addresses that has Documents Mailed	SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id
Keep the records that document id is 4	WHERE document_id = 4
Get mailing date of Documents Mailed	SELECT mailing_date FROM Documents_Mailed
Keep the records that document id is 7	WHERE document_id = 7
Get document id of Documents	SELECT document_id FROM Documents
Keep the records that document status code is done AND document type code is Paper	WHERE document_status_code = done AND document_type_code = Paper
Get document id of Documents that has Ref Shipping Agents	SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Keep the records that shipping agent name of Ref Shipping Agents is USPS	WHERE Ref_Shipping_Agents.shipping_agent_name = USPS
Get document id of Documents	SELECT document_id FROM Documents
Keep the records that document status code is done AND document type code is Paper	WHERE document_status_code = done AND document_type_code = Paper
Get document id of Documents that has Ref Shipping Agents	SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Keep the records that shipping agent name of Ref Shipping Agents is USPS	WHERE Ref_Shipping_Agents.shipping_agent_name = USPS
Get draft details of Document Drafts	SELECT draft_details FROM Document_Drafts
Keep the records that document id is 7	WHERE document_id = 7
Get the number of Draft Copies	SELECT COUNT ( * ) FROM Draft_Copies
Keep the records that document id is 2	WHERE document_id = 2
Get the number of copy number and document id of Draft Copies	SELECT document_id , COUNT ( copy_number ) FROM Draft_Copies
Group the records based on document id	GROUP BY document_id
Order these records based on the the number of copy number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( copy_number ) DESC LIMIT 1
Get the number and document id of Draft Copies	SELECT document_id , COUNT ( * ) FROM Draft_Copies
Group the records based on the number document id 1 that the number is greater than 1	GROUP BY document_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get employee name of Employees that has Circulation History	SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
Keep the records that document id of Circulation History is 1	WHERE Circulation_History.document_id = 1
Get employee name of Employees	SELECT employee_name FROM Employees
Get employee name of Employees that has Circulation History	SELECT Employees.employee_name FROM Employees JOIN Circulation_History
Get the number and employee name of Employees that has Circulation History	SELECT Employees.employee_name , COUNT ( * ) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id
Group the records based on document id of Circulation History draft number of Circulation History copy number of Circulation History	GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of distinct employee id and document id of Circulation History	SELECT document_id , COUNT ( DISTINCT employee_id ) FROM Circulation_History
Group the records based on document id	GROUP BY document_id
Get dname of department	SELECT dname FROM department
Order these records based on the mgr start date	ORDER BY mgr_start_date 
Get Dependent name of dependent	SELECT Dependent_name FROM dependent
Keep the records that relationship is Spouse	WHERE relationship = Spouse
Get the number of dependent	SELECT COUNT ( * ) FROM dependent
Keep the records that sex is F	WHERE sex = F
Get dname of department that has dept locations	SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber
Keep the records that dlocation of dept locations is Houston	WHERE t2.dlocation = Houston
Get fname and lname of employee	SELECT fname , lname FROM employee
Keep the records that salary is greater than 30000	WHERE salary > 30000
Get the number and sex of employee	SELECT COUNT ( * ) , sex FROM employee
Keep the records that salary is less than 50000	WHERE salary < 50000 
Group the records based on sex	GROUP BY sex
Get fname and lname and address of employee	SELECT fname , lname , address FROM employee
Order these records based on the Bdate	ORDER BY Bdate 
Get event details of EVENTS that has Services	SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID
Keep the records that Service Type Code of Services is Marriage	WHERE T2.Service_Type_Code = Marriage
Get event id and event details of EVENTS that has Participants in Events	SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID
Group the records based on the number Event ID of EVENTS 1 that the number is greater than 1	GROUP BY T1.Event_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number and Participant ID and Participant Type Code of Participants that has Participants in Events	SELECT T1.Participant_ID , T1.Participant_Type_Code , COUNT ( * ) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID
Group the records based on Participant ID of Participants	GROUP BY T1.Participant_ID
Get Participant ID and Participant Type Code and Participant Details of Participants	SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants
Get the number of participants	SELECT COUNT ( * ) FROM participants
Keep the records that participant type code is Organizer	WHERE participant_type_code = Organizer
Get service type code of services	SELECT service_type_code FROM services
Order these records based on the service type code	ORDER BY service_type_code 
Get service id and event details of	SELECT service_id , event_details FROM
Get the number of participants that has Participants in Events	SELECT COUNT ( * ) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID
Keep the records that participant details of participants is in the form of %Dr.%	WHERE T1.participant_details LIKE %Dr.%
Get participant type code of participants	SELECT participant_type_code FROM participants
Group the records based on participant type code	GROUP BY participant_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get service id and Service Type Code of participants that has Participants in Events and EVENTS and services	SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id
Group the records based on service id of EVENTS	GROUP BY T3.service_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Event ID of Participants in Events	SELECT Event_ID FROM Participants_in_Events
Group the records based on Event ID	GROUP BY Event_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get event id of	SELECT event_id FROM
Get event id of Participants in Events that has Participants	SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID
Keep the records that Participant Details is Kenyatta Kuhn	WHERE Participant_Details = Kenyatta Kuhn
Get service type code of services that has EVENTS	SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id
Keep the records that event details of EVENTS is Success	WHERE T2.event_details = Success
Get service type code of services that has EVENTS	SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id
Keep the records that event details of EVENTS is Fail	WHERE T2.event_details = Fail
Get event id of Participants in Events	SELECT event_id FROM Participants_in_Events
Get the number of	SELECT COUNT ( * ) FROM
Keep the records that event id is not in the first query result	WHERE event_id NOT IN ( the first query result ) 
Get the number of distinct participant id of participants in Events	SELECT COUNT ( DISTINCT participant_id ) FROM participants_in_Events
Get name of races	SELECT name FROM races
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get name of races	SELECT name FROM races
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get name of races	SELECT name , DATE FROM races
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get name of races	SELECT name , DATE FROM races
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get name of races	SELECT name FROM races
Keep the records that is 2017	WHERE YEAR = 2017
Get name of races	SELECT name FROM races
Keep the records that is 2017	WHERE YEAR = 2017
Get name of races	SELECT DISTINCT name FROM races
Keep the records that is between 201 4X123X2017	WHERE YEAR BETWEEN 2014 AND 2017
Get name of races	SELECT DISTINCT name FROM races
Keep the records that is between 201 4X123X2017	WHERE YEAR BETWEEN 2014 AND 2017
Get forename and surname of drivers that has laptimes	SELECT DISTINCT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Keep the records that milliseconds of laptimes is less than 93000	WHERE T2.milliseconds < 93000
Get forename and surname of drivers that has laptimes	SELECT DISTINCT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Keep the records that milliseconds of laptimes is less than 93000	WHERE T2.milliseconds < 93000
Get driverid and nationality of drivers that has laptimes	SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Keep the records that milliseconds of laptimes is greater than 100000	WHERE T2.milliseconds > 100000
Get driverid and nationality of drivers that has laptimes	SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Keep the records that milliseconds of laptimes is greater than 100000	WHERE T2.milliseconds > 100000
Get forename and surname of drivers that has laptimes	SELECT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Order these records based on the milliseconds of laptimes, and return the top 1 record	ORDER BY T2.milliseconds LIMIT 1
Get forename and surname of drivers that has laptimes	SELECT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Order these records based on the milliseconds of laptimes, and return the top 1 record	ORDER BY T2.milliseconds LIMIT 1
Get driverid and surname of drivers that has laptimes	SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Order these records based on the milliseconds of laptimes and sort them in descending order, and return the top 1 record	ORDER BY T2.milliseconds DESC LIMIT 1
Get driverid and surname of drivers that has laptimes	SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Order these records based on the milliseconds of laptimes and sort them in descending order, and return the top 1 record	ORDER BY T2.milliseconds DESC LIMIT 1
Get driverid and forename and surname of drivers that has laptimes	SELECT T1.driverid , T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Keep the records that is 1	WHERE POSITION = 1 
Group the records based on the number driverid of drivers 2 that the number is greater than or equal to 2	GROUP BY T1.driverid HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get driverid and forename and surname of drivers that has laptimes	SELECT T1.driverid , T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid
Keep the records that is 1	WHERE POSITION = 1 
Group the records based on the number driverid of drivers 2 that the number is greater than or equal to 2	GROUP BY T1.driverid HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number of results that has races	SELECT COUNT ( * ) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid
Keep the records that name of races is Australian Grand Prix AND is 2009	WHERE T2.name = Australian Grand Prix AND YEAR = 2009
Get the number of results that has races	SELECT COUNT ( * ) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid
Keep the records that name of races is Australian Grand Prix AND is 2009	WHERE T2.name = Australian Grand Prix AND YEAR = 2009
Get raceId of races	SELECT raceId FROM races
Keep the records that is not 2009	WHERE YEAR != 2009
Get the number of distinct driverId of results	SELECT COUNT ( DISTINCT driverId ) FROM results
Keep the records that raceId is not in the first query result	WHERE raceId NOT IN ( the first query result ) 
Get raceId of races	SELECT raceId FROM races
Keep the records that is not 2009	WHERE YEAR != 2009
Get the number of distinct driverId of results	SELECT COUNT ( DISTINCT driverId ) FROM results
Keep the records that raceId is not in the first query result	WHERE raceId NOT IN ( the first query result ) 
Get name and year of results that has races and drivers	SELECT T2.name , T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid
Keep the records that forename of drivers is Lewis	WHERE T3.forename = Lewis
Get name and year of results that has races and drivers	SELECT T2.name , T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid
Keep the records that forename of drivers is Lewis	WHERE T3.forename = Lewis
Get forename and surname of drivers	SELECT forename , surname FROM drivers
Keep the records that nationality is German	WHERE nationality = German
Get forename and surname of drivers	SELECT forename , surname FROM drivers
Keep the records that nationality is German	WHERE nationality = German
Get driverid and forename of races that has results and drivers	SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Australian Grand Prix	WHERE T1.name = Australian Grand Prix
Get driverid and forename of races that has results and drivers	SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Chinese Grand Prix	WHERE T1.name = Chinese Grand Prix
Get driverid and forename of races that has results and drivers	SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Australian Grand Prix	WHERE T1.name = Australian Grand Prix
Get driverid and forename of races that has results and drivers	SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Chinese Grand Prix	WHERE T1.name = Chinese Grand Prix
Get forename and surname of races that has results and drivers	SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Australian Grand Prix	WHERE T1.name = Australian Grand Prix
Get forename and surname of races that has results and drivers	SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Chinese Grand Prix	WHERE T1.name = Chinese Grand Prix
Get forename and surname of races that has results and drivers	SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Australian Grand Prix	WHERE T1.name = Australian Grand Prix
Get forename and surname of races that has results and drivers	SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid
Keep the records that name of races is Chinese Grand Prix	WHERE T1.name = Chinese Grand Prix
Get forename of drivers that has driverstandings	SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
Keep the records that position of driverstandings is 1 AND wins of driverstandings is 1	WHERE T2.position = 1 AND T2.wins = 1
Get forename of drivers that has driverstandings	SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
Keep the records that position of driverstandings is 1 AND wins of driverstandings is 1	WHERE T2.position = 1 AND T2.wins = 1
Get forename of drivers that has driverstandings	SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
Keep the records that position of driverstandings is 1 AND wins of driverstandings is 1 AND points of driverstandings is greater than 20	WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
Get forename of drivers that has driverstandings	SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid
Keep the records that position of driverstandings is 1 AND wins of driverstandings is 1 AND points of driverstandings is greater than 20	WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
Get the number and nationality of constructors	SELECT COUNT ( * ) , nationality FROM constructors
Group the records based on nationality	GROUP BY nationality
Get the number and nationality of constructors	SELECT COUNT ( * ) , nationality FROM constructors
Group the records based on nationality	GROUP BY nationality
Get the number and constructorid of constructorStandings	SELECT COUNT ( * ) , constructorid FROM constructorStandings
Group the records based on constructorid	GROUP BY constructorid
Get the number and constructorid of constructorStandings	SELECT COUNT ( * ) , constructorid FROM constructorStandings
Group the records based on constructorid	GROUP BY constructorid
Get name of races that has circuits	SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
Keep the records that country of circuits is Spain AND year of races is greater than 2017	WHERE T2.country = Spain AND T1.year > 2017
Get name of races that has circuits	SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
Keep the records that country of circuits is Spain AND year of races is greater than 2017	WHERE T2.country = Spain AND T1.year > 2017
Get name of races that has circuits	SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
Keep the records that country of circuits is Spain AND year of races is greater than 2000	WHERE T2.country = Spain AND T1.year > 2000
Get name of races that has circuits	SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid
Keep the records that country of circuits is Spain AND year of races is greater than 2000	WHERE T2.country = Spain AND T1.year > 2000
Get the maximum value of duration of pitstops	SELECT MAX ( duration ) FROM pitstops
Keep the records that raceid is 841	WHERE raceid = 841
Get driverid of pitstops	SELECT DISTINCT driverid , STOP FROM pitstops
Keep the records that duration is less than the first query result	WHERE duration < ( the first query result ) 
Get the maximum value of duration of pitstops	SELECT MAX ( duration ) FROM pitstops
Keep the records that raceid is 841	WHERE raceid = 841
Get driverid of pitstops	SELECT DISTINCT driverid , STOP FROM pitstops
Keep the records that duration is less than the first query result	WHERE duration < ( the first query result ) 
Get the minimum value of duration of pitstops	SELECT MIN ( duration ) FROM pitstops
Keep the records that raceid is 841	WHERE raceid = 841
Get driverid of pitstops	SELECT DISTINCT driverid , STOP FROM pitstops
Keep the records that duration is greater than the first query result	WHERE duration > ( the first query result ) 
Get the minimum value of duration of pitstops	SELECT MIN ( duration ) FROM pitstops
Keep the records that raceid is 841	WHERE raceid = 841
Get driverid of pitstops	SELECT DISTINCT driverid , STOP FROM pitstops
Keep the records that duration is greater than the first query result	WHERE duration > ( the first query result ) 
Get forename of drivers	SELECT DISTINCT forename FROM drivers
Order these records based on the forename and sort them in ascending ORDER	ORDER BY forename ASC 
Get forename of drivers	SELECT DISTINCT forename FROM drivers
Order these records based on the forename and sort them in ascending ORDER	ORDER BY forename ASC 
Get name of races	SELECT DISTINCT name FROM races
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name of races	SELECT DISTINCT name FROM races
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name of races	SELECT name FROM races
Keep the records that is between 200 9X123X2011	WHERE YEAR BETWEEN 2009 AND 2011
Get name of races	SELECT name FROM races
Keep the records that is between 200 9X123X2011	WHERE YEAR BETWEEN 2009 AND 2011
Get name of races	SELECT name FROM races
Keep the records that is greater than 12:00:00 OR is less than 09:00:00	WHERE TIME > 12:00:00 OR TIME < 09:00:00
Get name of races	SELECT name FROM races
Keep the records that is greater than 12:00:00 OR is less than 09:00:00	WHERE TIME > 12:00:00 OR TIME < 09:00:00
Get forename and surname and driverid of drivers that has pitstops	SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 8 that the number is greater than 8	GROUP BY T1.driverid HAVING COUNT ( * ) > 8 HAVING COUNT ( * ) > 8
Get forename and surname and driverid of drivers that has results	SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 5 that the number is greater than 5	GROUP BY T1.driverid HAVING COUNT ( * ) > 5 HAVING COUNT ( * ) > 5
Get forename and surname and driverid of drivers that has pitstops	SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 8 that the number is greater than 8	GROUP BY T1.driverid HAVING COUNT ( * ) > 8 HAVING COUNT ( * ) > 8
Get forename and surname and driverid of drivers that has results	SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 5 that the number is greater than 5	GROUP BY T1.driverid HAVING COUNT ( * ) > 5 HAVING COUNT ( * ) > 5
Get surname and driverid of drivers that has pitstops	SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 11 that the number is 11	GROUP BY T1.driverid HAVING COUNT ( * ) = 11 HAVING COUNT ( * ) = 11
Get surname and driverid of drivers that has results	SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 5 that the number is greater than 5	GROUP BY T1.driverid HAVING COUNT ( * ) > 5 HAVING COUNT ( * ) > 5
Get surname and driverid of drivers that has pitstops	SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 11 that the number is 11	GROUP BY T1.driverid HAVING COUNT ( * ) = 11 HAVING COUNT ( * ) = 11
Get surname and driverid of drivers that has results	SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid
Group the records based on the number driverid of drivers 5 that the number is greater than 5	GROUP BY T1.driverid HAVING COUNT ( * ) > 5 HAVING COUNT ( * ) > 5
Get driverid and surname of drivers that has results and races	SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Keep the records that year of races is greater than 2010	WHERE T3.year > 2010 
Group the records based on driverid of drivers	GROUP BY T1.driverid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get driverid and surname of drivers that has results and races	SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Keep the records that year of races is greater than 2010	WHERE T3.year > 2010 
Group the records based on driverid of drivers	GROUP BY T1.driverid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of circuits	SELECT name FROM circuits
Keep the records that country is UK OR country is Malaysia	WHERE country = UK OR country = Malaysia
Get name of circuits	SELECT name FROM circuits
Keep the records that country is UK OR country is Malaysia	WHERE country = UK OR country = Malaysia
Get circuitid of circuits	SELECT circuitid , LOCATION FROM circuits
Keep the records that country is France OR country is Belgium	WHERE country = France OR country = Belgium
Get circuitid of circuits	SELECT circuitid , LOCATION FROM circuits
Keep the records that country is France OR country is Belgium	WHERE country = France OR country = Belgium
Get name of constructors that has constructorstandings	SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid
Keep the records that nationality of constructors is Japanese AND points of constructorstandings is greater than 5	WHERE T1.nationality = Japanese AND T2.points > 5
Get name of constructors that has constructorstandings	SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid
Keep the records that nationality of constructors is Japanese AND points of constructorstandings is greater than 5	WHERE T1.nationality = Japanese AND T2.points > 5
Get the average value of fastestlapspeed of races that has results	SELECT AVG ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is 2008 AND name of races is Monaco Grand Prix	WHERE T1.year = 2008 AND T1.name = Monaco Grand Prix
Get the average value of fastestlapspeed of races that has results	SELECT AVG ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is 2008 AND name of races is Monaco Grand Prix	WHERE T1.year = 2008 AND T1.name = Monaco Grand Prix
Get the maximum value of fastestlapspeed of races that has results	SELECT MAX ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is 2008 AND name of races is Monaco Grand Prix	WHERE T1.year = 2008 AND T1.name = Monaco Grand Prix
Get the maximum value of fastestlapspeed of races that has results	SELECT MAX ( T2.fastestlapspeed ) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is 2008 AND name of races is Monaco Grand Prix	WHERE T1.year = 2008 AND T1.name = Monaco Grand Prix
Get the maximum value of fastestlapspeed and name and year of races that has results	SELECT MAX ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is greater than 2014	WHERE T1.year > 2014 
Group the records based on name of races	GROUP BY T1.name
Order these records based on the year of races	ORDER BY T1.year 
Get the maximum value of fastestlapspeed and name and year of races that has results	SELECT MAX ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is greater than 2014	WHERE T1.year > 2014 
Group the records based on name of races	GROUP BY T1.name
Order these records based on the year of races	ORDER BY T1.year 
Get the average value of fastestlapspeed and name and year of races that has results	SELECT AVG ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is greater than 2014	WHERE T1.year > 2014 
Group the records based on name of races	GROUP BY T1.name
Order these records based on the year of races	ORDER BY T1.year 
Get the average value of fastestlapspeed and name and year of races that has results	SELECT AVG ( T2.fastestlapspeed ) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid
Keep the records that year of races is greater than 2014	WHERE T1.year > 2014 
Group the records based on name of races	GROUP BY T1.name
Order these records based on the year of races	ORDER BY T1.year 
Get the number and driverid and forename of drivers that has results and races	SELECT T1.driverid , T1.forename , COUNT ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Group the records based on the number driverid of drivers 2 that the number is greater than or equal to 2	GROUP BY T1.driverid HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and driverid and forename of drivers that has results and races	SELECT T1.driverid , T1.forename , COUNT ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Group the records based on the number driverid of drivers 2 that the number is greater than or equal to 2	GROUP BY T1.driverid HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and driverid of drivers that has results and races	SELECT T1.driverid , COUNT ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Group the records based on the number driverid of drivers 30 that the number is less than or equal to 30	GROUP BY T1.driverid HAVING COUNT ( * ) <= 30 HAVING COUNT ( * ) <= 30
Get the number and driverid of drivers that has results and races	SELECT T1.driverid , COUNT ( * ) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Group the records based on the number driverid of drivers 30 that the number is less than or equal to 30	GROUP BY T1.driverid HAVING COUNT ( * ) <= 30 HAVING COUNT ( * ) <= 30
Get driverid and surname of drivers that has results and races	SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Group the records based on driverid of drivers	GROUP BY T1.driverid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get driverid and surname of drivers that has results and races	SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid
Group the records based on driverid of drivers	GROUP BY T1.driverid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of technician	SELECT COUNT ( * ) FROM technician
Get the number of technician	SELECT COUNT ( * ) FROM technician
Get Name of technician	SELECT Name FROM technician
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Name of technician	SELECT Name FROM technician
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Team and Starting Year of technician	SELECT Team , Starting_Year FROM technician
Get Team and Starting Year of technician	SELECT Team , Starting_Year FROM technician
Get Name of technician	SELECT Name FROM technician
Keep the records that Team is not NYY	WHERE Team != NYY
Get Name of technician	SELECT Name FROM technician
Keep the records that Team is not NYY	WHERE Team != NYY
Get Name of technician	SELECT Name FROM technician
Keep the records that Age is 36 OR Age is 37	WHERE Age = 36 OR Age = 37
Get Name of technician	SELECT Name FROM technician
Keep the records that Age is 36 OR Age is 37	WHERE Age = 36 OR Age = 37
Get Starting Year of technician	SELECT Starting_Year FROM technician
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Starting Year of technician	SELECT Starting_Year FROM technician
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get the number and Team of technician	SELECT Team , COUNT ( * ) FROM technician
Group the records based on Team	GROUP BY Team
Get the number and Team of technician	SELECT Team , COUNT ( * ) FROM technician
Group the records based on Team	GROUP BY Team
Get Team of technician	SELECT Team FROM technician
Group the records based on Team	GROUP BY Team
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Team of technician	SELECT Team FROM technician
Group the records based on Team	GROUP BY Team
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Team of technician	SELECT Team FROM technician
Group the records based on the number Team 2 that the number is greater than or equal to 2	GROUP BY Team HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Team of technician	SELECT Team FROM technician
Group the records based on the number Team 2 that the number is greater than or equal to 2	GROUP BY Team HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name and Machine series of repair assignment that has machine and technician	SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3
Get Name and Machine series of repair assignment that has machine and technician	SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3
Get Name of repair assignment that has machine and technician	SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
Order these records based on the quality rank of machine	ORDER BY T2.quality_rank 
Get Name of repair assignment that has machine and technician	SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
Order these records based on the quality rank of machine	ORDER BY T2.quality_rank 
Get Name of repair assignment that has machine and technician	SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
Keep the records that value points of machine is greater than 70	WHERE T2.value_points > 70
Get Name of repair assignment that has machine and technician	SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID
Keep the records that value points of machine is greater than 70	WHERE T2.value_points > 70
Get the number and Name of repair assignment that has technician	SELECT T2.Name , COUNT ( * ) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
Group the records based on Name of technician	GROUP BY T2.Name
Get the number and Name of repair assignment that has technician	SELECT T2.Name , COUNT ( * ) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID
Group the records based on Name of technician	GROUP BY T2.Name
Get technician id of repair assignment	SELECT technician_id FROM repair_assignment
Get Name of technician	SELECT Name FROM technician
Keep the records that technician id is not in the first query result	WHERE technician_id NOT IN ( the first query result ) 
Get technician id of repair assignment	SELECT technician_id FROM repair_assignment
Get Name of technician	SELECT Name FROM technician
Keep the records that technician id is not in the first query result	WHERE technician_id NOT IN ( the first query result ) 
Get Starting Year of technician	SELECT Starting_Year FROM technician
Keep the records that Team is CLE	WHERE Team = CLE
Get Starting Year of technician	SELECT Starting_Year FROM technician
Keep the records that Team is CWS	WHERE Team = CWS
Get Starting Year of technician	SELECT Starting_Year FROM technician
Keep the records that Team is CLE	WHERE Team = CLE
Get Starting Year of technician	SELECT Starting_Year FROM technician
Keep the records that Team is CWS	WHERE Team = CWS
Get the number of entrepreneur	SELECT COUNT ( * ) FROM entrepreneur
Get the number of entrepreneur	SELECT COUNT ( * ) FROM entrepreneur
Get Company of entrepreneur	SELECT Company FROM entrepreneur
Order these records based on the Money Requested and sort them in descending ORDER	ORDER BY Money_Requested DESC 
Get Company of entrepreneur	SELECT Company FROM entrepreneur
Order these records based on the Money Requested and sort them in descending ORDER	ORDER BY Money_Requested DESC 
Get Company and Investor of entrepreneur	SELECT Company , Investor FROM entrepreneur
Get Company and Investor of entrepreneur	SELECT Company , Investor FROM entrepreneur
Get the average value of Money Requested of entrepreneur	SELECT AVG ( Money_Requested ) FROM entrepreneur
Get the average value of Money Requested of entrepreneur	SELECT AVG ( Money_Requested ) FROM entrepreneur
Get Name of People	SELECT Name FROM People
Order these records based on the Weight and sort them in ascending ORDER	ORDER BY Weight ASC 
Get Name of People	SELECT Name FROM People
Order these records based on the Weight and sort them in ascending ORDER	ORDER BY Weight ASC 
Get Name of entrepreneur that has people	SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2
Get Name of entrepreneur that has people	SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2
Get Name of entrepreneur that has people	SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Investor of entrepreneur is not Rachel Elnaugh	WHERE T1.Investor != Rachel Elnaugh
Get Name of entrepreneur that has people	SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Investor of entrepreneur is not Rachel Elnaugh	WHERE T1.Investor != Rachel Elnaugh
Get Weight of people	SELECT Weight FROM people
Order these records based on the Height and sort them in ascending order, and return the top 1 record	ORDER BY Height ASC LIMIT 1
Get Weight of people	SELECT Weight FROM people
Order these records based on the Height and sort them in ascending order, and return the top 1 record	ORDER BY Height ASC LIMIT 1
Get Name of entrepreneur that has people	SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Weight of people and sort them in descending order, and return the top 1 record	ORDER BY T2.Weight DESC LIMIT 1
Get Name of entrepreneur that has people	SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Weight of people and sort them in descending order, and return the top 1 record	ORDER BY T2.Weight DESC LIMIT 1
Get the SUM of Money Requested of entrepreneur that has people	SELECT SUM ( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Height of people is greater than 1.85	WHERE T2.Height > 1.85
Get the SUM of Money Requested of entrepreneur that has people	SELECT SUM ( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Height of people is greater than 1.85	WHERE T2.Height > 1.85
Get Date of Birth of entrepreneur that has people	SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Investor of entrepreneur is Simon Woodroffe OR Investor of entrepreneur is Peter Jones	WHERE T1.Investor = Simon Woodroffe OR T1.Investor = Peter Jones
Get Date of Birth of entrepreneur that has people	SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Investor of entrepreneur is Simon Woodroffe OR Investor of entrepreneur is Peter Jones	WHERE T1.Investor = Simon Woodroffe OR T1.Investor = Peter Jones
Get Weight of entrepreneur that has people	SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Money Requested of entrepreneur and sort them in descending ORDER	ORDER BY T1.Money_Requested DESC 
Get Weight of entrepreneur that has people	SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Money Requested of entrepreneur and sort them in descending ORDER	ORDER BY T1.Money_Requested DESC 
Get the number and Investor of entrepreneur	SELECT Investor , COUNT ( * ) FROM entrepreneur
Group the records based on Investor	GROUP BY Investor
Get the number and Investor of entrepreneur	SELECT Investor , COUNT ( * ) FROM entrepreneur
Group the records based on Investor	GROUP BY Investor
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Group the records based on Investor	GROUP BY Investor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Group the records based on Investor	GROUP BY Investor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Group the records based on the number Investor 2 that the number is greater than or equal to 2	GROUP BY Investor HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Group the records based on the number Investor 2 that the number is greater than or equal to 2	GROUP BY Investor HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name and Company of entrepreneur that has people	SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Money Requested of entrepreneur	ORDER BY T1.Money_Requested 
Get Name and Company of entrepreneur that has people	SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Money Requested of entrepreneur	ORDER BY T1.Money_Requested 
Get People ID of entrepreneur	SELECT People_ID FROM entrepreneur
Get Name of people	SELECT Name FROM people
Keep the records that People ID is not in the first query result	WHERE People_ID NOT IN ( the first query result ) 
Get People ID of entrepreneur	SELECT People_ID FROM entrepreneur
Get Name of people	SELECT Name FROM people
Keep the records that People ID is not in the first query result	WHERE People_ID NOT IN ( the first query result ) 
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Keep the records that Money Requested is greater than 140000	WHERE Money_Requested > 140000
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Keep the records that Money Requested is less than 120000	WHERE Money_Requested < 120000
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Keep the records that Money Requested is greater than 140000	WHERE Money_Requested > 140000
Get Investor of entrepreneur	SELECT Investor FROM entrepreneur
Keep the records that Money Requested is less than 120000	WHERE Money_Requested < 120000
Get the number of distinct Company of entrepreneur	SELECT COUNT ( DISTINCT Company ) FROM entrepreneur
Get the number of distinct Company of entrepreneur	SELECT COUNT ( DISTINCT Company ) FROM entrepreneur
Get Company of entrepreneur that has people	SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Height of people and sort them in descending order, and return the top 1 record	ORDER BY T2.Height DESC LIMIT 1
Get Company of entrepreneur that has people	SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Height of people and sort them in descending order, and return the top 1 record	ORDER BY T2.Height DESC LIMIT 1
Get the number of perpetrator	SELECT COUNT ( * ) FROM perpetrator
Get of perpetrator	SELECT DATE FROM perpetrator
Order these records based on the Killed and sort them in descending ORDER	ORDER BY Killed DESC 
Get Injured of perpetrator	SELECT Injured FROM perpetrator
Order these records based on the Injured and sort them in ascending ORDER	ORDER BY Injured ASC 
Get the average value of Injured of perpetrator	SELECT AVG ( Injured ) FROM perpetrator
Get of perpetrator	SELECT LOCATION FROM perpetrator
Order these records based on the Killed and sort them in descending order, and return the top 1 record	ORDER BY Killed DESC LIMIT 1
Get Name of People	SELECT Name FROM People
Order these records based on the Height and sort them in ascending ORDER	ORDER BY Height ASC 
Get Name of people that has perpetrator	SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2
Get Name of people that has perpetrator	SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Country of perpetrator is not China	WHERE T2.Country != China
Get Name of people that has perpetrator	SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Weight of people and sort them in descending order, and return the top 1 record	ORDER BY T1.Weight DESC LIMIT 1
Get the SUM of Killed of people that has perpetrator	SELECT SUM ( T2.Killed ) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Height of people is greater than 1.84	WHERE T1.Height > 1.84
Get Name of people that has perpetrator	SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Country of perpetrator is China OR Country of perpetrator is Japan	WHERE T2.Country = China OR T2.Country = Japan
Get Height of people that has perpetrator	SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Injured of perpetrator and sort them in descending ORDER	ORDER BY T2.Injured DESC 
Get the number and Country of perpetrator	SELECT Country , COUNT ( * ) FROM perpetrator
Group the records based on Country	GROUP BY Country
Get the number and Country of perpetrator	SELECT Country , COUNT ( * ) FROM perpetrator
Group the records based on Country	GROUP BY Country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Country of perpetrator	SELECT Country , COUNT ( * ) FROM perpetrator
Group the records based on the number Country 2 that the number is greater than or equal to 2	GROUP BY Country HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name of people that has perpetrator	SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Year of perpetrator and sort them in descending ORDER	ORDER BY T2.Year DESC 
Get People ID of perpetrator	SELECT People_ID FROM perpetrator
Get Name of people	SELECT Name FROM people
Keep the records that People ID is not in the first query result	WHERE People_ID NOT IN ( the first query result ) 
Get Country of perpetrator	SELECT Country FROM perpetrator
Keep the records that Injured is greater than 50	WHERE Injured > 50
Get Country of perpetrator	SELECT Country FROM perpetrator
Keep the records that Injured is less than 20	WHERE Injured < 20
Get the number of distinct LOCATION of perpetrator	SELECT COUNT ( DISTINCT LOCATION ) FROM perpetrator
Get Date of people that has perpetrator	SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Height of people and sort them in descending order, and return the top 1 record	ORDER BY T1.Height DESC LIMIT 1
Get the maximum value of YEAR of perpetrator	SELECT MAX ( YEAR ) FROM perpetrator
Get campus of campuses	SELECT campus FROM campuses
Keep the records that county is Los Angeles	WHERE county = Los Angeles
Get campus of campuses	SELECT campus FROM campuses
Keep the records that county is Los Angeles	WHERE county = Los Angeles
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is Chico	WHERE LOCATION = Chico
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is Chico	WHERE LOCATION = Chico
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is 1958	WHERE YEAR = 1958
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is 1958	WHERE YEAR = 1958
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is less than 1800	WHERE YEAR < 1800
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is less than 1800	WHERE YEAR < 1800
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is greater than or equal to 1935 AND is less than or equal to 1939	WHERE YEAR >= 1935 AND YEAR <= 1939
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is greater than or equal to 1935 AND is less than or equal to 1939	WHERE YEAR >= 1935 AND YEAR <= 1939
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is Northridge AND county is Los Angeles	WHERE LOCATION = Northridge AND county = Los Angeles
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is San Francisco AND county is San Francisco	WHERE LOCATION = San Francisco AND county = San Francisco
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is Northridge AND county is Los Angeles	WHERE LOCATION = Northridge AND county = Los Angeles
Get campus of campuses	SELECT campus FROM campuses
Keep the records that is San Francisco AND county is San Francisco	WHERE LOCATION = San Francisco AND county = San Francisco
Get campusfee of campuses that has csu fees	SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus
Keep the records that campus of T1 is San Jose State University AND year of csu fees is 1996	WHERE t1.campus = San Jose State University AND T2.year = 1996
Get campusfee of campuses that has csu fees	SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus
Keep the records that campus of T1 is San Jose State University AND year of csu fees is 1996	WHERE t1.campus = San Jose State University AND T2.year = 1996
Get campusfee of campuses that has csu fees	SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus
Keep the records that campus of T1 is San Francisco State University AND year of csu fees is 1996	WHERE t1.campus = San Francisco State University AND T2.year = 1996
Get campusfee of campuses that has csu fees	SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus
Keep the records that campus of T1 is San Francisco State University AND year of csu fees is 1996	WHERE t1.campus = San Francisco State University AND T2.year = 1996
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Get the number of csu fees	SELECT COUNT ( * ) FROM csu_fees
Keep the records that campusfee is greater than the first query result	WHERE campusfee > ( the first query result ) 
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Get the number of csu fees	SELECT COUNT ( * ) FROM csu_fees
Keep the records that campusfee is greater than the first query result	WHERE campusfee > ( the first query result ) 
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Get the number of csu fees	SELECT COUNT ( * ) FROM csu_fees
Keep the records that campusfee is greater than the first query result	WHERE campusfee > ( the first query result ) 
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Get the number of csu fees	SELECT COUNT ( * ) FROM csu_fees
Keep the records that campusfee is greater than the first query result	WHERE campusfee > ( the first query result ) 
Get campus of campuses	SELECT campus FROM campuses
Keep the records that county is Los Angeles AND is greater than 1950	WHERE county = Los Angeles AND YEAR > 1950
Get campus of campuses	SELECT campus FROM campuses
Keep the records that county is Los Angeles AND is greater than 1950	WHERE county = Los Angeles AND YEAR > 1950
Get of degrees	SELECT YEAR FROM degrees
Group the records based on	GROUP BY
Order these records based on the the SUM of degrees and sort them in descending order, and return the top 1 record	ORDER BY SUM ( degrees ) DESC LIMIT 1
Get of degrees	SELECT YEAR FROM degrees
Group the records based on	GROUP BY
Order these records based on the the SUM of degrees and sort them in descending order, and return the top 1 record	ORDER BY SUM ( degrees ) DESC LIMIT 1
Get campus of degrees	SELECT campus FROM degrees
Group the records based on campus	GROUP BY campus
Order these records based on the the SUM of degrees and sort them in descending order, and return the top 1 record	ORDER BY SUM ( degrees ) DESC LIMIT 1
Get campus of degrees	SELECT campus FROM degrees
Group the records based on campus	GROUP BY campus
Order these records based on the the SUM of degrees and sort them in descending order, and return the top 1 record	ORDER BY SUM ( degrees ) DESC LIMIT 1
Get campus of campuses that has faculty	SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus
Keep the records that year of faculty is 2003	WHERE T2.year = 2003 
Order these records based on the faculty of faculty and sort them in descending order, and return the top 1 record	ORDER BY T2.faculty DESC LIMIT 1
Get campus of campuses that has faculty	SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus
Keep the records that year of faculty is 2003	WHERE T2.year = 2003 
Order these records based on the faculty of faculty and sort them in descending order, and return the top 1 record	ORDER BY T2.faculty DESC LIMIT 1
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Keep the records that is 1996	WHERE YEAR = 1996
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Keep the records that is 1996	WHERE YEAR = 1996
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Keep the records that is 2005	WHERE YEAR = 2005
Get the average value of campusfee of csu fees	SELECT AVG ( campusfee ) FROM csu_fees
Keep the records that is 2005	WHERE YEAR = 2005
Get the SUM of degrees AND campus of campuses that has degrees	SELECT T1.campus , SUM ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus
Keep the records that year of degrees is greater than or equal to 1998 AND year of degrees is less than or equal to 2002	WHERE T2.year >= 1998 AND T2.year <= 2002 
Group the records based on campus of campuses	GROUP BY T1.campus
Get the SUM of degrees AND campus of campuses that has degrees	SELECT T1.campus , SUM ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus
Keep the records that year of degrees is greater than or equal to 1998 AND year of degrees is less than or equal to 2002	WHERE T2.year >= 1998 AND T2.year <= 2002 
Group the records based on campus of campuses	GROUP BY T1.campus
Get the SUM of degrees AND campus of campuses that has degrees	SELECT T1.campus , SUM ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus
Keep the records that county of campuses is Orange AND year of degrees is greater than or equal to 2000	WHERE T1.county = Orange AND T2.year >= 2000 
Group the records based on campus of campuses	GROUP BY T1.campus
Get the SUM of degrees AND campus of campuses that has degrees	SELECT T1.campus , SUM ( T2.degrees ) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus
Keep the records that county of campuses is Orange AND year of degrees is greater than or equal to 2000	WHERE T1.county = Orange AND T2.year >= 2000 
Group the records based on campus of campuses	GROUP BY T1.campus
Get the maximum value of faculty of campuses that has faculty	SELECT MAX ( faculty ) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus
Keep the records that year of faculty is 2002 AND county of campuses is Orange	WHERE T2.year = 2002 AND T1.county = Orange
Get campus of campuses that has faculty	SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus
Keep the records that year of faculty is 2002 AND faculty is greater than the first query result	WHERE T2.year = 2002 AND faculty > ( the first query result ) 
Get the maximum value of faculty of campuses that has faculty	SELECT MAX ( faculty ) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus
Keep the records that year of faculty is 2002 AND county of campuses is Orange	WHERE T2.year = 2002 AND T1.county = Orange
Get campus of campuses that has faculty	SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus
Keep the records that year of faculty is 2002 AND faculty is greater than the first query result	WHERE T2.year = 2002 AND faculty > ( the first query result ) 
Get campus of campuses that has enrollments	SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus
Keep the records that year of enrollments is 1956 AND totalenrollment ay is greater than 400 AND FTE AY is greater than 200	WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200
Get campus of campuses that has enrollments	SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus
Keep the records that year of enrollments is 1956 AND totalenrollment ay is greater than 400 AND FTE AY is greater than 200	WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200
Get the number of campuses	SELECT COUNT ( * ) FROM campuses
Keep the records that county is Los Angeles	WHERE county = Los Angeles
Get the number of campuses	SELECT COUNT ( * ) FROM campuses
Keep the records that county is Los Angeles	WHERE county = Los Angeles
Get campus of campuses	SELECT campus FROM campuses
Keep the records that county is Los Angeles	WHERE county = Los Angeles
Get campus of campuses	SELECT campus FROM campuses
Keep the records that county is Los Angeles	WHERE county = Los Angeles
Get degrees of campuses that has degrees	SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus
Keep the records that campus of T1 is San Jose State University AND year of T2 is 2000	WHERE t1.campus = San Jose State University AND t2.year = 2000
Get degrees of campuses that has degrees	SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus
Keep the records that campus of T1 is San Jose State University AND year of T2 is 2000	WHERE t1.campus = San Jose State University AND t2.year = 2000
Get degrees of campuses that has degrees	SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus
Keep the records that campus of T1 is San Francisco State University AND year of T2 is 2001	WHERE t1.campus = San Francisco State University AND t2.year = 2001
Get degrees of campuses that has degrees	SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus
Keep the records that campus of T1 is San Francisco State University AND year of T2 is 2001	WHERE t1.campus = San Francisco State University AND t2.year = 2001
Get the SUM of faculty of faculty	SELECT SUM ( faculty ) FROM faculty
Keep the records that is 2002	WHERE YEAR = 2002
Get the SUM of faculty of faculty	SELECT SUM ( faculty ) FROM faculty
Keep the records that is 2002	WHERE YEAR = 2002
Get faculty of faculty that has campuses	SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id
Keep the records that year of faculty is 2002 AND campus of campuses is Long Beach State University	WHERE T1.year = 2002 AND T2.campus = Long Beach State University
Get faculty of faculty that has campuses	SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id
Keep the records that year of faculty is 2002 AND campus of campuses is Long Beach State University	WHERE T1.year = 2002 AND T2.campus = Long Beach State University
Get faculty of faculty that has campuses	SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id
Keep the records that year of faculty is 2004 AND campus of campuses is San Francisco State University	WHERE T1.year = 2004 AND T2.campus = San Francisco State University
Get faculty of faculty that has campuses	SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id
Keep the records that year of faculty is 2004 AND campus of campuses is San Francisco State University	WHERE T1.year = 2004 AND T2.campus = San Francisco State University
Get campus of campuses that has faculty	SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus
Keep the records that faculty of faculty is greater than or equal to 600 AND faculty of faculty is less than or equal to 1000 AND year of T1 is 2004	WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004
Get campus of campuses that has faculty	SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus
Keep the records that faculty of faculty is greater than or equal to 600 AND faculty of faculty is less than or equal to 1000 AND year of T1 is 2004	WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004
Get faculty of campuses that has faculty AND degrees	SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus
Keep the records that year of T2 is 2002	WHERE t2.year = 2002 
Order these records based on the degrees of T3 AND sort them in descending order, AND return the top 1 record	ORDER BY t3.degrees DESC LIMIT 1
Get faculty of campuses that has faculty AND degrees	SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus
Keep the records that year of T2 is 2002	WHERE t2.year = 2002 
Order these records based on the degrees of T3 AND sort them in descending order, AND return the top 1 record	ORDER BY t3.degrees DESC LIMIT 1
Get faculty of campuses that has faculty AND degrees	SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus
Keep the records that year of T2 is 2001	WHERE t2.year = 2001 
Order these records based on the degrees of t3, AND return the top 1 record	ORDER BY t3.degrees LIMIT 1
Get faculty of campuses that has faculty AND degrees	SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus
Keep the records that year of T2 is 2001	WHERE t2.year = 2001 
Order these records based on the degrees of t3, AND return the top 1 record	ORDER BY t3.degrees LIMIT 1
Get the SUM of undergraduate of discipline enrollments that has campuses	SELECT SUM ( t1.undergraduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that year of discipline enrollments is 2004 AND campus of campuses is San Jose State University	WHERE t1.year = 2004 AND t2.campus = San Jose State University
Get the SUM of undergraduate of discipline enrollments that has campuses	SELECT SUM ( t1.undergraduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that year of discipline enrollments is 2004 AND campus of campuses is San Jose State University	WHERE t1.year = 2004 AND t2.campus = San Jose State University
Get the SUM of graduate of discipline enrollments that has campuses	SELECT SUM ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that year of discipline enrollments is 2004 AND campus of campuses is San Francisco State University	WHERE t1.year = 2004 AND t2.campus = San Francisco State University
Get the SUM of graduate of discipline enrollments that has campuses	SELECT SUM ( t1.graduate ) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that year of discipline enrollments is 2004 AND campus of campuses is San Francisco State University	WHERE t1.year = 2004 AND t2.campus = San Francisco State University
Get campusfee of csu fees that has campuses	SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that campus of campuses is San Francisco State University AND year of csu fees is 2000	WHERE t2.campus = San Francisco State University AND t1.year = 2000
Get campusfee of csu fees that has campuses	SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that campus of campuses is San Francisco State University AND year of csu fees is 2000	WHERE t2.campus = San Francisco State University AND t1.year = 2000
Get campusfee of csu fees that has campuses	SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that campus of campuses is San Jose State University AND year of csu fees is 2000	WHERE t2.campus = San Jose State University AND t1.year = 2000
Get campusfee of csu fees that has campuses	SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id
Keep the records that campus of campuses is San Jose State University AND year of csu fees is 2000	WHERE t2.campus = San Jose State University AND t1.year = 2000
Get the number of campuses	SELECT COUNT ( * ) FROM campuses
Get the number of campuses	SELECT COUNT ( * ) FROM campuses
Get the number of candidate	SELECT COUNT ( * ) FROM candidate
Get the number of candidate	SELECT COUNT ( * ) FROM candidate
Get poll source of candidate	SELECT poll_source FROM candidate
Group the records based on poll source	GROUP BY poll_source
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get poll source of candidate	SELECT poll_source FROM candidate
Group the records based on poll source	GROUP BY poll_source
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get support rate of candidate	SELECT support_rate FROM candidate
Order these records based on the support rate and sort them in descending order, and return the top 3 records	ORDER BY support_rate DESC LIMIT 3
Get support rate of candidate	SELECT support_rate FROM candidate
Order these records based on the support rate and sort them in descending order, and return the top 3 records	ORDER BY support_rate DESC LIMIT 3
Get Candidate ID of candidate	SELECT Candidate_ID FROM candidate
Order these records based on the oppose rate, and return the top 1 record	ORDER BY oppose_rate LIMIT 1
Get Candidate ID of candidate	SELECT Candidate_ID FROM candidate
Order these records based on the oppose rate, and return the top 1 record	ORDER BY oppose_rate LIMIT 1
Get Support rate and Consider rate and Oppose rate of candidate	SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate
Order these records based on the unsure rate	ORDER BY unsure_rate 
Get Support rate and Consider rate and Oppose rate of candidate	SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate
Order these records based on the unsure rate	ORDER BY unsure_rate 
Get poll source of candidate	SELECT poll_source FROM candidate
Order these records based on the oppose rate and sort them in descending order, and return the top 1 record	ORDER BY oppose_rate DESC LIMIT 1
Get poll source of candidate	SELECT poll_source FROM candidate
Order these records based on the oppose rate and sort them in descending order, and return the top 1 record	ORDER BY oppose_rate DESC LIMIT 1
Get name of people	SELECT name FROM people
Order these records based on the date of birth	ORDER BY date_of_birth 
Get name of people	SELECT name FROM people
Order these records based on the date of birth	ORDER BY date_of_birth 
Get the average value of height and the average value of weight of people	SELECT AVG ( height ) , AVG ( weight ) FROM people
Keep the records that sex is M	WHERE sex = M
Get the average value of height and the average value of weight of people	SELECT AVG ( height ) , AVG ( weight ) FROM people
Keep the records that sex is M	WHERE sex = M
Get name of people	SELECT name FROM people
Keep the records that height is greater than 200 OR height is less than 190	WHERE height > 200 OR height < 190
Get name of people	SELECT name FROM people
Keep the records that height is greater than 200 OR height is less than 190	WHERE height > 200 OR height < 190
Get the average value of weight and the minimum value of weight and sex of people	SELECT AVG ( weight ) , MIN ( weight ) , sex FROM people
Group the records based on sex	GROUP BY sex
Get the average value of weight and the minimum value of weight and sex of people	SELECT AVG ( weight ) , MIN ( weight ) , sex FROM people
Group the records based on sex	GROUP BY sex
Get name and sex of people that has candidate	SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Order these records based on the support rate of candidate and sort them in descending order, and return the top 1 record	ORDER BY t2.support_rate DESC LIMIT 1
Get name and sex of people that has candidate	SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Order these records based on the support rate of candidate and sort them in descending order, and return the top 1 record	ORDER BY t2.support_rate DESC LIMIT 1
Get the minimum value of oppose rate and name and sex of people that has candidate	SELECT t1.name , t1.sex , MIN ( oppose_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Group the records based on sex of people	GROUP BY t1.sex
Get the minimum value of oppose rate and name and sex of people that has candidate	SELECT t1.name , t1.sex , MIN ( oppose_rate ) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Group the records based on sex of people	GROUP BY t1.sex
Get sex of people that has candidate	SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Group the records based on sex of people	GROUP BY t1.sex
Order these records based on the the average value of unsure rate of candidate and sort them in descending order, and return the top 1 record	ORDER BY AVG ( t2.unsure_rate ) DESC LIMIT 1
Get sex of people that has candidate	SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Group the records based on sex of people	GROUP BY t1.sex
Order these records based on the the average value of unsure rate of candidate and sort them in descending order, and return the top 1 record	ORDER BY AVG ( t2.unsure_rate ) DESC LIMIT 1
Get people id of candidate	SELECT people_id FROM candidate
Get name of people	SELECT name FROM people
Keep the records that people id is not in the first query result	WHERE people_id NOT IN ( the first query result ) 
Get people id of candidate	SELECT people_id FROM candidate
Get name of people	SELECT name FROM people
Keep the records that people id is not in the first query result	WHERE people_id NOT IN ( the first query result ) 
Get name of people that has candidate	SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Keep the records that support rate of candidate is less than oppose rate of candidate	WHERE t2.support_rate < t2.oppose_rate
Get name of people that has candidate	SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Keep the records that support rate of candidate is less than oppose rate of candidate	WHERE t2.support_rate < t2.oppose_rate
Get the number and sex of people	SELECT COUNT ( * ) , sex FROM people
Keep the records that weight is greater than 85	WHERE weight > 85 
Group the records based on sex	GROUP BY sex
Get the number and sex of people	SELECT COUNT ( * ) , sex FROM people
Keep the records that weight is greater than 85	WHERE weight > 85 
Group the records based on sex	GROUP BY sex
Get the maximum value of support rate and the minimum value of consider rate and the minimum value of oppose rate of candidate	SELECT MAX ( support_rate ) , MIN ( consider_rate ) , MIN ( oppose_rate ) FROM candidate
Get the maximum value of support rate and the minimum value of consider rate and the minimum value of oppose rate of candidate	SELECT MAX ( support_rate ) , MIN ( consider_rate ) , MIN ( oppose_rate ) FROM candidate
Get name of people that has candidate	SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Keep the records that sex of people is F	WHERE t1.sex = F 
Order these records based on the name of people	ORDER BY t1.name 
Get name of people that has candidate	SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id
Keep the records that sex of people is F	WHERE t1.sex = F 
Order these records based on the name of people	ORDER BY t1.name 
Get the average value of height of people	SELECT AVG ( height ) FROM people
Get name of people	SELECT name FROM people
Keep the records that height is less than the first query result	WHERE height < ( the first query result ) 
Get the average value of height of people	SELECT AVG ( height ) FROM people
Get name of people	SELECT name FROM people
Keep the records that height is less than the first query result	WHERE height < ( the first query result ) 
Get all of people	SELECT * FROM people
Get all of people	SELECT * FROM people
Get title of Movie	SELECT title FROM Movie
Keep the records that director is Steven Spielberg	WHERE director = Steven Spielberg
Get title of Movie	SELECT title FROM Movie
Keep the records that director is Steven Spielberg	WHERE director = Steven Spielberg
Get title of Movie	SELECT title FROM Movie
Keep the records that director is James Cameron AND is greater than 2000	WHERE director = James Cameron AND YEAR > 2000
Get title of Movie	SELECT title FROM Movie
Keep the records that director is James Cameron AND is greater than 2000	WHERE director = James Cameron AND YEAR > 2000
Get the number of Movie	SELECT COUNT ( * ) FROM Movie
Keep the records that is less than 2000	WHERE YEAR < 2000
Get the number of Movie	SELECT COUNT ( * ) FROM Movie
Keep the records that is less than 2000	WHERE YEAR < 2000
Get director of Movie	SELECT director FROM Movie
Keep the records that title is Avatar	WHERE title = Avatar
Get director of Movie	SELECT director FROM Movie
Keep the records that title is Avatar	WHERE title = Avatar
Get the number of Reviewer	SELECT COUNT ( * ) FROM Reviewer
Get the number of Reviewer	SELECT COUNT ( * ) FROM Reviewer
Get rID of Reviewer	SELECT rID FROM Reviewer
Keep the records that name is in the form of %Mike%	WHERE name LIKE %Mike%
Get rID of Reviewer	SELECT rID FROM Reviewer
Keep the records that name is in the form of %Mike%	WHERE name LIKE %Mike%
Get rID of Reviewer	SELECT rID FROM Reviewer
Keep the records that name is Daniel Lewis	WHERE name = Daniel Lewis
Get rID of Reviewer	SELECT rID FROM Reviewer
Keep the records that name is Daniel Lewis	WHERE name = Daniel Lewis
Get the number of Rating	SELECT COUNT ( * ) FROM Rating
Keep the records that stars is greater than 3	WHERE stars > 3
Get the number of Rating	SELECT COUNT ( * ) FROM Rating
Keep the records that stars is greater than 3	WHERE stars > 3
Get the maximum value of stars and the minimum value of stars of Rating	SELECT MAX ( stars ) , MIN ( stars ) FROM Rating
Get the maximum value of stars and the minimum value of stars of Rating	SELECT MAX ( stars ) , MIN ( stars ) FROM Rating
Get of Movie that has Rating	SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is greater than or equal to 4	WHERE T2.stars >= 4 
Order these records based on the YEAR of Movie	ORDER BY T1.year 
Get of Movie that has Rating	SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is greater than or equal to 4	WHERE T2.stars >= 4 
Order these records based on the YEAR of Movie	ORDER BY T1.year 
Get director and title of Movie that has Rating	SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is 5	WHERE T2.stars = 5
Get director and title of Movie that has Rating	SELECT T1.director , T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is 5	WHERE T2.stars = 5
Get the average value of stars and name of Rating that has Reviewer	SELECT T2.name , AVG ( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Group the records based on name of Reviewer	GROUP BY T2.name
Get the average value of stars and name of Rating that has Reviewer	SELECT T2.name , AVG ( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Group the records based on name of Reviewer	GROUP BY T2.name
Get mID of Rating	SELECT mID FROM Rating
Get title of Movie	SELECT title FROM Movie
Keep the records that mID is not in the first query result	WHERE mID NOT IN ( the first query result ) 
Get mID of Rating	SELECT mID FROM Rating
Get title of Movie	SELECT title FROM Movie
Keep the records that mID is not in the first query result	WHERE mID NOT IN ( the first query result ) 
Get name of Reviewer that has Rating	SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID
Keep the records that ratingDate is null	WHERE ratingDate = null
Get name of Reviewer that has Rating	SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID
Keep the records that ratingDate is null	WHERE ratingDate = null
Get the minimum value of YEAR of Movie	SELECT MIN ( YEAR ) FROM Movie
Get the average value of stars and title of Rating that has Movie	SELECT AVG ( T1.stars ) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that year of Movie is the first query result	WHERE T2.year = ( the first query result ) 
Get the minimum value of YEAR of Movie	SELECT MIN ( YEAR ) FROM Movie
Get the average value of stars and title of Rating that has Movie	SELECT AVG ( T1.stars ) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that year of Movie is the first query result	WHERE T2.year = ( the first query result ) 
Get the maximum value of YEAR of Movie	SELECT MAX ( YEAR ) FROM Movie
Get title of Movie	SELECT title FROM Movie
Keep the records that is the first query result	WHERE YEAR = ( the first query result ) 
Get the maximum value of YEAR of Movie	SELECT MAX ( YEAR ) FROM Movie
Get title of Movie	SELECT title FROM Movie
Keep the records that is the first query result	WHERE YEAR = ( the first query result ) 
Get the maximum value of YEAR of Movie	SELECT MAX ( YEAR ) FROM Movie
Get the maximum value of stars and year of Rating that has Movie	SELECT MAX ( T1.stars ) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that year of Movie is the first query result	WHERE T2.year = ( the first query result ) 
Get the maximum value of YEAR of Movie	SELECT MAX ( YEAR ) FROM Movie
Get the maximum value of stars and year of Rating that has Movie	SELECT MAX ( T1.stars ) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that year of Movie is the first query result	WHERE T2.year = ( the first query result ) 
Get the maximum value of YEAR of Movie	SELECT MAX ( YEAR ) FROM Movie
Keep the records that director is Steven Spielberg	WHERE director = Steven Spielberg
Get title of Movie	SELECT title FROM Movie
Keep the records that is greater than the first query result	WHERE YEAR > ( the first query result ) 
Get the maximum value of YEAR of Movie	SELECT MAX ( YEAR ) FROM Movie
Keep the records that director is Steven Spielberg	WHERE director = Steven Spielberg
Get title of Movie	SELECT title FROM Movie
Keep the records that is greater than the first query result	WHERE YEAR > ( the first query result ) 
Get the average value of stars of Rating that has Movie	SELECT AVG ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that director of Movie is James Cameron	WHERE T2.director = James Cameron
Get title and director of Rating that has Movie	SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is greater than the first query result	WHERE T1.stars > ( the first query result ) 
Get the average value of stars of Rating that has Movie	SELECT AVG ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that director of Movie is James Cameron	WHERE T2.director = James Cameron
Get title and director of Rating that has Movie	SELECT T2.title , T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is greater than the first query result	WHERE T1.stars > ( the first query result ) 
Get name and title and stars and ratingDate of Rating that has Movie and Reviewer	SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Order these records based on the name of Reviewer title of Movie stars of Rating	ORDER BY T3.name , T2.title , T1.stars 
Get name and title and stars and ratingDate of Rating that has Movie and Reviewer	SELECT T3.name , T2.title , T1.stars , T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Order these records based on the name of Reviewer title of Movie stars of Rating	ORDER BY T3.name , T2.title , T1.stars 
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Group the records based on the number rID of Rating 3 that the number is greater than or equal to 3	GROUP BY T1.rID HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Group the records based on the number rID of Rating 3 that the number is greater than or equal to 3	GROUP BY T1.rID HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get name of Rating that has Movie and Reviewer	SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that title of Movie is Gone with the Wind	WHERE T2.title = Gone with the Wind
Get name of Rating that has Movie and Reviewer	SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that title of Movie is Gone with the Wind	WHERE T2.title = Gone with the Wind
Get director of Rating that has Movie and Reviewer	SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that name of Reviewer is Sarah Martinez	WHERE T3.name = Sarah Martinez
Get director of Rating that has Movie and Reviewer	SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that name of Reviewer is Sarah Martinez	WHERE T3.name = Sarah Martinez
Get name and title and stars of Rating that has Movie and Reviewer	SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that director of Movie is name of Reviewer	WHERE T2.director = T3.name
Get name and title and stars of Rating that has Movie and Reviewer	SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that director of Movie is name of Reviewer	WHERE T2.director = T3.name
Get name of Reviewer	SELECT name FROM Reviewer
Get title of Movie	SELECT title FROM Movie
Get name of Reviewer	SELECT name FROM Reviewer
Get title of Movie	SELECT title FROM Movie
Get title of Movie	SELECT DISTINCT title FROM Movie
Get title of Rating that has Movie and Reviewer	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that name of Reviewer is Chris Jackson	WHERE T3.name = Chris Jackson
Get title of Movie	SELECT DISTINCT title FROM Movie
Get title of Rating that has Movie and Reviewer	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that name of Reviewer is Chris Jackson	WHERE T3.name = Chris Jackson
Get title and director of Movie that has Movie	SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director
Keep the records that title of Movie is not title of Movie	WHERE T1.title != T2.title 
Order these records based on the director of Movie title of Movie	ORDER BY T1.director , T1.title 
Get title and director of Movie that has Movie	SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director
Keep the records that title of Movie is not title of Movie	WHERE T1.title != T2.title 
Order these records based on the director of Movie title of Movie	ORDER BY T1.director , T1.title 
Get title and year of Movie that has Movie	SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director
Keep the records that title of Movie is not title of Movie	WHERE T1.title != T2.title
Get title and year of Movie that has Movie	SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director
Keep the records that title of Movie is not title of Movie	WHERE T1.title != T2.title
Get director of Movie	SELECT director FROM Movie
Group the records based on the number director 1 that the number is 1	GROUP BY director HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get director of Movie	SELECT director FROM Movie
Group the records based on the number director 1 that the number is 1	GROUP BY director HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get director of Movie	SELECT director FROM Movie
Keep the records that director is not null	WHERE director != null 
Group the records based on the number director 1 that the number is 1	GROUP BY director HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get director of Movie	SELECT director FROM Movie
Keep the records that director is not null	WHERE director != null 
Group the records based on the number director 1 that the number is 1	GROUP BY director HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get the number and director of Movie that has Rating	SELECT COUNT ( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID
Group the records based on director of Movie	GROUP BY T1.director
Get the number and director of Movie that has Rating	SELECT COUNT ( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID
Group the records based on director of Movie	GROUP BY T1.director
Get the average value of stars and title of Rating that has Movie	SELECT T2.title , AVG ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on mID of Rating	GROUP BY T1.mID
Order these records based on the the average value of stars of Rating and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.stars ) DESC LIMIT 1
Get the average value of stars and title of Rating that has Movie	SELECT T2.title , AVG ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on mID of Rating	GROUP BY T1.mID
Order these records based on the the average value of stars of Rating and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.stars ) DESC LIMIT 1
Get the average value of stars and title of Rating that has Movie	SELECT T2.title , AVG ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on mID of Rating	GROUP BY T1.mID
Order these records based on the the average value of stars of Rating, and return the top 1 record	ORDER BY AVG ( T1.stars ) LIMIT 1
Get the average value of stars and title of Rating that has Movie	SELECT T2.title , AVG ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on mID of Rating	GROUP BY T1.mID
Order these records based on the the average value of stars of Rating, and return the top 1 record	ORDER BY AVG ( T1.stars ) LIMIT 1
Get title and year of Rating that has Movie	SELECT T2.title , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Order these records based on the stars of Rating and sort them in descending order, and return the top 3 records	ORDER BY T1.stars DESC LIMIT 3
Get title and year of Rating that has Movie	SELECT T2.title , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Order these records based on the stars of Rating and sort them in descending order, and return the top 3 records	ORDER BY T1.stars DESC LIMIT 3
Get the maximum value of stars and title and stars and director of Rating that has Movie	SELECT T2.title , T1.stars , T2.director , MAX ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that director is not null	WHERE director != null 
Group the records based on director	GROUP BY director
Get the maximum value of stars and title and stars and director of Rating that has Movie	SELECT T2.title , T1.stars , T2.director , MAX ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that director is not null	WHERE director != null 
Group the records based on director	GROUP BY director
Get the minimum value of stars and title and rID and stars of Rating that has Movie	SELECT T2.title , T1.rID , T1.stars , MIN ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on rID of Rating	GROUP BY T1.rID
Get the minimum value of stars and title and rID and stars of Rating that has Movie	SELECT T2.title , T1.rID , T1.stars , MIN ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on rID of Rating	GROUP BY T1.rID
Get the minimum value of stars and title and stars and director of Rating that has Movie	SELECT T2.title , T1.stars , T2.director , MIN ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on director of Movie	GROUP BY T2.director
Get the minimum value of stars and title and stars and director of Rating that has Movie	SELECT T2.title , T1.stars , T2.director , MIN ( T1.stars ) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on director of Movie	GROUP BY T2.director
Get title and mID of Rating that has Movie	SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on mID of Rating	GROUP BY T1.mID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title and mID of Rating that has Movie	SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Group the records based on mID of Rating	GROUP BY T1.mID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title of Rating that has Movie	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is between 3 AND 5	WHERE T1.stars BETWEEN 3 AND 5
Get title of Rating that has Movie	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is between 3 AND 5	WHERE T1.stars BETWEEN 3 AND 5
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that stars of Rating is greater than 3	WHERE T1.stars > 3
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that stars of Rating is greater than 3	WHERE T1.stars > 3
Get mID of Rating that has Reviewer	SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that name of Reviewer is Brittany Harris	WHERE T2.name = Brittany Harris
Get the average value of stars and mID of Rating	SELECT mID , AVG ( stars ) FROM Rating
Keep the records that mID is not in the first query result	WHERE mID NOT IN ( the first query result )  
Group the records based on mID	GROUP BY mID
Get mID of Rating that has Reviewer	SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that name of Reviewer is Brittany Harris	WHERE T2.name = Brittany Harris
Get the average value of stars and mID of Rating	SELECT mID , AVG ( stars ) FROM Rating
Keep the records that mID is not in the first query result	WHERE mID NOT IN ( the first query result )  
Group the records based on mID	GROUP BY mID
Get mID of Rating	SELECT mID FROM Rating
Get mID of Rating that has Reviewer	SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that name of Reviewer is Brittany Harris	WHERE T2.name = Brittany Harris
Get mID of Rating	SELECT mID FROM Rating
Get mID of Rating that has Reviewer	SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that name of Reviewer is Brittany Harris	WHERE T2.name = Brittany Harris
Get the average value of stars and mID of Rating	SELECT mID , AVG ( stars ) FROM Rating
Group the records based on the number mID 2 that the number is greater than or equal to 2	GROUP BY mID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the average value of stars and mID of Rating	SELECT mID , AVG ( stars ) FROM Rating
Group the records based on the number mID 2 that the number is greater than or equal to 2	GROUP BY mID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get rID of Rating	SELECT rID FROM Rating
Get rID of Rating	SELECT rID FROM Rating
Keep the records that stars is 4	WHERE stars = 4
Get rID of Rating	SELECT rID FROM Rating
Get rID of Rating	SELECT rID FROM Rating
Keep the records that stars is 4	WHERE stars = 4
Get rID of Rating	SELECT rID FROM Rating
Keep the records that stars is not 4	WHERE stars != 4
Get rID of Rating	SELECT rID FROM Rating
Keep the records that stars is not 4	WHERE stars != 4
Get title of Rating that has Movie and Reviewer	SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that name of Reviewer is Brittany Harris OR year of Movie is greater than 2000	WHERE T3.name = Brittany Harris OR T2.year > 2000
Get title of Rating that has Movie and Reviewer	SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID
Keep the records that name of Reviewer is Brittany Harris OR year of Movie is greater than 2000	WHERE T3.name = Brittany Harris OR T2.year > 2000
Get title of Movie	SELECT title FROM Movie
Keep the records that director is James Cameron OR is less than 1980	WHERE director = James Cameron OR YEAR < 1980
Get title of Movie	SELECT title FROM Movie
Keep the records that director is James Cameron OR is less than 1980	WHERE director = James Cameron OR YEAR < 1980
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that stars of Rating is 3	WHERE T1.stars = 3
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that stars of Rating is 4	WHERE T1.stars = 4
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that stars of Rating is 3	WHERE T1.stars = 3
Get name of Rating that has Reviewer	SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID
Keep the records that stars of Rating is 4	WHERE T1.stars = 4
Get title of Rating that has Movie	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is 3	WHERE T1.stars = 3
Get title of Rating that has Movie	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is 4	WHERE T1.stars = 4
Get title of Rating that has Movie	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is 3	WHERE T1.stars = 3
Get title of Rating that has Movie	SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID
Keep the records that stars of Rating is 4	WHERE T1.stars = 4
Get the number of county public safety	SELECT COUNT ( * ) FROM county_public_safety
Get the number of county public safety	SELECT COUNT ( * ) FROM county_public_safety
Get Name of county public safety	SELECT Name FROM county_public_safety
Order these records based on the Population and sort them in descending ORDER	ORDER BY Population DESC 
Get Name of county public safety	SELECT Name FROM county_public_safety
Order these records based on the Population and sort them in descending ORDER	ORDER BY Population DESC 
Get Police force of county public safety	SELECT DISTINCT Police_force FROM county_public_safety
Keep the records that is not East	WHERE LOCATION != East
Get Police force of county public safety	SELECT DISTINCT Police_force FROM county_public_safety
Keep the records that is not East	WHERE LOCATION != East
Get the minimum value of Crime rate and the maximum value of Crime rate of county public safety	SELECT MIN ( Crime_rate ) , MAX ( Crime_rate ) FROM county_public_safety
Get the minimum value of Crime rate and the maximum value of Crime rate of county public safety	SELECT MIN ( Crime_rate ) , MAX ( Crime_rate ) FROM county_public_safety
Get Crime rate of county public safety	SELECT Crime_rate FROM county_public_safety
Order these records based on the Police officers and sort them in ascending ORDER	ORDER BY Police_officers ASC 
Get Crime rate of county public safety	SELECT Crime_rate FROM county_public_safety
Order these records based on the Police officers and sort them in ascending ORDER	ORDER BY Police_officers ASC 
Get Name of city	SELECT Name FROM city
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of city	SELECT Name FROM city
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Hispanic of city	SELECT Hispanic FROM city
Keep the records that Black is greater than 10	WHERE Black > 10
Get Hispanic of city	SELECT Hispanic FROM city
Keep the records that Black is greater than 10	WHERE Black > 10
Get Name of county public safety	SELECT Name FROM county_public_safety
Order these records based on the Population and sort them in descending order, and return the top 1 record	ORDER BY Population DESC LIMIT 1
Get Name of county public safety	SELECT Name FROM county_public_safety
Order these records based on the Population and sort them in descending order, and return the top 1 record	ORDER BY Population DESC LIMIT 1
Get Name of city	SELECT Name FROM city
Order these records based on the White and sort them in descending order, and return the top 5 records	ORDER BY White DESC LIMIT 5
Get Name of city	SELECT Name FROM city
Order these records based on the White and sort them in descending order, and return the top 5 records	ORDER BY White DESC LIMIT 5
Get Name and Name of city that has county public safety	SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2
Get Name and Name of city that has county public safety	SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2
Get White and Crime rate of city that has county public safety	SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2
Get White and Crime rate of city that has county public safety	SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2
Get county ID of county public safety	SELECT county_ID FROM county_public_safety
Order these records based on the Police officers and sort them in descending order, and return the top 1 record	ORDER BY Police_officers DESC LIMIT 1
Get name of city	SELECT name FROM city
Keep the records that county ID is the first query result	WHERE county_ID = ( the first query result ) 
Get county ID of county public safety	SELECT county_ID FROM county_public_safety
Order these records based on the Police officers and sort them in descending order, and return the top 1 record	ORDER BY Police_officers DESC LIMIT 1
Get name of city	SELECT name FROM city
Keep the records that county ID is the first query result	WHERE county_ID = ( the first query result ) 
Get county ID of county public safety	SELECT county_ID FROM county_public_safety
Keep the records that population is greater than 20000	WHERE population > 20000
Get the number of city	SELECT COUNT ( * ) FROM city
Keep the records that county ID is in the first query result	WHERE county_ID IN ( the first query result ) 
Get county ID of county public safety	SELECT county_ID FROM county_public_safety
Keep the records that population is greater than 20000	WHERE population > 20000
Get the number of city	SELECT COUNT ( * ) FROM city
Keep the records that county ID is in the first query result	WHERE county_ID IN ( the first query result ) 
Get Crime rate of city that has county public safety	SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
Keep the records that White of city is greater than 90	WHERE T1.White > 90
Get Crime rate of city that has county public safety	SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID
Keep the records that White of city is greater than 90	WHERE T1.White > 90
Get the number and Police force of county public safety	SELECT Police_force , COUNT ( * ) FROM county_public_safety
Group the records based on Police force	GROUP BY Police_force
Get the number and Police force of county public safety	SELECT Police_force , COUNT ( * ) FROM county_public_safety
Group the records based on Police force	GROUP BY Police_force
Get of county public safety	SELECT LOCATION FROM county_public_safety
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of county public safety	SELECT LOCATION FROM county_public_safety
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get County ID of city	SELECT County_ID FROM city
Get Name of county public safety	SELECT Name FROM county_public_safety
Keep the records that County ID is not in the first query result	WHERE County_ID NOT IN ( the first query result ) 
Get County ID of city	SELECT County_ID FROM city
Get Name of county public safety	SELECT Name FROM county_public_safety
Keep the records that County ID is not in the first query result	WHERE County_ID NOT IN ( the first query result ) 
Get Police force of county public safety	SELECT Police_force FROM county_public_safety
Keep the records that is East	WHERE LOCATION = East
Get Police force of county public safety	SELECT Police_force FROM county_public_safety
Keep the records that is West	WHERE LOCATION = West
Get Police force of county public safety	SELECT Police_force FROM county_public_safety
Keep the records that is East	WHERE LOCATION = East
Get Police force of county public safety	SELECT Police_force FROM county_public_safety
Keep the records that is West	WHERE LOCATION = West
Get county id of county public safety	SELECT county_id FROM county_public_safety
Keep the records that Crime rate is less than 100	WHERE Crime_rate < 100
Get name of city	SELECT name FROM city
Keep the records that county id is in the first query result	WHERE county_id IN ( the first query result ) 
Get county id of county public safety	SELECT county_id FROM county_public_safety
Keep the records that Crime rate is less than 100	WHERE Crime_rate < 100
Get name of city	SELECT name FROM city
Keep the records that county id is in the first query result	WHERE county_id IN ( the first query result ) 
Get Case burden of county public safety	SELECT Case_burden FROM county_public_safety
Order these records based on the Population and sort them in descending ORDER	ORDER BY Population DESC 
Get Case burden of county public safety	SELECT Case_burden FROM county_public_safety
Order these records based on the Population and sort them in descending ORDER	ORDER BY Population DESC 
Get roomName of Rooms	SELECT roomName FROM Rooms
Keep the records that basePrice is less than 160 AND beds is 2 AND decor is modern	WHERE basePrice < 160 AND beds = 2 AND decor = modern
Get roomName of Rooms	SELECT roomName FROM Rooms
Keep the records that basePrice is less than 160 AND beds is 2 AND decor is modern	WHERE basePrice < 160 AND beds = 2 AND decor = modern
Get roomName AND RoomId of Rooms	SELECT roomName , RoomId FROM Rooms
Keep the records that basePrice is greater than 160 AND maxOccupancy is greater than 2	WHERE basePrice > 160 AND maxOccupancy > 2
Get roomName AND RoomId of Rooms	SELECT roomName , RoomId FROM Rooms
Keep the records that basePrice is greater than 160 AND maxOccupancy is greater than 2	WHERE basePrice > 160 AND maxOccupancy > 2
Get roomName of Reservations that has Rooms	SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on Room of Reservations	GROUP BY T1.Room
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get roomName of Reservations that has Rooms	SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on Room of Reservations	GROUP BY T1.Room
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get kids of Reservations	SELECT kids FROM Reservations
Keep the records that FirstName is ROY AND LastName is SWEAZY	WHERE FirstName = ROY AND LastName = SWEAZY
Get kids of Reservations	SELECT kids FROM Reservations
Keep the records that FirstName is ROY AND LastName is SWEAZY	WHERE FirstName = ROY AND LastName = SWEAZY
Get the number of Reservations	SELECT COUNT ( * ) FROM Reservations
Keep the records that FirstName is ROY AND LastName is SWEAZY	WHERE FirstName = ROY AND LastName = SWEAZY
Get the number of Reservations	SELECT COUNT ( * ) FROM Reservations
Keep the records that FirstName is ROY AND LastName is SWEAZY	WHERE FirstName = ROY AND LastName = SWEAZY
Get roomName and Rate and CheckIn and CheckOut of Reservations that has Rooms	SELECT T2.roomName , T1.Rate , T1.CheckIn , T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on Room of Reservations	GROUP BY T1.Room
Order these records based on the Rate of Reservations and sort them in descending order, and return the top 1 record	ORDER BY T1.Rate DESC LIMIT 1
Get roomName and Rate and CheckIn and CheckOut of Reservations that has Rooms	SELECT T2.roomName , T1.Rate , T1.CheckIn , T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on Room of Reservations	GROUP BY T1.Room
Order these records based on the Rate of Reservations and sort them in descending order, and return the top 1 record	ORDER BY T1.Rate DESC LIMIT 1
Get Adults of Reservations	SELECT Adults FROM Reservations
Keep the records that CheckIn is 2010-10-23 AND FirstName is CONRAD AND LastName is SELBIG	WHERE CheckIn = 2010-10-23 AND FirstName = CONRAD AND LastName = SELBIG
Get Adults of Reservations	SELECT Adults FROM Reservations
Keep the records that CheckIn is 2010-10-23 AND FirstName is CONRAD AND LastName is SELBIG	WHERE CheckIn = 2010-10-23 AND FirstName = CONRAD AND LastName = SELBIG
Get Kids of Reservations	SELECT Kids FROM Reservations
Keep the records that CheckIn is 2010-09-21 AND FirstName is DAMIEN AND LastName is TRACHSEL	WHERE CheckIn = 2010-09-21 AND FirstName = DAMIEN AND LastName = TRACHSEL
Get Kids of Reservations	SELECT Kids FROM Reservations
Keep the records that CheckIn is 2010-09-21 AND FirstName is DAMIEN AND LastName is TRACHSEL	WHERE CheckIn = 2010-09-21 AND FirstName = DAMIEN AND LastName = TRACHSEL
Get the SUM of beds of Rooms	SELECT SUM ( beds ) FROM Rooms
Keep the records that bedtype is King	WHERE bedtype = King
Get the SUM of beds of Rooms	SELECT SUM ( beds ) FROM Rooms
Keep the records that bedtype is King	WHERE bedtype = King
Get roomName and decor of Rooms	SELECT roomName , decor FROM Rooms
Keep the records that bedtype is King	WHERE bedtype = King 
Order these records based on the basePrice	ORDER BY basePrice 
Get roomName and decor of Rooms	SELECT roomName , decor FROM Rooms
Keep the records that bedtype is King	WHERE bedtype = King 
Order these records based on the basePrice	ORDER BY basePrice 
Get roomName and basePrice of Rooms	SELECT roomName , basePrice FROM Rooms
Order these records based on the basePrice and sort them in ascending order, and return the top 1 record	ORDER BY basePrice ASC LIMIT 1
Get roomName and basePrice of Rooms	SELECT roomName , basePrice FROM Rooms
Order these records based on the basePrice and sort them in ascending order, and return the top 1 record	ORDER BY basePrice ASC LIMIT 1
Get decor of Rooms	SELECT decor FROM Rooms
Keep the records that roomName is Recluse and defiance	WHERE roomName = Recluse and defiance
Get decor of Rooms	SELECT decor FROM Rooms
Keep the records that roomName is Recluse and defiance	WHERE roomName = Recluse and defiance
Get the average value of basePrice and bedType of Rooms	SELECT bedType , AVG ( basePrice ) FROM Rooms
Group the records based on bedType	GROUP BY bedType
Get the average value of basePrice and bedType of Rooms	SELECT bedType , AVG ( basePrice ) FROM Rooms
Group the records based on bedType	GROUP BY bedType
Get the SUM of maxOccupancy of Rooms	SELECT SUM ( maxOccupancy ) FROM Rooms
Keep the records that decor is modern	WHERE decor = modern
Get the SUM of maxOccupancy of Rooms	SELECT SUM ( maxOccupancy ) FROM Rooms
Keep the records that decor is modern	WHERE decor = modern
Get decor of Reservations that has Rooms	SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on decor of Rooms	GROUP BY T2.decor
Order these records based on the the number of decor of Rooms and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( T2.decor ) ASC LIMIT 1
Get decor of Reservations that has Rooms	SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on decor of Rooms	GROUP BY T2.decor
Order these records based on the the number of decor of Rooms and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( T2.decor ) ASC LIMIT 1
Get the number of Reservations that has Rooms	SELECT COUNT ( * ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Keep the records that maxOccupancy of Rooms is Adults of Reservations Kids of Reservations	WHERE T2.maxOccupancy = T1.Adults + T1.Kids
Get the number of Reservations that has Rooms	SELECT COUNT ( * ) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Keep the records that maxOccupancy of Rooms is Adults of Reservations Kids of Reservations	WHERE T2.maxOccupancy = T1.Adults + T1.Kids
Get firstname and lastname of Reservations that has Rooms	SELECT T1.firstname , T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Keep the records that Rate of Reservations basePrice of Rooms is greater than 0	WHERE T1.Rate - T2.basePrice > 0
Get firstname and lastname of Reservations that has Rooms	SELECT T1.firstname , T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Keep the records that Rate of Reservations basePrice of Rooms is greater than 0	WHERE T1.Rate - T2.basePrice > 0
Get the number of Rooms	SELECT COUNT ( * ) FROM Rooms
Get the number of Rooms	SELECT COUNT ( * ) FROM Rooms
Get the number of Rooms	SELECT COUNT ( * ) FROM Rooms
Keep the records that bedType is King	WHERE bedType = King
Get the number of Rooms	SELECT COUNT ( * ) FROM Rooms
Keep the records that bedType is King	WHERE bedType = King
Get the number and bedType of Rooms	SELECT bedType , COUNT ( * ) FROM Rooms
Group the records based on bedType	GROUP BY bedType
Get the number and bedType of Rooms	SELECT bedType , COUNT ( * ) FROM Rooms
Group the records based on bedType	GROUP BY bedType
Get roomName of Rooms	SELECT roomName FROM Rooms
Order these records based on the maxOccupancy and sort them in descending order, and return the top 1 record	ORDER BY maxOccupancy DESC LIMIT 1
Get roomName of Rooms	SELECT roomName FROM Rooms
Order these records based on the maxOccupancy and sort them in descending order, and return the top 1 record	ORDER BY maxOccupancy DESC LIMIT 1
Get RoomId and roomName of Rooms	SELECT RoomId , roomName FROM Rooms
Order these records based on the basePrice and sort them in descending order, and return the top 1 record	ORDER BY basePrice DESC LIMIT 1
Get RoomId and roomName of Rooms	SELECT RoomId , roomName FROM Rooms
Order these records based on the basePrice and sort them in descending order, and return the top 1 record	ORDER BY basePrice DESC LIMIT 1
Get roomName and bedType of Rooms	SELECT roomName , bedType FROM Rooms
Keep the records that decor is traditional	WHERE decor = traditional
Get roomName and bedType of Rooms	SELECT roomName , bedType FROM Rooms
Keep the records that decor is traditional	WHERE decor = traditional
Get the number and decor of Rooms	SELECT decor , COUNT ( * ) FROM Rooms
Keep the records that bedType is King	WHERE bedType = King 
Group the records based on decor	GROUP BY decor
Get the number and decor of Rooms	SELECT decor , COUNT ( * ) FROM Rooms
Keep the records that bedType is King	WHERE bedType = King 
Group the records based on decor	GROUP BY decor
Get the average value of basePrice and the minimum value of basePrice and decor of Rooms	SELECT decor , AVG ( basePrice ) , MIN ( basePrice ) FROM Rooms
Group the records based on decor	GROUP BY decor
Get the average value of basePrice and the minimum value of basePrice and decor of Rooms	SELECT decor , AVG ( basePrice ) , MIN ( basePrice ) FROM Rooms
Group the records based on decor	GROUP BY decor
Get roomName of Rooms	SELECT roomName FROM Rooms
Order these records based on the basePrice	ORDER BY basePrice 
Get roomName of Rooms	SELECT roomName FROM Rooms
Order these records based on the basePrice	ORDER BY basePrice 
Get the number and decor of Rooms	SELECT decor , COUNT ( * ) FROM Rooms
Keep the records that basePrice is greater than 120	WHERE basePrice > 120 
Group the records based on decor	GROUP BY decor
Get the number and decor of Rooms	SELECT decor , COUNT ( * ) FROM Rooms
Keep the records that basePrice is greater than 120	WHERE basePrice > 120 
Group the records based on decor	GROUP BY decor
Get the average value of basePrice and bedType of Rooms	SELECT bedType , AVG ( basePrice ) FROM Rooms
Group the records based on bedType	GROUP BY bedType
Get the average value of basePrice and bedType of Rooms	SELECT bedType , AVG ( basePrice ) FROM Rooms
Group the records based on bedType	GROUP BY bedType
Get roomName of Rooms	SELECT roomName FROM Rooms
Keep the records that bedType is King OR bedType is Queen	WHERE bedType = King OR bedType = Queen
Get roomName of Rooms	SELECT roomName FROM Rooms
Keep the records that bedType is King OR bedType is Queen	WHERE bedType = King OR bedType = Queen
Get the number of distinct bedType of Rooms	SELECT COUNT ( DISTINCT bedType ) FROM Rooms
Get the number of distinct bedType of Rooms	SELECT COUNT ( DISTINCT bedType ) FROM Rooms
Get RoomId and roomName of Rooms	SELECT RoomId , roomName FROM Rooms
Order these records based on the basePrice and sort them in descending order, and return the top 3 records	ORDER BY basePrice DESC LIMIT 3
Get RoomId and roomName of Rooms	SELECT RoomId , roomName FROM Rooms
Order these records based on the basePrice and sort them in descending order, and return the top 3 records	ORDER BY basePrice DESC LIMIT 3
Get the average value of basePrice of Rooms	SELECT AVG ( basePrice ) FROM Rooms
Get roomName of Rooms	SELECT roomName FROM Rooms
Keep the records that basePrice is greater than the first query result	WHERE basePrice > ( the first query result ) 
Get the average value of basePrice of Rooms	SELECT AVG ( basePrice ) FROM Rooms
Get roomName of Rooms	SELECT roomName FROM Rooms
Keep the records that basePrice is greater than the first query result	WHERE basePrice > ( the first query result ) 
Get room of reservations	SELECT DISTINCT room FROM reservations
Get the number of rooms	SELECT COUNT ( * ) FROM rooms
Keep the records that roomid is not in the first query result	WHERE roomid NOT IN ( the first query result ) 
Get room of reservations	SELECT DISTINCT room FROM reservations
Get the number of rooms	SELECT COUNT ( * ) FROM rooms
Keep the records that roomid is not in the first query result	WHERE roomid NOT IN ( the first query result ) 
Get the number and roomName and Room of Reservations that has Rooms	SELECT T2.roomName , COUNT ( * ) , T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on Room of Reservations	GROUP BY T1.Room
Get the number and roomName and Room of Reservations that has Rooms	SELECT T2.roomName , COUNT ( * ) , T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on Room of Reservations	GROUP BY T1.Room
Get roomName of Reservations that has Rooms	SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on the number Room of Reservations 60 that the number is greater than 60	GROUP BY T1.Room HAVING COUNT ( * ) > 60 HAVING COUNT ( * ) > 60
Get roomName of Reservations that has Rooms	SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Group the records based on the number Room of Reservations 60 that the number is greater than 60	GROUP BY T1.Room HAVING COUNT ( * ) > 60 HAVING COUNT ( * ) > 60
Get roomname of rooms	SELECT roomname FROM rooms
Keep the records that baseprice is between 12 X150	WHERE baseprice BETWEEN 120 AND 150
Get roomname of rooms	SELECT roomname FROM rooms
Keep the records that baseprice is between 12 X150	WHERE baseprice BETWEEN 120 AND 150
Get roomName of Reservations that has Rooms	SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Keep the records that firstname is in the form of %ROY%	WHERE firstname LIKE %ROY%
Get roomName of Reservations that has Rooms	SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId
Keep the records that firstname is in the form of %ROY%	WHERE firstname LIKE %ROY%
Get cmi details of Customer Master Index that has CMI Cross References	SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id
Keep the records that source system code of CMI Cross References is Tax	WHERE T2.source_system_code = Tax
Get cmi cross ref id and source system code of CMI Cross References that has Council Tax	SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
Group the records based on the number cmi cross ref id of CMI Cross References 1 that the number is greater than or equal to 1	GROUP BY T1.cmi_cross_ref_id HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get the number and cmi cross ref id and master customer id of Business Rates that has CMI Cross References	SELECT T2.cmi_cross_ref_id , T2.master_customer_id , COUNT ( * ) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
Group the records based on cmi cross ref id of CMI Cross References	GROUP BY T2.cmi_cross_ref_id
Get source system code and council tax id of CMI Cross References that has Benefits Overpayments	SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
Order these records based on the council tax id of Benefits Overpayments	ORDER BY T2.council_tax_id 
Get source system code and master customer id and council tax id of CMI Cross References that has Parking Fines	SELECT T1.source_system_code , T1.master_customer_id , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2
Get council tax id of Rent Arrears that has CMI Cross References and Customer Master Index	SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id
Keep the records that cmi details of Customer Master Index is not Schmidt , Kertzmann and Lubowitz	WHERE T3.cmi_details != Schmidt , Kertzmann and Lubowitz
Get electoral register id of Electoral Register that has CMI Cross References	SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id
Keep the records that source system code of CMI Cross References is Electoral OR source system code of CMI Cross References is Tax	WHERE T2.source_system_code = Electoral OR T2.source_system_code = Tax
Get the number of distinct source system code of CMI cross references	SELECT COUNT ( DISTINCT source_system_code ) FROM CMI_cross_references
Get all of customer master index	SELECT * FROM customer_master_index
Order these records based on the cmi details and sort them in descending ORDER	ORDER BY cmi_details DESC 
Get council tax id and cmi cross ref id of parking fines	SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines
Get the number of rent arrears	SELECT COUNT ( * ) FROM rent_arrears
Get source system code of customer master index that has cmi cross references	SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id
Keep the records that cmi details of customer master index is Gottlieb , Becker and Wyman	WHERE T1.cmi_details = Gottlieb , Becker and Wyman
Get cmi cross ref id of cmi cross references	SELECT cmi_cross_ref_id FROM cmi_cross_references
Get cmi cross ref id of parking fines	SELECT cmi_cross_ref_id FROM parking_fines
Get source system code of cmi cross references	SELECT DISTINCT source_system_code FROM cmi_cross_references
Keep the records that source system code is in the form of %en%	WHERE source_system_code LIKE %en%
Get the number of party	SELECT COUNT ( * ) FROM party
Get the number of party	SELECT COUNT ( * ) FROM party
Get Party Theme of party	SELECT Party_Theme FROM party
Order these records based on the Number of hosts and sort them in ascending ORDER	ORDER BY Number_of_hosts ASC 
Get Party Theme of party	SELECT Party_Theme FROM party
Order these records based on the Number of hosts and sort them in ascending ORDER	ORDER BY Number_of_hosts ASC 
Get Party Theme of party	SELECT Party_Theme , LOCATION FROM party
Get Party Theme of party	SELECT Party_Theme , LOCATION FROM party
Get First year and Last year of party	SELECT First_year , Last_year FROM party
Keep the records that Party Theme is Spring OR Party Theme is Teqnology	WHERE Party_Theme = Spring OR Party_Theme = Teqnology
Get First year and Last year of party	SELECT First_year , Last_year FROM party
Keep the records that Party Theme is Spring OR Party Theme is Teqnology	WHERE Party_Theme = Spring OR Party_Theme = Teqnology
Get the average value of Number of hosts of party	SELECT AVG ( Number_of_hosts ) FROM party
Get the average value of Number of hosts of party	SELECT AVG ( Number_of_hosts ) FROM party
Get of party	SELECT LOCATION FROM party
Order these records based on the Number of hosts and sort them in descending order, and return the top 1 record	ORDER BY Number_of_hosts DESC LIMIT 1
Get of party	SELECT LOCATION FROM party
Order these records based on the Number of hosts and sort them in descending order, and return the top 1 record	ORDER BY Number_of_hosts DESC LIMIT 1
Get the number and Nationality of	SELECT Nationality , COUNT ( * ) FROM
Group the records based on Nationality	GROUP BY Nationality
Get the number and Nationality of	SELECT Nationality , COUNT ( * ) FROM
Group the records based on Nationality	GROUP BY Nationality
Get Nationality of	SELECT Nationality FROM
Group the records based on Nationality	GROUP BY Nationality
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nationality of	SELECT Nationality FROM
Group the records based on Nationality	GROUP BY Nationality
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nationality of	SELECT Nationality FROM
Keep the records that Age is greater than 45	WHERE Age > 45
Get Nationality of	SELECT Nationality FROM
Keep the records that Age is less than 35	WHERE Age < 35
Get Nationality of	SELECT Nationality FROM
Keep the records that Age is greater than 45	WHERE Age > 45
Get Nationality of	SELECT Nationality FROM
Keep the records that Age is less than 35	WHERE Age < 35
Get Party Theme and Name of party HOST that has HOST and party	SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3
Get Party Theme and Name of party HOST that has HOST and party	SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3
Get Location and Name of party HOST that has HOST and party	SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
Order these records based on the Age of HOST	ORDER BY T2.Age 
Get Location and Name of party HOST that has HOST and party	SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
Order these records based on the Age of HOST	ORDER BY T2.Age 
Get Location of party HOST that has HOST and party	SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
Keep the records that Age of HOST is greater than 50	WHERE T2.Age > 50
Get Location of party HOST that has HOST and party	SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
Keep the records that Age of HOST is greater than 50	WHERE T2.Age > 50
Get Name of party HOST that has HOST and party	SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
Keep the records that Number of hosts of party is greater than 20	WHERE T3.Number_of_hosts > 20
Get Name of party HOST that has HOST and party	SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID
Keep the records that Number of hosts of party is greater than 20	WHERE T3.Number_of_hosts > 20
Get Name and Nationality of	SELECT Name , Nationality FROM
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Name and Nationality of	SELECT Name , Nationality FROM
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Host ID of party host	SELECT Host_ID FROM party_host
Get Name of	SELECT Name FROM
Keep the records that Host ID is not in the first query result	WHERE Host_ID NOT IN ( the first query result ) 
Get Host ID of party host	SELECT Host_ID FROM party_host
Get Name of	SELECT Name FROM
Keep the records that Host ID is not in the first query result	WHERE Host_ID NOT IN ( the first query result ) 
Get the number of region	SELECT COUNT ( * ) FROM region
Get the number of region	SELECT COUNT ( * ) FROM region
Get region code and region name of region	SELECT region_code , region_name FROM region
Order these records based on the region code	ORDER BY region_code 
Get region code and region name of region	SELECT region_code , region_name FROM region
Order these records based on the region code	ORDER BY region_code 
Get region name of region	SELECT region_name FROM region
Order these records based on the region name	ORDER BY region_name 
Get region name of region	SELECT region_name FROM region
Order these records based on the region name	ORDER BY region_name 
Get region name of region	SELECT region_name FROM region
Keep the records that region name is not Denmark	WHERE region_name != Denmark
Get region name of region	SELECT region_name FROM region
Keep the records that region name is not Denmark	WHERE region_name != Denmark
Get the number of storm	SELECT COUNT ( * ) FROM storm
Keep the records that Number Deaths is greater than 0	WHERE Number_Deaths > 0
Get the number of storm	SELECT COUNT ( * ) FROM storm
Keep the records that Number Deaths is greater than 0	WHERE Number_Deaths > 0
Get name and dates active and number deaths of storm	SELECT name , dates_active , number_deaths FROM storm
Keep the records that number deaths is greater than or equal to 1	WHERE number_deaths >= 1
Get name and dates active and number deaths of storm	SELECT name , dates_active , number_deaths FROM storm
Keep the records that number deaths is greater than or equal to 1	WHERE number_deaths >= 1
Get the average value of damage millions USD and the maximum value of damage millions USD of storm	SELECT AVG ( damage_millions_USD ) , MAX ( damage_millions_USD ) FROM storm
Keep the records that MAX speed is greater than 1000	WHERE max_speed > 1000
Get the average value of damage millions USD and the maximum value of damage millions USD of storm	SELECT AVG ( damage_millions_USD ) , MAX ( damage_millions_USD ) FROM storm
Keep the records that MAX speed is greater than 1000	WHERE max_speed > 1000
Get the average value of max speed of storm	SELECT AVG ( max_speed ) FROM storm
Get the SUM of number deaths and the SUM of damage millions USD of storm	SELECT SUM ( number_deaths ) , SUM ( damage_millions_USD ) FROM storm
Keep the records that max speed is greater than the first query result	WHERE max_speed > ( the first query result ) 
Get the average value of max speed of storm	SELECT AVG ( max_speed ) FROM storm
Get the SUM of number deaths and the SUM of damage millions USD of storm	SELECT SUM ( number_deaths ) , SUM ( damage_millions_USD ) FROM storm
Keep the records that max speed is greater than the first query result	WHERE max_speed > ( the first query result ) 
Get name and damage millions USD of storm	SELECT name , damage_millions_USD FROM storm
Order these records based on the max speed and sort them in descending ORDER	ORDER BY max_speed DESC 
Get name and damage millions USD of storm	SELECT name , damage_millions_USD FROM storm
Order these records based on the max speed and sort them in descending ORDER	ORDER BY max_speed DESC 
Get the number of distinct region id of affected region	SELECT COUNT ( DISTINCT region_id ) FROM affected_region
Get the number of distinct region id of affected region	SELECT COUNT ( DISTINCT region_id ) FROM affected_region
Get region id of affected region	SELECT region_id FROM affected_region
Get region name of region	SELECT region_name FROM region
Keep the records that region id is not in the first query result	WHERE region_id NOT IN ( the first query result ) 
Get region id of affected region	SELECT region_id FROM affected_region
Get region name of region	SELECT region_name FROM region
Keep the records that region id is not in the first query result	WHERE region_id NOT IN ( the first query result ) 
Get the number and region name of region that has affected region	SELECT T1.region_name , COUNT ( * ) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id
Group the records based on region id of region	GROUP BY T1.region_id
Get the number and region name of region that has affected region	SELECT T1.region_name , COUNT ( * ) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id
Group the records based on region id of region	GROUP BY T1.region_id
Get the number and name of storm that has affected region	SELECT T1.name , COUNT ( * ) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on storm id of storm	GROUP BY T1.storm_id
Get the number and name of storm that has affected region	SELECT T1.name , COUNT ( * ) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on storm id of storm	GROUP BY T1.storm_id
Get name and max speed of storm that has affected region	SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on storm id of storm	GROUP BY T1.storm_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and max speed of storm that has affected region	SELECT T1.name , T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on storm id of storm	GROUP BY T1.storm_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get storm id of affected region	SELECT storm_id FROM affected_region
Get name of storm	SELECT name FROM storm
Keep the records that storm id is not in the first query result	WHERE storm_id NOT IN ( the first query result ) 
Get storm id of affected region	SELECT storm_id FROM affected_region
Get name of storm	SELECT name FROM storm
Keep the records that storm id is not in the first query result	WHERE storm_id NOT IN ( the first query result ) 
Get name of storm that has affected region	SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on the number storm id of storm 2 that the number is greater than or equal to 2	GROUP BY T1.storm_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of storm that has affected region	SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on the SUM of number city affected of affected region storm id of storm 10 that the SUM of number city affected of affected region is greater than or equal to 10	GROUP BY T1.storm_id HAVING SUM ( T2.number_city_affected ) >= 10 HAVING SUM ( T2.number_city_affected ) >= 10
Get name of storm that has affected region	SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on the number storm id of storm 2 that the number is greater than or equal to 2	GROUP BY T1.storm_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of storm that has affected region	SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on the SUM of number city affected of affected region storm id of storm 10 that the SUM of number city affected of affected region is greater than or equal to 10	GROUP BY T1.storm_id HAVING SUM ( T2.number_city_affected ) >= 10 HAVING SUM ( T2.number_city_affected ) >= 10
Get name of storm	SELECT name FROM storm
Get name of storm that has affected region	SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on the number storm id of storm 2 that the number is greater than or equal to 2	GROUP BY T1.storm_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of storm	SELECT name FROM storm
Get name of storm that has affected region	SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id
Group the records based on the number storm id of storm 2 that the number is greater than or equal to 2	GROUP BY T1.storm_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get region name of affected region that has region and storm	SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that number deaths of storm is greater than or equal to 10	WHERE T3.number_deaths >= 10
Get region name of affected region that has region and storm	SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that number deaths of storm is greater than or equal to 10	WHERE T3.number_deaths >= 10
Get name of affected region that has region and storm	SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that region name of region is Denmark	WHERE T2.region_name = Denmark
Get name of affected region that has region and storm	SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that region name of region is Denmark	WHERE T2.region_name = Denmark
Get region name of region that has affected region	SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id
Group the records based on the number region id of region 2 that the number is greater than or equal to 2	GROUP BY T1.region_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get region name of region that has affected region	SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id
Group the records based on the number region id of region 2 that the number is greater than or equal to 2	GROUP BY T1.region_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get region name of affected region that has region and storm	SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Order these records based on the Number Deaths of storm and sort them in descending order, and return the top 1 record	ORDER BY T3.Number_Deaths DESC LIMIT 1
Get region name of affected region that has region and storm	SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Order these records based on the Number Deaths of storm and sort them in descending order, and return the top 1 record	ORDER BY T3.Number_Deaths DESC LIMIT 1
Get Name of affected region that has region and storm	SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that Region name of region is Afghanistan	WHERE T2.Region_name = Afghanistan
Get Name of affected region that has region and storm	SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that Region name of region is Albania	WHERE T2.Region_name = Albania
Get Name of affected region that has region and storm	SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that Region name of region is Afghanistan	WHERE T2.Region_name = Afghanistan
Get Name of affected region that has region and storm	SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id
Keep the records that Region name of region is Albania	WHERE T2.Region_name = Albania
Get the number of county	SELECT COUNT ( * ) FROM county
Get the number of county	SELECT COUNT ( * ) FROM county
Get County name and Population of county	SELECT County_name , Population FROM county
Get County name and Population of county	SELECT County_name , Population FROM county
Get the average value of Population of county	SELECT AVG ( Population ) FROM county
Get the average value of Population of county	SELECT AVG ( Population ) FROM county
Get the maximum value of Population and the minimum value of Population of county	SELECT MAX ( Population ) , MIN ( Population ) FROM county
Get the maximum value of Population and the minimum value of Population of county	SELECT MAX ( Population ) , MIN ( Population ) FROM county
Get District of election	SELECT DISTINCT District FROM election
Get District of election	SELECT DISTINCT District FROM election
Get Zip code of county	SELECT Zip_code FROM county
Keep the records that County name is Howard	WHERE County_name = Howard
Get Zip code of county	SELECT Zip_code FROM county
Keep the records that County name is Howard	WHERE County_name = Howard
Get Delegate of election	SELECT Delegate FROM election
Keep the records that District is 1	WHERE District = 1
Get Delegate of election	SELECT Delegate FROM election
Keep the records that District is 1	WHERE District = 1
Get Delegate and Committee of election	SELECT Delegate , Committee FROM election
Get Delegate and Committee of election	SELECT Delegate , Committee FROM election
Get the number of distinct Governor of party	SELECT COUNT ( DISTINCT Governor ) FROM party
Get the number of distinct Governor of party	SELECT COUNT ( DISTINCT Governor ) FROM party
Get Lieutenant Governor and Comptroller of Party	SELECT Lieutenant_Governor , Comptroller FROM party
Keep the records that Party is Democratic	WHERE Party = Democratic
Get Lieutenant Governor and Comptroller of Party	SELECT Lieutenant_Governor , Comptroller FROM party
Keep the records that Party is Democratic	WHERE Party = Democratic
Get of party	SELECT DISTINCT YEAR FROM party
Keep the records that Governor is Eliot Spitzer	WHERE Governor = Eliot Spitzer
Get of party	SELECT DISTINCT YEAR FROM party
Keep the records that Governor is Eliot Spitzer	WHERE Governor = Eliot Spitzer
Get all of election	SELECT * FROM election
Get all of election	SELECT * FROM election
Get Delegate and County name of county that has election	SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2
Get Delegate and County name of county that has election	SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2
Get Delegate of county that has election	SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Keep the records that Population of county is less than 100000	WHERE T1.Population < 100000
Get Delegate of county that has election	SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Keep the records that Population of county is less than 100000	WHERE T1.Population < 100000
Get the number of distinct Delegate of county that has election	SELECT COUNT ( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Keep the records that Population of county is greater than 50000	WHERE T1.Population > 50000
Get the number of distinct Delegate of county that has election	SELECT COUNT ( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Keep the records that Population of county is greater than 50000	WHERE T1.Population > 50000
Get County name of county that has election	SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Keep the records that Committee of election is Appropriations	WHERE T2.Committee = Appropriations
Get County name of county that has election	SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Keep the records that Committee of election is Appropriations	WHERE T2.Committee = Appropriations
Get Delegate and Party of election that has party	SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2
Get Delegate and Party of election that has party	SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2
Get Governor of election that has party	SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that District of election is 1	WHERE T1.District = 1
Get Governor of election that has party	SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that District of election is 1	WHERE T1.District = 1
Get Comptroller of election that has party	SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that District of election is 1 OR District of election is 2	WHERE T1.District = 1 OR T1.District = 2
Get Comptroller of election that has party	SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that District of election is 1 OR District of election is 2	WHERE T1.District = 1 OR T1.District = 2
Get Committee of election that has party	SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Party of party is Democratic	WHERE T2.Party = Democratic
Get Committee of election that has party	SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Party of party is Democratic	WHERE T2.Party = Democratic
Get the number and County name of county that has election	SELECT T1.County_name , COUNT ( * ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Group the records based on County id of county	GROUP BY T1.County_id
Get the number and County name of county that has election	SELECT T1.County_name , COUNT ( * ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Group the records based on County id of county	GROUP BY T1.County_id
Get the number and Party of election that has party	SELECT T2.Party , COUNT ( * ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Group the records based on Party of election	GROUP BY T1.Party
Get the number and Party of election that has party	SELECT T2.Party , COUNT ( * ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Group the records based on Party of election	GROUP BY T1.Party
Get County name of county	SELECT County_name FROM county
Order these records based on the Population and sort them in ascending ORDER	ORDER BY Population ASC 
Get County name of county	SELECT County_name FROM county
Order these records based on the Population and sort them in ascending ORDER	ORDER BY Population ASC 
Get County name of county	SELECT County_name FROM county
Order these records based on the County name and sort them in descending ORDER	ORDER BY County_name DESC 
Get County name of county	SELECT County_name FROM county
Order these records based on the County name and sort them in descending ORDER	ORDER BY County_name DESC 
Get County name of county	SELECT County_name FROM county
Order these records based on the Population and sort them in descending order, and return the top 1 record	ORDER BY Population DESC LIMIT 1
Get County name of county	SELECT County_name FROM county
Order these records based on the Population and sort them in descending order, and return the top 1 record	ORDER BY Population DESC LIMIT 1
Get County name of county	SELECT County_name FROM county
Order these records based on the Population and sort them in ascending order, and return the top 3 records	ORDER BY Population ASC LIMIT 3
Get County name of county	SELECT County_name FROM county
Order these records based on the Population and sort them in ascending order, and return the top 3 records	ORDER BY Population ASC LIMIT 3
Get County name of county that has election	SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Group the records based on the number County id of county 2 that the number is greater than or equal to 2	GROUP BY T1.County_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get County name of county that has election	SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District
Group the records based on the number County id of county 2 that the number is greater than or equal to 2	GROUP BY T1.County_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Party of Party	SELECT Party FROM party
Group the records based on the number Party 2 that the number is greater than or equal to 2	GROUP BY Party HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Party of Party	SELECT Party FROM party
Group the records based on the number Party 2 that the number is greater than or equal to 2	GROUP BY Party HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Party of election that has party	SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Group the records based on Party of election	GROUP BY T1.Party
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Party of election that has party	SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Group the records based on Party of election	GROUP BY T1.Party
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Governor of party	SELECT Governor FROM party
Group the records based on Governor	GROUP BY Governor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Governor of party	SELECT Governor FROM party
Group the records based on Governor	GROUP BY Governor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Comptroller of party	SELECT Comptroller , COUNT ( * ) FROM party
Group the records based on Comptroller	GROUP BY Comptroller
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Comptroller of party	SELECT Comptroller , COUNT ( * ) FROM party
Group the records based on Comptroller	GROUP BY Comptroller
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Party of election	SELECT Party FROM election
Get Party of Party	SELECT Party FROM party
Keep the records that Party ID is not in the first query result	WHERE Party_ID NOT IN ( the first query result ) 
Get Party of election	SELECT Party FROM election
Get Party of Party	SELECT Party FROM party
Keep the records that Party ID is not in the first query result	WHERE Party_ID NOT IN ( the first query result ) 
Get Party of election that has party	SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Committee of election is Appropriations	WHERE T1.Committee = Appropriations
Get Party of election that has party	SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Committee of election is Economic Matters	WHERE T1.Committee = Economic Matters
Get Party of election that has party	SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Committee of election is Appropriations	WHERE T1.Committee = Appropriations
Get Party of election that has party	SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Committee of election is Economic Matters	WHERE T1.Committee = Economic Matters
Get Committee of election that has party	SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Party of party is Democratic	WHERE T2.Party = Democratic
Get Committee of election that has party	SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Party of party is Liberal	WHERE T2.Party = Liberal
Get Committee of election that has party	SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Party of party is Democratic	WHERE T2.Party = Democratic
Get Committee of election that has party	SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID
Keep the records that Party of party is Liberal	WHERE T2.Party = Liberal
Get the number of journalist	SELECT COUNT ( * ) FROM journalist
Get Name of journalist	SELECT Name FROM journalist
Order these records based on the Years working and sort them in ascending ORDER	ORDER BY Years_working ASC 
Get Nationality and Age of journalist	SELECT Nationality , Age FROM journalist
Get Name of journalist	SELECT Name FROM journalist
Keep the records that Nationality is England OR Nationality is Wales	WHERE Nationality = England OR Nationality = Wales
Get the average value of Years working of journalist	SELECT AVG ( Years_working ) FROM journalist
Get Nationality of journalist	SELECT Nationality FROM journalist
Order these records based on the Years working and sort them in descending order, and return the top 1 record	ORDER BY Years_working DESC LIMIT 1
Get the number and Nationality of journalist	SELECT Nationality , COUNT ( * ) FROM journalist
Group the records based on Nationality	GROUP BY Nationality
Get Nationality of journalist	SELECT Nationality FROM journalist
Group the records based on Nationality	GROUP BY Nationality
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nationality of journalist	SELECT Nationality FROM journalist
Keep the records that Years working is greater than 10	WHERE Years_working > 10
Get Nationality of journalist	SELECT Nationality FROM journalist
Keep the records that Years working is less than 3	WHERE Years_working < 3
Get Name and venue of event	SELECT DATE , Name , venue FROM event
Order these records based on the Event Attendance and sort them in descending ORDER	ORDER BY Event_Attendance DESC 
Get Name and Date of news report that has event and journalist	SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3
Get Name and Name of news report that has event and journalist	SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
Order these records based on the Event Attendance of event and sort them in ascending ORDER	ORDER BY T2.Event_Attendance ASC 
Get the number and Name of news report that has event and journalist	SELECT T3.Name , COUNT ( * ) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
Group the records based on Name of journalist	GROUP BY T3.Name
Get Name of news report that has event and journalist	SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID
Group the records based on the number Name of journalist 1 that the number is greater than 1	GROUP BY T3.Name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get journalist ID of news report	SELECT journalist_ID FROM news_report
Get Name of journalist	SELECT Name FROM journalist
Keep the records that journalist ID is not in the first query result	WHERE journalist_ID NOT IN ( the first query result ) 
Get the average value of Event Attendance and the maximum value of Event Attendance of event	SELECT AVG ( Event_Attendance ) , MAX ( Event_Attendance ) FROM event
Get the average value of age and the average value of Years working and work type of journalist that has news report	SELECT AVG ( t1.age ) , AVG ( Years_working ) , t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id
Group the records based on work type of news report	GROUP BY t2.work_type
Get venue and name of event	SELECT venue , name FROM event
Order these records based on the Event Attendance and sort them in descending order, and return the top 2 records	ORDER BY Event_Attendance DESC LIMIT 2
Get ResName of Restaurant	SELECT ResName FROM Restaurant
Get Address of Restaurant	SELECT Address FROM Restaurant
Keep the records that ResName is Subway	WHERE ResName = Subway
Get Rating of Restaurant	SELECT Rating FROM Restaurant
Keep the records that ResName is Subway	WHERE ResName = Subway
Get ResTypeName of Restaurant Type	SELECT ResTypeName FROM Restaurant_Type
Get ResTypeDescription of Restaurant Type	SELECT ResTypeDescription FROM Restaurant_Type
Keep the records that ResTypeName is Sandwich	WHERE ResTypeName = Sandwich
Get ResName and Rating of Restaurant	SELECT ResName , Rating FROM Restaurant
Order these records based on the Rating and sort them in descending order, and return the top 1 record	ORDER BY Rating DESC LIMIT 1
Get Age of Student	SELECT Age FROM Student
Keep the records that Fname is Linda AND Lname is Smith	WHERE Fname = Linda AND Lname = Smith
Get Sex of Student	SELECT Sex FROM Student
Keep the records that Fname is Linda AND Lname is Smith	WHERE Fname = Linda AND Lname = Smith
Get Fname and Lname of Student	SELECT Fname , Lname FROM Student
Keep the records that Major is 600	WHERE Major = 600
Get city code of Student	SELECT city_code FROM Student
Keep the records that Fname is Linda AND Lname is Smith	WHERE Fname = Linda AND Lname = Smith
Get the number of Student	SELECT COUNT ( * ) FROM Student
Keep the records that Advisor is 1121	WHERE Advisor = 1121
Get the number and Advisor of Student	SELECT Advisor , COUNT ( * ) FROM Student
Group the records based on Advisor	GROUP BY Advisor
Order these records based on the the number of Advisor and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( Advisor ) DESC LIMIT 1
Get the number and Major of Student	SELECT Major , COUNT ( * ) FROM Student
Group the records based on Major	GROUP BY Major
Order these records based on the the number of Major and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( Major ) ASC LIMIT 1
Get the number AND Major of Student	SELECT Major , COUNT ( * ) FROM Student
Group the records based on the number of Major Major 2 30 that the number of Major is between 2 AND 30	GROUP BY Major HAVING COUNT ( Major ) BETWEEN 2 AND 30 HAVING COUNT ( Major ) BETWEEN 2 AND 30
Get Fname AND Lname of Student	SELECT Fname , Lname FROM Student
Keep the records that Age is greater than 18 AND Major is 600	WHERE Age > 18 AND Major = 600
Get Fname AND Lname of Student	SELECT Fname , Lname FROM Student
Keep the records that Age is greater than 18 AND Major is not 600 AND Sex is F	WHERE Age > 18 AND Major != 600 AND Sex = F
Get the number of Restaurant that has Type Of Restaurant and Restaurant Type	SELECT COUNT ( * ) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID
Group the records based on ResTypeID of Type Of Restaurant ResTypeName of Restaurant Type Sandwich that ResTypeName of Restaurant Type is Sandwich	GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = Sandwich HAVING Restaurant_Type.ResTypeName = Sandwich
Get the SUM of Spent of Student that has Visits Restaurant	SELECT SUM ( Spent ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID
Keep the records that Fname of Student is Linda AND Lname of Student is Smith	WHERE Student.Fname = Linda AND Student.Lname = Smith
Get the number of Student that has Visits Restaurant AND Restaurant	SELECT COUNT ( * ) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID
Keep the records that Fname of Student is Linda AND Lname of Student is Smith AND ResName of Restaurant is Subway	WHERE Student.Fname = Linda AND Student.Lname = Smith AND Restaurant.ResName = Subway
Get of Student that has Visits Restaurant AND Restaurant	SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID
Keep the records that Fname of Student is Linda AND Lname of Student is Smith AND ResName of Restaurant is Subway	WHERE Student.Fname = Linda AND Student.Lname = Smith AND Restaurant.ResName = Subway
Get the SUM of Spent and ResName of Visits Restaurant that has Restaurant	SELECT Restaurant.ResName , SUM ( Visits_Restaurant.Spent ) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID
Group the records based on ResID of Restaurant	GROUP BY Restaurant.ResID
Order these records based on the the SUM of Spent of Visits Restaurant and sort them in ascending order, and return the top 1 record	ORDER BY SUM ( Visits_Restaurant.Spent ) ASC LIMIT 1
Get Fname and Lname of Student that has Visits Restaurant	SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID
Group the records based on StuID of Student	GROUP BY Student.StuID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get actual order id of actual orders	SELECT actual_order_id FROM actual_orders
Keep the records that order status code is Success	WHERE order_status_code = Success
Get product name and product price of products that has regular ORDER products	SELECT t1.product_name , t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id
Group the records based on product id of regular ORDER products	GROUP BY t2.product_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of customers	SELECT COUNT ( * ) FROM customers
Get the number of distinct payment method of customers	SELECT COUNT ( DISTINCT payment_method ) FROM customers
Get truck details of trucks	SELECT truck_details FROM trucks
Order these records based on the truck licence number	ORDER BY truck_licence_number 
Get product name of products	SELECT product_name FROM products
Order these records based on the product price and sort them in descending order, and return the top 1 record	ORDER BY product_price DESC LIMIT 1
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has customer addresses and addresses	SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that state province county of addresses is California	WHERE t3.state_province_county = California
Get customer email and customer name of customers	SELECT customer_email , customer_name FROM customers
Keep the records that payment method is Visa	WHERE payment_method = Visa
Get customer name and customer phone of customers that has customer addresses and addresses	SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that state province county of addresses is California	WHERE t3.state_province_county = California
Get employee address id of Employees	SELECT employee_address_id FROM Employees
Get state province county of addresses	SELECT state_province_county FROM addresses
Keep the records that address id is not in the first query result	WHERE address_id NOT IN ( the first query result ) 
Get customer name and customer phone and customer email of Customers	SELECT customer_name , customer_phone , customer_email FROM Customers
Order these records based on the date became customer	ORDER BY date_became_customer 
Get customer name of Customers	SELECT customer_name FROM Customers
Order these records based on the date became customer, and return the top 5 records	ORDER BY date_became_customer LIMIT 5
Get payment method of Customers	SELECT payment_method FROM Customers
Group the records based on payment method	GROUP BY payment_method
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get route name of Delivery Routes	SELECT route_name FROM Delivery_Routes
Order these records based on the route name	ORDER BY route_name 
Get route name of Delivery Routes that has Delivery Route Locations	SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id
Group the records based on route id of Delivery Routes	GROUP BY t1.route_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and state province county of customer addresses that has addresses	SELECT t2.state_province_county , COUNT ( * ) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id
Group the records based on state province county of addresses	GROUP BY t2.state_province_county
Get the number of authors	SELECT COUNT ( * ) FROM authors
Get the number of authors	SELECT COUNT ( * ) FROM authors
Get the number of inst	SELECT COUNT ( * ) FROM inst
Get the number of inst	SELECT COUNT ( * ) FROM inst
Get the number of papers	SELECT COUNT ( * ) FROM papers
Get the number of papers	SELECT COUNT ( * ) FROM papers
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Jeremy AND lname of authors is Gibbons	WHERE t1.fname = Jeremy AND t1.lname = Gibbons
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Jeremy AND lname of authors is Gibbons	WHERE t1.fname = Jeremy AND t1.lname = Gibbons
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Aaron AND lname of authors is Turon	WHERE t1.fname = Aaron AND t1.lname = Turon
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Aaron AND lname of authors is Turon	WHERE t1.fname = Aaron AND t1.lname = Turon
Get the number of authors that has authorship AND papers	SELECT COUNT ( * ) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Atsushi AND lname of authors is Ohori	WHERE t1.fname = Atsushi AND t1.lname = Ohori
Get the number of authors that has authorship AND papers	SELECT COUNT ( * ) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Atsushi AND lname of authors is Ohori	WHERE t1.fname = Atsushi AND t1.lname = Ohori
Get name of authors that has authorship AND inst	SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that fname of authors is Matthias AND lname of authors is Blume	WHERE t1.fname = Matthias AND t1.lname = Blume
Get name of authors that has authorship AND inst	SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that fname of authors is Matthias AND lname of authors is Blume	WHERE t1.fname = Matthias AND t1.lname = Blume
Get name of authors that has authorship AND inst	SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that fname of authors is Katsuhiro AND lname of authors is Ueno	WHERE t1.fname = Katsuhiro AND t1.lname = Ueno
Get name of authors that has authorship AND inst	SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that fname of authors is Katsuhiro AND lname of authors is Ueno	WHERE t1.fname = Katsuhiro AND t1.lname = Ueno
Get fname and lname of authors that has authorship and inst	SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is University of Oxford	WHERE t3.name = University of Oxford
Get fname and lname of authors that has authorship and inst	SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is University of Oxford	WHERE t3.name = University of Oxford
Get fname and lname of authors that has authorship and inst	SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Google	WHERE t3.name = Google
Get fname and lname of authors that has authorship and inst	SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Google	WHERE t3.name = Google
Get lname of authors that has authorship and papers	SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is Binders Unbound	WHERE t3.title = Binders Unbound
Get lname of authors that has authorship and papers	SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is Binders Unbound	WHERE t3.title = Binders Unbound
Get fname and lname of authors that has authorship and papers	SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is Nameless , Painless	WHERE t3.title = Nameless , Painless
Get fname and lname of authors that has authorship and papers	SELECT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is Nameless , Painless	WHERE t3.title = Nameless , Painless
Get title of papers that has authorship and inst	SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Indiana University	WHERE t3.name = Indiana University
Get title of papers that has authorship and inst	SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Indiana University	WHERE t3.name = Indiana University
Get title of papers that has authorship and inst	SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Google	WHERE t3.name = Google
Get title of papers that has authorship and inst	SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Google	WHERE t3.name = Google
Get the number of distinct title of papers that has authorship and inst	SELECT COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Tokohu University	WHERE t3.name = Tokohu University
Get the number of distinct title of papers that has authorship and inst	SELECT COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is Tokohu University	WHERE t3.name = Tokohu University
Get the number of distinct title of papers that has authorship and inst	SELECT COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is University of Pennsylvania	WHERE t3.name = University of Pennsylvania
Get the number of distinct title of papers that has authorship and inst	SELECT COUNT ( DISTINCT t1.title ) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid
Keep the records that name of inst is University of Pennsylvania	WHERE t3.name = University of Pennsylvania
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Olin AND lname of authors is Shivers	WHERE t1.fname = Olin AND t1.lname = Shivers
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Olin AND lname of authors is Shivers	WHERE t1.fname = Olin AND t1.lname = Shivers
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Stephanie AND lname of authors is Weirich	WHERE t1.fname = Stephanie AND t1.lname = Weirich
Get title of authors that has authorship AND papers	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that fname of authors is Stephanie AND lname of authors is Weirich	WHERE t1.fname = Stephanie AND t1.lname = Weirich
Get title of authors that has authorship AND papers AND inst	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid
KTuronp the records that country of inst is USA AND authorder of authorship is 2 AND lname of authors is Turon	WHERE t4.country = USA AND t2.authorder = 2 AND t1.lname = Turon
Get title of authors that has authorship AND papers AND inst	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid
Keep the records that country of inst is USA AND authorder of authorship is 2 AND lname of authors is Turon	WHERE t4.country = USA AND t2.authorder = 2 AND t1.lname = Turon
Get title of authors that has authorship AND papers AND inst	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid
Keep the records that country of inst is Japan AND authorder of authorship is 1 AND lname of authors is Ohori	WHERE t4.country = Japan AND t2.authorder = 1 AND t1.lname = Ohori
Get title of authors that has authorship AND papers AND inst	SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid
Keep the records that country of inst is Japan AND authorder of authorship is 1 AND lname of authors is Ohori	WHERE t4.country = Japan AND t2.authorder = 1 AND t1.lname = Ohori
Get lname of authors that has authorship and papers	SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Group the records based on fname of authors lname of authors	GROUP BY t1.fname , t1.lname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lname of authors that has authorship and papers	SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Group the records based on fname of authors lname of authors	GROUP BY t1.fname , t1.lname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of inst that has authorship and papers	SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid
Group the records based on country of inst	GROUP BY t1.country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of inst that has authorship and papers	SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid
Group the records based on country of inst	GROUP BY t1.country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of inst that has authorship and papers	SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid
Group the records based on name of inst	GROUP BY t1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of inst that has authorship and papers	SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid
Group the records based on name of inst	GROUP BY t1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title of papers	SELECT title FROM papers
Keep the records that title is in the form of %ML%	WHERE title LIKE %ML%
Get title of papers	SELECT title FROM papers
Keep the records that title is in the form of %ML%	WHERE title LIKE %ML%
Get title of papers	SELECT title FROM papers
Keep the records that title is in the form of %Database%	WHERE title LIKE %Database%
Get title of papers	SELECT title FROM papers
Keep the records that title is in the form of %Database%	WHERE title LIKE %Database%
Get fname of authors that has authorship and papers	SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is in the form of %Functional%	WHERE t3.title LIKE %Functional%
Get fname of authors that has authorship and papers	SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is in the form of %Functional%	WHERE t3.title LIKE %Functional%
Get lname of authors that has authorship and papers	SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is in the form of %Monadic%	WHERE t3.title LIKE %Monadic%
Get lname of authors that has authorship and papers	SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid
Keep the records that title of papers is in the form of %Monadic%	WHERE t3.title LIKE %Monadic%
Get the maximum value of authorder of authorship	SELECT MAX ( authorder ) FROM authorship
Get title of authorship that has papers	SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid
Keep the records that authorder of authorship is the first query result	WHERE t1.authorder = ( the first query result ) 
Get the maximum value of authorder of authorship	SELECT MAX ( authorder ) FROM authorship
Get title of authorship that has papers	SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid
Keep the records that authorder of authorship is the first query result	WHERE t1.authorder = ( the first query result ) 
Get fname of authors	SELECT fname FROM authors
Keep the records that lname is Ueno	WHERE lname = Ueno
Get fname of authors	SELECT fname FROM authors
Keep the records that lname is Ueno	WHERE lname = Ueno
Get lname of authors	SELECT lname FROM authors
Keep the records that fname is Amal	WHERE fname = Amal
Get lname of authors	SELECT lname FROM authors
Keep the records that fname is Amal	WHERE fname = Amal
Get fname of authors	SELECT fname FROM authors
Order these records based on the fname	ORDER BY fname 
Get fname of authors	SELECT fname FROM authors
Order these records based on the fname	ORDER BY fname 
Get lname of authors	SELECT lname FROM authors
Order these records based on the lname	ORDER BY lname 
Get lname of authors	SELECT lname FROM authors
Order these records based on the lname	ORDER BY lname 
Get fname and lname of authors	SELECT fname , lname FROM authors
Order these records based on the lname	ORDER BY lname 
Get fname and lname of authors	SELECT fname , lname FROM authors
Order these records based on the lname	ORDER BY lname 
Get the number of distinct last name of actor	SELECT COUNT ( DISTINCT last_name ) FROM actor
Get the number of distinct last name of actor	SELECT COUNT ( DISTINCT last_name ) FROM actor
Get first name of actor	SELECT first_name FROM actor
Group the records based on first name	GROUP BY first_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name of actor	SELECT first_name FROM actor
Group the records based on first name	GROUP BY first_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name and last name of actor	SELECT first_name , last_name FROM actor
Group the records based on first name last name	GROUP BY first_name , last_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name and last name of actor	SELECT first_name , last_name FROM actor
Group the records based on first name last name	GROUP BY first_name , last_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get district of address	SELECT district FROM address
Group the records based on the number district 2 that the number is greater than or equal to 2	GROUP BY district HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get district of address	SELECT district FROM address
Group the records based on the number district 2 that the number is greater than or equal to 2	GROUP BY district HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get phone and postal code of address	SELECT phone , postal_code FROM address
Keep the records that address is 1031 Daugavpils Parkway	WHERE address = 1031 Daugavpils Parkway
Get phone and postal code of address	SELECT phone , postal_code FROM address
Keep the records that address is 1031 Daugavpils Parkway	WHERE address = 1031 Daugavpils Parkway
Get the number and city and city id of address that has city	SELECT T2.city , COUNT ( * ) , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id
Group the records based on city id of address	GROUP BY T1.city_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and city and city id of address that has city	SELECT T2.city , COUNT ( * ) , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id
Group the records based on city id of address	GROUP BY T1.city_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of address	SELECT COUNT ( * ) FROM address
Keep the records that district is California	WHERE district = California
Get the number of address	SELECT COUNT ( * ) FROM address
Keep the records that district is California	WHERE district = California
Get title and film id of film	SELECT title , film_id FROM film
Keep the records that rental rate is 0.99	WHERE rental_rate = 0.99
Get title and film id of film that has inventory	SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id
Group the records based on the number film id of film 3 that the number is less than 3	GROUP BY T1.film_id HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get title and film id of film	SELECT title , film_id FROM film
Keep the records that rental rate is 0.99	WHERE rental_rate = 0.99
Get title and film id of film that has inventory	SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id
Group the records based on the number film id of film 3 that the number is less than 3	GROUP BY T1.film_id HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get the number of city that has country	SELECT COUNT ( * ) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id
Keep the records that country of country is Australia	WHERE T2.country = Australia
Get the number of city that has country	SELECT COUNT ( * ) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id
Keep the records that country of country is Australia	WHERE T2.country = Australia
Get country of city that has country	SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id
Group the records based on the number country id of country 3 that the number is greater than or equal to 3	GROUP BY T2.country_id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get country of city that has country	SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id
Group the records based on the number country id of country 3 that the number is greater than or equal to 3	GROUP BY T2.country_id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get payment date of payment	SELECT payment_date FROM payment
Keep the records that amount is greater than 10	WHERE amount > 10
Get payment date of payment that has staff	SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of staff is Elsa	WHERE T2.first_name = Elsa
Get payment date of payment	SELECT payment_date FROM payment
Keep the records that amount is greater than 10	WHERE amount > 10
Get payment date of payment that has staff	SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of staff is Elsa	WHERE T2.first_name = Elsa
Get the number of customer	SELECT COUNT ( * ) FROM customer
Keep the records that active is 1	WHERE active = 1
Get the number of customer	SELECT COUNT ( * ) FROM customer
Keep the records that active is 1	WHERE active = 1
Get title and rental rate of film	SELECT title , rental_rate FROM film
Order these records based on the rental rate and sort them in descending order, and return the top 1 record	ORDER BY rental_rate DESC LIMIT 1
Get title and rental rate of film	SELECT title , rental_rate FROM film
Order these records based on the rental rate and sort them in descending order, and return the top 1 record	ORDER BY rental_rate DESC LIMIT 1
Get title and film id and description of film actor that has film	SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id
Group the records based on film id of film	GROUP BY T2.film_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title and film id and description of film actor that has film	SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id
Group the records based on film id of film	GROUP BY T2.film_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name and last name and actor id of film actor that has actor	SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id
Group the records based on actor id of actor	GROUP BY T2.actor_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name and last name and actor id of film actor that has actor	SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id
Group the records based on actor id of actor	GROUP BY T2.actor_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get first name and last name of film actor that has actor	SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id
Group the records based on the number actor id of actor 30 that the number is greater than 30	GROUP BY T2.actor_id HAVING COUNT ( * ) > 30 HAVING COUNT ( * ) > 30
Get first name and last name of film actor that has actor	SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id
Group the records based on the number actor id of actor 30 that the number is greater than 30	GROUP BY T2.actor_id HAVING COUNT ( * ) > 30 HAVING COUNT ( * ) > 30
Get store id of inventory	SELECT store_id FROM inventory
Group the records based on store id	GROUP BY store_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get store id of inventory	SELECT store_id FROM inventory
Group the records based on store id	GROUP BY store_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the SUM of amount of payment	SELECT SUM ( amount ) FROM payment
Get the SUM of amount of payment	SELECT SUM ( amount ) FROM payment
Get first name and last name and customer id of customer that has payment	SELECT T1.first_name , T1.last_name , T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customer	GROUP BY T1.customer_id
Order these records based on the the SUM of amount and sort them in ascending order, and return the top 1 record	ORDER BY SUM ( amount ) ASC LIMIT 1
Get first name and last name and customer id of customer that has payment	SELECT T1.first_name , T1.last_name , T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customer	GROUP BY T1.customer_id
Order these records based on the the SUM of amount and sort them in ascending order, and return the top 1 record	ORDER BY SUM ( amount ) ASC LIMIT 1
Get name of category that has film category and film	SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id
Keep the records that title of film is HUNGER ROOF	WHERE T3.title = HUNGER ROOF
Get name of category that has film category and film	SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id
Keep the records that title of film is HUNGER ROOF	WHERE T3.title = HUNGER ROOF
Get the number and name and category id of film category that has category	SELECT T2.name , T1.category_id , COUNT ( * ) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id
Group the records based on category id of film category	GROUP BY T1.category_id
Get the number and name and category id of film category that has category	SELECT T2.name , T1.category_id , COUNT ( * ) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id
Group the records based on category id of film category	GROUP BY T1.category_id
Get title and film id of film that has inventory	SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id
Group the records based on film id of film	GROUP BY T1.film_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title and film id of film that has inventory	SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id
Group the records based on film id of film	GROUP BY T1.film_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title and inventory id of film that has inventory and rental	SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id
Group the records based on inventory id of inventory	GROUP BY T2.inventory_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title and inventory id of film that has inventory and rental	SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id
Group the records based on inventory id of inventory	GROUP BY T2.inventory_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of distinct language id of film	SELECT COUNT ( DISTINCT language_id ) FROM film
Get the number of distinct language id of film	SELECT COUNT ( DISTINCT language_id ) FROM film
Get title of film	SELECT title FROM film
Keep the records that rating is R	WHERE rating = R
Get title of film	SELECT title FROM film
Keep the records that rating is R	WHERE rating = R
Get address of store that has address	SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id
Keep the records that store id is 1	WHERE store_id = 1
Get address of store that has address	SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id
Keep the records that store id is 1	WHERE store_id = 1
Get first name and last name and staff id of staff that has payment	SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id
Group the records based on staff id of staff	GROUP BY T1.staff_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get first name and last name and staff id of staff that has payment	SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id
Group the records based on staff id of staff	GROUP BY T1.staff_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get name of film that has LANGUAGE	SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id
Keep the records that title of film is AIRPORT POLLOCK	WHERE T1.title = AIRPORT POLLOCK
Get name of film that has LANGUAGE	SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id
Keep the records that title of film is AIRPORT POLLOCK	WHERE T1.title = AIRPORT POLLOCK
Get the number of store	SELECT COUNT ( * ) FROM store
Get the number of store	SELECT COUNT ( * ) FROM store
Get the number of distinct rating of film	SELECT COUNT ( DISTINCT rating ) FROM film
Get the number of distinct rating of film	SELECT COUNT ( DISTINCT rating ) FROM film
Get title of film	SELECT title FROM film
Keep the records that special features is in the form of %Deleted Scenes%	WHERE special_features LIKE %Deleted Scenes%
Get title of film	SELECT title FROM film
Keep the records that special features is in the form of %Deleted Scenes%	WHERE special_features LIKE %Deleted Scenes%
Get the number of inventory	SELECT COUNT ( * ) FROM inventory
Keep the records that store id is 1	WHERE store_id = 1
Get the number of inventory	SELECT COUNT ( * ) FROM inventory
Keep the records that store id is 1	WHERE store_id = 1
Get payment date of payment	SELECT payment_date FROM payment
Order these records based on the payment date and sort them in ascending order, and return the top 1 record	ORDER BY payment_date ASC LIMIT 1
Get payment date of payment	SELECT payment_date FROM payment
Order these records based on the payment date and sort them in ascending order, and return the top 1 record	ORDER BY payment_date ASC LIMIT 1
Get address and email of customer that has address	SELECT T2.address , T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id
Keep the records that first name of customer is LINDA	WHERE T1.first_name = LINDA
Get address and email of customer that has address	SELECT T2.address , T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id
Keep the records that first name of customer is LINDA	WHERE T1.first_name = LINDA
Get title of film	SELECT title FROM film
Keep the records that is greater than 100 OR rating is PG	WHERE LENGTH > 100 OR rating = PG
Get title of film	SELECT title FROM film
Keep the records that replacement cost is greater than 200	WHERE replacement_cost > 200
Get title of film	SELECT title FROM film
Keep the records that is greater than 100 OR rating is PG	WHERE LENGTH > 100 OR rating = PG
Get title of film	SELECT title FROM film
Keep the records that replacement cost is greater than 200	WHERE replacement_cost > 200
Get first name and last name of customer that has rental	SELECT T1.first_name , T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id
Order these records based on the rental date of rental and sort them in ascending order, and return the top 1 record	ORDER BY T2.rental_date ASC LIMIT 1
Get first name and last name of customer that has rental	SELECT T1.first_name , T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id
Order these records based on the rental date of rental and sort them in ascending order, and return the top 1 record	ORDER BY T2.rental_date ASC LIMIT 1
Get first name AND last name of staff that has rental AND customer	SELECT DISTINCT T1.first_name , T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id
Keep the records that first name of customer is APRIL AND last name of customer is BURNS	WHERE T3.first_name = APRIL AND T3.last_name = BURNS
Get first name AND last name of staff that has rental AND customer	SELECT DISTINCT T1.first_name , T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id
Keep the records that first name of customer is APRIL AND last name of customer is BURNS	WHERE T3.first_name = APRIL AND T3.last_name = BURNS
Get store id of customer	SELECT store_id FROM customer
Group the records based on store id	GROUP BY store_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get store id of customer	SELECT store_id FROM customer
Group the records based on store id	GROUP BY store_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get amount of payment	SELECT amount FROM payment
Order these records based on the amount and sort them in descending order, and return the top 1 record	ORDER BY amount DESC LIMIT 1
Get amount of payment	SELECT amount FROM payment
Order these records based on the amount and sort them in descending order, and return the top 1 record	ORDER BY amount DESC LIMIT 1
Get address of staff that has address	SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id
Keep the records that first name of staff is Elsa	WHERE T1.first_name = Elsa
Get address of staff that has address	SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id
Keep the records that first name of staff is Elsa	WHERE T1.first_name = Elsa
Get customer id of rental	SELECT customer_id FROM rental
Keep the records that rental date is greater than 2005-08-23 02:06:01	WHERE rental_date > 2005-08-23 02:06:01
Get first name of customer	SELECT first_name FROM customer
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer id of rental	SELECT customer_id FROM rental
Keep the records that rental date is greater than 2005-08-23 02:06:01	WHERE rental_date > 2005-08-23 02:06:01
Get first name of customer	SELECT first_name FROM customer
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get the number of bank	SELECT COUNT ( * ) FROM bank
Get the number of bank	SELECT COUNT ( * ) FROM bank
Get the SUM of no of customers of bank	SELECT SUM ( no_of_customers ) FROM bank
Get the SUM of no of customers of bank	SELECT SUM ( no_of_customers ) FROM bank
Get the SUM of no of customers of bank	SELECT SUM ( no_of_customers ) FROM bank
Keep the records that city is New York City	WHERE city = New York City
Get the SUM of no of customers of bank	SELECT SUM ( no_of_customers ) FROM bank
Keep the records that city is New York City	WHERE city = New York City
Get the average value of no of customers of bank	SELECT AVG ( no_of_customers ) FROM bank
Keep the records that state is Utah	WHERE state = Utah
Get the average value of no of customers of bank	SELECT AVG ( no_of_customers ) FROM bank
Keep the records that state is Utah	WHERE state = Utah
Get the average value of no of customers of bank	SELECT AVG ( no_of_customers ) FROM bank
Get the average value of no of customers of bank	SELECT AVG ( no_of_customers ) FROM bank
Get city and state of bank	SELECT city , state FROM bank
Keep the records that bname is morningside	WHERE bname = morningside
Get city and state of bank	SELECT city , state FROM bank
Keep the records that bname is morningside	WHERE bname = morningside
Get bname of bank	SELECT bname FROM bank
Keep the records that state is New York	WHERE state = New York
Get bname of bank	SELECT bname FROM bank
Keep the records that state is New York	WHERE state = New York
Get cust name of customer	SELECT cust_name FROM customer
Order these records based on the acc bal	ORDER BY acc_bal 
Get cust name of customer	SELECT cust_name FROM customer
Order these records based on the acc bal	ORDER BY acc_bal 
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on cust name of customer	GROUP BY T1.cust_name
Order these records based on the the SUM of amount of loan	ORDER BY SUM ( T2.amount ) 
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on cust name of customer	GROUP BY T1.cust_name
Order these records based on the the SUM of amount of loan	ORDER BY SUM ( T2.amount ) 
Get state and acc type and credit score of customer	SELECT state , acc_type , credit_score FROM customer
Keep the records that no of loans is 0	WHERE no_of_loans = 0
Get state and acc type and credit score of customer	SELECT state , acc_type , credit_score FROM customer
Keep the records that no of loans is 0	WHERE no_of_loans = 0
Get the number of distinct city of bank	SELECT COUNT ( DISTINCT city ) FROM bank
Get the number of distinct city of bank	SELECT COUNT ( DISTINCT city ) FROM bank
Get the number of distinct state of bank	SELECT COUNT ( DISTINCT state ) FROM bank
Get the number of distinct state of bank	SELECT COUNT ( DISTINCT state ) FROM bank
Get the number of distinct acc type of customer	SELECT COUNT ( DISTINCT acc_type ) FROM customer
Get the number of distinct acc type of customer	SELECT COUNT ( DISTINCT acc_type ) FROM customer
Get cust name and acc bal of customer	SELECT cust_name , acc_bal FROM customer
Keep the records that cust name is in the form of %a%	WHERE cust_name LIKE %a%
Get cust name and acc bal of customer	SELECT cust_name , acc_bal FROM customer
Keep the records that cust name is in the form of %a%	WHERE cust_name LIKE %a%
Get the SUM of acc bal of customer	SELECT SUM ( acc_bal ) FROM customer
Keep the records that state is Utah OR state is Texas	WHERE state = Utah OR state = Texas
Get the SUM of acc bal of customer	SELECT SUM ( acc_bal ) FROM customer
Keep the records that state is Utah OR state is Texas	WHERE state = Utah OR state = Texas
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that acc type is saving	WHERE acc_type = saving
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that acc type is checking	WHERE acc_type = checking
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that acc type is saving	WHERE acc_type = saving
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that acc type is checking	WHERE acc_type = checking
Get cust name of customer	SELECT cust_name FROM customer
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that acc type is saving	WHERE acc_type = saving
Get cust name of customer	SELECT cust_name FROM customer
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that acc type is saving	WHERE acc_type = saving
Get cust name of customer	SELECT cust_name FROM customer
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that loan type of loan is Mortgages	WHERE T2.loan_type = Mortgages
Get cust name of customer	SELECT cust_name FROM customer
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that loan type of loan is Mortgages	WHERE T2.loan_type = Mortgages
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that loan type is Mortgages	WHERE loan_type = Mortgages
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that loan type is Auto	WHERE loan_type = Auto
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that loan type is Mortgages	WHERE loan_type = Mortgages
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that loan type is Auto	WHERE loan_type = Auto
Get the average value of credit score of customer	SELECT AVG ( credit_score ) FROM customer
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that credit score is less than the first query result	WHERE credit_score < ( the first query result ) 
Get the average value of credit score of customer	SELECT AVG ( credit_score ) FROM customer
Get cust name of customer	SELECT cust_name FROM customer
Keep the records that credit score is less than the first query result	WHERE credit_score < ( the first query result ) 
Get bname of bank	SELECT bname FROM bank
Order these records based on the no of customers and sort them in descending order, and return the top 1 record	ORDER BY no_of_customers DESC LIMIT 1
Get bname of bank	SELECT bname FROM bank
Order these records based on the no of customers and sort them in descending order, and return the top 1 record	ORDER BY no_of_customers DESC LIMIT 1
Get cust name of customer	SELECT cust_name FROM customer
Order these records based on the credit score, and return the top 1 record	ORDER BY credit_score LIMIT 1
Get cust name of customer	SELECT cust_name FROM customer
Order these records based on the credit score, and return the top 1 record	ORDER BY credit_score LIMIT 1
Get cust name and acc type and acc bal of customer	SELECT cust_name , acc_type , acc_bal FROM customer
Order these records based on the credit score and sort them in descending order, and return the top 1 record	ORDER BY credit_score DESC LIMIT 1
Get cust name and acc type and acc bal of customer	SELECT cust_name , acc_type , acc_bal FROM customer
Order these records based on the credit score and sort them in descending order, and return the top 1 record	ORDER BY credit_score DESC LIMIT 1
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on cust name of customer	GROUP BY T1.cust_name
Order these records based on the the SUM of amount of loan and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T2.amount ) DESC LIMIT 1
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on cust name of customer	GROUP BY T1.cust_name
Order these records based on the the SUM of amount of loan and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T2.amount ) DESC LIMIT 1
Get state of bank	SELECT state FROM bank
Group the records based on state	GROUP BY state
Order these records based on the the SUM of no of customers and sort them in descending order, and return the top 1 record	ORDER BY SUM ( no_of_customers ) DESC LIMIT 1
Get state of bank	SELECT state FROM bank
Group the records based on state	GROUP BY state
Order these records based on the the SUM of no of customers and sort them in descending order, and return the top 1 record	ORDER BY SUM ( no_of_customers ) DESC LIMIT 1
Get the average value of acc bal and acc type of customer	SELECT AVG ( acc_bal ) , acc_type FROM customer
Keep the records that credit score is less than 50	WHERE credit_score < 50 
Group the records based on acc type	GROUP BY acc_type
Get the average value of acc bal and acc type of customer	SELECT AVG ( acc_bal ) , acc_type FROM customer
Keep the records that credit score is less than 50	WHERE credit_score < 50 
Group the records based on acc type	GROUP BY acc_type
Get the SUM of acc bal and state of customer	SELECT SUM ( acc_bal ) , state FROM customer
Keep the records that credit score is greater than 100	WHERE credit_score > 100 
Group the records based on state	GROUP BY state
Get the SUM of acc bal and state of customer	SELECT SUM ( acc_bal ) , state FROM customer
Keep the records that credit score is greater than 100	WHERE credit_score > 100 
Group the records based on state	GROUP BY state
Get the SUM of amount and bname of bank that has loan	SELECT SUM ( amount ) , T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Group the records based on bname of bank	GROUP BY T1.bname
Get the SUM of amount and bname of bank that has loan	SELECT SUM ( amount ) , T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Group the records based on bname of bank	GROUP BY T1.bname
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on the number cust name of customer 1 that the number is greater than 1	GROUP BY T1.cust_name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on the number cust name of customer 1 that the number is greater than 1	GROUP BY T1.cust_name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get cust name and acc type of customer that has loan	SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on the SUM of amount of loan cust name of customer 5000 that the SUM of amount of loan is greater than 5000	GROUP BY T1.cust_name HAVING SUM ( T2.amount ) > 5000 HAVING SUM ( T2.amount ) > 5000
Get cust name and acc type of customer that has loan	SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Group the records based on the SUM of amount of loan cust name of customer 5000 that the SUM of amount of loan is greater than 5000	GROUP BY T1.cust_name HAVING SUM ( T2.amount ) > 5000 HAVING SUM ( T2.amount ) > 5000
Get bname of bank that has loan	SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Group the records based on bname of bank	GROUP BY T1.bname
Order these records based on the the SUM of amount of loan and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T2.amount ) DESC LIMIT 1
Get bname of bank that has loan	SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Group the records based on bname of bank	GROUP BY T1.bname
Order these records based on the the SUM of amount of loan and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T2.amount ) DESC LIMIT 1
Get bname of loan that has bank and customer	SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id
Keep the records that credit score of customer is less than 100	WHERE T3.credit_score < 100 
Group the records based on bname of bank	GROUP BY T2.bname
Order these records based on the the SUM of amount of loan and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.amount ) DESC LIMIT 1
Get bname of loan that has bank and customer	SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id
Keep the records that credit score of customer is less than 100	WHERE T3.credit_score < 100 
Group the records based on bname of bank	GROUP BY T2.bname
Order these records based on the the SUM of amount of loan and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.amount ) DESC LIMIT 1
Get bname of bank that has loan	SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2
Get bname of bank that has loan	SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2
Get cust name and credit score of customer that has loan	SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2
Get cust name and credit score of customer that has loan	SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that amount is greater than 3000	WHERE amount > 3000
Get cust name of customer that has loan	SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id
Keep the records that amount is greater than 3000	WHERE amount > 3000
Get bname and city of bank that has loan	SELECT T1.bname , T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Keep the records that loan type of loan is Business	WHERE T2.loan_type = Business
Get bname and city of bank that has loan	SELECT T1.bname , T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Keep the records that loan type of loan is Business	WHERE T2.loan_type = Business
Get bname of loan that has bank and customer	SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id
Keep the records that credit score of customer is less than 100	WHERE T3.credit_score < 100
Get bname of loan that has bank and customer	SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id
Keep the records that credit score of customer is less than 100	WHERE T3.credit_score < 100
Get the SUM of amount of bank that has loan	SELECT SUM ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Keep the records that state of bank is New York	WHERE T1.state = New York
Get the SUM of amount of bank that has loan	SELECT SUM ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id
Keep the records that state of bank is New York	WHERE T1.state = New York
Get cust id of loan	SELECT cust_id FROM loan
Get the average value of credit score of customer	SELECT AVG ( credit_score ) FROM customer
Keep the records that cust id is in the first query result	WHERE cust_id IN ( the first query result ) 
Get cust id of loan	SELECT cust_id FROM loan
Get the average value of credit score of customer	SELECT AVG ( credit_score ) FROM customer
Keep the records that cust id is in the first query result	WHERE cust_id IN ( the first query result ) 
Get cust id of loan	SELECT cust_id FROM loan
Get the average value of credit score of customer	SELECT AVG ( credit_score ) FROM customer
Keep the records that cust id is not in the first query result	WHERE cust_id NOT IN ( the first query result ) 
Get cust id of loan	SELECT cust_id FROM loan
Get the average value of credit score of customer	SELECT AVG ( credit_score ) FROM customer
Keep the records that cust id is not in the first query result	WHERE cust_id NOT IN ( the first query result ) 
Get the number of ASSESSMENT NOTES	SELECT COUNT ( * ) FROM ASSESSMENT_NOTES
Get date of notes of Assessment Notes	SELECT date_of_notes FROM Assessment_Notes
Get the number of ADDRESSES	SELECT COUNT ( * ) FROM ADDRESSES
Keep the records that zip postcode is 197	WHERE zip_postcode = 197
Get the number of distinct incident type code of Behavior Incident	SELECT COUNT ( DISTINCT incident_type_code ) FROM Behavior_Incident
Get Detention type code of Detention	SELECT DISTINCT detention_type_code FROM Detention
Get date incident start and date incident end of Behavior Incident	SELECT date_incident_start , date_incident_end FROM Behavior_Incident
Keep the records that incident type code is NOISE	WHERE incident_type_code = NOISE
Get Detention summary of Detention	SELECT detention_summary FROM Detention
Get cell mobile number and email address of STUDENTS	SELECT cell_mobile_number , email_address FROM STUDENTS
Get email address of Students	SELECT email_address FROM Students
Keep the records that first name is Emma AND last name is Rohan	WHERE first_name = Emma AND last_name = Rohan
Get the number of distinct student id of Students in Detention	SELECT COUNT ( DISTINCT student_id ) FROM Students_in_Detention
Get gender of TEACHERS	SELECT gender FROM TEACHERS
Keep the records that last name is Medhurst	WHERE last_name = Medhurst
Get incident type description of Ref Incident Type	SELECT incident_type_description FROM Ref_Incident_Type
Keep the records that incident type code is VIOLENCE	WHERE incident_type_code = VIOLENCE
Get the maximum value of monthly rental and the minimum value of monthly rental of Student Addresses	SELECT MAX ( monthly_rental ) , MIN ( monthly_rental ) FROM Student_Addresses
Get first name of Teachers	SELECT first_name FROM Teachers
Keep the records that email address is in the form of %man%	WHERE email_address LIKE %man%
Get all of Assessment Notes	SELECT * FROM Assessment_Notes
Order these records based on the date of notes and sort them in ascending ORDER	ORDER BY date_of_notes ASC 
Get city of Addresses	SELECT city FROM Addresses
Order these records based on the city	ORDER BY city 
Get first name and last name of Teachers	SELECT first_name , last_name FROM Teachers
Order these records based on the last name	ORDER BY last_name 
Get all of Student Addresses	SELECT * FROM Student_Addresses
Order these records based on the monthly rental and sort them in descending ORDER	ORDER BY monthly_rental DESC 
Get student id and first name of Assessment Notes that has Students	SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Assessment Notes	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get teacher id and first name of Assessment Notes that has Teachers	SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
Group the records based on teacher id of Assessment Notes	GROUP BY T1.teacher_id
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get student id and last name of Behavior Incident that has Students	SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Behavior Incident	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get teacher id and last name of Detention that has Teachers	SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
Keep the records that Detention type code of Detention is AFTER	WHERE T1.detention_type_code = AFTER 
Group the records based on teacher id of Detention	GROUP BY T1.teacher_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get student id and first name of Student Addresses that has Students	SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Student Addresses	GROUP BY T1.student_id
Order these records based on the the average value of monthly rental and sort them in descending order, and return the top 1 record	ORDER BY AVG ( monthly_rental ) DESC LIMIT 1
Get address id and city of Addresses that has Student Addresses	SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
Group the records based on address id of Student Addresses	GROUP BY T2.address_id
Order these records based on the the average value of monthly rental and sort them in descending order, and return the top 1 record	ORDER BY AVG ( monthly_rental ) DESC LIMIT 1
Get incident type code and incident type description of Behavior Incident that has Ref Incident Type	SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code
Group the records based on incident type code of Behavior Incident	GROUP BY T1.incident_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Detention type code and Detention type description of Detention that has Ref Detention Type	SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code
Group the records based on Detention type code of Detention	GROUP BY T1.detention_type_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get date of notes of Assessment Notes that has Students	SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Keep the records that first name of Students is Fanny	WHERE T2.first_name = Fanny
Get text of notes of Assessment Notes that has Teachers	SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
Keep the records that last name of Teachers is Schuster	WHERE T2.last_name = Schuster
Get date incident start and date incident end of Behavior Incident that has Students	SELECT T1.date_incident_start , date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Keep the records that last name of Students is Fahey	WHERE T2.last_name = Fahey
Get datetime Detention start and datetime Detention end of Detention that has Teachers	SELECT T1.datetime_detention_start , datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id
Keep the records that last name of Teachers is Schultz	WHERE T2.last_name = Schultz
Get address id and zip postcode of Addresses that has Student Addresses	SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
Order these records based on the monthly rental and sort them in descending order, and return the top 1 record	ORDER BY monthly_rental DESC LIMIT 1
Get cell mobile number of Student Addresses that has Students	SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Order these records based on the monthly rental of Student Addresses and sort them in ascending order, and return the top 1 record	ORDER BY T1.monthly_rental ASC LIMIT 1
Get monthly rental of Addresses that has Student Addresses	SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
Keep the records that state province county of Addresses is Texas	WHERE T1.state_province_county = Texas
Get first name and last name of Addresses that has Students	SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id
Keep the records that state province county of Addresses is Wisconsin	WHERE T1.state_province_county = Wisconsin
Get the average value of monthly rental and line 1 of Addresses that has Student Addresses	SELECT T1.line_1 , AVG ( T2.monthly_rental ) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id
Group the records based on address id of Student Addresses	GROUP BY T2.address_id
Get zip postcode of Addresses that has Teachers	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id
Keep the records that first name of Teachers is Lyla	WHERE T2.first_name = Lyla
Get email address of Addresses that has Teachers	SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id
Keep the records that zip postcode of Addresses is 918	WHERE T1.zip_postcode = 918
Get student id of Behavior Incident	SELECT student_id FROM Behavior_Incident
Get the number of STUDENTS	SELECT COUNT ( * ) FROM STUDENTS
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get last name of Teachers	SELECT last_name FROM Teachers
Get last name of Teachers that has Detention	SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2
Get line 1 of Addresses that has Students	SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2
Get line 1 of Addresses that has Teachers	SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2
Get asset id and asset details of Assets that has Asset Parts	SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id
Group the records based on the number asset id of Assets 2 that the number is 2	GROUP BY T1.asset_id HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get asset id and asset details of Assets that has Fault Log	SELECT T1.asset_id , T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id
Group the records based on the number asset id of Assets 2 that the number is less than 2	GROUP BY T1.asset_id HAVING COUNT ( * ) < 2 HAVING COUNT ( * ) < 2
Get the number and maintenance contract id of Maintenance Contracts that has Assets	SELECT COUNT ( * ) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id
Group the records based on maintenance contract id of Maintenance Contracts	GROUP BY T1.maintenance_contract_id
Get the number and company id of Third Party Companies that has Assets	SELECT COUNT ( * ) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id
Group the records based on company id of Third Party Companies	GROUP BY T1.company_id
Get company id and company name of Third Party Companies that has Maintenance Engineers	SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id
Group the records based on the number company id of Third Party Companies 2 that the number is greater than or equal to 2	GROUP BY T1.company_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get company id and company name of Third Party Companies that has Maintenance Contracts	SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id
Group the records based on the number company id of Third Party Companies 2 that the number is greater than or equal to 2	GROUP BY T3.company_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Staff name and Staff id of Staff that has Fault Log	SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2
Get Staff name and Staff id of Staff that has Engineer Visits	SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4
Get engineer id and first name and last name of Maintenance Engineers that has Engineer Visits	SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2
Group the records based on engineer id of Maintenance Engineers	GROUP BY T1.engineer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get part name and part id of Parts that has Part Faults	SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id
Group the records based on the number part id of Parts 2 that the number is greater than 2	GROUP BY T1.part_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get first name and last name and other details and skill description of Maintenance Engineers that has Engineer Skills and Skills	SELECT T1.first_name , T1.last_name , T1.other_details , T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3
Get fault short name and skill description of Part Faults that has Skills Required To Fix and Skills	SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3
Get the number and part name of Parts that has Asset Parts	SELECT T1.part_name , COUNT ( * ) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id
Group the records based on part name of Parts	GROUP BY T1.part_name
Get fault description and fault status of Fault Log that has Fault Log Parts	SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2
Get the number and fault log entry id of Fault Log that has Engineer Visits	SELECT COUNT ( * ) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id
Group the records based on fault log entry id of Fault Log	GROUP BY T1.fault_log_entry_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get last name of Maintenance Engineers	SELECT DISTINCT last_name FROM Maintenance_Engineers
Get fault status of Fault Log Parts	SELECT DISTINCT fault_status FROM Fault_Log_Parts
Get engineer id of Engineer Visits	SELECT engineer_id FROM Engineer_Visits
Get first name and last name of Maintenance Engineers	SELECT first_name , last_name FROM Maintenance_Engineers
Keep the records that engineer id is not in the first query result	WHERE engineer_id NOT IN ( the first query result ) 
Get asset id and asset details and asset make and asset model of Assets	SELECT asset_id , asset_details , asset_make , asset_model FROM Assets
Get asset acquired date of Assets	SELECT asset_acquired_date FROM Assets
Order these records based on the asset acquired date and sort them in ascending order, and return the top 1 record	ORDER BY asset_acquired_date ASC LIMIT 1
Get part id and part name of Parts that has Part Faults and Skills Required To Fix	SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id
Group the records based on part id of Parts	GROUP BY T1.part_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get part name of Parts that has Part Faults	SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id
Group the records based on part name of Parts	GROUP BY T1.part_name
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get engineer id and first name and last name of Maintenance Engineers that has Engineer Visits	SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id
Group the records based on engineer id of Maintenance Engineers	GROUP BY T1.engineer_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Staff name and first name and last name of Staff that has Engineer Visits and Maintenance Engineers	SELECT T1.staff_name , T3.first_name , T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3
Get fault log entry id and fault description and fault log entry datetime of Fault Log that has Fault Log Parts	SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id
Group the records based on fault log entry id of Fault Log	GROUP BY T1.fault_log_entry_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get skill id and skill description of Skills that has Skills Required To Fix	SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id
Group the records based on skill id of Skills	GROUP BY T1.skill_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get asset model of Assets	SELECT DISTINCT asset_model FROM Assets
Get asset make and asset model and asset details of Assets	SELECT asset_make , asset_model , asset_details FROM Assets
Order these records based on the asset disposed date and sort them in ascending ORDER	ORDER BY asset_disposed_date ASC 
Get part id and chargeable amount of Parts	SELECT part_id , chargeable_amount FROM Parts
Order these records based on the chargeable amount and sort them in ascending order, and return the top 1 record	ORDER BY chargeable_amount ASC LIMIT 1
Get company name of Third Party Companies that has Maintenance Contracts	SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id
Order these records based on the contract start date of Maintenance Contracts and sort them in ascending order, and return the top 1 record	ORDER BY T2.contract_start_date ASC LIMIT 1
Get company name of Third Party Companies that has Maintenance Contracts and Ref Company Types	SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code
Order these records based on the contract end date of Maintenance Contracts and sort them in descending order, and return the top 1 record	ORDER BY T2.contract_end_date DESC LIMIT 1
Get gender of staff	SELECT gender FROM staff
Group the records based on gender	GROUP BY gender
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Staff name of Staff that has Engineer Visits	SELECT T1.staff_name , COUNT ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id
Group the records based on Staff name of Staff	GROUP BY T1.staff_name
Get asset id of Fault Log	SELECT asset_id FROM Fault_Log
Get asset model of Assets	SELECT asset_model FROM Assets
Keep the records that asset id is not in the first query result	WHERE asset_id NOT IN ( the first query result ) 
Get local authority and services of station	SELECT local_authority , services FROM station
Get train number and name of train	SELECT train_number , name FROM train
Order these records based on the	ORDER BY 
Get train number of train	SELECT TIME , train_number FROM train
Keep the records that destination is Chennai	WHERE destination = Chennai 
Order these records based on the	ORDER BY 
Get the number of train	SELECT COUNT ( * ) FROM train
Keep the records that name is in the form of %Express%	WHERE name LIKE %Express%
Get train number of train	SELECT train_number , TIME FROM train
Keep the records that origin is Chennai AND destination is Guruvayur	WHERE origin = Chennai AND destination = Guruvayur
Get the number and origin of train	SELECT origin , COUNT ( * ) FROM train
Group the records based on origin	GROUP BY origin
Get name of train that has route	SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id
Group the records based on train id of route	GROUP BY t2.train_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and network name and services of station that has route	SELECT COUNT ( * ) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id
Group the records based on station id of route	GROUP BY t2.station_id
Get the average value of high temperature and day of week of weekly weather	SELECT AVG ( high_temperature ) , day_of_week FROM weekly_weather
Group the records based on day of week	GROUP BY day_of_week
Get the maximum value of low temperature and the average value of precipitation of weekly weather that has station	SELECT MAX ( t1.low_temperature ) , AVG ( t1.precipitation ) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id
Keep the records that network name of station is Amersham	WHERE t2.network_name = Amersham
Get name and time of station that has route and train	SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id
Keep the records that local authority of station is Chiltern	WHERE t1.local_authority = Chiltern
Get the number of distinct services of station	SELECT COUNT ( DISTINCT services ) FROM station
Get id and local authority of weekly weather that has station	SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id
Group the records based on station id of weekly weather	GROUP BY t1.station_id
Order these records based on the the average value of high temperature and sort them in descending order, and return the top 1 record	ORDER BY AVG ( high_temperature ) DESC LIMIT 1
Get id and local authority of weekly weather that has station	SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id
Group the records based on the maximum value of precipitation of weekly weather station id of weekly weather 50 that the maximum value of precipitation of weekly weather is greater than 50	GROUP BY t1.station_id HAVING MAX ( t1.precipitation ) > 50 HAVING MAX ( t1.precipitation ) > 50
Get the minimum value of low temperature and the maximum value of wind speed mph of weekly weather	SELECT MIN ( low_temperature ) , MAX ( wind_speed_mph ) FROM weekly_weather
Get origin of train	SELECT origin FROM train
Group the records based on the number origin 1 that the number is greater than 1	GROUP BY origin HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number of professor that has department	SELECT COUNT ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that DEPT NAME is Accounting	WHERE DEPT_NAME = Accounting
Get the number of professor that has department	SELECT COUNT ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that DEPT NAME is Accounting	WHERE DEPT_NAME = Accounting
Get the number of distinct PROF NUM of	SELECT COUNT ( DISTINCT PROF_NUM ) FROM
Keep the records that CRS CODE is ACCT-211	WHERE CRS_CODE = ACCT-211
Get the number of distinct PROF NUM of	SELECT COUNT ( DISTINCT PROF_NUM ) FROM
Keep the records that CRS CODE is ACCT-211	WHERE CRS_CODE = ACCT-211
Get EMP FNAME and EMP LNAME of professor that has department and employee	SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM
Keep the records that DEPT NAME is Biology	WHERE DEPT_NAME = Biology
Get EMP FNAME and EMP LNAME of professor that has department and employee	SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM
Keep the records that DEPT NAME is Biology	WHERE DEPT_NAME = Biology
Get EMP FNAME and EMP DOB of employee that has CLASS	SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
Keep the records that CRS CODE is ACCT-211	WHERE CRS_CODE = ACCT-211
Get EMP FNAME and EMP DOB of employee that has CLASS	SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
Keep the records that CRS CODE is ACCT-211	WHERE CRS_CODE = ACCT-211
Get the number of employee that has CLASS	SELECT COUNT ( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
Keep the records that EMP LNAME of employee is Graztevski	WHERE T1.EMP_LNAME = Graztevski
Get the number of employee that has CLASS	SELECT COUNT ( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM
Keep the records that EMP LNAME of employee is Graztevski	WHERE T1.EMP_LNAME = Graztevski
Get school code of department	SELECT school_code FROM department
Keep the records that dept name is Accounting	WHERE dept_name = Accounting
Get school code of department	SELECT school_code FROM department
Keep the records that dept name is Accounting	WHERE dept_name = Accounting
Get crs credit and crs description of course	SELECT crs_credit , crs_description FROM course
Keep the records that crs code is CIS-220	WHERE crs_code = CIS-220
Get crs credit and crs description of course	SELECT crs_credit , crs_description FROM course
Keep the records that crs code is CIS-220	WHERE crs_code = CIS-220
Get dept address of department	SELECT dept_address FROM department
Keep the records that dept name is History	WHERE dept_name = History
Get dept address of department	SELECT dept_address FROM department
Keep the records that dept name is History	WHERE dept_name = History
Get the number of distinct dept address of department	SELECT COUNT ( DISTINCT dept_address ) FROM department
Keep the records that school code is BUS	WHERE school_code = BUS
Get the number of distinct dept address of department	SELECT COUNT ( DISTINCT dept_address ) FROM department
Keep the records that school code is BUS	WHERE school_code = BUS
Get the number of distinct dept address and school code of department	SELECT COUNT ( DISTINCT dept_address ) , school_code FROM department
Group the records based on school code	GROUP BY school_code
Get the number of distinct dept address and school code of department	SELECT COUNT ( DISTINCT dept_address ) , school_code FROM department
Group the records based on school code	GROUP BY school_code
Get crs credit and crs description of course	SELECT crs_credit , crs_description FROM course
Keep the records that crs code is QM-261	WHERE crs_code = QM-261
Get crs credit and crs description of course	SELECT crs_credit , crs_description FROM course
Keep the records that crs code is QM-261	WHERE crs_code = QM-261
Get the number of distinct dept name and school code of department	SELECT COUNT ( DISTINCT dept_name ) , school_code FROM department
Group the records based on school code	GROUP BY school_code
Get the number of distinct dept name and school code of department	SELECT COUNT ( DISTINCT dept_name ) , school_code FROM department
Group the records based on school code	GROUP BY school_code
Get the number of distinct dept name and school code of department	SELECT COUNT ( DISTINCT dept_name ) , school_code FROM department
Group the records based on the number of distinct dept name school code 5 that the number of distinct dept name is less than 5	GROUP BY school_code HAVING COUNT ( DISTINCT dept_name ) < 5 HAVING COUNT ( DISTINCT dept_name ) < 5
Get the number of distinct dept name and school code of department	SELECT COUNT ( DISTINCT dept_name ) , school_code FROM department
Group the records based on the number of distinct dept name school code 5 that the number of distinct dept name is less than 5	GROUP BY school_code HAVING COUNT ( DISTINCT dept_name ) < 5 HAVING COUNT ( DISTINCT dept_name ) < 5
Get the number and crs code of	SELECT COUNT ( * ) , crs_code FROM
Group the records based on crs code	GROUP BY crs_code
Get the number and crs code of	SELECT COUNT ( * ) , crs_code FROM
Group the records based on crs code	GROUP BY crs_code
Get the SUM of crs credit and dept code of course	SELECT SUM ( crs_credit ) , dept_code FROM course
Group the records based on dept code	GROUP BY dept_code
Get the SUM of crs credit and dept code of course	SELECT SUM ( crs_credit ) , dept_code FROM course
Group the records based on dept code	GROUP BY dept_code
Get the number and CLASS room of	SELECT COUNT ( * ) , class_room FROM
Group the records based on the number CLASS room 2 that the number is greater than or equal to 2	GROUP BY class_room HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and CLASS room of	SELECT COUNT ( * ) , class_room FROM
Group the records based on the number CLASS room 2 that the number is greater than or equal to 2	GROUP BY class_room HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and dept code of CLASS that has course	SELECT COUNT ( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code
Group the records based on dept code	GROUP BY dept_code
Get the number and dept code of CLASS that has course	SELECT COUNT ( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code
Group the records based on dept code	GROUP BY dept_code
Get the number and school code of CLASS that has course and department	SELECT COUNT ( * ) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code
Group the records based on school code of department	GROUP BY T3.school_code
Get the number and school code of CLASS that has course and department	SELECT COUNT ( * ) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code
Group the records based on school code of department	GROUP BY T3.school_code
Get the number and school code of department that has professor	SELECT COUNT ( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code
Group the records based on school code of department	GROUP BY T1.school_code
Get the number and school code of department that has professor	SELECT COUNT ( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code
Group the records based on school code of department	GROUP BY T1.school_code
Get the number and emp jobcode of employee	SELECT emp_jobcode , COUNT ( * ) FROM employee
Group the records based on emp jobcode	GROUP BY emp_jobcode
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and emp jobcode of employee	SELECT emp_jobcode , COUNT ( * ) FROM employee
Group the records based on emp jobcode	GROUP BY emp_jobcode
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get school code of department that has professor	SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code
Group the records based on school code of department	GROUP BY T1.school_code
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get school code of department that has professor	SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code
Group the records based on school code of department	GROUP BY T1.school_code
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get the number and dept code of professor	SELECT COUNT ( * ) , dept_code FROM professor
Keep the records that prof high degree is Ph.D.	WHERE prof_high_degree = Ph.D. 
Group the records based on dept code	GROUP BY dept_code
Get the number and dept code of professor	SELECT COUNT ( * ) , dept_code FROM professor
Keep the records that prof high degree is Ph.D.	WHERE prof_high_degree = Ph.D. 
Group the records based on dept code	GROUP BY dept_code
Get the number and dept code of student	SELECT COUNT ( * ) , dept_code FROM student
Group the records based on dept code	GROUP BY dept_code
Get the number and dept code of student	SELECT COUNT ( * ) , dept_code FROM student
Group the records based on dept code	GROUP BY dept_code
Get the SUM of stu hrs and dept code of student	SELECT SUM ( stu_hrs ) , dept_code FROM student
Group the records based on dept code	GROUP BY dept_code
Get the SUM of stu hrs and dept code of student	SELECT SUM ( stu_hrs ) , dept_code FROM student
Group the records based on dept code	GROUP BY dept_code
Get the maximum value of stu gpa and the average value of stu gpa and the minimum value of stu gpa and dept code of student	SELECT MAX ( stu_gpa ) , AVG ( stu_gpa ) , MIN ( stu_gpa ) , dept_code FROM student
Group the records based on dept code	GROUP BY dept_code
Get the maximum value of stu gpa and the average value of stu gpa and the minimum value of stu gpa and dept code of student	SELECT MAX ( stu_gpa ) , AVG ( stu_gpa ) , MIN ( stu_gpa ) , dept_code FROM student
Group the records based on dept code	GROUP BY dept_code
Get the average value of stu gpa and dept name of student that has department	SELECT T2.dept_name , AVG ( T1.stu_gpa ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of student	GROUP BY T1.dept_code
Order these records based on the the average value of stu gpa of student and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.stu_gpa ) DESC LIMIT 1
Get the average value of stu gpa and dept name of student that has department	SELECT T2.dept_name , AVG ( T1.stu_gpa ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of student	GROUP BY T1.dept_code
Order these records based on the the average value of stu gpa of student and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.stu_gpa ) DESC LIMIT 1
Get the number of distinct school code of department	SELECT COUNT ( DISTINCT school_code ) FROM department
Get the number of distinct school code of department	SELECT COUNT ( DISTINCT school_code ) FROM department
Get the number of distinct CLASS code of	SELECT COUNT ( DISTINCT class_code ) FROM
Get the number of distinct CLASS code of	SELECT COUNT ( DISTINCT class_code ) FROM
Get the number of distinct crs code of	SELECT COUNT ( DISTINCT crs_code ) FROM
Get the number of distinct crs code of	SELECT COUNT ( DISTINCT crs_code ) FROM
Get the number of distinct dept name of department	SELECT COUNT ( DISTINCT dept_name ) FROM department
Get the number of distinct dept name of department	SELECT COUNT ( DISTINCT dept_name ) FROM department
Get the number of department that has course	SELECT COUNT ( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code
Keep the records that dept name is Computer Info. Systems	WHERE dept_name = Computer Info. Systems
Get the number of department that has course	SELECT COUNT ( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code
Keep the records that dept name is Computer Info. Systems	WHERE dept_name = Computer Info. Systems
Get the number of distinct CLASS section of	SELECT COUNT ( DISTINCT class_section ) FROM
Keep the records that crs code is ACCT-211	WHERE crs_code = ACCT-211
Get the number of distinct CLASS section of	SELECT COUNT ( DISTINCT class_section ) FROM
Keep the records that crs code is ACCT-211	WHERE crs_code = ACCT-211
Get the SUM of crs credit and dept code of course that has CLASS	SELECT SUM ( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code
Group the records based on dept code of course	GROUP BY T1.dept_code
Get the SUM of crs credit and dept code of course that has CLASS	SELECT SUM ( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code
Group the records based on dept code of course	GROUP BY T1.dept_code
Get dept name of course that has CLASS and department	SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code
Group the records based on dept code of course	GROUP BY T1.dept_code
Order these records based on the the SUM of crs credit of course and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.crs_credit ) DESC LIMIT 1
Get dept name of course that has CLASS and department	SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code
Group the records based on dept code of course	GROUP BY T1.dept_code
Order these records based on the the SUM of crs credit of course and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.crs_credit ) DESC LIMIT 1
Get the number of CLASS that has enroll	SELECT COUNT ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code
Keep the records that crs code of CLASS is ACCT-211	WHERE T1.crs_code = ACCT-211
Get the number of CLASS that has enroll	SELECT COUNT ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code
Keep the records that crs code of CLASS is ACCT-211	WHERE T1.crs_code = ACCT-211
Get stu fname of CLASS that has enroll and student	SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num
Keep the records that crs code of CLASS is ACCT-211	WHERE T1.crs_code = ACCT-211
Get stu fname of CLASS that has enroll and student	SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num
Keep the records that crs code of CLASS is ACCT-211	WHERE T1.crs_code = ACCT-211
Get stu fname of CLASS that has enroll AND student	SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num
Keep the records that crs code of CLASS is ACCT-211 AND enroll grade of enroll is C	WHERE T1.crs_code = ACCT-211 AND T2.enroll_grade = C
Get stu fname of CLASS that has enroll AND student	SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num
Keep the records that crs code of CLASS is ACCT-211 AND enroll grade of enroll is C	WHERE T1.crs_code = ACCT-211 AND T2.enroll_grade = C
Get the number of employee	SELECT COUNT ( * ) FROM employee
Get the number of employee	SELECT COUNT ( * ) FROM employee
Get the number of professor	SELECT COUNT ( * ) FROM professor
Keep the records that prof high degree is Ph.D.	WHERE prof_high_degree = Ph.D.
Get the number of professor	SELECT COUNT ( * ) FROM professor
Keep the records that prof high degree is Ph.D.	WHERE prof_high_degree = Ph.D.
Get the number of CLASS that has enroll and course and department	SELECT COUNT ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code
Keep the records that dept name of department is Accounting	WHERE T4.dept_name = Accounting
Get the number of CLASS that has enroll and course and department	SELECT COUNT ( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code
Keep the records that dept name of department is Accounting	WHERE T4.dept_name = Accounting
Get dept name of CLASS that has enroll and course and department	SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code
Group the records based on dept code of course	GROUP BY T3.dept_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dept name of CLASS that has enroll and course and department	SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code
Group the records based on dept code of course	GROUP BY T3.dept_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dept name of department	SELECT dept_name FROM department
Order these records based on the dept name	ORDER BY dept_name 
Get dept name of department	SELECT dept_name FROM department
Order these records based on the dept name	ORDER BY dept_name 
Get CLASS code of	SELECT class_code FROM
Keep the records that CLASS room is KLR209	WHERE class_room = KLR209
Get CLASS code of	SELECT class_code FROM
Keep the records that CLASS room is KLR209	WHERE class_room = KLR209
Get emp fname of employee	SELECT emp_fname FROM employee
Keep the records that emp jobcode is PROF	WHERE emp_jobcode = PROF 
Order these records based on the emp dob	ORDER BY emp_dob 
Get emp fname of employee	SELECT emp_fname FROM employee
Keep the records that emp jobcode is PROF	WHERE emp_jobcode = PROF 
Order these records based on the emp dob	ORDER BY emp_dob 
Get emp fname and prof office of professor that has employee	SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num
Order these records based on the emp fname of employee	ORDER BY T2.emp_fname 
Get emp fname and prof office of professor that has employee	SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num
Order these records based on the emp fname of employee	ORDER BY T2.emp_fname 
Get emp fname and emp lname of employee	SELECT emp_fname , emp_lname FROM employee
Order these records based on the emp dob, and return the top 1 record	ORDER BY emp_dob LIMIT 1
Get emp fname and emp lname of employee	SELECT emp_fname , emp_lname FROM employee
Order these records based on the emp dob, and return the top 1 record	ORDER BY emp_dob LIMIT 1
Get stu fname and stu lname and stu gpa of student	SELECT stu_fname , stu_lname , stu_gpa FROM student
Keep the records that stu gpa is greater than 3	WHERE stu_gpa > 3 
Order these records based on the stu dob and sort them in descending order, and return the top 1 record	ORDER BY stu_dob DESC LIMIT 1
Get stu fname and stu lname and stu gpa of student	SELECT stu_fname , stu_lname , stu_gpa FROM student
Keep the records that stu gpa is greater than 3	WHERE stu_gpa > 3 
Order these records based on the stu dob and sort them in descending order, and return the top 1 record	ORDER BY stu_dob DESC LIMIT 1
Get stu fname of student that has enroll	SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Keep the records that enroll grade is C	WHERE enroll_grade = C
Get stu fname of student that has enroll	SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Keep the records that enroll grade is C	WHERE enroll_grade = C
Get dept name of professor that has department	SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of professor	GROUP BY T1.dept_code
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get dept name of professor that has department	SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of professor	GROUP BY T1.dept_code
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get dept name and dept code of professor that has department	SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that prof high degree of professor is Ph.D.	WHERE T1.prof_high_degree = Ph.D. 
Group the records based on dept code of professor	GROUP BY T1.dept_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dept name and dept code of professor that has department	SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that prof high degree of professor is Ph.D.	WHERE T1.prof_high_degree = Ph.D. 
Group the records based on dept code of professor	GROUP BY T1.dept_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get emp fname of employee	SELECT emp_fname FROM employee
Keep the records that emp jobcode is PROF	WHERE emp_jobcode = PROF
Get emp fname of employee that has CLASS	SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2
Get emp fname of employee	SELECT emp_fname FROM employee
Keep the records that emp jobcode is PROF	WHERE emp_jobcode = PROF
Get emp fname of employee that has CLASS	SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2
Get emp fname of employee that has professor and department	SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code
Keep the records that dept name of department is History	WHERE T3.dept_name = History
Get emp fname of employee that has CLASS	SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5
Get emp fname of employee that has professor and department	SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code
Keep the records that dept name of department is History	WHERE T3.dept_name = History
Get emp fname of employee that has CLASS	SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5
Get emp lname and prof office of employee that has professor and department	SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code
Keep the records that dept name of department is History	WHERE T3.dept_name = History
Get emp lname and prof office of employee that has professor and department	SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code
Keep the records that dept name of department is History	WHERE T3.dept_name = History
Get dept name and prof office of employee that has professor and department	SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code
Keep the records that emp lname of employee is Heffington	WHERE T1.emp_lname = Heffington
Get dept name and prof office of employee that has professor and department	SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code
Keep the records that emp lname of employee is Heffington	WHERE T1.emp_lname = Heffington
Get emp lname and emp hiredate of employee that has professor	SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num
Keep the records that prof office of professor is DRE 102	WHERE T2.prof_office = DRE 102
Get emp lname and emp hiredate of employee that has professor	SELECT T1.emp_lname , T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num
Keep the records that prof office of professor is DRE 102	WHERE T2.prof_office = DRE 102
Get crs code of CLASS that has enroll and student	SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num
Keep the records that stu lname of student is Smithson	WHERE T3.stu_lname = Smithson
Get crs code of CLASS that has enroll and student	SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num
Keep the records that stu lname of student is Smithson	WHERE T3.stu_lname = Smithson
Get crs description and crs credit of CLASS that has enroll and student and course	SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code
Keep the records that stu lname of student is Smithson	WHERE T3.stu_lname = Smithson
Get crs description and crs credit of CLASS that has enroll and student and course	SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code
Keep the records that stu lname of student is Smithson	WHERE T3.stu_lname = Smithson
Get the number of professor	SELECT COUNT ( * ) FROM professor
Keep the records that prof high degree is Ph.D. OR prof high degree is MA	WHERE prof_high_degree = Ph.D. OR prof_high_degree = MA
Get the number of professor	SELECT COUNT ( * ) FROM professor
Keep the records that prof high degree is Ph.D. OR prof high degree is MA	WHERE prof_high_degree = Ph.D. OR prof_high_degree = MA
Get the number of professor that has department	SELECT COUNT ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that dept name of department is Accounting OR dept name of department is Biology	WHERE T2.dept_name = Accounting OR T2.dept_name = Biology
Get the number of professor that has department	SELECT COUNT ( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that dept name of department is Accounting OR dept name of department is Biology	WHERE T2.dept_name = Accounting OR T2.dept_name = Biology
Get emp fname of employee that has CLASS	SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
Keep the records that crs code is CIS-220	WHERE crs_code = CIS-220
Get emp fname of employee that has CLASS	SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
Keep the records that crs code is QM-261	WHERE crs_code = QM-261
Get emp fname of employee that has CLASS	SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
Keep the records that crs code is CIS-220	WHERE crs_code = CIS-220
Get emp fname of employee that has CLASS	SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num
Keep the records that crs code is QM-261	WHERE crs_code = QM-261
Get stu fname of student that has enroll and CLASS and course and department	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code
Keep the records that dept name of department is Accounting	WHERE T5.dept_name = Accounting
Get stu fname of student that has enroll and CLASS and course and department	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code
Keep the records that dept name of department is Computer Info. Systems	WHERE T5.dept_name = Computer Info. Systems
Get stu fname of student that has enroll and CLASS and course and department	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code
Keep the records that dept name of department is Accounting	WHERE T5.dept_name = Accounting
Get stu fname of student that has enroll and CLASS and course and department	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code
Keep the records that dept name of department is Computer Info. Systems	WHERE T5.dept_name = Computer Info. Systems
Get the average value of stu gpa of enroll that has student and CLASS	SELECT AVG ( T2.stu_gpa ) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code
Keep the records that crs code of CLASS is ACCT-211	WHERE T3.crs_code = ACCT-211
Get the average value of stu gpa of enroll that has student and CLASS	SELECT AVG ( T2.stu_gpa ) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code
Keep the records that crs code of CLASS is ACCT-211	WHERE T3.crs_code = ACCT-211
Get stu gpa and stu phone and stu fname of student	SELECT stu_gpa , stu_phone , stu_fname FROM student
Order these records based on the stu gpa and sort them in descending order, and return the top 5 records	ORDER BY stu_gpa DESC LIMIT 5
Get stu gpa and stu phone and stu fname of student	SELECT stu_gpa , stu_phone , stu_fname FROM student
Order these records based on the stu gpa and sort them in descending order, and return the top 5 records	ORDER BY stu_gpa DESC LIMIT 5
Get dept name of student that has department	SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Order these records based on the stu gpa, and return the top 1 record	ORDER BY stu_gpa LIMIT 1
Get dept name of student that has department	SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Order these records based on the stu gpa, and return the top 1 record	ORDER BY stu_gpa LIMIT 1
Get the average value of stu gpa of student	SELECT AVG ( stu_gpa ) FROM student
Get stu fname and stu gpa of student	SELECT stu_fname , stu_gpa FROM student
Keep the records that stu gpa is less than the first query result	WHERE stu_gpa < ( the first query result ) 
Get the average value of stu gpa of student	SELECT AVG ( stu_gpa ) FROM student
Get stu fname and stu gpa of student	SELECT stu_fname , stu_gpa FROM student
Keep the records that stu gpa is less than the first query result	WHERE stu_gpa < ( the first query result ) 
Get dept name and dept address of student that has department	SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of student	GROUP BY T1.dept_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dept name and dept address of student that has department	SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of student	GROUP BY T1.dept_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and dept name and dept address of student that has department	SELECT T2.dept_name , T2.dept_address , COUNT ( * ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of student	GROUP BY T1.dept_code
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get the number and dept name and dept address of student that has department	SELECT T2.dept_name , T2.dept_address , COUNT ( * ) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Group the records based on dept code of student	GROUP BY T1.dept_code
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get emp fname AND prof office of employee that has professor AND department	SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code
Keep the records that dept name of department is History AND prof high degree of professor is Ph.D.	WHERE T3.dept_name = History AND T2.prof_high_degree = Ph.D.
Get emp fname AND prof office of employee that has professor AND department	SELECT T1.emp_fname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code
Keep the records that dept name of department is History AND prof high degree of professor is Ph.D.	WHERE T3.dept_name = History AND T2.prof_high_degree = Ph.D.
Get emp fname and crs code of CLASS that has employee	SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2
Get emp fname and crs code of CLASS that has employee	SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2
Get emp fname and crs description of CLASS that has employee and course	SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3
Get emp fname and crs description of CLASS that has employee and course	SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3
Get emp fname and prof office and crs description of CLASS that has employee and course and professor	SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4
Get emp fname and prof office and crs description of CLASS that has employee and course and professor	SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4
Get emp fname and prof office and crs description and dept name of CLASS that has employee and course and professor and department	SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5
Get emp fname and prof office and crs description and dept name of CLASS that has employee and course and professor and department	SELECT T2.emp_fname , T4.prof_office , T3.crs_description , T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5
Get stu fname and stu lname and crs description of student that has enroll and CLASS and course	SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4
Get stu fname and stu lname and crs description of student that has enroll and CLASS and course	SELECT T1.stu_fname , T1.stu_lname , T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4
Get stu fname and stu lname of student that has enroll	SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Keep the records that enroll grade of enroll is C OR enroll grade of enroll is A	WHERE T2.enroll_grade = C OR T2.enroll_grade = A
Get stu fname and stu lname of student that has enroll	SELECT T1.stu_fname , T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Keep the records that enroll grade of enroll is C OR enroll grade of enroll is A	WHERE T2.enroll_grade = C OR T2.enroll_grade = A
Get emp fname and CLASS room of CLASS that has employee and professor and department	SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code
Keep the records that dept name of department is Accounting	WHERE T4.dept_name = Accounting
Get emp fname and CLASS room of CLASS that has employee and professor and department	SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code
Keep the records that dept name of department is Accounting	WHERE T4.dept_name = Accounting
Get emp fname and prof high degree of CLASS that has employee and professor and department	SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code
Keep the records that dept name of department is Computer Info. Systems	WHERE T4.dept_name = Computer Info. Systems
Get emp fname and prof high degree of CLASS that has employee and professor and department	SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code
Keep the records that dept name of department is Computer Info. Systems	WHERE T4.dept_name = Computer Info. Systems
Get stu lname of student that has enroll	SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Keep the records that enroll grade of enroll is A AND class code of enroll is 10018	WHERE T2.enroll_grade = A AND T2.class_code = 10018
Get stu lname of student that has enroll	SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Keep the records that enroll grade of enroll is A AND class code of enroll is 10018	WHERE T2.enroll_grade = A AND T2.class_code = 10018
Get emp fname AND prof office of professor that has employee AND department	SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code
Keep the records that dept name of department is History AND prof high degree of professor is not Ph.D.	WHERE T3.dept_name = History AND T1.prof_high_degree != Ph.D.
Get emp fname AND prof office of professor that has employee AND department	SELECT T2.emp_fname , T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code
Keep the records that dept name of department is History AND prof high degree of professor is not Ph.D.	WHERE T3.dept_name = History AND T1.prof_high_degree != Ph.D.
Get emp fname of CLASS that has employee	SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
Group the records based on the number prof num of CLASS 1 that the number is greater than 1	GROUP BY T1.prof_num HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get emp fname of CLASS that has employee	SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num
Group the records based on the number prof num of CLASS 1 that the number is greater than 1	GROUP BY T1.prof_num HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get stu fname of student that has enroll	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Group the records based on the number stu num of enroll 1 that the number is 1	GROUP BY T2.stu_num HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get stu fname of student that has enroll	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num
Group the records based on the number stu num of enroll 1 that the number is 1	GROUP BY T2.stu_num HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get dept name of course that has department	SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that crs description of course is in the form of %Statistics%	WHERE T1.crs_description LIKE %Statistics%
Get dept name of course that has department	SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code
Keep the records that crs description of course is in the form of %Statistics%	WHERE T1.crs_description LIKE %Statistics%
Get stu fname of student that has enroll AND CLASS	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code
Keep the records that crs code of CLASS is ACCT-211 AND stu lname of student is in the form of S%	WHERE T3.crs_code = ACCT-211 AND T1.stu_lname LIKE S%
Get stu fname of student that has enroll AND CLASS	SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code
Keep the records that crs code of CLASS is ACCT-211 AND stu lname of student is in the form of S%	WHERE T3.crs_code = ACCT-211 AND T1.stu_lname LIKE S%
Get the number of club	SELECT COUNT ( * ) FROM club
Get the number of club	SELECT COUNT ( * ) FROM club
Get Region of club	SELECT DISTINCT Region FROM club
Order these records based on the Region and sort them in ascending ORDER	ORDER BY Region ASC 
Get Region of club	SELECT DISTINCT Region FROM club
Order these records based on the Region and sort them in ascending ORDER	ORDER BY Region ASC 
Get the average value of Gold of club rank	SELECT AVG ( Gold ) FROM club_rank
Get the average value of Gold of club rank	SELECT AVG ( Gold ) FROM club_rank
Get Competition type and Country of competition	SELECT Competition_type , Country FROM competition
Get Competition type and Country of competition	SELECT Competition_type , Country FROM competition
Get of competition	SELECT DISTINCT YEAR FROM competition
Keep the records that Competition type is not Tournament	WHERE Competition_type != Tournament
Get of competition	SELECT DISTINCT YEAR FROM competition
Keep the records that Competition type is not Tournament	WHERE Competition_type != Tournament
Get the maximum value of Silver and the minimum value of Silver of club rank	SELECT MAX ( Silver ) , MIN ( Silver ) FROM club_rank
Get the maximum value of Silver and the minimum value of Silver of club rank	SELECT MAX ( Silver ) , MIN ( Silver ) FROM club_rank
Get the number of club rank	SELECT COUNT ( * ) FROM club_rank
Keep the records that Total is less than 10	WHERE Total < 10
Get the number of club rank	SELECT COUNT ( * ) FROM club_rank
Keep the records that Total is less than 10	WHERE Total < 10
Get name of club	SELECT name FROM club
Order these records based on the Start year and sort them in ascending ORDER	ORDER BY Start_year ASC 
Get name of club	SELECT name FROM club
Order these records based on the Start year and sort them in ascending ORDER	ORDER BY Start_year ASC 
Get name of club	SELECT name FROM club
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name of club	SELECT name FROM club
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name and Player id of club that has player	SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2
Get name and Player id of club that has player	SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2
Get name of club that has player	SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
Keep the records that Position of player is Right Wing	WHERE T2.Position = Right Wing
Get name of club that has player	SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
Keep the records that Position of player is Right Wing	WHERE T2.Position = Right Wing
Get the average value of Points of club that has player	SELECT AVG ( T2.Points ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
Keep the records that name of club is AIB	WHERE T1.name = AIB
Get the average value of Points of club that has player	SELECT AVG ( T2.Points ) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID
Keep the records that name of club is AIB	WHERE T1.name = AIB
Get the average value of Points of player	SELECT POSITION , AVG ( Points ) FROM player
Group the records based on	GROUP BY
Get the average value of Points of player	SELECT POSITION , AVG ( Points ) FROM player
Group the records based on	GROUP BY
Get of player	SELECT POSITION FROM player
Group the records based on the average value of Points name 20 that the average value of Points is greater than or equal to 20	GROUP BY name HAVING AVG ( Points ) >= 20 HAVING AVG ( Points ) >= 20
Get of player	SELECT POSITION FROM player
Group the records based on the average value of Points name 20 that the average value of Points is greater than or equal to 20	GROUP BY name HAVING AVG ( Points ) >= 20 HAVING AVG ( Points ) >= 20
Get the number and Competition type of competition	SELECT Competition_type , COUNT ( * ) FROM competition
Group the records based on Competition type	GROUP BY Competition_type
Get the number and Competition type of competition	SELECT Competition_type , COUNT ( * ) FROM competition
Group the records based on Competition type	GROUP BY Competition_type
Get Competition type of competition	SELECT Competition_type FROM competition
Group the records based on Competition type	GROUP BY Competition_type
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Competition type of competition	SELECT Competition_type FROM competition
Group the records based on Competition type	GROUP BY Competition_type
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Competition type of competition	SELECT Competition_type FROM competition
Group the records based on the number Competition type 5 that the number is less than or equal to 5	GROUP BY Competition_type HAVING COUNT ( * ) <= 5 HAVING COUNT ( * ) <= 5
Get Competition type of competition	SELECT Competition_type FROM competition
Group the records based on the number Competition type 5 that the number is less than or equal to 5	GROUP BY Competition_type HAVING COUNT ( * ) <= 5 HAVING COUNT ( * ) <= 5
Get Club ID of player	SELECT Club_ID FROM player
Get name of CLub	SELECT name FROM CLub
Keep the records that Club ID is not in the first query result	WHERE Club_ID NOT IN ( the first query result ) 
Get Club ID of player	SELECT Club_ID FROM player
Get name of CLub	SELECT name FROM CLub
Keep the records that Club ID is not in the first query result	WHERE Club_ID NOT IN ( the first query result ) 
Get of player	SELECT POSITION FROM player
Keep the records that Points is greater than 20	WHERE Points > 20
Get of player	SELECT POSITION FROM player
Keep the records that Points is less than 10	WHERE Points < 10
Get of player	SELECT POSITION FROM player
Keep the records that Points is greater than 20	WHERE Points > 20
Get of player	SELECT POSITION FROM player
Keep the records that Points is less than 10	WHERE Points < 10
Get the SUM of Points of player	SELECT SUM ( Points ) FROM player
Get the SUM of Points of player	SELECT SUM ( Points ) FROM player
Get the number of distinct POSITION of player	SELECT COUNT ( DISTINCT POSITION ) FROM player
Get the number of distinct POSITION of player	SELECT COUNT ( DISTINCT POSITION ) FROM player
Get the average value of points of player	SELECT AVG ( points ) FROM player
Get name of player	SELECT name FROM player
Keep the records that points is greater than the first query result	WHERE points > ( the first query result ) 
Get the average value of points of player	SELECT AVG ( points ) FROM player
Get name of player	SELECT name FROM player
Keep the records that points is greater than the first query result	WHERE points > ( the first query result ) 
Get the number of player	SELECT COUNT ( * ) , POSITION FROM player
Keep the records that points is less than 30	WHERE points < 30 
Group the records based on	GROUP BY
Get the number of player	SELECT COUNT ( * ) , POSITION FROM player
Keep the records that points is less than 30	WHERE points < 30 
Group the records based on	GROUP BY
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Tournament	WHERE competition_type = Tournament 
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Tournament	WHERE competition_type = Tournament 
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Friendly	WHERE competition_type = Friendly
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Tournament	WHERE competition_type = Tournament
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Friendly	WHERE competition_type = Friendly
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Tournament	WHERE competition_type = Tournament
Get country of competition	SELECT country FROM competition
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Friendly	WHERE competition_type = Friendly
Get country of competition	SELECT country FROM competition
Get country of competition	SELECT country FROM competition
Keep the records that competition type is Friendly	WHERE competition_type = Friendly
Get the SUM of num of component of furniture	SELECT SUM ( num_of_component ) FROM furniture
Get name and furniture id of furniture	SELECT name , furniture_id FROM furniture
Order these records based on the market rate and sort them in descending order, and return the top 1 record	ORDER BY market_rate DESC LIMIT 1
Get the SUM of market rate of furniture	SELECT SUM ( market_rate ) FROM furniture
Order these records based on the market rate and sort them in descending order, and return the top 2 records	ORDER BY market_rate DESC LIMIT 2
Get Num of Component and name of furniture	SELECT Num_of_Component , name FROM furniture
Keep the records that Num of Component is greater than 10	WHERE Num_of_Component > 10
Get name and Num of Component of furniture	SELECT name , Num_of_Component FROM furniture
Order these records based on the market rate, and return the top 1 record	ORDER BY market_rate LIMIT 1
Get the maximum value of Price in Dollar of furniture manufacte	SELECT MAX ( Price_in_Dollar ) FROM furniture_manufacte
Get name of furniture that has furniture manufacte	SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID
Keep the records that Price in Dollar of furniture manufacte is less than the first query result	WHERE t2.Price_in_Dollar < ( the first query result ) 
Get open year and name of manufacturer	SELECT open_year , name FROM manufacturer
Order these records based on the num of shops and sort them in descending order, and return the top 1 record	ORDER BY num_of_shops DESC LIMIT 1
Get the average value of Num of Factories of manufacturer	SELECT AVG ( Num_of_Factories ) FROM manufacturer
Keep the records that num of shops is greater than 20	WHERE num_of_shops > 20
Get name and manufacturer id of manufacturer	SELECT name , manufacturer_id FROM manufacturer
Order these records based on the open year	ORDER BY open_year 
Get name and open year of manufacturer	SELECT name , open_year FROM manufacturer
Keep the records that num of shops is greater than 10 OR Num of Factories is less than 10	WHERE num_of_shops > 10 OR Num_of_Factories < 10
Get the maximum value of num of shops and the average value of Num of Factories of manufacturer	SELECT MAX ( num_of_shops ) , AVG ( Num_of_Factories ) FROM manufacturer
Keep the records that open year is less than 1990	WHERE open_year < 1990
Get manufacturer id and num of shops of manufacturer that has furniture manufacte	SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id
Order these records based on the Price in Dollar of furniture manufacte and sort them in descending order, and return the top 1 record	ORDER BY t2.Price_in_Dollar DESC LIMIT 1
Get the number and name of manufacturer that has furniture manufacte	SELECT COUNT ( * ) , t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id
Group the records based on manufacturer id of manufacturer	GROUP BY t1.manufacturer_id
Get name and price in dollar of furniture that has furniture manufacte	SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2
Get Furniture ID of furniture manufacte	SELECT Furniture_ID FROM furniture_manufacte
Get Market Rate and name of furniture	SELECT Market_Rate , name FROM furniture
Keep the records that Furniture ID is not in the first query result	WHERE Furniture_ID NOT IN ( the first query result ) 
Get name of furniture that has furniture manufacte and manufacturer	SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id
Keep the records that num of component of furniture is less than 6	WHERE t1.num_of_component < 6
Get name of furniture that has furniture manufacte and manufacturer	SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id
Keep the records that num of component of furniture is greater than 10	WHERE t1.num_of_component > 10
Get first name and department name of employees that has departments	SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2
Get first name and department name of employees that has departments	SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2
Get first name and last name and salary of employees	SELECT first_name , last_name , salary FROM employees
Keep the records that salary is less than 6000	WHERE salary < 6000
Get first name and last name and salary of employees	SELECT first_name , last_name , salary FROM employees
Keep the records that salary is less than 6000	WHERE salary < 6000
Get first name and department id of employees	SELECT first_name , department_id FROM employees
Keep the records that last name is McEwen	WHERE last_name = McEwen
Get first name and department id of employees	SELECT first_name , department_id FROM employees
Keep the records that last name is McEwen	WHERE last_name = McEwen
Get all of employees	SELECT * FROM employees
Keep the records that department id is null	WHERE department_id = null
Get all of employees	SELECT * FROM employees
Keep the records that department id is null	WHERE department_id = null
Get all of departments	SELECT * FROM departments
Keep the records that department name is Marketing	WHERE department_name = Marketing
Get all of departments	SELECT * FROM departments
Keep the records that department name is Marketing	WHERE department_name = Marketing
Get hire date of employees	SELECT hire_date FROM employees
Keep the records that first name is not in the form of %M%	WHERE first_name NOT LIKE %M%
Get hire date of employees	SELECT hire_date FROM employees
Keep the records that first name is not in the form of %M%	WHERE first_name NOT LIKE %M%
Get first name and last name and hire date and salary and department id of employees	SELECT first_name , last_name , hire_date , salary , department_id FROM employees
Keep the records that first name is not in the form of %M%	WHERE first_name NOT LIKE %M%
Get first name and last name and hire date and salary and department id of employees	SELECT first_name , last_name , hire_date , salary , department_id FROM employees
Keep the records that first name is not in the form of %M%	WHERE first_name NOT LIKE %M%
Get first name and last name and hire date and salary and department id of employees	SELECT first_name , last_name , hire_date , salary , department_id FROM employees
Keep the records that first name is not in the form of %M%	WHERE first_name NOT LIKE %M% 
Order these records based on the department id	ORDER BY department_id 
Get first name and last name and hire date and salary and department id of employees	SELECT first_name , last_name , hire_date , salary , department_id FROM employees
Keep the records that first name is not in the form of %M%	WHERE first_name NOT LIKE %M% 
Order these records based on the department id	ORDER BY department_id 
Get phone number of employees	SELECT phone_number FROM employees
Keep the records that salary is between 800 X12000	WHERE salary BETWEEN 8000 AND 12000
Get phone number of employees	SELECT phone_number FROM employees
Keep the records that salary is between 800 X12000	WHERE salary BETWEEN 8000 AND 12000
Get all of employees	SELECT * FROM employees
Keep the records that salary is between 800 X12000 AND commission pct is not null OR department id is not 40	WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != null OR department_id != 40
Get all of employees	SELECT * FROM employees
Keep the records that salary is between 800 X12000 AND commission pct is not null OR department id is not 40	WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != null OR department_id != 40
Get first name and last name and salary of employees	SELECT first_name , last_name , salary FROM employees
Keep the records that commission pct is null	WHERE commission_pct = null
Get first name and last name and salary of employees	SELECT first_name , last_name , salary FROM employees
Keep the records that commission pct is null	WHERE commission_pct = null
Get first name and last name and salary of employees	SELECT first_name , last_name , salary FROM employees
Keep the records that first name is in the form of %m	WHERE first_name LIKE %m
Get first name and last name and salary of employees	SELECT first_name , last_name , salary FROM employees
Keep the records that first name is in the form of %m	WHERE first_name LIKE %m
Get job id AND hire date of employees	SELECT job_id , hire_date FROM employees
Keep the records that hire date is between 2007-11-05 AND 2009-07-05	WHERE hire_date BETWEEN 2007-11-05 AND 2009-07-05
Get job id AND hire date of employees	SELECT job_id , hire_date FROM employees
Keep the records that hire date is between 2007-11-05 AND 2009-07-05	WHERE hire_date BETWEEN 2007-11-05 AND 2009-07-05
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Keep the records that department id is 70 OR department id is 90	WHERE department_id = 70 OR department_id = 90
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Keep the records that department id is 70 OR department id is 90	WHERE department_id = 70 OR department_id = 90
Get salary and manager id of employees	SELECT salary , manager_id FROM employees
Keep the records that manager id is not null	WHERE manager_id != null
Get salary and manager id of employees	SELECT salary , manager_id FROM employees
Keep the records that manager id is not null	WHERE manager_id != null
Get all of employees	SELECT * FROM employees
Keep the records that hire date is less than 2002-06-21	WHERE hire_date < 2002-06-21
Get all of employees	SELECT * FROM employees
Keep the records that hire date is less than 2002-06-21	WHERE hire_date < 2002-06-21
Get all of employees	SELECT * FROM employees
Keep the records that first name is in the form of %D% OR first name is in the form of %S%	WHERE first_name LIKE %D% OR first_name LIKE %S% 
Order these records based on the salary and sort them in descending ORDER	ORDER BY salary DESC 
Get all of employees	SELECT * FROM employees
Keep the records that first name is in the form of %D% OR first name is in the form of %S%	WHERE first_name LIKE %D% OR first_name LIKE %S% 
Order these records based on the salary and sort them in descending ORDER	ORDER BY salary DESC 
Get all of employees	SELECT * FROM employees
Keep the records that hire date is greater than 1987-09-07	WHERE hire_date > 1987-09-07
Get all of employees	SELECT * FROM employees
Keep the records that hire date is greater than 1987-09-07	WHERE hire_date > 1987-09-07
Get job title of jobs	SELECT job_title FROM jobs
Keep the records that min salary is greater than 9000	WHERE min_salary > 9000
Get job title of jobs	SELECT job_title FROM jobs
Keep the records that min salary is greater than 9000	WHERE min_salary > 9000
Get job title AND max salary AND min salary of jobs	SELECT job_title , max_salary - min_salary FROM jobs
Keep the records that max salary is between 1200 X18000	WHERE max_salary BETWEEN 12000 AND 18000
Get job title AND max salary AND min salary of jobs	SELECT job_title , max_salary - min_salary FROM jobs
Keep the records that max salary is between 1200 X18000	WHERE max_salary BETWEEN 12000 AND 18000
Get email of employees	SELECT email FROM employees
Keep the records that commission pct is null AND salary is between 700 X12000 AND department id is 50	WHERE commission_pct = null AND salary BETWEEN 7000 AND 12000 AND department_id = 50
Get email of employees	SELECT email FROM employees
Keep the records that commission pct is null AND salary is between 700 X12000 AND department id is 50	WHERE commission_pct = null AND salary BETWEEN 7000 AND 12000 AND department_id = 50
Get the maximum value of end date and employee id of job history	SELECT employee_id , MAX ( end_date ) FROM job_history
Group the records based on employee id	GROUP BY employee_id
Get the maximum value of end date and employee id of job history	SELECT employee_id , MAX ( end_date ) FROM job_history
Group the records based on employee id	GROUP BY employee_id
Get department id of employees	SELECT department_id FROM employees
Group the records based on the number of commission pct department id 10 that the number of commission pct is greater than 10	GROUP BY department_id HAVING COUNT ( commission_pct ) > 10 HAVING COUNT ( commission_pct ) > 10
Get department id of employees	SELECT department_id FROM employees
Group the records based on the number of commission pct department id 10 that the number of commission pct is greater than 10	GROUP BY department_id HAVING COUNT ( commission_pct ) > 10 HAVING COUNT ( commission_pct ) > 10
Get department id of employees	SELECT DISTINCT department_id FROM employees
Group the records based on the number of employee id department id manager id 4 that the number of employee id is greater than or equal to 4	GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4 HAVING COUNT ( employee_id ) >= 4
Get department id of employees	SELECT DISTINCT department_id FROM employees
Group the records based on the number of employee id department id manager id 4 that the number of employee id is greater than or equal to 4	GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4 HAVING COUNT ( employee_id ) >= 4
Get the average value of salary and department id of employees	SELECT department_id , AVG ( salary ) FROM employees
Keep the records that commission pct is not null	WHERE commission_pct != null 
Group the records based on department id	GROUP BY department_id
Get the average value of salary and department id of employees	SELECT department_id , AVG ( salary ) FROM employees
Keep the records that commission pct is not null	WHERE commission_pct != null 
Group the records based on department id	GROUP BY department_id
Get the number and country id of locations	SELECT country_id , COUNT ( * ) FROM locations
Group the records based on country id	GROUP BY country_id
Get the number and country id of locations	SELECT country_id , COUNT ( * ) FROM locations
Group the records based on country id	GROUP BY country_id
Get job id of job history	SELECT job_id FROM job_history
Keep the records that end date start date is greater than 300	WHERE end_date - start_date > 300 
Group the records based on the number job id 2 that the number is greater than or equal to 2	GROUP BY job_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get job id of job history	SELECT job_id FROM job_history
Keep the records that end date start date is greater than 300	WHERE end_date - start_date > 300 
Group the records based on the number job id 2 that the number is greater than or equal to 2	GROUP BY job_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get employee id of job history	SELECT employee_id FROM job_history
Group the records based on the number employee id 2 that the number is greater than or equal to 2	GROUP BY employee_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get employee id of job history	SELECT employee_id FROM job_history
Group the records based on the number employee id 2 that the number is greater than or equal to 2	GROUP BY employee_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get employee id and country name of employees that has departments and locations and countries	SELECT T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4
Get employee id and country name of employees that has departments and locations and countries	SELECT T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4
Get the number and department name of employees that has departments	SELECT T2.department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Group the records based on department name of departments	GROUP BY T2.department_name
Get the number and department name of employees that has departments	SELECT T2.department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Group the records based on department name of departments	GROUP BY T2.department_name
Get all of job history that has employees	SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id
Keep the records that salary of employees is greater than or equal to 12000	WHERE T2.salary >= 12000
Get all of job history that has employees	SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id
Keep the records that salary of employees is greater than or equal to 12000	WHERE T2.salary >= 12000
Get the average value of salary and job title of employees that has jobs	SELECT job_title , AVG ( salary ) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id
Group the records based on job title of jobs	GROUP BY T2.job_title
Get the average value of salary and job title of employees that has jobs	SELECT job_title , AVG ( salary ) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id
Group the records based on job title of jobs	GROUP BY T2.job_title
Get salary of employees	SELECT salary FROM employees
Keep the records that employee id is 163	WHERE employee_id = 163
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get salary of employees	SELECT salary FROM employees
Keep the records that employee id is 163	WHERE employee_id = 163
Get first name and last name of employees	SELECT first_name , last_name FROM employees
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the minimum value of salary and department id of employees	SELECT MIN ( salary ) , department_id FROM employees
Group the records based on department id	GROUP BY department_id
Get the minimum value of salary and department id of employees	SELECT MIN ( salary ) , department_id FROM employees
Group the records based on department id	GROUP BY department_id
Get the minimum value of salary of employees	SELECT MIN ( salary ) FROM employees
Group the records based on department id	GROUP BY department_id
Get first name and last name and department id of employees	SELECT first_name , last_name , department_id FROM employees
Keep the records that salary is in the first query result	WHERE salary IN ( the first query result ) 
Get the minimum value of salary of employees	SELECT MIN ( salary ) FROM employees
Group the records based on department id	GROUP BY department_id
Get first name and last name and department id of employees	SELECT first_name , last_name , department_id FROM employees
Keep the records that salary is in the first query result	WHERE salary IN ( the first query result ) 
Get the average value of salary of employees	SELECT AVG ( salary ) FROM employees
Get employee id of employees	SELECT employee_id FROM employees
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the average value of salary of employees	SELECT AVG ( salary ) FROM employees
Get employee id of employees	SELECT employee_id FROM employees
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get employee id of employees	SELECT employee_id FROM employees
Keep the records that first name is Payam	WHERE first_name = Payam
Get employee id and salary of employees	SELECT employee_id , salary FROM employees
Keep the records that manager id is the first query result	WHERE manager_id = ( the first query result ) 
Get employee id of employees	SELECT employee_id FROM employees
Keep the records that first name is Payam	WHERE first_name = Payam
Get employee id and salary of employees	SELECT employee_id , salary FROM employees
Keep the records that manager id is the first query result	WHERE manager_id = ( the first query result ) 
Get department name of employees that has departments	SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2
Get department name of employees that has departments	SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2
Get all of employees that has departments	SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Keep the records that employee id of employees is manager id of departments	WHERE T1.employee_id = T2.manager_id
Get all of employees that has departments	SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Keep the records that employee id of employees is manager id of departments	WHERE T1.employee_id = T2.manager_id
Get all of departments	SELECT * FROM departments
Keep the records that department name is Marketing	WHERE department_name = Marketing
Get all of departments	SELECT * FROM departments
Keep the records that department name is Marketing	WHERE department_name = Marketing
Get employee id of job history	SELECT employee_id FROM job_history
Group the records based on the number employee id 2 that the number is greater than or equal to 2	GROUP BY employee_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get employee id of job history	SELECT employee_id FROM job_history
Group the records based on the number employee id 2 that the number is greater than or equal to 2	GROUP BY employee_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get department id of employees	SELECT DISTINCT department_id FROM employees
Group the records based on the number of employee id department id manager id 4 that the number of employee id is greater than or equal to 4	GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4 HAVING COUNT ( employee_id ) >= 4
Get department id of employees	SELECT DISTINCT department_id FROM employees
Group the records based on the number of employee id department id manager id 4 that the number of employee id is greater than or equal to 4	GROUP BY department_id , manager_id HAVING COUNT ( employee_id ) >= 4 HAVING COUNT ( employee_id ) >= 4
Get job id of employees	SELECT job_id FROM employees
Group the records based on the average value of salary job id 8000 that the average value of salary is greater than 8000	GROUP BY job_id HAVING AVG ( salary ) > 8000 HAVING AVG ( salary ) > 8000
Get job id of employees	SELECT job_id FROM employees
Group the records based on the average value of salary job id 8000 that the average value of salary is greater than 8000	GROUP BY job_id HAVING AVG ( salary ) > 8000 HAVING AVG ( salary ) > 8000
Get employee id and job title of employees that has jobs	SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id
Keep the records that department id of employees is 80	WHERE T1.department_id = 80
Get employee id and job title of employees that has jobs	SELECT T1.employee_id , T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id
Keep the records that department id of employees is 80	WHERE T1.department_id = 80
Get first name and job id of employees that has departments	SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Keep the records that department name of departments is Finance	WHERE T2.department_name = Finance
Get first name and job id of employees that has departments	SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Keep the records that department name of departments is Finance	WHERE T2.department_name = Finance
Get the minimum value of salary of employees	SELECT MIN ( salary ) FROM employees
Get all of employees	SELECT * FROM employees
Keep the records that salary is between the first query result AND 2500	WHERE salary BETWEEN ( the first query result )  AND 2500
Get the minimum value of salary of employees	SELECT MIN ( salary ) FROM employees
Get all of employees	SELECT * FROM employees
Keep the records that salary is between the first query result AND 2500	WHERE salary BETWEEN ( the first query result )  AND 2500
Get department id of departments	SELECT department_id FROM departments
Keep the records that manager id is between 10 X200	WHERE manager_id BETWEEN 100 AND 200
Get all of employees	SELECT * FROM employees
Keep the records that department id is not in the first query result	WHERE department_id NOT IN ( the first query result ) 
Get department id of departments	SELECT department_id FROM departments
Keep the records that manager id is between 10 X200	WHERE manager_id BETWEEN 100 AND 200
Get all of employees	SELECT * FROM employees
Keep the records that department id is not in the first query result	WHERE department_id NOT IN ( the first query result ) 
Get department id of employees	SELECT department_id FROM employees
Keep the records that first name is Clara	WHERE first_name = Clara
Get first name and last name and hire date of employees	SELECT first_name , last_name , hire_date FROM employees
Keep the records that department id is the first query result	WHERE department_id = ( the first query result ) 
Get department id of employees	SELECT department_id FROM employees
Keep the records that first name is Clara	WHERE first_name = Clara
Get first name and last name and hire date of employees	SELECT first_name , last_name , hire_date FROM employees
Keep the records that department id is the first query result	WHERE department_id = ( the first query result ) 
Get department id of employees	SELECT department_id FROM employees
Keep the records that first name is Clara	WHERE first_name = Clara
Get first name AND last name AND hire date of employees	SELECT first_name , last_name , hire_date FROM employees
Keep the records that department id is the first query result AND first name is not Clara	WHERE department_id = ( the first query result )  AND first_name != Clara
Get department id of employees	SELECT department_id FROM employees
Keep the records that first name is Clara	WHERE first_name = Clara
Get first name AND last name AND hire date of employees	SELECT first_name , last_name , hire_date FROM employees
Keep the records that department id is the first query result AND first name is not Clara	WHERE department_id = ( the first query result )  AND first_name != Clara
Get department id of employees	SELECT department_id FROM employees
Keep the records that first name is in the form of %T%	WHERE first_name LIKE %T%
Get employee id and first name and last name of employees	SELECT employee_id , first_name , last_name FROM employees
Keep the records that department id is in the first query result	WHERE department_id IN ( the first query result ) 
Get department id of employees	SELECT department_id FROM employees
Keep the records that first name is in the form of %T%	WHERE first_name LIKE %T%
Get employee id and first name and last name of employees	SELECT employee_id , first_name , last_name FROM employees
Keep the records that department id is in the first query result	WHERE department_id IN ( the first query result ) 
Get the average value of salary of employees	SELECT AVG ( salary ) FROM employees
Get employee id AND first name AND last name AND salary of employees	SELECT employee_id , first_name , last_name , salary FROM employees
Keep the records that salary is greater than the first query result AND department id is in SELECT department id FROM employees WHERE first name %J%	WHERE salary > ( the first query result )  AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE %J% )
Get the average value of salary of employees	SELECT AVG ( salary ) FROM employees
Get employee id AND first name AND last name AND salary of employees	SELECT employee_id , first_name , last_name , salary FROM employees
Keep the records that salary is greater than the first query result AND department id is in SELECT department id FROM employees WHERE first name %J%	WHERE salary > ( the first query result )  AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE %J% )
Get the minimum value of salary of employees	SELECT MIN ( salary ) FROM employees
Keep the records that job id is MK_MAN	WHERE job_id = MK_MAN
Get employee id and job id of employees	SELECT employee_id , job_id FROM employees
Keep the records that salary is less than the first query result	WHERE salary < ( the first query result ) 
Get the minimum value of salary of employees	SELECT MIN ( salary ) FROM employees
Keep the records that job id is MK_MAN	WHERE job_id = MK_MAN
Get employee id and job id of employees	SELECT employee_id , job_id FROM employees
Keep the records that salary is less than the first query result	WHERE salary < ( the first query result ) 
Get the maximum value of salary of employees	SELECT MAX ( salary ) FROM employees
Keep the records that job id is PU_MAN	WHERE job_id = PU_MAN
Get employee id and first name and last name and job id of employees	SELECT employee_id , first_name , last_name , job_id FROM employees
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the maximum value of salary of employees	SELECT MAX ( salary ) FROM employees
Keep the records that job id is PU_MAN	WHERE job_id = PU_MAN
Get employee id and first name and last name and job id of employees	SELECT employee_id , first_name , last_name , job_id FROM employees
Keep the records that salary is greater than the first query result	WHERE salary > ( the first query result ) 
Get the SUM of salary and department id of employees	SELECT department_id , SUM ( salary ) FROM employees
Group the records based on the number department id 2 that the number is greater than or equal to 2	GROUP BY department_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the SUM of salary and department id of employees	SELECT department_id , SUM ( salary ) FROM employees
Group the records based on the number department id 2 that the number is greater than or equal to 2	GROUP BY department_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get employee id of job history	SELECT employee_id FROM job_history
Get all of employees	SELECT * FROM employees
Keep the records that employee id is not in the first query result	WHERE employee_id NOT IN ( the first query result ) 
Get employee id of job history	SELECT employee_id FROM job_history
Get all of employees	SELECT * FROM employees
Keep the records that employee id is not in the first query result	WHERE employee_id NOT IN ( the first query result ) 
Get the maximum value of salary and first name and last name and salary and department id of employees	SELECT first_name , last_name , salary , department_id , MAX ( salary ) FROM employees
Group the records based on department id	GROUP BY department_id
Get the maximum value of salary and first name and last name and salary and department id of employees	SELECT first_name , last_name , salary , department_id , MAX ( salary ) FROM employees
Group the records based on department id	GROUP BY department_id
Get first name and last name and department name and city and state province of employees that has departments and locations	SELECT T1.first_name , T1.last_name , T2.department_name , T3.city , T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3
Get first name and last name and department name and city and state province of employees that has departments and locations	SELECT T1.first_name , T1.last_name , T2.department_name , T3.city , T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3
Get first name and last name and city of employees that has departments and locations	SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
Keep the records that first name of employees is in the form of %z%	WHERE T1.first_name LIKE %z%
Get first name and last name and city of employees that has departments and locations	SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
Keep the records that first name of employees is in the form of %z%	WHERE T1.first_name LIKE %z%
Get department name and city and state province of departments that has locations	SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2
Get department name and city and state province of departments that has locations	SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2
Get first name and last name and employee id and country name of employees that has departments and locations and countries	SELECT T1.first_name , T1.last_name , T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4
Get first name and last name and employee id and country name of employees that has departments and locations and countries	SELECT T1.first_name , T1.last_name , T1.employee_id , T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4
Get the number and department name of employees that has departments	SELECT department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Group the records based on department name	GROUP BY department_name
Get the number and department name of employees that has departments	SELECT department_name , COUNT ( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id
Group the records based on department name	GROUP BY department_name
Get first name and last name and salary of employees that has departments and locations	SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
Keep the records that city of locations is London	WHERE T3.city = London
Get first name and last name and salary of employees that has departments and locations	SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id
Keep the records that city of locations is London	WHERE T3.city = London
Get song name and releasedate of song	SELECT song_name , releasedate FROM song
Order these records based on the releasedate and sort them in descending order, and return the top 1 record	ORDER BY releasedate DESC LIMIT 1
Get song name and releasedate of song	SELECT song_name , releasedate FROM song
Order these records based on the releasedate and sort them in descending order, and return the top 1 record	ORDER BY releasedate DESC LIMIT 1
Get f id of files	SELECT f_id FROM files
Order these records based on the duration and sort them in descending order, and return the top 1 record	ORDER BY duration DESC LIMIT 1
Get f id of files	SELECT f_id FROM files
Order these records based on the duration and sort them in descending order, and return the top 1 record	ORDER BY duration DESC LIMIT 1
Get song name of song	SELECT song_name FROM song
Keep the records that languages is english	WHERE languages = english
Get song name of song	SELECT song_name FROM song
Keep the records that languages is english	WHERE languages = english
Get f id of files	SELECT f_id FROM files
Keep the records that formats is mp3	WHERE formats = mp3
Get f id of files	SELECT f_id FROM files
Keep the records that formats is mp3	WHERE formats = mp3
Get artist name and country of artist that has song	SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that rating of song is greater than 9	WHERE T2.rating > 9
Get artist name and country of artist that has song	SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that rating of song is greater than 9	WHERE T2.rating > 9
Get file size and formats of files that has song	SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that resolution of song is less than 800	WHERE T2.resolution < 800
Get file size and formats of files that has song	SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that resolution of song is less than 800	WHERE T2.resolution < 800
Get artist name of song that has files	SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id
Order these records based on the duration of files, and return the top 1 record	ORDER BY T2.duration LIMIT 1
Get artist name of song that has files	SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id
Order these records based on the duration of files, and return the top 1 record	ORDER BY T2.duration LIMIT 1
Get artist name and country of artist that has song	SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Order these records based on the rating of song and sort them in descending order, and return the top 3 records	ORDER BY T2.rating DESC LIMIT 3
Get artist name and country of artist that has song	SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Order these records based on the rating of song and sort them in descending order, and return the top 3 records	ORDER BY T2.rating DESC LIMIT 3
Get the number of files	SELECT COUNT ( * ) FROM files
Keep the records that duration is in the form of 4:%	WHERE duration LIKE 4:%
Get the number of files	SELECT COUNT ( * ) FROM files
Keep the records that duration is in the form of 4:%	WHERE duration LIKE 4:%
Get the number of artist	SELECT COUNT ( * ) FROM artist
Keep the records that country is Bangladesh	WHERE country = Bangladesh
Get the number of artist	SELECT COUNT ( * ) FROM artist
Keep the records that country is Bangladesh	WHERE country = Bangladesh
Get the average value of rating of artist that has song	SELECT AVG ( T2.rating ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that gender of artist is Female	WHERE T1.gender = Female
Get the average value of rating of artist that has song	SELECT AVG ( T2.rating ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that gender of artist is Female	WHERE T1.gender = Female
Get formats of files	SELECT formats FROM files
Group the records based on formats	GROUP BY formats
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get formats of files	SELECT formats FROM files
Group the records based on formats	GROUP BY formats
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get artist name of artist	SELECT artist_name FROM artist
Keep the records that country is UK	WHERE country = UK
Get artist name of song	SELECT artist_name FROM song
Keep the records that languages is english	WHERE languages = english
Get artist name of artist	SELECT artist_name FROM artist
Keep the records that country is UK	WHERE country = UK
Get artist name of song	SELECT artist_name FROM song
Keep the records that languages is english	WHERE languages = english
Get f id of files	SELECT f_id FROM files
Keep the records that formats is mp4	WHERE formats = mp4
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is less than 1000	WHERE resolution < 1000
Get f id of files	SELECT f_id FROM files
Keep the records that formats is mp4	WHERE formats = mp4
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is less than 1000	WHERE resolution < 1000
Get country of artist that has song	SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that gender of artist is Female AND languages of song is bangla	WHERE T1.gender = Female AND T2.languages = bangla
Get country of artist that has song	SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that gender of artist is Female AND languages of song is bangla	WHERE T1.gender = Female AND T2.languages = bangla
Get the average value of duration of files that has song	SELECT AVG ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that formats of files is mp3 AND resolution of song is less than 800	WHERE T1.formats = mp3 AND T2.resolution < 800
Get the average value of duration of files that has song	SELECT AVG ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that formats of files is mp3 AND resolution of song is less than 800	WHERE T1.formats = mp3 AND T2.resolution < 800
Get the number and gender of artist	SELECT COUNT ( * ) , gender FROM artist
Group the records based on gender	GROUP BY gender
Get the number and gender of artist	SELECT COUNT ( * ) , gender FROM artist
Group the records based on gender	GROUP BY gender
Get the average value of rating and languages of song	SELECT AVG ( rating ) , languages FROM song
Group the records based on languages	GROUP BY languages
Get the average value of rating and languages of song	SELECT AVG ( rating ) , languages FROM song
Group the records based on languages	GROUP BY languages
Get gender and artist name of artist that has song	SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Order these records based on the resolution of song, and return the top 1 record	ORDER BY T2.resolution LIMIT 1
Get gender and artist name of artist that has song	SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Order these records based on the resolution of song, and return the top 1 record	ORDER BY T2.resolution LIMIT 1
Get the number and formats of files	SELECT COUNT ( * ) , formats FROM files
Group the records based on formats	GROUP BY formats
Get the number and formats of files	SELECT COUNT ( * ) , formats FROM files
Group the records based on formats	GROUP BY formats
Get the minimum value of resolution of song	SELECT MIN ( resolution ) FROM song
Keep the records that languages is english	WHERE languages = english
Get song name of song	SELECT DISTINCT song_name FROM song
Keep the records that resolution is greater than the first query result	WHERE resolution > ( the first query result ) 
Get the minimum value of resolution of song	SELECT MIN ( resolution ) FROM song
Keep the records that languages is english	WHERE languages = english
Get song name of song	SELECT DISTINCT song_name FROM song
Keep the records that resolution is greater than the first query result	WHERE resolution > ( the first query result ) 
Get the maximum value of rating of song	SELECT MAX ( rating ) FROM song
Keep the records that genre is is blues	WHERE genre_is = blues
Get song name of song	SELECT song_name FROM song
Keep the records that rating is less than the first query result	WHERE rating < ( the first query result ) 
Get the maximum value of rating of song	SELECT MAX ( rating ) FROM song
Keep the records that genre is is blues	WHERE genre_is = blues
Get song name of song	SELECT song_name FROM song
Keep the records that rating is less than the first query result	WHERE rating < ( the first query result ) 
Get artist name and country of artist that has song	SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that song name of song is in the form of %love%	WHERE T2.song_name LIKE %love%
Get artist name and country of artist that has song	SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that song name of song is in the form of %love%	WHERE T2.song_name LIKE %love%
Get artist name and gender of artist that has song	SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that releasedate of song is in the form of %Mar%	WHERE T2.releasedate LIKE %Mar%
Get artist name and gender of artist that has song	SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that releasedate of song is in the form of %Mar%	WHERE T2.releasedate LIKE %Mar%
Get g name and rating of genre	SELECT g_name , rating FROM genre
Order these records based on the g name	ORDER BY g_name 
Get g name and rating of genre	SELECT g_name , rating FROM genre
Order these records based on the g name	ORDER BY g_name 
Get song name of song	SELECT song_name FROM song
Order these records based on the resolution	ORDER BY resolution 
Get song name of song	SELECT song_name FROM song
Order these records based on the resolution	ORDER BY resolution 
Get f id of files	SELECT f_id FROM files
Keep the records that formats is mp4	WHERE formats = mp4
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is greater than 720	WHERE resolution > 720
Get f id of files	SELECT f_id FROM files
Keep the records that formats is mp4	WHERE formats = mp4
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is greater than 720	WHERE resolution > 720
Get song name of files that has song	SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that duration of files is in the form of 4:%	WHERE T1.duration LIKE 4:%
Get song name of song	SELECT song_name FROM song
Keep the records that languages is english	WHERE languages = english
Get song name of files that has song	SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that duration of files is in the form of 4:%	WHERE T1.duration LIKE 4:%
Get song name of song	SELECT song_name FROM song
Keep the records that languages is english	WHERE languages = english
Get languages of song	SELECT languages FROM song
Group the records based on languages	GROUP BY languages
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get languages of song	SELECT languages FROM song
Group the records based on languages	GROUP BY languages
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get artist name of song	SELECT artist_name FROM song
Keep the records that resolution is greater than 500	WHERE resolution > 500 
Group the records based on languages	GROUP BY languages
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get artist name of song	SELECT artist_name FROM song
Keep the records that resolution is greater than 500	WHERE resolution > 500 
Group the records based on languages	GROUP BY languages
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get artist name of artist	SELECT artist_name FROM artist
Keep the records that country is UK AND gender is Male	WHERE country = UK AND gender = Male
Get artist name of artist	SELECT artist_name FROM artist
Keep the records that country is UK AND gender is Male	WHERE country = UK AND gender = Male
Get song name of song	SELECT song_name FROM song
Keep the records that genre is is modern OR languages is english	WHERE genre_is = modern OR languages = english
Get song name of song	SELECT song_name FROM song
Keep the records that genre is is modern OR languages is english	WHERE genre_is = modern OR languages = english
Get song name of files that has song	SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that formats of files is mp3	WHERE T1.formats = mp3
Get song name of song	SELECT song_name FROM song
Keep the records that resolution is less than 1000	WHERE resolution < 1000
Get song name of files that has song	SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that formats of files is mp3	WHERE T1.formats = mp3
Get song name of song	SELECT song_name FROM song
Keep the records that resolution is less than 1000	WHERE resolution < 1000
Get artist name of artist	SELECT artist_name FROM artist
Keep the records that country is UK	WHERE country = UK
Get artist name of artist that has song	SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that languages of song is english	WHERE T2.languages = english
Get artist name of artist	SELECT artist_name FROM artist
Keep the records that country is UK	WHERE country = UK
Get artist name of artist that has song	SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that languages of song is english	WHERE T2.languages = english
Get the average value of rating and the average value of resolution of song	SELECT AVG ( rating ) , AVG ( resolution ) FROM song
Keep the records that languages is bangla	WHERE languages = bangla
Get the average value of rating and the average value of resolution of song	SELECT AVG ( rating ) , AVG ( resolution ) FROM song
Keep the records that languages is bangla	WHERE languages = bangla
Get the maximum value of resolution and the minimum value of resolution of files that has song	SELECT MAX ( T2.resolution ) , MIN ( T2.resolution ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that duration of files is in the form of 3:%	WHERE T1.duration LIKE 3:%
Get the maximum value of resolution and the minimum value of resolution of files that has song	SELECT MAX ( T2.resolution ) , MIN ( T2.resolution ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that duration of files is in the form of 3:%	WHERE T1.duration LIKE 3:%
Get the maximum value of duration and the maximum value of resolution and languages of files that has song	SELECT MAX ( T1.duration ) , MAX ( T2.resolution ) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Group the records based on languages of song	GROUP BY T2.languages
Order these records based on the languages of song	ORDER BY T2.languages 
Get the maximum value of duration and the maximum value of resolution and languages of files that has song	SELECT MAX ( T1.duration ) , MAX ( T2.resolution ) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Group the records based on languages of song	GROUP BY T2.languages
Order these records based on the languages of song	ORDER BY T2.languages 
Get the minimum value of duration and the minimum value of rating and genre is of files that has song	SELECT MIN ( T1.duration ) , MIN ( T2.rating ) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Group the records based on genre is of song	GROUP BY T2.genre_is
Order these records based on the genre is of song	ORDER BY T2.genre_is 
Get the minimum value of duration and the minimum value of rating and genre is of files that has song	SELECT MIN ( T1.duration ) , MIN ( T2.rating ) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Group the records based on genre is of song	GROUP BY T2.genre_is
Order these records based on the genre is of song	ORDER BY T2.genre_is 
Get the number and artist name of artist that has song	SELECT T1.artist_name , COUNT ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that languages of song is english	WHERE T2.languages = english 
Group the records based on the number artist name of song 1 that the number is greater than or equal to 1	GROUP BY T2.artist_name HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get the number and artist name of artist that has song	SELECT T1.artist_name , COUNT ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that languages of song is english	WHERE T2.languages = english 
Group the records based on the number artist name of song 1 that the number is greater than or equal to 1	GROUP BY T2.artist_name HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get artist name and country of artist that has song	SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that resolution of song is greater than 900	WHERE T2.resolution > 900 
Group the records based on the number artist name of song 1 that the number is greater than or equal to 1	GROUP BY T2.artist_name HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get artist name and country of artist that has song	SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that resolution of song is greater than 900	WHERE T2.resolution > 900 
Group the records based on the number artist name of song 1 that the number is greater than or equal to 1	GROUP BY T2.artist_name HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get the number and artist name of artist that has song	SELECT T1.artist_name , COUNT ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Group the records based on artist name of song	GROUP BY T2.artist_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get the number and artist name of artist that has song	SELECT T1.artist_name , COUNT ( * ) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Group the records based on artist name of song	GROUP BY T2.artist_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get country of artist that has song	SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Group the records based on artist name of song	GROUP BY T2.artist_name
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get country of artist that has song	SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Group the records based on artist name of song	GROUP BY T2.artist_name
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get the minimum value of rating of song	SELECT MIN ( rating ) FROM song
Keep the records that languages is english	WHERE languages = english
Get song name of song	SELECT song_name FROM song
Keep the records that rating is less than the first query result	WHERE rating < ( the first query result ) 
Get the minimum value of rating of song	SELECT MIN ( rating ) FROM song
Keep the records that languages is english	WHERE languages = english
Get song name of song	SELECT song_name FROM song
Keep the records that rating is less than the first query result	WHERE rating < ( the first query result ) 
Get the maximum value of resolution of song	SELECT MAX ( resolution ) FROM song
Keep the records that rating is less than 8	WHERE rating < 8
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is greater than the first query result	WHERE resolution > ( the first query result ) 
Get the maximum value of resolution of song	SELECT MAX ( resolution ) FROM song
Keep the records that rating is less than 8	WHERE rating < 8
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is greater than the first query result	WHERE resolution > ( the first query result ) 
Get the average value of resolution of song	SELECT AVG ( resolution ) FROM song
Keep the records that genre is is modern	WHERE genre_is = modern
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is greater than the first query result	WHERE resolution > ( the first query result ) 
Get the average value of resolution of song	SELECT AVG ( resolution ) FROM song
Keep the records that genre is is modern	WHERE genre_is = modern
Get f id of song	SELECT f_id FROM song
Keep the records that resolution is greater than the first query result	WHERE resolution > ( the first query result ) 
Get artist name of artist that has song	SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that languages of song is bangla	WHERE T2.languages = bangla 
Group the records based on artist name of song	GROUP BY T2.artist_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get artist name of artist that has song	SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name
Keep the records that languages of song is bangla	WHERE T2.languages = bangla 
Group the records based on artist name of song	GROUP BY T2.artist_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get f id and genre is and artist name of song	SELECT f_id , genre_is , artist_name FROM song
Keep the records that languages is english	WHERE languages = english 
Order these records based on the rating	ORDER BY rating 
Get f id and genre is and artist name of song	SELECT f_id , genre_is , artist_name FROM song
Keep the records that languages is english	WHERE languages = english 
Order these records based on the rating	ORDER BY rating 
Get duration and file size and formats of files that has song	SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that genre is of song is pop	WHERE T2.genre_is = pop 
Order these records based on the song name of song	ORDER BY T2.song_name 
Get duration and file size and formats of files that has song	SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id
Keep the records that genre is of song is pop	WHERE T2.genre_is = pop 
Order these records based on the song name of song	ORDER BY T2.song_name 
Get artist name of song	SELECT DISTINCT artist_name FROM song
Keep the records that languages is english	WHERE languages = english
Get artist name of song	SELECT DISTINCT artist_name FROM song
Keep the records that rating is greater than 8	WHERE rating > 8
Get artist name of song	SELECT DISTINCT artist_name FROM song
Keep the records that languages is english	WHERE languages = english
Get artist name of song	SELECT DISTINCT artist_name FROM song
Keep the records that rating is greater than 8	WHERE rating > 8
Get artist name of artist	SELECT DISTINCT artist_name FROM artist
Keep the records that country is Bangladesh	WHERE country = Bangladesh
Get artist name of song	SELECT DISTINCT artist_name FROM song
Keep the records that rating is greater than 7	WHERE rating > 7
Get artist name of artist	SELECT DISTINCT artist_name FROM artist
Keep the records that country is Bangladesh	WHERE country = Bangladesh
Get artist name of song	SELECT DISTINCT artist_name FROM song
Keep the records that rating is greater than 7	WHERE rating > 7
Get name full and college id of college that has player college	SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id
Group the records based on college id of college	GROUP BY T1.college_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name full and college id of college that has player college	SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id
Group the records based on college id of college	GROUP BY T1.college_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of salary of salary that has team	SELECT AVG ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get the average value of salary of salary that has team	SELECT AVG ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get name first and name last of player that has all star	SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id
Keep the records that is 1998	WHERE YEAR = 1998
Get name first and name last of player that has all star	SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id
Keep the records that is 1998	WHERE YEAR = 1998
Get the number and name first and name last and player id of player that has all star	SELECT T1.name_first , T1.name_last , T1.player_id , COUNT ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id
Group the records based on player id of player	GROUP BY T1.player_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and name first and name last and player id of player that has all star	SELECT T1.name_first , T1.name_last , T1.player_id , COUNT ( * ) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id
Group the records based on player id of player	GROUP BY T1.player_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and yearid of hall of fame	SELECT yearid , COUNT ( * ) FROM hall_of_fame
Group the records based on yearid	GROUP BY yearid
Get the number and yearid of hall of fame	SELECT yearid , COUNT ( * ) FROM hall_of_fame
Group the records based on yearid	GROUP BY yearid
Get the average value of attendance of home game	SELECT YEAR , AVG ( attendance ) FROM home_game
Group the records based on	GROUP BY
Get the average value of attendance of home game	SELECT YEAR , AVG ( attendance ) FROM home_game
Group the records based on	GROUP BY
Get team id and rank of home game that has team	SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id
Keep the records that year of home game is 2014	WHERE T1.year = 2014 
Group the records based on team id of home game	GROUP BY T1.team_id
Order these records based on the the average value of attendance of home game and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.attendance ) DESC LIMIT 1
Get team id and rank of home game that has team	SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id
Keep the records that year of home game is 2014	WHERE T1.year = 2014 
Group the records based on team id of home game	GROUP BY T1.team_id
Order these records based on the the average value of attendance of home game and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.attendance ) DESC LIMIT 1
Get name first and name last and player id of player that has manager award	SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id
Group the records based on player id of manager award	GROUP BY T2.player_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name first and name last and player id of player that has manager award	SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id
Group the records based on player id of manager award	GROUP BY T2.player_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of park	SELECT COUNT ( * ) FROM park
Keep the records that state is NY	WHERE state = NY
Get the number of park	SELECT COUNT ( * ) FROM park
Keep the records that state is NY	WHERE state = NY
Get name first and name last and player id of player that has player award	SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id
Group the records based on player id of player	GROUP BY T1.player_id
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get name first and name last and player id of player that has player award	SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id
Group the records based on player id of player	GROUP BY T1.player_id
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get birth country of player	SELECT birth_country FROM player
Group the records based on birth country	GROUP BY birth_country
Order these records based on the the number and sort them in ascending order, and return the top 3 records	ORDER BY COUNT ( * ) ASC LIMIT 3
Get birth country of player	SELECT birth_country FROM player
Group the records based on birth country	GROUP BY birth_country
Order these records based on the the number and sort them in ascending order, and return the top 3 records	ORDER BY COUNT ( * ) ASC LIMIT 3
Get name first and name last of player	SELECT name_first , name_last FROM player
Keep the records that death year is 	WHERE death_year = 
Get name first and name last of player	SELECT name_first , name_last FROM player
Keep the records that death year is 	WHERE death_year = 
Get the number of player	SELECT COUNT ( * ) FROM player
Keep the records that birth country is USA AND bats is R	WHERE birth_country = USA AND bats = R
Get the number of player	SELECT COUNT ( * ) FROM player
Keep the records that birth country is USA AND bats is R	WHERE birth_country = USA AND bats = R
Get the average value of height of player that has player college and college	SELECT AVG ( T1.height ) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id
Keep the records that name full of college is Yale University	WHERE T3.name_full = Yale University
Get the average value of height of player that has player college and college	SELECT AVG ( T1.height ) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id
Keep the records that name full of college is Yale University	WHERE T3.name_full = Yale University
Get the maximum value of salary and name and team id of team that has salary	SELECT T1.name , T1.team_id , MAX ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id
Group the records based on team id of team	GROUP BY T1.team_id
Get the maximum value of salary and name and team id of team that has salary	SELECT T1.name , T1.team_id , MAX ( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id
Group the records based on team id of team	GROUP BY T1.team_id
Get name and team id of team that has salary	SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id
Group the records based on team id of team	GROUP BY T1.team_id
Order these records based on the the average value of salary of salary and sort them in ascending order, and return the top 1 record	ORDER BY AVG ( T2.salary ) ASC LIMIT 1
Get name and team id of team that has salary	SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id
Group the records based on team id of team	GROUP BY T1.team_id
Order these records based on the the average value of salary of salary and sort them in ascending order, and return the top 1 record	ORDER BY AVG ( T2.salary ) ASC LIMIT 1
Get name first and name last of player that has player award	SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2
Keep the records that year of player award is 1960	WHERE T2.year = 1960
Get name first and name last of player that has player award	SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2
Keep the records that year of player award is 1961	WHERE T2.year = 1961
Get name first and name last of player that has player award	SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2
Keep the records that year of player award is 1960	WHERE T2.year = 1960
Get name first and name last of player that has player award	SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2
Keep the records that year of player award is 1961	WHERE T2.year = 1961
Get name first and name last of player	SELECT name_first , name_last FROM player
Keep the records that weight is greater than 220 OR height is less than 75	WHERE weight > 220 OR height < 75
Get name first and name last of player	SELECT name_first , name_last FROM player
Keep the records that weight is greater than 220 OR height is less than 75	WHERE weight > 220 OR height < 75
Get the maximum value of wins of postseason that has team	SELECT MAX ( T1.wins ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get the maximum value of wins of postseason that has team	SELECT MAX ( T1.wins ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get the number of postseason that has team	SELECT COUNT ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of postseason is 2009	WHERE T2.name = Boston Red Stockings AND T1.year = 2009
Get the number of postseason that has team	SELECT COUNT ( * ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of postseason is 2009	WHERE T2.name = Boston Red Stockings AND T1.year = 2009
Get name and team id winner of postseason that has team	SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that year of postseason is 2008	WHERE T1.year = 2008 
Group the records based on team id winner of postseason	GROUP BY T1.team_id_winner
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and team id winner of postseason that has team	SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that year of postseason is 2008	WHERE T1.year = 2008 
Group the records based on team id winner of postseason	GROUP BY T1.team_id_winner
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and year of postseason that has team	SELECT COUNT ( * ) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings 
Group the records based on year of postseason	GROUP BY T1.year
Get the number and year of postseason that has team	SELECT COUNT ( * ) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings 
Group the records based on year of postseason	GROUP BY T1.year
Get all of postseason that has team	SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get all of postseason that has team	SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get all of postseason that has team	SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get all of postseason that has team	SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br
Keep the records that name of team is Boston Red Stockings	WHERE T2.name = Boston Red Stockings
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get the number of postseason	SELECT COUNT ( * ) FROM postseason
Keep the records that is 1885 AND ties is 1	WHERE YEAR = 1885 AND ties = 1
Get the number of postseason	SELECT COUNT ( * ) FROM postseason
Keep the records that is 1885 AND ties is 1	WHERE YEAR = 1885 AND ties = 1
Get the SUM of salary of salary that has team	SELECT SUM ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of salary is 2010	WHERE T2.name = Boston Red Stockings AND T1.year = 2010
Get the SUM of salary of salary that has team	SELECT SUM ( T1.salary ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of salary is 2010	WHERE T2.name = Boston Red Stockings AND T1.year = 2010
Get the number of salary that has team	SELECT COUNT ( * ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of salary is 2000	WHERE T2.name = Boston Red Stockings AND T1.year = 2000
Get the number of salary that has team	SELECT COUNT ( * ) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of salary is 2000	WHERE T2.name = Boston Red Stockings AND T1.year = 2000
Get salary of salary	SELECT salary FROM salary
Keep the records that is 2001	WHERE YEAR = 2001 
Order these records based on the salary and sort them in descending order, and return the top 3 records	ORDER BY salary DESC LIMIT 3
Get salary of salary	SELECT salary FROM salary
Keep the records that is 2001	WHERE YEAR = 2001 
Order these records based on the salary and sort them in descending order, and return the top 3 records	ORDER BY salary DESC LIMIT 3
Get salary of salary	SELECT salary FROM salary
Keep the records that is 2010	WHERE YEAR = 2010
Get salary of salary	SELECT salary FROM salary
Keep the records that is 2001	WHERE YEAR = 2001
Get salary of salary	SELECT salary FROM salary
Keep the records that is 2010	WHERE YEAR = 2010
Get salary of salary	SELECT salary FROM salary
Keep the records that is 2001	WHERE YEAR = 2001
Get yearid of hall of fame	SELECT yearid FROM hall_of_fame
Group the records based on yearid	GROUP BY yearid
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get yearid of hall of fame	SELECT yearid FROM hall_of_fame
Group the records based on yearid	GROUP BY yearid
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number of park	SELECT COUNT ( * ) FROM park
Keep the records that city is Atlanta	WHERE city = Atlanta
Get the number of park	SELECT COUNT ( * ) FROM park
Keep the records that city is Atlanta	WHERE city = Atlanta
Get the number of home game that has park	SELECT COUNT ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id
Keep the records that year of home game is 1907 AND park name of park is Columbia Park	WHERE T1.year = 1907 AND T2.park_name = Columbia Park
Get the number of home game that has park	SELECT COUNT ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id
Keep the records that year of home game is 1907 AND park name of park is Columbia Park	WHERE T1.year = 1907 AND T2.park_name = Columbia Park
Get the number of home game that has park	SELECT COUNT ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id
Keep the records that year of home game is 2000 AND city of park is Atlanta	WHERE T1.year = 2000 AND T2.city = Atlanta
Get the number of home game that has park	SELECT COUNT ( * ) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id
Keep the records that year of home game is 2000 AND city of park is Atlanta	WHERE T1.year = 2000 AND T2.city = Atlanta
Get the SUM of attendance of home game that has team	SELECT SUM ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of home game is between 200 X2010	WHERE T2.name = Boston Red Stockings AND T1.year BETWEEN 2000 AND 2010
Get the SUM of attendance of home game that has team	SELECT SUM ( T1.attendance ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of home game is between 200 X2010	WHERE T2.name = Boston Red Stockings AND T1.year BETWEEN 2000 AND 2010
Get the SUM of salary of salary that has player	SELECT SUM ( T1.salary ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id
Keep the records that name first of player is Len AND name last of player is Barker AND year of salary is between 198 5X123X1990	WHERE T2.name_first = Len AND T2.name_last = Barker AND T1.year BETWEEN 1985 AND 1990
Get the SUM of salary of salary that has player	SELECT SUM ( T1.salary ) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id
Keep the records that name first of player is Len AND name last of player is Barker AND year of salary is between 198 5X123X1990	WHERE T2.name_first = Len AND T2.name_last = Barker AND T1.year BETWEEN 1985 AND 1990
Get name first AND name last of salary that has player AND team	SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id
Keep the records that year of salary is 2005 AND name of team is Washington Nationals	WHERE T1.year = 2005 AND T3.name = Washington Nationals
Get name first AND name last of salary that has player AND team	SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id
Keep the records that year of salary is 2007 AND name of team is Washington Nationals	WHERE T1.year = 2007 AND T3.name = Washington Nationals
Get name first AND name last of salary that has player AND team	SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id
Keep the records that year of salary is 2005 AND name of team is Washington Nationals	WHERE T1.year = 2005 AND T3.name = Washington Nationals
Get name first AND name last of salary that has player AND team	SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id
Keep the records that year of salary is 2007 AND name of team is Washington Nationals	WHERE T1.year = 2007 AND T3.name = Washington Nationals
Get the SUM of games of home game that has team	SELECT SUM ( T1.games ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of home game is between 199 X2000	WHERE T2.name = Boston Red Stockings AND T1.year BETWEEN 1990 AND 2000
Get the SUM of games of home game that has team	SELECT SUM ( T1.games ) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that name of team is Boston Red Stockings AND year of home game is between 199 X2000	WHERE T2.name = Boston Red Stockings AND T1.year BETWEEN 1990 AND 2000
Get name of home game that has team	SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that year of home game is 1980	WHERE T1.year = 1980 
Order these records based on the attendance of home game and sort them in ascending order, and return the top 1 record	ORDER BY T1.attendance ASC LIMIT 1
Get name of home game that has team	SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br
Keep the records that year of home game is 1980	WHERE T1.year = 1980 
Order these records based on the attendance of home game and sort them in ascending order, and return the top 1 record	ORDER BY T1.attendance ASC LIMIT 1
Get state of park	SELECT state FROM park
Group the records based on the number state 2 that the number is greater than 2	GROUP BY state HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get state of park	SELECT state FROM park
Group the records based on the number state 2 that the number is greater than 2	GROUP BY state HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of team franchise	SELECT COUNT ( * ) FROM team_franchise
Keep the records that active is Y	WHERE active = Y
Get the number of team franchise	SELECT COUNT ( * ) FROM team_franchise
Keep the records that active is Y	WHERE active = Y
Get city of park	SELECT city FROM park
Group the records based on the number city 2 4 that the number is between 2 AND 4	GROUP BY city HAVING COUNT ( * ) BETWEEN 2 AND 4 HAVING COUNT ( * ) BETWEEN 2 AND 4
Get city of park	SELECT city FROM park
Group the records based on the number city 2 4 that the number is between 2 AND 4	GROUP BY city HAVING COUNT ( * ) BETWEEN 2 AND 4 HAVING COUNT ( * ) BETWEEN 2 AND 4
Get park name of home game that has park	SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id
Keep the records that year of home game is 2008	WHERE T1.year = 2008 
Order these records based on the attendance of home game and sort them in descending order, and return the top 1 record	ORDER BY T1.attendance DESC LIMIT 1
Get park name of home game that has park	SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id
Keep the records that year of home game is 2008	WHERE T1.year = 2008 
Order these records based on the attendance of home game and sort them in descending order, and return the top 1 record	ORDER BY T1.attendance DESC LIMIT 1
Get the number of camera lens	SELECT COUNT ( * ) FROM camera_lens
Keep the records that focal length mm is greater than 15	WHERE focal_length_mm > 15
Get brand and name of camera lens	SELECT brand , name FROM camera_lens
Order these records based on the max aperture and sort them in descending ORDER	ORDER BY max_aperture DESC 
Get id and color and name of photos	SELECT id , color , name FROM photos
Get the maximum value of height and the average value of height of mountain	SELECT MAX ( height ) , AVG ( height ) FROM mountain
Get the average value of prominence of mountain	SELECT AVG ( prominence ) FROM mountain
Keep the records that country is Morocco	WHERE country = Morocco
Get name and height and prominence of mountain	SELECT name , height , prominence FROM mountain
Keep the records that is not Aberdare Range	WHERE RANGE != Aberdare Range
Get id and name of mountain that has photos	SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id
Keep the records that height of mountain is greater than 4000	WHERE T1.height > 4000
Get id and name of mountain that has photos	SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id
Group the records based on the number id of mountain 2 that the number is greater than or equal to 2	GROUP BY T1.id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of photos that has camera lens	SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id
Group the records based on id of camera lens	GROUP BY T2.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of camera lens that has photos	SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id
Keep the records that brand of camera lens is Sigma OR brand of camera lens is Olympus	WHERE T1.brand = Sigma OR T1.brand = Olympus
Get the number of distinct brand of camera lens	SELECT COUNT ( DISTINCT brand ) FROM camera_lens
Get camera lens id of photos	SELECT camera_lens_id FROM photos
Get the number of camera lens	SELECT COUNT ( * ) FROM camera_lens
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get the number of distinct camera lens id of mountain that has photos	SELECT COUNT ( DISTINCT T2.camera_lens_id ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id
Keep the records that country of mountain is Ethiopia	WHERE T1.country = Ethiopia
Get brand of mountain that has photos and camera lens	SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id
Keep the records that range of mountain is Toubkal Atlas	WHERE T1.range = Toubkal Atlas
Get brand of mountain that has photos and camera lens	SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id
Keep the records that range of mountain is Lasta Massif	WHERE T1.range = Lasta Massif
Get name and prominence of mountain	SELECT name , prominence FROM mountain
Get name and prominence of mountain that has photos and camera lens	SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id
Keep the records that brand of camera lens is Sigma	WHERE T3.brand = Sigma
Get name of camera lens	SELECT name FROM camera_lens
Keep the records that name is in the form of %Digital%	WHERE name LIKE %Digital%
Get the number and name of camera lens that has photos	SELECT T1.name , COUNT ( * ) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id
Group the records based on id of camera lens	GROUP BY T1.id
Order these records based on the the number	ORDER BY COUNT ( * ) 
Get name of channel	SELECT name FROM channel
Keep the records that is not CCTV	WHERE OWNER != CCTV
Get name of channel	SELECT name FROM channel
Keep the records that is not CCTV	WHERE OWNER != CCTV
Get name of channel	SELECT name FROM channel
Order these records based on the rating in percent and sort them in descending ORDER	ORDER BY rating_in_percent DESC 
Get name of channel	SELECT name FROM channel
Order these records based on the rating in percent and sort them in descending ORDER	ORDER BY rating_in_percent DESC 
Get of channel	SELECT OWNER FROM channel
Order these records based on the rating in percent and sort them in descending order, and return the top 1 record	ORDER BY rating_in_percent DESC LIMIT 1
Get of channel	SELECT OWNER FROM channel
Order these records based on the rating in percent and sort them in descending order, and return the top 1 record	ORDER BY rating_in_percent DESC LIMIT 1
Get the number of program	SELECT COUNT ( * ) FROM program
Get the number of program	SELECT COUNT ( * ) FROM program
Get name of program	SELECT name FROM program
Order these records based on the launch	ORDER BY launch 
Get name of program	SELECT name FROM program
Order these records based on the launch	ORDER BY launch 
Get name and origin of program	SELECT name , origin , OWNER FROM program
Get name and origin of program	SELECT name , origin , OWNER FROM program
Get name of program	SELECT name FROM program
Order these records based on the launch and sort them in descending order, and return the top 1 record	ORDER BY launch DESC LIMIT 1
Get name of program	SELECT name FROM program
Order these records based on the launch and sort them in descending order, and return the top 1 record	ORDER BY launch DESC LIMIT 1
Get the SUM of Share in percent of channel	SELECT SUM ( Share_in_percent ) FROM channel
Keep the records that is CCTV	WHERE OWNER = CCTV
Get the SUM of Share in percent of channel	SELECT SUM ( Share_in_percent ) FROM channel
Keep the records that is CCTV	WHERE OWNER = CCTV
Get name of channel that has broadcast	SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
Keep the records that time of day of broadcast is Morning	WHERE t2.time_of_day = Morning
Get name of channel that has broadcast	SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
Keep the records that time of day of broadcast is Morning	WHERE t2.time_of_day = Morning
Get name of channel that has broadcast	SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
Keep the records that time of day of broadcast is Morning	WHERE t2.time_of_day = Morning
Get name of channel that has broadcast	SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
Keep the records that time of day of broadcast is Night	WHERE t2.time_of_day = Night
Get name of channel that has broadcast	SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
Keep the records that time of day of broadcast is Morning	WHERE t2.time_of_day = Morning
Get name of channel that has broadcast	SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id
Keep the records that time of day of broadcast is Night	WHERE t2.time_of_day = Night
Get the number and time of day of broadcast	SELECT COUNT ( * ) , time_of_day FROM broadcast
Group the records based on time of day	GROUP BY time_of_day
Get the number and time of day of broadcast	SELECT COUNT ( * ) , time_of_day FROM broadcast
Group the records based on time of day	GROUP BY time_of_day
Get the number of distinct program id of broadcast	SELECT COUNT ( DISTINCT program_id ) FROM broadcast
Keep the records that time of day is Night	WHERE time_of_day = Night
Get the number of distinct program id of broadcast	SELECT COUNT ( DISTINCT program_id ) FROM broadcast
Keep the records that time of day is Night	WHERE time_of_day = Night
Get name of program	SELECT name FROM program
Get name of program that has broadcast	SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Keep the records that Time of day of broadcast is Morning	WHERE t2.Time_of_day = Morning
Get name of program	SELECT name FROM program
Get name of program that has broadcast	SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Keep the records that Time of day of broadcast is Morning	WHERE t2.Time_of_day = Morning
Get owner of program that has broadcast	SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Keep the records that Time of day of broadcast is Morning	WHERE t2.Time_of_day = Morning
Get owner of program that has broadcast	SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Keep the records that Time of day of broadcast is Night	WHERE t2.Time_of_day = Night
Get owner of program that has broadcast	SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Keep the records that Time of day of broadcast is Morning	WHERE t2.Time_of_day = Morning
Get owner of program that has broadcast	SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Keep the records that Time of day of broadcast is Night	WHERE t2.Time_of_day = Night
Get origin of program	SELECT origin FROM program
Order these records based on the origin	ORDER BY origin 
Get origin of program	SELECT origin FROM program
Order these records based on the origin	ORDER BY origin 
Get the number of distinct OWNER of channel	SELECT COUNT ( DISTINCT OWNER ) FROM channel
Get the number of distinct OWNER of channel	SELECT COUNT ( DISTINCT OWNER ) FROM channel
Get name of program	SELECT name FROM program
Keep the records that origin is not Beijing	WHERE origin != Beijing
Get name of program	SELECT name FROM program
Keep the records that origin is not Beijing	WHERE origin != Beijing
Get name of channel	SELECT name FROM channel
Keep the records that is CCTV OR is HBS	WHERE OWNER = CCTV OR OWNER = HBS
Get name of channel	SELECT name FROM channel
Keep the records that is CCTV OR is HBS	WHERE OWNER = CCTV OR OWNER = HBS
Get the SUM of Rating in percent of channel	SELECT SUM ( Rating_in_percent ) , OWNER FROM channel
Group the records based on	GROUP BY
Get the SUM of Rating in percent of channel	SELECT SUM ( Rating_in_percent ) , OWNER FROM channel
Group the records based on	GROUP BY
Get name of program that has broadcast	SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Group the records based on program id of broadcast	GROUP BY t2.program_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of program that has broadcast	SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id
Group the records based on program id of broadcast	GROUP BY t2.program_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of COURSES	SELECT COUNT ( * ) FROM COURSES
Get the number of COURSES	SELECT COUNT ( * ) FROM COURSES
Get course description of COURSES	SELECT course_description FROM COURSES
Keep the records that course name is database	WHERE course_name = database
Get course description of COURSES	SELECT course_description FROM COURSES
Keep the records that course name is database	WHERE course_name = database
Get address line 1 of Course Authors and Tutors	SELECT address_line_1 FROM Course_Authors_and_Tutors
Keep the records that personal name is Cathrine	WHERE personal_name = Cathrine
Get address line 1 of Course Authors and Tutors	SELECT address_line_1 FROM Course_Authors_and_Tutors
Keep the records that personal name is Cathrine	WHERE personal_name = Cathrine
Get address line 1 of Course Authors and Tutors	SELECT address_line_1 FROM Course_Authors_and_Tutors
Get address line 1 of Course Authors and Tutors	SELECT address_line_1 FROM Course_Authors_and_Tutors
Get login name and family name of Course Authors and Tutors	SELECT login_name , family_name FROM Course_Authors_and_Tutors
Get login name and family name of Course Authors and Tutors	SELECT login_name , family_name FROM Course_Authors_and_Tutors
Get date of enrolment and date of completion of Student Course Enrolment	SELECT date_of_enrolment , date_of_completion FROM Student_Course_Enrolment
Get date of enrolment and date of completion of Student Course Enrolment	SELECT date_of_enrolment , date_of_completion FROM Student_Course_Enrolment
Get the number of distinct student id of Student Course Enrolment	SELECT COUNT ( DISTINCT student_id ) FROM Student_Course_Enrolment
Get the number of distinct student id of Student Course Enrolment	SELECT COUNT ( DISTINCT student_id ) FROM Student_Course_Enrolment
Get the number of course id of Student Course Enrolment	SELECT COUNT ( course_id ) FROM Student_Course_Enrolment
Get the number of course id of Student Course Enrolment	SELECT COUNT ( course_id ) FROM Student_Course_Enrolment
Get date test taken of Student Tests Taken	SELECT date_test_taken FROM Student_Tests_Taken
Keep the records that test result is Pass	WHERE test_result = Pass
Get date test taken of Student Tests Taken	SELECT date_test_taken FROM Student_Tests_Taken
Keep the records that test result is Pass	WHERE test_result = Pass
Get the number of Student Tests Taken	SELECT COUNT ( * ) FROM Student_Tests_Taken
Keep the records that test result is Fail	WHERE test_result = Fail
Get the number of Student Tests Taken	SELECT COUNT ( * ) FROM Student_Tests_Taken
Keep the records that test result is Fail	WHERE test_result = Fail
Get login name of Students	SELECT login_name FROM Students
Keep the records tWardt family name is Ward	WHERE family_name = Ward
Get login name of Students	SELECT login_name FROM Students
Keep the records that family name is Ward	WHERE family_name = Ward
Get date of latest logon of Students	SELECT date_of_latest_logon FROM Students
Keep the records that family name is Jaskolski OR family name is Langosh	WHERE family_name = Jaskolski OR family_name = Langosh
Get date of latest logon of Students	SELECT date_of_latest_logon FROM Students
Keep the records that family name is Jaskolski OR family name is Langosh	WHERE family_name = Jaskolski OR family_name = Langosh
Get the number of Students	SELECT COUNT ( * ) FROM Students
Keep the records that personal name is in the form of %son%	WHERE personal_name LIKE %son%
Get the number of Students	SELECT COUNT ( * ) FROM Students
Keep the records that personal name is in the form of %son%	WHERE personal_name LIKE %son%
Get subject name of SUBJECTS	SELECT subject_name FROM SUBJECTS
Get subject name of SUBJECTS	SELECT subject_name FROM SUBJECTS
Get all of Course Authors and Tutors	SELECT * FROM Course_Authors_and_Tutors
Order these records based on the personal name	ORDER BY personal_name 
Get all of Course Authors and Tutors	SELECT * FROM Course_Authors_and_Tutors
Order these records based on the personal name	ORDER BY personal_name 
Get personal name and family name of Students	SELECT personal_name , family_name FROM Students
Order these records based on the family name	ORDER BY family_name 
Get personal name and family name of Students	SELECT personal_name , family_name FROM Students
Order these records based on the family name	ORDER BY family_name 
Get the number and test result of Student Tests Taken	SELECT test_result , COUNT ( * ) FROM Student_Tests_Taken
Group the records based on test result	GROUP BY test_result
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and test result of Student Tests Taken	SELECT test_result , COUNT ( * ) FROM Student_Tests_Taken
Group the records based on test result	GROUP BY test_result
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get login name of Course Authors and Tutors that has Courses	SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Keep the records that course name of Courses is advanced database	WHERE T2.course_name = advanced database
Get login name of Course Authors and Tutors that has Courses	SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Keep the records that course name of Courses is advanced database	WHERE T2.course_name = advanced database
Get address line 1 of Course Authors and Tutors that has Courses	SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Keep the records that course name of Courses is operating system OR course name of Courses is data structure	WHERE T2.course_name = operating system OR T2.course_name = data structure
Get address line 1 of Course Authors and Tutors that has Courses	SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Keep tdata structure records that course name of Courses is operating system OR course name of Courses is data structure	WHERE T2.course_name = operating system OR T2.course_name = data structure
Get personal name and family name and author id of Course Authors and Tutors that has Courses	SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Group the records based on author id of Courses	GROUP BY T2.author_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get personal name and family name and author id of Course Authors and Tutors that has Courses	SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Group the records based on author id of Courses	GROUP BY T2.author_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get address line 1 and author id of Course Authors and Tutors that has Courses	SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Group the records based on the number author id of Courses 2 that the number is greater than or equal to 2	GROUP BY T2.author_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get address line 1 and author id of Course Authors and Tutors that has Courses	SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Group the records based on the number author id of Courses 2 that the number is greater than or equal to 2	GROUP BY T2.author_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get course name of Course Authors and Tutors that has Courses	SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Keep the records that personal name of Course Authors and Tutors is Julio	WHERE T1.personal_name = Julio
Get course name of Course Authors and Tutors that has Courses	SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id
Keep the records that personal name of Course Authors and Tutors is Julio	WHERE T1.personal_name = Julio
Get course name and course description of Courses that has Subjects	SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
Keep the records that subject name of Subjects is Computer Science	WHERE T2.subject_name = Computer Science
Get course name and course description of Courses that has Subjects	SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
Keep the records that subject name of Subjects is Computer Science	WHERE T2.subject_name = Computer Science
Get the number and subject id and subject name of Courses that has Subjects	SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
Group the records based on subject id of Courses	GROUP BY T1.subject_id
Get the number and subject id and subject name of Courses that has Subjects	SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
Group the records based on subject id of Courses	GROUP BY T1.subject_id
Get the number and subject id and subject name of Courses that has Subjects	SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
Group the records based on subject id of Courses	GROUP BY T1.subject_id
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get the number and subject id and subject name of Courses that has Subjects	SELECT T1.subject_id , T2.subject_name , COUNT ( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id
Group the records based on subject id of Courses	GROUP BY T1.subject_id
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get date of enrolment of Courses that has Student Course Enrolment	SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of Courses is Spanish	WHERE T1.course_name = Spanish
Get date of enrolment of Courses that has Student Course Enrolment	SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Keep the records that course name of Courses is Spanish	WHERE T1.course_name = Spanish
Get course name of Courses that has Student Course Enrolment	SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on course name of Courses	GROUP BY T1.course_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get course name of Courses that has Student Course Enrolment	SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on course name of Courses	GROUP BY T1.course_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get course name of Courses that has Student Course Enrolment	SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course name of Courses 1 that the number is 1	GROUP BY T1.course_name HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get course name of Courses that has Student Course Enrolment	SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course name of Courses 1 that the number is 1	GROUP BY T1.course_name HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get course description and course name of Courses that has Student Course Enrolment	SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course name of Courses 2 that the number is greater than 2	GROUP BY T1.course_name HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get course description and course name of Courses that has Student Course Enrolment	SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course name of Courses 2 that the number is greater than 2	GROUP BY T1.course_name HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number and course name of Courses that has Student Course Enrolment	SELECT T1.course_name , COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on course name of Courses	GROUP BY T1.course_name
Get the number and course name of Courses that has Student Course Enrolment	SELECT T1.course_name , COUNT ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id
Group the records based on course name of Courses	GROUP BY T1.course_name
Get date of enrolment of Student Course Enrolment that has Student Tests Taken	SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
Keep the records that test result of Student Tests Taken is Pass	WHERE T2.test_result = Pass
Get date of enrolment of Student Course Enrolment that has Student Tests Taken	SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
Keep the records that test result of Student Tests Taken is Pass	WHERE T2.test_result = Pass
Get date of completion of Student Course Enrolment that has Student Tests Taken	SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
Keep the records that test result of Student Tests Taken is Fail	WHERE T2.test_result = Fail
Get date of completion of Student Course Enrolment that has Student Tests Taken	SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id
Keep the records that test result of Student Tests Taken is Fail	WHERE T2.test_result = Fail
Get date of enrolment and date of completion of Student Course Enrolment that has Students	SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Keep the records that personal name of Students is Karson	WHERE T2.personal_name = Karson
Get date of enrolment and date of completion of Student Course Enrolment that has Students	SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Keep the records that personal name of Students is Karson	WHERE T2.personal_name = Karson
Get date of enrolment AND date of completion of Student Course Enrolment that has Students	SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Keep the records that family name of Students is Zieme AND personal name of Students is Bernie	WHERE T2.family_name = Zieme AND T2.personal_name = Bernie
Get date of enrolment AND date of completion of Student Course Enrolment that has Students	SELECT T1.date_of_enrolment , T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Keep the records that family name of Students is Zieme AND personal name of Students is Bernie	WHERE T2.family_name = Zieme AND T2.personal_name = Bernie
Get student id and login name of Student Course Enrolment that has Students	SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Student Course Enrolment	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get student id and login name of Student Course Enrolment that has Students	SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Student Course Enrolment	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get student id and personal name of Student Course Enrolment that has Students	SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on the number student id of Student Course Enrolment 2 that the number is greater than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get student id and personal name of Student Course Enrolment that has Students	SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on the number student id of Student Course Enrolment 2 that the number is greater than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get student id and middle name of Student Course Enrolment that has Students	SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on the number student id of Student Course Enrolment 2 that the number is less than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) <= 2 HAVING COUNT ( * ) <= 2
Get student id and middle name of Student Course Enrolment that has Students	SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id
Group the records based on the number student id of Student Course Enrolment 2 that the number is less than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) <= 2 HAVING COUNT ( * ) <= 2
Get personal name of Students	SELECT personal_name FROM Students
Get personal name of Students that has Student Course Enrolment	SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2
Get personal name of Students	SELECT personal_name FROM Students
Get personal name of Students that has Student Course Enrolment	SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2
Get student id of Student Course Enrolment	SELECT student_id FROM Student_Course_Enrolment
Get the number of Students	SELECT COUNT ( * ) FROM Students
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get student id of Student Course Enrolment	SELECT student_id FROM Student_Course_Enrolment
Get the number of Students	SELECT COUNT ( * ) FROM Students
Keep the records that student id is not in the first query result	WHERE student_id NOT IN ( the first query result ) 
Get login name of Course Authors and Tutors	SELECT login_name FROM Course_Authors_and_Tutors
Get login name of Students	SELECT login_name FROM Students
Get login name of Course Authors and Tutors	SELECT login_name FROM Course_Authors_and_Tutors
Get login name of Students	SELECT login_name FROM Students
Get personal name of Course Authors and Tutors	SELECT personal_name FROM Course_Authors_and_Tutors
Get personal name of Students	SELECT personal_name FROM Students
Get personal name of Course Authors and Tutors	SELECT personal_name FROM Course_Authors_and_Tutors
Get personal name of Students	SELECT personal_name FROM Students
Get Date Claim Made and Claim id of Claims that has Settlements	SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id
Group the records based on the number Claim id of Claims 2 that the number is greater than 2	GROUP BY T1.Claim_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the maximum value of Amount Claimed of Claims	SELECT MAX ( Amount_Claimed ) FROM Claims
Get Date Claim Made and Claim id of Claims that has Settlements	SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id
Keep the records that Amount Claimed of Claims is the second query result	WHERE T1.Amount_Claimed = ( the second query result ) 
Get Date Claim Made and Claim id of Claims that has Settlements	SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id
Group the records based on the number Claim id of Claims 2 that the number is greater than 2	GROUP BY T1.Claim_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the maximum value of Amount Claimed of Claims	SELECT MAX ( Amount_Claimed ) FROM Claims
Get Date Claim Made and Claim id of Claims that has Settlements	SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id
Keep the records that Amount Claimed of Claims is the second query result	WHERE T1.Amount_Claimed = ( the second query result ) 
Get customer details and customer id of Customers that has Customer Policies	SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id
Group the records based on the number customer id of Customers 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer details and customer id of Customers that has Customer Policies and Claims	SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3
Get customer details and customer id of Customers that has Customer Policies	SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id
Group the records based on the number customer id of Customers 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer details and customer id of Customers that has Customer Policies and Claims	SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3
Get Payment Method Code and Date Payment Made and Amount Payment of Payments	SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments
Order these records based on the Date Payment Made and sort them in ascending ORDER	ORDER BY Date_Payment_Made ASC 
Get Payment Method Code and Date Payment Made and Amount Payment of Payments	SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments
Order these records based on the Date Payment Made and sort them in ascending ORDER	ORDER BY Date_Payment_Made ASC 
Get Amount Settled and Amount Claimed of Claims	SELECT Amount_Settled , Amount_Claimed FROM Claims
Order these records based on the Amount Claimed and sort them in descending order, and return the top 1 record	ORDER BY Amount_Claimed DESC LIMIT 1
Get Amount Settled and Amount Claimed of Claims	SELECT Amount_Settled , Amount_Claimed FROM Claims
Order these records based on the Amount Claimed and sort them in descending order, and return the top 1 record	ORDER BY Amount_Claimed DESC LIMIT 1
Get Amount Settled and Amount Claimed of Claims	SELECT Amount_Settled , Amount_Claimed FROM Claims
Order these records based on the Amount Settled and sort them in ascending order, and return the top 1 record	ORDER BY Amount_Settled ASC LIMIT 1
Get Amount Settled and Amount Claimed of Claims	SELECT Amount_Settled , Amount_Claimed FROM Claims
Order these records based on the Amount Settled and sort them in ascending order, and return the top 1 record	ORDER BY Amount_Settled ASC LIMIT 1
Get the average value of Amount Claimed of Claims	SELECT AVG ( Amount_Claimed ) FROM Claims
Get Date Claim Made and Date Claim Settled of Claims	SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims
Keep the records that Amount Claimed is greater than the first query result	WHERE Amount_Claimed > ( the first query result ) 
Get the average value of Amount Claimed of Claims	SELECT AVG ( Amount_Claimed ) FROM Claims
Get Date Claim Made and Date Claim Settled of Claims	SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims
Keep the records that Amount Claimed is greater than the first query result	WHERE Amount_Claimed > ( the first query result ) 
Get the average value of Amount Settled of Claims	SELECT AVG ( Amount_Settled ) FROM Claims
Get Date Claim Made of Claims	SELECT Date_Claim_Made FROM Claims
Keep the records that Amount Settled is less than or equal to the first query result	WHERE Amount_Settled <= ( the first query result ) 
Get the average value of Amount Settled of Claims	SELECT AVG ( Amount_Settled ) FROM Claims
Get Date Claim Made of Claims	SELECT Date_Claim_Made FROM Claims
Keep the records that Amount Settled is less than or equal to the first query result	WHERE Amount_Settled <= ( the first query result ) 
Get the number and Claim id of Claims that has Settlements	SELECT T1.Claim_id , COUNT ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
Group the records based on claim id of Claims	GROUP BY T1.claim_id
Get the number and Claim id of Claims that has Settlements	SELECT T1.Claim_id , COUNT ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
Group the records based on claim id of Claims	GROUP BY T1.claim_id
Get the number and claim id and date claim made of Claims that has Settlements	SELECT T1.claim_id , T1.date_claim_made , COUNT ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
Group the records based on claim id of Claims	GROUP BY T1.claim_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and claim id and date claim made of Claims that has Settlements	SELECT T1.claim_id , T1.date_claim_made , COUNT ( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
Group the records based on claim id of Claims	GROUP BY T1.claim_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and claim id of Claims that has Settlements	SELECT COUNT ( * ) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
Group the records based on claim id of Claims	GROUP BY T1.claim_id
Order these records based on the Date Claim Settled of Claims and sort them in descending order, and return the top 1 record	ORDER BY T1.Date_Claim_Settled DESC LIMIT 1
Get the number and claim id of Claims that has Settlements	SELECT COUNT ( * ) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id
Group the records based on claim id of Claims	GROUP BY T1.claim_id
Order these records based on the Date Claim Settled of Claims and sort them in descending order, and return the top 1 record	ORDER BY T1.Date_Claim_Settled DESC LIMIT 1
Get Date Claim Made of Claims	SELECT Date_Claim_Made FROM Claims
Order these records based on the Date Claim Made and sort them in ascending order, and return the top 1 record	ORDER BY Date_Claim_Made ASC LIMIT 1
Get Date Claim Made of Claims	SELECT Date_Claim_Made FROM Claims
Order these records based on the Date Claim Made and sort them in ascending order, and return the top 1 record	ORDER BY Date_Claim_Made ASC LIMIT 1
Get the SUM of Amount Settled of Settlements	SELECT SUM ( Amount_Settled ) FROM Settlements
Get the SUM of Amount Settled of Settlements	SELECT SUM ( Amount_Settled ) FROM Settlements
Get customer details and customer id of Customers that has Customer Policies	SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id
Group the records based on the number customer id of Customers 1 that the number is greater than 1	GROUP BY T1.customer_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get customer details and customer id of Customers that has Customer Policies	SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id
Group the records based on the number customer id of Customers 1 that the number is greater than 1	GROUP BY T1.customer_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Date Claim Made and Date Claim Settled of Settlements	SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements
Get Date Claim Made and Date Claim Settled of Settlements	SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements
Get Payment Method Code of Payments	SELECT Payment_Method_Code FROM Payments
Group the records based on Payment Method Code	GROUP BY Payment_Method_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Payment Method Code of Payments	SELECT Payment_Method_Code FROM Payments
Group the records based on Payment Method Code	GROUP BY Payment_Method_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Payment Method Code of Payments	SELECT Payment_Method_Code FROM Payments
Group the records based on Payment Method Code	GROUP BY Payment_Method_Code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Payment Method Code of Payments	SELECT Payment_Method_Code FROM Payments
Group the records based on Payment Method Code	GROUP BY Payment_Method_Code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the SUM of Amount Payment of Payments	SELECT SUM ( Amount_Payment ) FROM Payments
Get the SUM of Amount Payment of Payments	SELECT SUM ( Amount_Payment ) FROM Payments
Get customer details of Customers	SELECT DISTINCT customer_details FROM Customers
Get customer details of Customers	SELECT DISTINCT customer_details FROM Customers
Get Policy Type Code of Customer Policies	SELECT Policy_Type_Code FROM Customer_Policies
Group the records based on Policy Type Code	GROUP BY Policy_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Policy Type Code of Customer Policies	SELECT Policy_Type_Code FROM Customer_Policies
Group the records based on Policy Type Code	GROUP BY Policy_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of Settlements	SELECT COUNT ( * ) FROM Settlements
Get the number of Settlements	SELECT COUNT ( * ) FROM Settlements
Get Payment ID and Date Payment Made and Amount Payment of Payments	SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments
Keep the records that Payment Method Code is Visa	WHERE Payment_Method_Code = Visa
Get Payment ID and Date Payment Made and Amount Payment of Payments	SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments
Keep the records that Payment Method Code is Visa	WHERE Payment_Method_Code = Visa
Get customer details of Customers	SELECT customer_details FROM Customers
Get customer details of Customers that has Customer Policies	SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2
Get customer details of Customers	SELECT customer_details FROM Customers
Get customer details of Customers that has Customer Policies	SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2
Get claim id and date claim made and Date Claim Settled of Claims that has Settlements	SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id
Group the records based on the number claim id of Claims 1 that the number is 1	GROUP BY T1.claim_id HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get claim id and date claim made and Date Claim Settled of Claims that has Settlements	SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id
Group the records based on the number claim id of Claims 1 that the number is 1	GROUP BY T1.claim_id HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get the SUM of Amount Claimed of Claims	SELECT SUM ( Amount_Claimed ) FROM Claims
Get the SUM of Amount Claimed of Claims	SELECT SUM ( Amount_Claimed ) FROM Claims
Get name of department	SELECT name FROM department
Group the records based on departmentID	GROUP BY departmentID
Order these records based on the the number of departmentID and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( departmentID ) DESC LIMIT 1
Get name of department	SELECT name FROM department
Group the records based on departmentID	GROUP BY departmentID
Order these records based on the the number of departmentID and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( departmentID ) DESC LIMIT 1
Get head of department	SELECT head FROM department
Group the records based on departmentID	GROUP BY departmentID
Order these records based on the the number of departmentID, and return the top 1 record	ORDER BY COUNT ( departmentID ) LIMIT 1
Get head of department	SELECT head FROM department
Group the records based on departmentID	GROUP BY departmentID
Order these records based on the the number of departmentID, and return the top 1 record	ORDER BY COUNT ( departmentID ) LIMIT 1
Get name and position of department that has physician	SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID
Group the records based on departmentID	GROUP BY departmentID
Order these records based on the the number of departmentID, and return the top 1 record	ORDER BY COUNT ( departmentID ) LIMIT 1
Get name and position of department that has physician	SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID
Group the records based on departmentID	GROUP BY departmentID
Order these records based on the the number of departmentID, and return the top 1 record	ORDER BY COUNT ( departmentID ) LIMIT 1
Get name of appointment that has patient	SELECT name FROM appointment AS T1 JOIN patient AS T2
Get name of appointment that has patient	SELECT name FROM appointment AS T1 JOIN patient AS T2
Get name and phone of appointment that has patient	SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn
Group the records based on the number patient of appointment 1 that the number is greater than 1	GROUP BY T1.patient HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name and phone of appointment that has patient	SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn
Group the records based on the number patient of appointment 1 that the number is greater than 1	GROUP BY T1.patient HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get appointmentid of appointment	SELECT appointmentid FROM appointment
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get appointmentid of appointment	SELECT appointmentid FROM appointment
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get name of appointment that has physician	SELECT T2.name FROM appointment AS T1 JOIN physician AS T2
Get name of appointment that has physician	SELECT T2.name FROM appointment AS T1 JOIN physician AS T2
Get name of physician	SELECT name FROM physician
Get name of appointment that has physician	SELECT T2.name FROM appointment AS T1 JOIN physician AS T2
Get name of physician	SELECT name FROM physician
Get name of appointment that has physician	SELECT T2.name FROM appointment AS T1 JOIN physician AS T2
Get name and name of physician that has affiliated with and department	SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that PrimaryAffiliation of affiliated with is 1	WHERE T2.PrimaryAffiliation = 1
Get name and name of physician that has affiliated with and department	SELECT T1.name , T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that PrimaryAffiliation of affiliated with is 1	WHERE T2.PrimaryAffiliation = 1
Get name of patient that has appointment	SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient
Order these records based on the start of appointment and sort them in descending order, and return the top 1 record	ORDER BY T2.start DESC LIMIT 1
Get name of patient that has appointment	SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient
Order these records based on the start of appointment and sort them in descending order, and return the top 1 record	ORDER BY T2.start DESC LIMIT 1
Get the number of patient of stay	SELECT COUNT ( patient ) FROM stay
Keep the records that room is 112	WHERE room = 112
Get the number of patient of stay	SELECT COUNT ( patient ) FROM stay
Keep the records that room is 112	WHERE room = 112
Get the number of SSN of patient that has prescribes and physician	SELECT COUNT ( T1.SSN ) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid
Keep the records that name of physician is John Dorian	WHERE T3.name = John Dorian
Get the number of SSN of patient that has prescribes and physician	SELECT COUNT ( T1.SSN ) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid
Keep the records that name of physician is John Dorian	WHERE T3.name = John Dorian
Get name of stay that has patient and Prescribes and Medication	SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code
Keep the records that room is 111	WHERE room = 111
Get name of stay that has patient and Prescribes and Medication	SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code
Keep the records that room is 111	WHERE room = 111
Get patient of stay	SELECT patient FROM stay
Keep the records that room is 111	WHERE room = 111 
Order these records based on the staystart and sort them in descending order, and return the top 1 record	ORDER BY staystart DESC LIMIT 1
Get patient of stay	SELECT patient FROM stay
Keep the records that room is 111	WHERE room = 111 
Order these records based on the staystart and sort them in descending order, and return the top 1 record	ORDER BY staystart DESC LIMIT 1
Get name of nurse that has appointment	SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse
Group the records based on employeeid of nurse	GROUP BY T1.employeeid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of nurse that has appointment	SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse
Group the records based on employeeid of nurse	GROUP BY T1.employeeid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and name of physician that has patient	SELECT T1.name , COUNT ( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP
Group the records based on employeeid of physician	GROUP BY T1.employeeid
Get the number and name of physician that has patient	SELECT T1.name , COUNT ( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP
Group the records based on employeeid of physician	GROUP BY T1.employeeid
Get name of physician that has patient	SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP
Group the records based on the number employeeid of physician 1 that the number is greater than 1	GROUP BY T1.employeeid HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of physician that has patient	SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP
Group the records based on the number employeeid of physician 1 that the number is greater than 1	GROUP BY T1.employeeid HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number AND blockfloor of BLOCK that has room	SELECT COUNT ( * ) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor
Group the records based on blockfloor of BLOCK	GROUP BY T1.blockfloor
Get the number AND blockfloor of BLOCK that has room	SELECT COUNT ( * ) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor
Group the records based on blockfloor of BLOCK	GROUP BY T1.blockfloor
Get the number AND blockcode of BLOCK that has room	SELECT COUNT ( * ) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor
Group the records based on blockcode of BLOCK	GROUP BY T1.blockcode
Get the number AND blockcode of BLOCK that has room	SELECT COUNT ( * ) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor
Group the records based on blockcode of BLOCK	GROUP BY T1.blockcode
Get blockcode of room	SELECT DISTINCT blockcode FROM room
Keep the records that unavailable is 0	WHERE unavailable = 0
Get blockcode of room	SELECT DISTINCT blockcode FROM room
Keep the records that unavailable is 0	WHERE unavailable = 0
Get the number of distinct roomtype of room	SELECT COUNT ( DISTINCT roomtype ) FROM room
Get the number of distinct roomtype of room	SELECT COUNT ( DISTINCT roomtype ) FROM room
Get name of physician that has prescribes and medication	SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication
Keep the records that name of medication is Thesisin	WHERE T3.name = Thesisin
Get name of physician that has prescribes and medication	SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication
Keep the records that name of medication is Thesisin	WHERE T3.name = Thesisin
Get name and position of physician that has prescribes and medication	SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication
Keep the records that Brand of medication is X	WHERE T3.Brand = X
Get name and position of physician that has prescribes and medication	SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication
Keep the records that Brand of medication is X	WHERE T3.Brand = X
Get the number and name of medication that has prescribes	SELECT COUNT ( * ) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication
Group the records based on brand of medication	GROUP BY T1.brand
Get the number and name of medication that has prescribes	SELECT COUNT ( * ) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication
Group the records based on brand of medication	GROUP BY T1.brand
Get name of physician	SELECT name FROM physician
Keep the records that is in the form of %senior%	WHERE POSITION LIKE %senior%
Get name of physician	SELECT name FROM physician
Keep the records that is in the form of %senior%	WHERE POSITION LIKE %senior%
Get patient of undergoes	SELECT patient FROM undergoes
Order these records based on the dateundergoes, and return the top 1 record	ORDER BY dateundergoes LIMIT 1
Get patient of undergoes	SELECT patient FROM undergoes
Order these records based on the dateundergoes, and return the top 1 record	ORDER BY dateundergoes LIMIT 1
Get name of undergoes that has patient and stay	SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID
Keep the records that room of stay is 111	WHERE T3.room = 111
Get name of undergoes that has patient and stay	SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID
Keep the records that room of stay is 111	WHERE T3.room = 111
Get name of nurse	SELECT DISTINCT name FROM nurse
Order these records based on the name	ORDER BY name 
Get name of nurse	SELECT DISTINCT name FROM nurse
Order these records based on the name	ORDER BY name 
Get name of undergoes that has nurse	SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2
Get name of undergoes that has nurse	SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2
Get name of medication	SELECT DISTINCT name FROM medication
Order these records based on the name	ORDER BY name 
Get name of medication	SELECT DISTINCT name FROM medication
Order these records based on the name	ORDER BY name 
Get name of physician that has prescribes	SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician
Order these records based on the dose of prescribes and sort them in descending order, and return the top 1 record	ORDER BY T2.dose DESC LIMIT 1
Get name of physician that has prescribes	SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician
Order these records based on the dose of prescribes and sort them in descending order, and return the top 1 record	ORDER BY T2.dose DESC LIMIT 1
Get physician and department of affiliated with	SELECT physician , department FROM affiliated_with
Keep the records that primaryaffiliation is 1	WHERE primaryaffiliation = 1
Get physician and department of affiliated with	SELECT physician , department FROM affiliated_with
Keep the records that primaryaffiliation is 1	WHERE primaryaffiliation = 1
Get name of affiliated with that has department	SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid
Keep the records that PrimaryAffiliation is 1	WHERE PrimaryAffiliation = 1
Get name of affiliated with that has department	SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid
Keep the records that PrimaryAffiliation is 1	WHERE PrimaryAffiliation = 1
Get nurse of on call	SELECT nurse FROM on_call
Keep the records that blockfloor is 1 AND blockcode is 1	WHERE blockfloor = 1 AND blockcode = 1
Get nurse of on call	SELECT nurse FROM on_call
Keep the records that blockfloor is 1 AND blockcode is 1	WHERE blockfloor = 1 AND blockcode = 1
Get the maximum value of cost and the minimum value of cost and the average value of cost of procedures	SELECT MAX ( cost ) , MIN ( cost ) , AVG ( cost ) FROM procedures
Get the maximum value of cost and the minimum value of cost and the average value of cost of procedures	SELECT MAX ( cost ) , MIN ( cost ) , AVG ( cost ) FROM procedures
Get name and cost of procedures	SELECT name , cost FROM procedures
Order these records based on the cost and sort them in descending ORDER	ORDER BY cost DESC 
Get name and cost of procedures	SELECT name , cost FROM procedures
Order these records based on the cost and sort them in descending ORDER	ORDER BY cost DESC 
Get name of procedures	SELECT name FROM procedures
Order these records based on the cost, and return the top 3 records	ORDER BY cost LIMIT 3
Get name of procedures	SELECT name FROM procedures
Order these records based on the cost, and return the top 3 records	ORDER BY cost LIMIT 3
Get name of physician that has trained in and procedures	SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that cost of procedures is greater than 5000	WHERE T3.cost > 5000
Get name of physician that has trained in and procedures	SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that cost of procedures is greater than 5000	WHERE T3.cost > 5000
Get name of physician that has trained in and procedures	SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Order these records based on the cost of procedures and sort them in descending order, and return the top 1 record	ORDER BY T3.cost DESC LIMIT 1
Get name of physician that has trained in and procedures	SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Order these records based on the cost of procedures and sort them in descending order, and return the top 1 record	ORDER BY T3.cost DESC LIMIT 1
Get the average value of cost of physician that has trained in and procedures	SELECT AVG ( T3.cost ) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get the average value of cost of physician that has trained in and procedures	SELECT AVG ( T3.cost ) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of procedures	SELECT name FROM procedures
Keep the records that cost is greater than 1000	WHERE cost > 1000
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of procedures	SELECT name FROM procedures
Keep the records that cost is greater than 1000	WHERE cost > 1000
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of procedures	SELECT name FROM procedures
Keep the records that cost is greater than 1000	WHERE cost > 1000
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of procedures	SELECT name FROM procedures
Keep the records that cost is greater than 1000	WHERE cost > 1000
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of procedures	SELECT name FROM procedures
Keep the records that cost is less than 5000	WHERE cost < 5000
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of procedures	SELECT name FROM procedures
Keep the records that cost is less than 5000	WHERE cost < 5000
Get name of physician that has trained in and procedures	SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment
Keep the records that name of physician is John Wen	WHERE T1.name = John Wen
Get name of physician that has affiliated with and department	SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that name of department is Surgery	WHERE T3.name = Surgery
Get name of physician that has affiliated with and department	SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that name of department is Psychiatry	WHERE T3.name = Psychiatry
Get name of physician that has affiliated with and department	SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that name of department is Surgery	WHERE T3.name = Surgery
Get name of physician that has affiliated with and department	SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that name of department is Psychiatry	WHERE T3.name = Psychiatry
Get name of physician that has affiliated with and department	SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that name of department is Surgery OR name of department is Psychiatry	WHERE T3.name = Surgery OR T3.name = Psychiatry
Get name of physician that has affiliated with and department	SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID
Keep the records that name of department is Surgery OR name of department is Psychiatry	WHERE T3.name = Surgery OR T3.name = Psychiatry
Get name of patient	SELECT name FROM patient
Get name of patient that has Prescribes and Medication	SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code
Keep the records that name of Medication is Procrastin-X	WHERE T3.name = Procrastin-X
Get name of patient	SELECT name FROM patient
Get name of patient that has Prescribes and Medication	SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code
Keep the records that name of Medication is Procrastin-X	WHERE T3.name = Procrastin-X
Get patient of Prescribes that has Medication	SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code
Keep the records that name of Medication is Procrastin-X	WHERE T2.name = Procrastin-X
Get the number of patient	SELECT COUNT ( * ) FROM patient
Keep the records that SSN is not in the first query result	WHERE SSN NOT IN ( the first query result ) 
Get patient of Prescribes that has Medication	SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code
Keep the records that name of Medication is Procrastin-X	WHERE T2.name = Procrastin-X
Get the number of patient	SELECT COUNT ( * ) FROM patient
Keep the records that SSN is not in the first query result	WHERE SSN NOT IN ( the first query result ) 
Get the number of appointment	SELECT COUNT ( * ) FROM appointment
Get the number of appointment	SELECT COUNT ( * ) FROM appointment
Get name of nurse that has on call	SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2
Get name of nurse that has on call	SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2
Get the number of ship	SELECT COUNT ( * ) FROM ship
Get the number of ship	SELECT COUNT ( * ) FROM ship
Get Name of ship	SELECT Name FROM ship
Order these records based on the Tonnage and sort them in ascending ORDER	ORDER BY Tonnage ASC 
Get Name of ship	SELECT Name FROM ship
Order these records based on the Tonnage and sort them in ascending ORDER	ORDER BY Tonnage ASC 
Get Nationality of ship	SELECT TYPE , Nationality FROM ship
Get Nationality of ship	SELECT TYPE , Nationality FROM ship
Get Name of ship	SELECT Name FROM ship
Keep the records that Nationality is not United States	WHERE Nationality != United States
Get Name of ship	SELECT Name FROM ship
Keep the records that Nationality is not United States	WHERE Nationality != United States
Get Name of ship	SELECT Name FROM ship
Keep the records that Nationality is United States OR Nationality is United Kingdom	WHERE Nationality = United States OR Nationality = United Kingdom
Get Name of ship	SELECT Name FROM ship
Keep the records that Nationality is United States OR Nationality is United Kingdom	WHERE Nationality = United States OR Nationality = United Kingdom
Get Name of ship	SELECT Name FROM ship
Order these records based on the Tonnage and sort them in descending order, and return the top 1 record	ORDER BY Tonnage DESC LIMIT 1
Get Name of ship	SELECT Name FROM ship
Order these records based on the Tonnage and sort them in descending order, and return the top 1 record	ORDER BY Tonnage DESC LIMIT 1
Get the number of ship	SELECT TYPE , COUNT ( * ) FROM ship
Group the records based on	GROUP BY
Get the number of ship	SELECT TYPE , COUNT ( * ) FROM ship
Group the records based on	GROUP BY
Get of ship	SELECT TYPE FROM ship
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of ship	SELECT TYPE FROM ship
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nationality of ship	SELECT Nationality FROM ship
Group the records based on the number Nationality 2 that the number is greater than 2	GROUP BY Nationality HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Nationality of ship	SELECT Nationality FROM ship
Group the records based on the number Nationality 2 that the number is greater than 2	GROUP BY Nationality HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the average value of Tonnage of ship	SELECT TYPE , AVG ( Tonnage ) FROM ship
Group the records based on	GROUP BY
Get the average value of Tonnage of ship	SELECT TYPE , AVG ( Tonnage ) FROM ship
Group the records based on	GROUP BY
Get Code and Fate and Name of mission that has ship	SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2
Get Code and Fate and Name of mission that has ship	SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2
Get Name of mission that has ship	SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
Keep the records that Launched Year of mission is greater than 1928	WHERE T1.Launched_Year > 1928
Get Name of mission that has ship	SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
Keep the records that Launched Year of mission is greater than 1928	WHERE T1.Launched_Year > 1928
Get Fate of mission that has ship	SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
Keep the records that Nationality of ship is United States	WHERE T2.Nationality = United States
Get Fate of mission that has ship	SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID
Keep the records that Nationality of ship is United States	WHERE T2.Nationality = United States
Get Ship ID of mission	SELECT Ship_ID FROM mission
Get Name of ship	SELECT Name FROM ship
Keep the records that Ship ID is not in the first query result	WHERE Ship_ID NOT IN ( the first query result ) 
Get Ship ID of mission	SELECT Ship_ID FROM mission
Get Name of ship	SELECT Name FROM ship
Keep the records that Ship ID is not in the first query result	WHERE Ship_ID NOT IN ( the first query result ) 
Get of ship	SELECT TYPE FROM ship
Keep the records that Tonnage is greater than 6000	WHERE Tonnage > 6000
Get of ship	SELECT TYPE FROM ship
Keep the records that Tonnage is less than 4000	WHERE Tonnage < 4000
Get of ship	SELECT TYPE FROM ship
Keep the records that Tonnage is greater than 6000	WHERE Tonnage > 6000
Get of ship	SELECT TYPE FROM ship
Keep the records that Tonnage is less than 4000	WHERE Tonnage < 4000
Get the number of list	SELECT COUNT ( * ) FROM list
Get the number of list	SELECT COUNT ( * ) FROM list
Get lastname of list	SELECT lastname FROM list
Keep the records that classroom is 111	WHERE classroom = 111
Get lastname of list	SELECT lastname FROM list
Keep the records that classroom is 111	WHERE classroom = 111
Get firstname of list	SELECT firstname FROM list
Keep the records that classroom is 108	WHERE classroom = 108
Get firstname of list	SELECT firstname FROM list
Keep the records that classroom is 108	WHERE classroom = 108
Get firstname of list	SELECT DISTINCT firstname FROM list
Keep the records that classroom is 107	WHERE classroom = 107
Get firstname of list	SELECT DISTINCT firstname FROM list
Keep the records that classroom is 107	WHERE classroom = 107
Get classroom and grade of list	SELECT DISTINCT classroom , grade FROM list
Get classroom and grade of list	SELECT DISTINCT classroom , grade FROM list
Get grade of list	SELECT DISTINCT grade FROM list
Keep the records that classroom is 103	WHERE classroom = 103
Get grade of list	SELECT DISTINCT grade FROM list
Keep the records that classroom is 103	WHERE classroom = 103
Get grade of list	SELECT DISTINCT grade FROM list
Keep the records that classroom is 105	WHERE classroom = 105
Get grade of list	SELECT DISTINCT grade FROM list
Keep the records that classroom is 105	WHERE classroom = 105
Get classroom of list	SELECT DISTINCT classroom FROM list
Keep the records that grade is 4	WHERE grade = 4
Get classroom of list	SELECT DISTINCT classroom FROM list
Keep the records that grade is 4	WHERE grade = 4
Get classroom of list	SELECT DISTINCT classroom FROM list
Keep the records that grade is 5	WHERE grade = 5
Get classroom of list	SELECT DISTINCT classroom FROM list
Keep the records that grade is 5	WHERE grade = 5
Get lastname of list that has teachers	SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade is 5	WHERE grade = 5
Get lastname of list that has teachers	SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade is 5	WHERE grade = 5
Get firstname of list that has teachers	SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade is 1	WHERE grade = 1
Get firstname of list that has teachers	SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade is 1	WHERE grade = 1
Get firstname of teachers	SELECT firstname FROM teachers
Keep the records that classroom is 110	WHERE classroom = 110
Get firstname of teachers	SELECT firstname FROM teachers
Keep the records that classroom is 110	WHERE classroom = 110
Get lastname of teachers	SELECT lastname FROM teachers
Keep the records that classroom is 109	WHERE classroom = 109
Get lastname of teachers	SELECT lastname FROM teachers
Keep the records that classroom is 109	WHERE classroom = 109
Get firstname and lastname of teachers	SELECT DISTINCT firstname , lastname FROM teachers
Get firstname and lastname of teachers	SELECT DISTINCT firstname , lastname FROM teachers
Get firstname and lastname of list	SELECT DISTINCT firstname , lastname FROM list
Get firstname and lastname of list	SELECT DISTINCT firstname , lastname FROM list
Get firstname AND lastname of list that has teachers	SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is OTHA AND lastname of teachers is MOYER	WHERE T2.firstname = OTHA AND T2.lastname = MOYER
Get firstname AND lastname of list that has teachers	SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is OTHA AND lastname of teachers is MOYER	WHERE T2.firstname = OTHA AND T2.lastname = MOYER
Get firstname AND lastname of list that has teachers	SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is MARROTTE AND lastname of teachers is KIRK	WHERE T2.firstname = MARROTTE AND T2.lastname = KIRK
Get firstname AND lastname of list that has teachers	SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is MARROTTE AND lastname of teachers is KIRK	WHERE T2.firstname = MARROTTE AND T2.lastname = KIRK
Get firstname AND lastname of list that has teachers	SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is EVELINA AND lastname of list is BROMLEY	WHERE T1.firstname = EVELINA AND T1.lastname = BROMLEY
Get firstname AND lastname of list that has teachers	SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is EVELINA AND lastname of list is BROMLEY	WHERE T1.firstname = EVELINA AND T1.lastname = BROMLEY
Get lastname of list that has teachers	SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is GELL AND lastname of list is TAMI	WHERE T1.firstname = GELL AND T1.lastname = TAMI
Get lastname of list that has teachers	SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is GELL AND lastname of list is TAMI	WHERE T1.firstname = GELL AND T1.lastname = TAMI
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is LORIA AND lastname of teachers is ONDERSMA	WHERE T2.firstname = LORIA AND T2.lastname = ONDERSMA
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is LORIA AND lastname of teachers is ONDERSMA	WHERE T2.firstname = LORIA AND T2.lastname = ONDERSMA
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is KAWA AND lastname of teachers is GORDON	WHERE T2.firstname = KAWA AND T2.lastname = GORDON
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is KAWA AND lastname of teachers is GORDON	WHERE T2.firstname = KAWA AND T2.lastname = GORDON
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is TARRING AND lastname of teachers is LEIA	WHERE T2.firstname = TARRING AND T2.lastname = LEIA
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is TARRING AND lastname of teachers is LEIA	WHERE T2.firstname = TARRING AND T2.lastname = LEIA
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is CHRISSY AND lastname of list is NABOZNY	WHERE T1.firstname = CHRISSY AND T1.lastname = NABOZNY
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is CHRISSY AND lastname of list is NABOZNY	WHERE T1.firstname = CHRISSY AND T1.lastname = NABOZNY
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is MADLOCK AND lastname of list is RAY	WHERE T1.firstname = MADLOCK AND T1.lastname = RAY
Get the number of list that has teachers	SELECT COUNT ( * ) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of list is MADLOCK AND lastname of list is RAY	WHERE T1.firstname = MADLOCK AND T1.lastname = RAY
Get firstname and lastname of list that has teachers	SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade of list is 1	WHERE T1.grade = 1
Get firstname AND lastname of list that has teachers	SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is OTHA AND lastname of teachers is MOYER	WHERE T2.firstname = OTHA AND T2.lastname = MOYER
Get firstname and lastname of list that has teachers	SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade of list is 1	WHERE T1.grade = 1
Get firstname AND lastname of list that has teachers	SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that firstname of teachers is OTHA AND lastname of teachers is MOYER	WHERE T2.firstname = OTHA AND T2.lastname = MOYER
Get lastname of list that has teachers	SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade of list is 3 AND firstname of teachers is not COVIN AND lastname of teachers is not JEROME	WHERE T1.grade = 3 AND T2.firstname != COVIN AND T2.lastname != JEROME
Get lastname of list that has teachers	SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Keep the records that grade of list is 3 AND firstname of teachers is not COVIN AND lastname of teachers is not JEROME	WHERE T1.grade = 3 AND T2.firstname != COVIN AND T2.lastname != JEROME
Get the number of distinct classroom and the number and grade of list	SELECT grade , COUNT ( DISTINCT classroom ) , COUNT ( * ) FROM list
Group the records based on grade	GROUP BY grade
Get the number of distinct classroom and the number and grade of list	SELECT grade , COUNT ( DISTINCT classroom ) , COUNT ( * ) FROM list
Group the records based on grade	GROUP BY grade
Get the number of distinct grade and classroom of list	SELECT classroom , COUNT ( DISTINCT grade ) FROM list
Group the records based on classroom	GROUP BY classroom
Get the number of distinct grade and classroom of list	SELECT classroom , COUNT ( DISTINCT grade ) FROM list
Group the records based on classroom	GROUP BY classroom
Get classroom of list	SELECT classroom FROM list
Group the records based on classroom	GROUP BY classroom
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get classroom of list	SELECT classroom FROM list
Group the records based on classroom	GROUP BY classroom
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and classroom of list	SELECT classroom , COUNT ( * ) FROM list
Group the records based on classroom	GROUP BY classroom
Get the number and classroom of list	SELECT classroom , COUNT ( * ) FROM list
Group the records based on classroom	GROUP BY classroom
Get the number and classroom of list	SELECT classroom , COUNT ( * ) FROM list
Keep the records that grade is 0	WHERE grade = 0 
Group the records based on classroom	GROUP BY classroom
Get the number and classroom of list	SELECT classroom , COUNT ( * ) FROM list
Keep the records that grade is 0	WHERE grade = 0 
Group the records based on classroom	GROUP BY classroom
Get the number and classroom of list	SELECT classroom , COUNT ( * ) FROM list
Keep the records that grade is 4	WHERE grade = 4 
Group the records based on classroom	GROUP BY classroom
Get the number and classroom of list	SELECT classroom , COUNT ( * ) FROM list
Keep the records that grade is 4	WHERE grade = 4 
Group the records based on classroom	GROUP BY classroom
Get firstname and lastname of list that has teachers	SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Group the records based on firstname of teachers lastname of teachers	GROUP BY T2.firstname , T2.lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get firstname and lastname of list that has teachers	SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom
Group the records based on firstname of teachers lastname of teachers	GROUP BY T2.firstname , T2.lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and classroom of list	SELECT COUNT ( * ) , classroom FROM list
Group the records based on classroom	GROUP BY classroom
Get the number and classroom of list	SELECT COUNT ( * ) , classroom FROM list
Group the records based on classroom	GROUP BY classroom
Get the number of company	SELECT COUNT ( * ) FROM company
Keep the records that Headquarters is USA	WHERE Headquarters = USA
Get Name of company	SELECT Name FROM company
Order these records based on the Sales in Billion and sort them in ascending ORDER	ORDER BY Sales_in_Billion ASC 
Get Headquarters and Industry of company	SELECT Headquarters , Industry FROM company
Get Name of company	SELECT Name FROM company
Keep the records that Industry is Banking OR Industry is Retailing	WHERE Industry = Banking OR Industry = Retailing
Get the maximum value of Market Value in Billion and the minimum value of Market Value in Billion of company	SELECT MAX ( Market_Value_in_Billion ) , MIN ( Market_Value_in_Billion ) FROM company
Get Headquarters of company	SELECT Headquarters FROM company
Order these records based on the Sales in Billion and sort them in descending order, and return the top 1 record	ORDER BY Sales_in_Billion DESC LIMIT 1
Get the number and Headquarters of company	SELECT Headquarters , COUNT ( * ) FROM company
Group the records based on Headquarters	GROUP BY Headquarters
Get Headquarters of company	SELECT Headquarters FROM company
Group the records based on Headquarters	GROUP BY Headquarters
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Headquarters of company	SELECT Headquarters FROM company
Group the records based on the number Headquarters 2 that the number is greater than or equal to 2	GROUP BY Headquarters HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Headquarters of company	SELECT Headquarters FROM company
Keep the records that Industry is Banking	WHERE Industry = Banking
Get Headquarters of company	SELECT Headquarters FROM company
Keep the records that Industry is Oil and gas	WHERE Industry = Oil and gas
Get Name and Name of employment that has people and company	SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3
Get Name and Name of employment that has people and company	SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
Order these records based on the Year working of employment	ORDER BY T1.Year_working 
Get Name of employment that has people and company	SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
Keep the records that Sales in Billion of company is greater than 200	WHERE T3.Sales_in_Billion > 200
Get the number and Name of employment that has people and company	SELECT T3.Name , COUNT ( * ) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID
Group the records based on Name of company	GROUP BY T3.Name
Get People ID of employment	SELECT People_ID FROM employment
Get Name of people	SELECT Name FROM people
Keep the records that People ID is not in the first query result	WHERE People_ID NOT IN ( the first query result ) 
Get name of company	SELECT name FROM company
Keep the records that Sales in Billion is greater than 200	WHERE Sales_in_Billion > 200 
Order these records based on the Sales in Billion Profits in Billion and sort them in descending ORDER	ORDER BY Sales_in_Billion , Profits_in_Billion DESC 
Get the number of film	SELECT COUNT ( * ) FROM film
Get the number of film	SELECT COUNT ( * ) FROM film
Get Director of film	SELECT DISTINCT Director FROM film
Get Director of film	SELECT DISTINCT Director FROM film
Get the average value of Gross in dollar of film	SELECT AVG ( Gross_in_dollar ) FROM film
Get the average value of Gross in dollar of film	SELECT AVG ( Gross_in_dollar ) FROM film
Get Low Estimate and High Estimate of film market estimation	SELECT Low_Estimate , High_Estimate FROM film_market_estimation
Get Low Estimate and High Estimate of film market estimation	SELECT Low_Estimate , High_Estimate FROM film_market_estimation
Get of film market estimation	SELECT TYPE FROM film_market_estimation
Keep the records that is 1995	WHERE YEAR = 1995
Get of film market estimation	SELECT TYPE FROM film_market_estimation
Keep the records that is 1995	WHERE YEAR = 1995
Get the maximum value of Number cities and the minimum value of Number cities of market	SELECT MAX ( Number_cities ) , MIN ( Number_cities ) FROM market
Get the maximum value of Number cities and the minimum value of Number cities of market	SELECT MAX ( Number_cities ) , MIN ( Number_cities ) FROM market
Get the number of market	SELECT COUNT ( * ) FROM market
Keep the records that Number cities is less than 300	WHERE Number_cities < 300
Get the number of market	SELECT COUNT ( * ) FROM market
Keep the records that Number cities is less than 300	WHERE Number_cities < 300
Get Country of market	SELECT Country FROM market
Order these records based on the Country and sort them in ascending ORDER	ORDER BY Country ASC 
Get Country of market	SELECT Country FROM market
Order these records based on the Country and sort them in ascending ORDER	ORDER BY Country ASC 
Get Country of market	SELECT Country FROM market
Order these records based on the Number cities and sort them in descending ORDER	ORDER BY Number_cities DESC 
Get Country of market	SELECT Country FROM market
Order these records based on the Number cities and sort them in descending ORDER	ORDER BY Number_cities DESC 
Get Title and Type of film that has film market estimation	SELECT T1.Title , T2.Type FROM film AS T1 JOIN film_market_estimation AS T2
Get Title and Type of film that has film market estimation	SELECT T1.Title , T2.Type FROM film AS T1 JOIN film_market_estimation AS T2
Get Director of film that has film market estimation	SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
Keep the records that Year of film market estimation is 1995	WHERE T2.Year = 1995
Get Director of film that has film market estimation	SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
Keep the records that Year of film market estimation is 1995	WHERE T2.Year = 1995
Get the average value of Number cities of film market estimation that has market	SELECT AVG ( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
Keep the records that Low Estimate of film market estimation is greater than 10000	WHERE T1.Low_Estimate > 10000
Get the average value of Number cities of film market estimation that has market	SELECT AVG ( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
Keep the records that Low Estimate of film market estimation is greater than 10000	WHERE T1.Low_Estimate > 10000
Get Country and Year of film market estimation that has market	SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2
Get Country and Year of film market estimation that has market	SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2
Get Year of film market estimation that has market	SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
Keep the records that Country of market is Japan	WHERE T2.Country = Japan 
Order these records based on the Year of film market estimation and sort them in descending ORDER	ORDER BY T1.Year DESC 
Get Year of film market estimation that has market	SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID
Keep the records that Country of market is Japan	WHERE T2.Country = Japan 
Order these records based on the Year of film market estimation and sort them in descending ORDER	ORDER BY T1.Year DESC 
Get the number and Studio of film	SELECT Studio , COUNT ( * ) FROM film
Group the records based on Studio	GROUP BY Studio
Get the number and Studio of film	SELECT Studio , COUNT ( * ) FROM film
Group the records based on Studio	GROUP BY Studio
Get Studio of film	SELECT Studio FROM film
Group the records based on Studio	GROUP BY Studio
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Studio of film	SELECT Studio FROM film
Group the records based on Studio	GROUP BY Studio
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Studio of film	SELECT Studio FROM film
Group the records based on the number Studio 2 that the number is greater than or equal to 2	GROUP BY Studio HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Studio of film	SELECT Studio FROM film
Group the records based on the number Studio 2 that the number is greater than or equal to 2	GROUP BY Studio HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Film ID of film market estimation	SELECT Film_ID FROM film_market_estimation
Get Title of film	SELECT Title FROM film
Keep the records that Film ID is not in the first query result	WHERE Film_ID NOT IN ( the first query result ) 
Get Film ID of film market estimation	SELECT Film_ID FROM film_market_estimation
Get Title of film	SELECT Title FROM film
Keep the records that Film ID is not in the first query result	WHERE Film_ID NOT IN ( the first query result ) 
Get Studio of film	SELECT Studio FROM film
Keep the records that Director is Nicholas Meyer	WHERE Director = Nicholas Meyer
Get Studio of film	SELECT Studio FROM film
Keep the records that Director is Walter Hill	WHERE Director = Walter Hill
Get Studio of film	SELECT Studio FROM film
Keep the records that Director is Nicholas Meyer	WHERE Director = Nicholas Meyer
Get Studio of film	SELECT Studio FROM film
Keep the records that Director is Walter Hill	WHERE Director = Walter Hill
Get title and Studio of film	SELECT title , Studio FROM film
Keep the records that Studio is in the form of %Universal%	WHERE Studio LIKE %Universal%
Get title and Studio of film	SELECT title , Studio FROM film
Keep the records that Studio is in the form of %Universal%	WHERE Studio LIKE %Universal%
Get Studio of film	SELECT Studio FROM film
Get Studio of film	SELECT Studio FROM film
Keep the records that Director is Walter Hill	WHERE Director = Walter Hill
Get Studio of film	SELECT Studio FROM film
Get Studio of film	SELECT Studio FROM film
Keep the records that Director is Walter Hill	WHERE Director = Walter Hill
Get Studio of film	SELECT Studio FROM film
Group the records based on the average value of Gross in dollar Studio 4500000 that the average value of Gross in dollar is greater than or equal to 4500000	GROUP BY Studio HAVING AVG ( Gross_in_dollar ) >= 4500000 HAVING AVG ( Gross_in_dollar ) >= 4500000
Get Studio of film	SELECT Studio FROM film
Group the records based on the average value of Gross in dollar Studio 4500000 that the average value of Gross in dollar is greater than or equal to 4500000	GROUP BY Studio HAVING AVG ( Gross_in_dollar ) >= 4500000 HAVING AVG ( Gross_in_dollar ) >= 4500000
Get title of film that has film market estimation	SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
Order these records based on the high estimate and sort them in descending order, and return the top 1 record	ORDER BY high_estimate DESC LIMIT 1
Get title of film that has film market estimation	SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID
Order these records based on the high estimate and sort them in descending order, and return the top 1 record	ORDER BY high_estimate DESC LIMIT 1
Get film id of film market estimation that has market	SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID
Keep the records that country is China	WHERE country = China
Get title and director of film	SELECT title , director FROM film
Keep the records that film id is not in the first query result	WHERE film_id NOT IN ( the first query result ) 
Get film id of film market estimation that has market	SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID
Keep the records that country is China	WHERE country = China
Get title and director of film	SELECT title , director FROM film
Keep the records that film id is not in the first query result	WHERE film_id NOT IN ( the first query result ) 
Get the number of Ref calendar	SELECT COUNT ( * ) FROM Ref_calendar
Get the number of Ref calendar	SELECT COUNT ( * ) FROM Ref_calendar
Get calendar date and day Number of Ref calendar	SELECT calendar_date , day_Number FROM Ref_calendar
Get calendar date and day Number of Ref calendar	SELECT calendar_date , day_Number FROM Ref_calendar
Get the number of Ref document types	SELECT COUNT ( * ) FROM Ref_document_types
Get the number of Ref document types	SELECT COUNT ( * ) FROM Ref_document_types
Get document type code and document type name of Ref document types	SELECT document_type_code , document_type_name FROM Ref_document_types
Get document type code and document type name of Ref document types	SELECT document_type_code , document_type_name FROM Ref_document_types
Get document type name and document type description of Ref document types	SELECT document_type_name , document_type_description FROM Ref_document_types
Keep the records that document type code is RV	WHERE document_type_code = RV
Get document type name and document type description of Ref document types	SELECT document_type_name , document_type_description FROM Ref_document_types
Keep the records that document type code is RV	WHERE document_type_code = RV
Get document type code of Ref document types	SELECT document_type_code FROM Ref_document_types
Keep the records that document type name is Paper	WHERE document_type_name = Paper
Get document type code of Ref document types	SELECT document_type_code FROM Ref_document_types
Keep the records that document type name is Paper	WHERE document_type_name = Paper
Get the number of All documents	SELECT COUNT ( * ) FROM All_documents
Keep the records that document type code is CV OR document type code is BK	WHERE document_type_code = CV OR document_type_code = BK
Get the number of All documents	SELECT COUNT ( * ) FROM All_documents
Keep the records that document type code is CV OR document type code is BK	WHERE document_type_code = CV OR document_type_code = BK
Get date stored of All documents	SELECT date_stored FROM All_documents
Keep the records that Document name is Marry CV	WHERE Document_name = Marry CV
Get date stored of All documents	SELECT date_stored FROM All_documents
Keep the records that Document name is Marry CV	WHERE Document_name = Marry CV
Get day Number and Date Stored of All documents that has Ref calendar	SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2
Get day Number and Date Stored of All documents that has Ref calendar	SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2
Get document type name of All documents that has Ref document types	SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code
Keep the records that document name of All documents is How to read a book	WHERE T1.document_name = How to read a book
Get document type name of All documents that has Ref document types	SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code
Keep the records that document name of All documents is How to read a book	WHERE T1.document_name = How to read a book
Get the number of Ref locations	SELECT COUNT ( * ) FROM Ref_locations
Get the number of Ref locations	SELECT COUNT ( * ) FROM Ref_locations
Get location code and location name of Ref locations	SELECT location_code , location_name FROM Ref_locations
Get location code and location name of Ref locations	SELECT location_code , location_name FROM Ref_locations
Get location name and location description of Ref locations	SELECT location_name , location_description FROM Ref_locations
Keep the records that location code is x	WHERE location_code = x
Get location name and location description of Ref locations	SELECT location_name , location_description FROM Ref_locations
Keep the records that location code is x	WHERE location_code = x
Get location code of Ref locations	SELECT location_code FROM Ref_locations
Keep the records that location name is Canada	WHERE location_name = Canada
Get location code of Ref locations	SELECT location_code FROM Ref_locations
Keep the records that location name is Canada	WHERE location_name = Canada
Get the number of	SELECT COUNT ( * ) FROM
Get the number of	SELECT COUNT ( * ) FROM
Get role code and role name and role description of	SELECT role_code , role_name , role_description FROM
Get role code and role name and role description of	SELECT role_code , role_name , role_description FROM
Get role name and role description of	SELECT role_name , role_description FROM
Keep the records that role code is MG	WHERE role_code = MG
Get role name and role description of	SELECT role_name , role_description FROM
Keep the records that role code is MG	WHERE role_code = MG
Get role description of	SELECT role_description FROM
Keep the records that role name is Proof Reader	WHERE role_name = Proof Reader
Get role description of	SELECT role_description FROM
Keep the records that role name is Proof Reader	WHERE role_name = Proof Reader
Get the number of Employees	SELECT COUNT ( * ) FROM Employees
Get the number of Employees	SELECT COUNT ( * ) FROM Employees
Get employee name and role code and date of birth of Employees	SELECT employee_name , role_code , date_of_birth FROM Employees
Keep the records that employee Name is Armani	WHERE employee_Name = Armani
Get employee name and role code and date of birth of Employees	SELECT employee_name , role_code , date_of_birth FROM Employees
Keep the records that employee Name is Armani	WHERE employee_Name = Armani
Get employee ID of Employees	SELECT employee_ID FROM Employees
Keep the records that employee name is Ebba	WHERE employee_name = Ebba
Get employee ID of Employees	SELECT employee_ID FROM Employees
Keep the records that employee name is Ebba	WHERE employee_name = Ebba
Get employee name of Employees	SELECT employee_name FROM Employees
Keep the records that role code is HR	WHERE role_code = HR
Get employee name of Employees	SELECT employee_name FROM Employees
Keep the records that role code is HR	WHERE role_code = HR
Get the number and role code of Employees	SELECT role_code , COUNT ( * ) FROM Employees
Group the records based on role code	GROUP BY role_code
Get the number and role code of Employees	SELECT role_code , COUNT ( * ) FROM Employees
Group the records based on role code	GROUP BY role_code
Get role code of Employees	SELECT role_code FROM Employees
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role code of Employees	SELECT role_code FROM Employees
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role code of Employees	SELECT role_code FROM Employees
Group the records based on the number role code 3 that the number is greater than or equal to 3	GROUP BY role_code HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get role code of Employees	SELECT role_code FROM Employees
Group the records based on the number role code 3 that the number is greater than or equal to 3	GROUP BY role_code HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get role code of Employees	SELECT role_code FROM Employees
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get role code of Employees	SELECT role_code FROM Employees
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get role name and role description of Employees that has ROLES	SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
Keep the records that employee name of Employees is Ebba	WHERE T1.employee_name = Ebba
Get role name and role description of Employees that has ROLES	SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
Keep the records that employee name of Employees is Ebba	WHERE T1.employee_name = Ebba
Get employee name of Employees that has ROLES	SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
Keep the records that role name of ROLES is Editor	WHERE T2.role_name = Editor
Get employee name of Employees that has ROLES	SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
Keep the records that role name of ROLES is Editor	WHERE T2.role_name = Editor
Get employee id of Employees that has ROLES	SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
Keep the records that role name of ROLES is Human Resource OR role name of ROLES is Manager	WHERE T2.role_name = Human Resource OR T2.role_name = Manager
Get employee id of Employees that has ROLES	SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code
Keep the records that role name of ROLES is Human Resource OR role name of ROLES is Manager	WHERE T2.role_name = Human Resource OR T2.role_name = Manager
Get location code of Document locations	SELECT DISTINCT location_code FROM Document_locations
Get location code of Document locations	SELECT DISTINCT location_code FROM Document_locations
Get location name of All documents that has Document locations and Ref locations	SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code
Keep the records that document name of All documents is Robin CV	WHERE T1.document_name = Robin CV
Get location name of All documents that has Document locations and Ref locations	SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code
Keep the records that document name of All documents is Robin CV	WHERE T1.document_name = Robin CV
Get location code and date in location FROM and date in locaton to of Document locations	SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations
Get location code and date in location FROM and date in locaton to of Document locations	SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations
Get date in location FROM and date in locaton to of Document locations that has All documents	SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id
Keep the records that document name of All documents is Robin CV	WHERE T2.document_name = Robin CV
Get date in location FROM and date in locaton to of Document locations that has All documents	SELECT T1.date_in_location_from , T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id
Keep the records that document name of All documents is Robin CV	WHERE T2.document_name = Robin CV
Get the number and location code of Document locations	SELECT location_code , COUNT ( * ) FROM Document_locations
Group the records based on location code	GROUP BY location_code
Get the number and location code of Document locations	SELECT location_code , COUNT ( * ) FROM Document_locations
Group the records based on location code	GROUP BY location_code
Get location code of Document locations	SELECT location_code FROM Document_locations
Group the records based on location code	GROUP BY location_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get location code of Document locations	SELECT location_code FROM Document_locations
Group the records based on location code	GROUP BY location_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get location code of Document locations	SELECT location_code FROM Document_locations
Group the records based on the number location code 3 that the number is greater than or equal to 3	GROUP BY location_code HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get location code of Document locations	SELECT location_code FROM Document_locations
Group the records based on the number location code 3 that the number is greater than or equal to 3	GROUP BY location_code HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get location name and location code of Document locations that has Ref locations	SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code
Group the records based on location code of Document locations	GROUP BY T1.location_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get location name and location code of Document locations that has Ref locations	SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code
Group the records based on location code of Document locations	GROUP BY T1.location_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get employee name and employee name of Documents to be destroyed that has Employees	SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3
Get employee name and employee name of Documents to be destroyed that has Employees	SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3
Get the number and Destruction Authorised BY Employee ID of Documents to be destroyed	SELECT Destruction_Authorised_by_Employee_ID , COUNT ( * ) FROM Documents_to_be_destroyed
Group the records based on Destruction Authorised BY Employee ID	GROUP BY Destruction_Authorised_by_Employee_ID
Get the number and Destruction Authorised BY Employee ID of Documents to be destroyed	SELECT Destruction_Authorised_by_Employee_ID , COUNT ( * ) FROM Documents_to_be_destroyed
Group the records based on Destruction Authorised BY Employee ID	GROUP BY Destruction_Authorised_by_Employee_ID
Get the number and Destroyed BY Employee ID of Documents to be destroyed	SELECT Destroyed_by_Employee_ID , COUNT ( * ) FROM Documents_to_be_destroyed
Group the records based on Destroyed BY Employee ID	GROUP BY Destroyed_by_Employee_ID
Get the number and Destroyed BY Employee ID of Documents to be destroyed	SELECT Destroyed_by_Employee_ID , COUNT ( * ) FROM Documents_to_be_destroyed
Group the records based on Destroyed BY Employee ID	GROUP BY Destroyed_by_Employee_ID
Get employee id of Employees	SELECT employee_id FROM Employees
Get Destruction Authorised by Employee ID of Documents to be destroyed	SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
Get employee id of Employees	SELECT employee_id FROM Employees
Get Destruction Authorised by Employee ID of Documents to be destroyed	SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
Get Destruction Authorised by Employee ID of Documents to be destroyed	SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
Get Destruction Authorised by Employee ID of Documents to be destroyed	SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
Get Destroyed by Employee ID of Documents to be destroyed	SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
Get Destroyed by Employee ID of Documents to be destroyed	SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
Get employee id of Employees	SELECT employee_id FROM Employees
Get Destroyed by Employee ID of Documents to be destroyed	SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
Get employee id of Employees	SELECT employee_id FROM Employees
Get Destroyed by Employee ID of Documents to be destroyed	SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
Get Destroyed by Employee ID of Documents to be destroyed	SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
Get Destruction Authorised by Employee ID of Documents to be destroyed	SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
Get Destroyed by Employee ID of Documents to be destroyed	SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed
Get Destruction Authorised by Employee ID of Documents to be destroyed	SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed
Get the number of club	SELECT COUNT ( * ) FROM club
Get the number of club	SELECT COUNT ( * ) FROM club
Get clubname of club	SELECT clubname FROM club
Get clubname of club	SELECT clubname FROM club
Get the number of student	SELECT COUNT ( * ) FROM student
Get the number of student	SELECT COUNT ( * ) FROM student
Get fname of student	SELECT DISTINCT fname FROM student
Get fname of student	SELECT DISTINCT fname FROM student
Get lname of club that has member of club and student	SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore	WHERE t1.clubname = Bootup Baltimore
Get lname of club that has member of club and student	SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore	WHERE t1.clubname = Bootup Baltimore
Get lname of club that has member of club and student	SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises	WHERE t1.clubname = Hopkins Student Enterprises
Get lname of club that has member of club and student	SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises	WHERE t1.clubname = Hopkins Student Enterprises
Get the number of club that has member of club and student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Tennis Club	WHERE t1.clubname = Tennis Club
Get the number of club that has member of club and student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Tennis Club	WHERE t1.clubname = Tennis Club
Get the number of club that has member of club and student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Pen and Paper Gaming	WHERE t1.clubname = Pen and Paper Gaming
Get the number of club that has member of club and student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Pen and Paper Gaming	WHERE t1.clubname = Pen and Paper Gaming
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Linda AND lname of student is Smith	WHERE t3.fname = Linda AND t3.lname = Smith
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Linda AND lname of student is Smith	WHERE t3.fname = Linda AND t3.lname = Smith
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Tracy AND lname of student is Kim	WHERE t3.fname = Tracy AND t3.lname = Kim
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Tracy AND lname of student is Kim	WHERE t3.fname = Tracy AND t3.lname = Kim
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND sex of student is F	WHERE t1.clubname = Bootup Baltimore AND t3.sex = F
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND sex of student is F	WHERE t1.clubname = Bootup Baltimore AND t3.sex = F
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises AND sex of student is M	WHERE t1.clubname = Hopkins Student Enterprises AND t3.sex = M
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises AND sex of student is M	WHERE t1.clubname = Hopkins Student Enterprises AND t3.sex = M
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND major of student is 600	WHERE t1.clubname = Bootup Baltimore AND t3.major = 600
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND major of student is 600	WHERE t1.clubname = Bootup Baltimore AND t3.major = 600
Get clubname of club that has member of club and student	SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that major of student is 600	WHERE t3.major = 600 
Group the records based on clubname of club	GROUP BY t1.clubname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get clubname of club that has member of club and student	SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that major of student is 600	WHERE t3.major = 600 
Group the records based on clubname of club	GROUP BY t1.clubname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get clubname of club that has member of club and student	SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that sex of student is F	WHERE t3.sex = F 
Group the records based on clubname of club	GROUP BY t1.clubname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get clubname of club that has member of club and student	SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that sex of student is F	WHERE t3.sex = F 
Group the records based on clubname of club	GROUP BY t1.clubname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get clubdesc of club	SELECT clubdesc FROM club
Keep the records that clubname is Tennis Club	WHERE clubname = Tennis Club
Get clubdesc of club	SELECT clubdesc FROM club
Keep the records that clubname is Tennis Club	WHERE clubname = Tennis Club
Get clubdesc of club	SELECT clubdesc FROM club
Keep the records that clubname is Pen and Paper Gaming	WHERE clubname = Pen and Paper Gaming
Get clubdesc of club	SELECT clubdesc FROM club
Keep the records that clubname is Pen and Paper Gaming	WHERE clubname = Pen and Paper Gaming
Get clublocation of club	SELECT clublocation FROM club
Keep the records that clubname is Tennis Club	WHERE clubname = Tennis Club
Get clublocation of club	SELECT clublocation FROM club
Keep the records that clubname is Tennis Club	WHERE clubname = Tennis Club
Get clublocation of club	SELECT clublocation FROM club
Keep the records that clubname is Pen and Paper Gaming	WHERE clubname = Pen and Paper Gaming
Get clublocation of club	SELECT clublocation FROM club
Keep the records that clubname is Pen and Paper Gaming	WHERE clubname = Pen and Paper Gaming
Get clublocation of club	SELECT clublocation FROM club
Keep the records that clubname is Hopkins Student Enterprises	WHERE clubname = Hopkins Student Enterprises
Get clublocation of club	SELECT clublocation FROM club
Keep the records that clubname is Hopkins Student Enterprises	WHERE clubname = Hopkins Student Enterprises
Get clubname of club	SELECT clubname FROM club
Keep the records that clublocation is AKW	WHERE clublocation = AKW
Get clubname of club	SELECT clubname FROM club
Keep the records that clublocation is AKW	WHERE clublocation = AKW
Get the number of club	SELECT COUNT ( * ) FROM club
Keep the records that clublocation is HHH	WHERE clublocation = HHH
Get the number of club	SELECT COUNT ( * ) FROM club
Keep the records that clublocation is HHH	WHERE clublocation = HHH
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND position of member of club is President	WHERE t1.clubname = Bootup Baltimore AND t2.position = President
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND position of member of club is President	WHERE t1.clubname = Bootup Baltimore AND t2.position = President
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises AND position of member of club is CTO	WHERE t1.clubname = Hopkins Student Enterprises AND t2.position = CTO
Get fname AND lname of club that has member of club AND student	SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises AND position of member of club is CTO	WHERE t1.clubname = Hopkins Student Enterprises AND t2.position = CTO
Get the number of distinct position of club that has member of club	SELECT COUNT ( DISTINCT t2.position ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid
Keep the records that clubname of club is Bootup Baltimore	WHERE t1.clubname = Bootup Baltimore
Get the number of distinct position of club that has member of club	SELECT COUNT ( DISTINCT t2.position ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid
Keep the records that clubname of club is Bootup Baltimore	WHERE t1.clubname = Bootup Baltimore
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND age of student is greater than 18	WHERE t1.clubname = Bootup Baltimore AND t3.age > 18
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND age of student is greater than 18	WHERE t1.clubname = Bootup Baltimore AND t3.age > 18
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND age of student is less than 18	WHERE t1.clubname = Bootup Baltimore AND t3.age < 18
Get the number of club that has member of club AND student	SELECT COUNT ( * ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore AND age of student is less than 18	WHERE t1.clubname = Bootup Baltimore AND t3.age < 18
Get clubname of club that has member of club and student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that city code of student is BAL	WHERE t3.city_code = BAL
Get clubname of club that has member of club and student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that city code of student is BAL	WHERE t3.city_code = BAL
Get clubname of club that has member of club and student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that city code of student is HOU	WHERE t3.city_code = HOU
Get clubname of club that has member of club and student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that city code of student is HOU	WHERE t3.city_code = HOU
Get the number of distinct clubname of club that has member of club AND student	SELECT COUNT ( DISTINCT t1.clubname ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Eric AND lname of student is Tai	WHERE t3.fname = Eric AND t3.lname = Tai
Get the number of distinct clubname of club that has member of club AND student	SELECT COUNT ( DISTINCT t1.clubname ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Eric AND lname of student is Tai	WHERE t3.fname = Eric AND t3.lname = Tai
Get clubname of club that has member of club AND student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Davis AND lname of student is Steven	WHERE t3.fname = Davis AND t3.lname = Steven
Get clubname of club that has member of club AND student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that fname of student is Davis AND lname of student is Steven	WHERE t3.fname = Davis AND t3.lname = Steven
Get clubname of club that has member of club and student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that advisor of student is 1121	WHERE t3.advisor = 1121
Get clubname of club that has member of club and student	SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that advisor of student is 1121	WHERE t3.advisor = 1121
Get the average value of age of club that has member of club and student	SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore	WHERE t1.clubname = Bootup Baltimore
Get the average value of age of club that has member of club and student	SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Bootup Baltimore	WHERE t1.clubname = Bootup Baltimore
Get the average value of age of club that has member of club and student	SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises	WHERE t1.clubname = Hopkins Student Enterprises
Get the average value of age of club that has member of club and student	SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Hopkins Student Enterprises	WHERE t1.clubname = Hopkins Student Enterprises
Get the average value of age of club that has member of club and student	SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Tennis Club	WHERE t1.clubname = Tennis Club
Get the average value of age of club that has member of club and student	SELECT AVG ( t3.age ) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid
Keep the records that clubname of club is Tennis Club	WHERE t1.clubname = Tennis Club
Get grant amount of Grants that has Documents	SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id
Keep the records that sent date of Documents is less than 1986-08-26 20:49:27	WHERE T2.sent_date < 1986-08-26 20:49:27
Get grant amount of grants	SELECT grant_amount FROM grants
Keep the records that grant end date is greater than 1989-03-16 18:27:16	WHERE grant_end_date > 1989-03-16 18:27:16
Get grant amount of Grants that has Documents	SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id
Keep the records that sent date of Documents is less than 1986-08-26 20:49:27	WHERE T2.sent_date < 1986-08-26 20:49:27
Get grant amount of grants	SELECT grant_amount FROM grants
Keep the records that grant end date is greater than 1989-03-16 18:27:16	WHERE grant_end_date > 1989-03-16 18:27:16
Get project details of Projects that has Project outcomes	SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Keep the records that outcome code of Project outcomes is Paper	WHERE T2.outcome_code = Paper
Get project details of Projects that has Project outcomes	SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Keep the records that outcome code of Project outcomes is Patent	WHERE T2.outcome_code = Patent
Get project details of Projects that has Project outcomes	SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Keep the records that outcome code of Project outcomes is Paper	WHERE T2.outcome_code = Paper
Get project details of Projects that has Project outcomes	SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Keep the records that outcome code of Project outcomes is Patent	WHERE T2.outcome_code = Patent
Get the SUM of grant amount of Grants that has Organisations and organisation Types	SELECT SUM ( grant_amount ) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type
Keep the records that organisation type description of organisation Types is Research	WHERE T3.organisation_type_description = Research
Get the SUM of grant amount of Grants that has Organisations and organisation Types	SELECT SUM ( grant_amount ) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type
Keep the records that organisation type description of organisation Types is Research	WHERE T3.organisation_type_description = Research
Get project id of Project Staff	SELECT project_id FROM Project_Staff
Group the records based on project id	GROUP BY project_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get date FROM and date to of Project Staff	SELECT date_from , date_to FROM Project_Staff
Keep the records that project id is in the first query result	WHERE project_id IN ( the first query result ) 
Get date FROM and date to of Project Staff	SELECT date_from , date_to FROM Project_Staff
Keep the records that role code is leader	WHERE role_code = leader
Get project id of Project Staff	SELECT project_id FROM Project_Staff
Group the records based on project id	GROUP BY project_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get date FROM and date to of Project Staff	SELECT date_from , date_to FROM Project_Staff
Keep the records that project id is in the first query result	WHERE project_id IN ( the first query result ) 
Get date FROM and date to of Project Staff	SELECT date_from , date_to FROM Project_Staff
Keep the records that role code is leader	WHERE role_code = leader
Get organisation id and organisation details of Grants that has Organisations	SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id
Group the records based on the SUM of grant amount of Grants organisation id of Organisations 6000 that the SUM of grant amount of Grants is greater than 6000	GROUP BY T2.organisation_id HAVING SUM ( T1.grant_amount ) > 6000 HAVING SUM ( T1.grant_amount ) > 6000
Get organisation id and organisation details of Grants that has Organisations	SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id
Group the records based on the SUM of grant amount of Grants organisation id of Organisations 6000 that the SUM of grant amount of Grants is greater than 6000	GROUP BY T2.organisation_id HAVING SUM ( T1.grant_amount ) > 6000 HAVING SUM ( T1.grant_amount ) > 6000
Get organisation type and organisation id of Organisations that has Research Staff	SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
Group the records based on organisation id of Organisations	GROUP BY T1.organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organisation type and organisation id of Organisations that has Research Staff	SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
Group the records based on organisation id of Organisations	GROUP BY T1.organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organisation type of Organisations that has Research Staff	SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
Group the records based on organisation type of Organisations	GROUP BY T1.organisation_type
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organisation type of Organisations that has Research Staff	SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
Group the records based on organisation type of Organisations	GROUP BY T1.organisation_type
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get sent date of documents that has Grants AND Organisations AND organisation Types	SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type
Keep the records that grant amount of Grants is greater than 5000 AND organisation type description of organisation Types is Research	WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = Research
Get sent date of documents that has Grants AND Organisations AND organisation Types	SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type
Keep the records that grant amount of Grants is greater than 5000 AND organisation type description of organisation Types is Research	WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = Research
Get response received date of Documents that has Document Types and Grants	SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id
Keep the records that document description of Document Types is Regular OR grant amount of Grants is greater than 100	WHERE T2.document_description = Regular OR T3.grant_amount > 100
Get response received date of Documents that has Document Types and Grants	SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id
Keep the records that document description of Document Types is Regular OR grant amount of Grants is greater than 100	WHERE T2.document_description = Regular OR T3.grant_amount > 100
Get project id of Project Staff	SELECT project_id FROM Project_Staff
Keep the records that role code is researcher	WHERE role_code = researcher
Get project details of Projects	SELECT project_details FROM Projects
Keep the records that project id is not in the first query result	WHERE project_id NOT IN ( the first query result ) 
Get project id of Project Staff	SELECT project_id FROM Project_Staff
Keep the records that role code is researcher	WHERE role_code = researcher
Get project details of Projects	SELECT project_details FROM Projects
Keep the records that project id is not in the first query result	WHERE project_id NOT IN ( the first query result ) 
Get task details and task id and project id of Tasks that has Projects	SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id
Keep the records that project details of Projects is omnis	WHERE T2.project_details = omnis
Get task details and task id and project id of Tasks that has Projects and Project outcomes	SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id
Group the records based on the number project id of Projects 2 that the number is greater than 2	GROUP BY T2.project_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get task details and task id and project id of Tasks that has Projects	SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id
Keep the records that project details of Projects is omnis	WHERE T2.project_details = omnis
Get task details and task id and project id of Tasks that has Projects and Project outcomes	SELECT T1.task_details , T1.task_id , T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id
Group the records based on the number project id of Projects 2 that the number is greater than 2	GROUP BY T2.project_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get date FROM and date to of Project Staff	SELECT date_from , date_to FROM Project_Staff
Keep the records that role code is researcher	WHERE role_code = researcher
Get date FROM and date to of Project Staff	SELECT date_from , date_to FROM Project_Staff
Keep the records that role code is researcher	WHERE role_code = researcher
Get the number of distinct role code of Project Staff	SELECT COUNT ( DISTINCT role_code ) FROM Project_Staff
Get the number of distinct role code of Project Staff	SELECT COUNT ( DISTINCT role_code ) FROM Project_Staff
Get the SUM of grant amount and organisation id of Grants	SELECT SUM ( grant_amount ) , organisation_id FROM Grants
Group the records based on organisation id	GROUP BY organisation_id
Get the SUM of grant amount and organisation id of Grants	SELECT SUM ( grant_amount ) , organisation_id FROM Grants
Group the records based on organisation id	GROUP BY organisation_id
Get project details of Projects that has Project outcomes and Research outcomes	SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code
Keep the records that outcome description of Research outcomes is in the form of %Published%	WHERE T3.outcome_description LIKE %Published%
Get project details of Projects that has Project outcomes and Research outcomes	SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code
Keep the records that outcome description of Research outcomes is in the form of %Published%	WHERE T3.outcome_description LIKE %Published%
Get the number and project id of Project Staff that has Projects	SELECT T1.project_id , COUNT ( * ) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id
Group the records based on project id of Project Staff	GROUP BY T1.project_id
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get the number and project id of Project Staff that has Projects	SELECT T1.project_id , COUNT ( * ) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id
Group the records based on project id of Project Staff	GROUP BY T1.project_id
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get role description of Staff Roles	SELECT role_description FROM Staff_Roles
Keep the records that role code is researcher	WHERE role_code = researcher
Get role description of Staff Roles	SELECT role_description FROM Staff_Roles
Keep the records that role code is researcher	WHERE role_code = researcher
Get date FROM of Project Staff	SELECT date_from FROM Project_Staff
Order these records based on the date FROM and sort them in ascending order, and return the top 1 record	ORDER BY date_from ASC LIMIT 1
Get date FROM of Project Staff	SELECT date_from FROM Project_Staff
Order these records based on the date FROM and sort them in ascending order, and return the top 1 record	ORDER BY date_from ASC LIMIT 1
Get project details and project id of Projects that has Project outcomes	SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Group the records based on project id of Projects	GROUP BY T1.project_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get project details and project id of Projects that has Project outcomes	SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Group the records based on project id of Projects	GROUP BY T1.project_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get project id of Project outcomes	SELECT project_id FROM Project_outcomes
Get project details of Projects	SELECT project_details FROM Projects
Keep the records that project id is not in the first query result	WHERE project_id NOT IN ( the first query result ) 
Get project id of Project outcomes	SELECT project_id FROM Project_outcomes
Get project details of Projects	SELECT project_details FROM Projects
Keep the records that project id is not in the first query result	WHERE project_id NOT IN ( the first query result ) 
Get organisation id and organisation type and organisation details of Organisations that has Research Staff	SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
Group the records based on organisation id of Organisations	GROUP BY T1.organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organisation id and organisation type and organisation details of Organisations that has Research Staff	SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id
Group the records based on organisation id of Organisations	GROUP BY T1.organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role description and staff id of Staff Roles that has Project Staff and Project outcomes	SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id
Group the records based on staff id of Project Staff	GROUP BY T2.staff_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role description and staff id of Staff Roles that has Project Staff and Project outcomes	SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id
Group the records based on staff id of Project Staff	GROUP BY T2.staff_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document type code of Document Types	SELECT document_type_code FROM Document_Types
Keep the records that document description is in the form of Initial%	WHERE document_description LIKE Initial%
Get document type code of Document Types	SELECT document_type_code FROM Document_Types
Keep the records that document description is in the form of Initial%	WHERE document_description LIKE Initial%
Get grant start date of Grants that has Documents and Document Types	SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
Keep the records that document description of Document Types is Regular	WHERE T3.document_description = Regular
Get grant start date of Grants that has Documents and Document Types	SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
Keep the records that document description of Document Types is Initial Application	WHERE T3.document_description = Initial Application
Get grant start date of Grants that has Documents and Document Types	SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
Keep the records that document description of Document Types is Regular	WHERE T3.document_description = Regular
Get grant start date of Grants that has Documents and Document Types	SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code
Keep the records that document description of Document Types is Initial Application	WHERE T3.document_description = Initial Application
Get the number and grant id of Documents	SELECT grant_id , COUNT ( * ) FROM Documents
Group the records based on grant id	GROUP BY grant_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and grant id of Documents	SELECT grant_id , COUNT ( * ) FROM Documents
Group the records based on grant id	GROUP BY grant_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organisation type description of organisation Types that has Organisations	SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type
Keep the records that organisation details of Organisations is quo	WHERE T2.organisation_details = quo
Get organisation type description of organisation Types that has Organisations	SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type
Keep the records that organisation details of Organisations is quo	WHERE T2.organisation_details = quo
Get organisation details of Organisations that has organisation Types	SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type
Keep the records that organisation type description of organisation Types is Sponsor	WHERE T2.organisation_type_description = Sponsor 
Order these records based on the organisation details	ORDER BY organisation_details 
Get organisation details of Organisations that has organisation Types	SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type
Keep the records that organisation type description of organisation Types is Sponsor	WHERE T2.organisation_type_description = Sponsor 
Order these records based on the organisation details	ORDER BY organisation_details 
Get the number of Project outcomes	SELECT COUNT ( * ) FROM Project_outcomes
Keep the records that outcome code is Patent	WHERE outcome_code = Patent
Get the number of Project outcomes	SELECT COUNT ( * ) FROM Project_outcomes
Keep the records that outcome code is Patent	WHERE outcome_code = Patent
Get the number of Project Staff	SELECT COUNT ( * ) FROM Project_Staff
Keep the 1989-04-24 23:51:54cords that role code is leader OR date FROM is less than 1989-04-24 23:51:54	WHERE role_code = leader OR date_from < 1989-04-24 23:51:54
Get the number of Project Staff	SELECT COUNT ( * ) FROM Project_Staff
Keep the records that role code is leader OR date FROM is less than 1989-04-24 23:51:54	WHERE role_code = leader OR date_from < 1989-04-24 23:51:54
Get date to of Project Staff	SELECT date_to FROM Project_Staff
Order these records based on the date to and sort them in descending order, and return the top 1 record	ORDER BY date_to DESC LIMIT 1
Get date to of Project Staff	SELECT date_to FROM Project_Staff
Order these records based on the date to and sort them in descending order, and return the top 1 record	ORDER BY date_to DESC LIMIT 1
Get outcome description of Research outcomes that has Project outcomes and Projects	SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id
Keep the records that project details of Projects is sint	WHERE T3.project_details = sint
Get outcome description of Research outcomes that has Project outcomes and Projects	SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id
Keep the records that project details of Projects is sint	WHERE T3.project_details = sint
Get the number and organisation id of Projects that has Project outcomes	SELECT T1.organisation_id , COUNT ( * ) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Group the records based on organisation id of Projects	GROUP BY T1.organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and organisation id of Projects that has Project outcomes	SELECT T1.organisation_id , COUNT ( * ) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id
Group the records based on organisation id of Projects	GROUP BY T1.organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organisation id of Projects	SELECT organisation_id FROM Projects
Group the records based on organisation id	GROUP BY organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get project details of Projects	SELECT project_details FROM Projects
Keep the records that organisation id is in the first query result	WHERE organisation_id IN ( the first query result ) 
Get organisation id of Projects	SELECT organisation_id FROM Projects
Group the records based on organisation id	GROUP BY organisation_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get project details of Projects	SELECT project_details FROM Projects
Keep the records that organisation id is in the first query result	WHERE organisation_id IN ( the first query result ) 
Get staff details of Research Staff	SELECT staff_details FROM Research_Staff
Order these records based on the staff details and sort them in ascending ORDER	ORDER BY staff_details ASC 
Get staff details of Research Staff	SELECT staff_details FROM Research_Staff
Order these records based on the staff details and sort them in ascending ORDER	ORDER BY staff_details ASC 
Get the number of Tasks	SELECT COUNT ( * ) FROM Tasks
Get the number of Tasks	SELECT COUNT ( * ) FROM Tasks
Get the number and project details of Projects that has Tasks	SELECT COUNT ( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id
Group the records based on project id of Projects	GROUP BY T1.project_id
Get the number and project details of Projects that has Tasks	SELECT COUNT ( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id
Group the records based on project id of Projects	GROUP BY T1.project_id
Get role code of Project Staff	SELECT role_code FROM Project_Staff
Keep the records that date FROM is greater than 2003-04-19 15:06:20 AND date to is less than 2016-03-15 00:33:18	WHERE date_from > 2003-04-19 15:06:20 AND date_to < 2016-03-15 00:33:18
Get role code of Project Staff	SELECT role_code FROM Project_Staff
Keep the records that date FROM is greater than 2003-04-19 15:06:20 AND date to is less than 2016-03-15 00:33:18	WHERE date_from > 2003-04-19 15:06:20 AND date_to < 2016-03-15 00:33:18
Get outcome description of Research outcomes that has Project outcomes	SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2
Get outcome description of Research outcomes that has Project outcomes	SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2
Get role code of Project Staff	SELECT role_code FROM Project_Staff
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role code of Project Staff	SELECT role_code FROM Project_Staff
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of friend of Person that has PersonFriend	SELECT COUNT ( T2.friend ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that name of Person is Dan	WHERE T1.name = Dan
Get the number of friend of Person that has PersonFriend	SELECT COUNT ( T2.friend ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that name of Person is Dan	WHERE T1.name = Dan
Get the number of Person	SELECT COUNT ( * ) FROM Person
Keep the records that gender is female	WHERE gender = female
Get the number of Person	SELECT COUNT ( * ) FROM Person
Keep the records that gender is female	WHERE gender = female
Get the average value of age of Person	SELECT AVG ( age ) FROM Person
Get the average value of age of Person	SELECT AVG ( age ) FROM Person
Get the number of distinct city of Person	SELECT COUNT ( DISTINCT city ) FROM Person
Get the number of distinct city of Person	SELECT COUNT ( DISTINCT city ) FROM Person
Get the number of distinct job of Person	SELECT COUNT ( DISTINCT job ) FROM Person
Get the number of distinct job of Person	SELECT COUNT ( DISTINCT job ) FROM Person
Get the maximum value of age of person	SELECT MAX ( age ) FROM person
Get name of Person	SELECT name FROM Person
Keep the records that age is the first query result	WHERE age = ( the first query result ) 
Get the maximum value of age of person	SELECT MAX ( age ) FROM person
Get name of Person	SELECT name FROM Person
Keep the records that age is the first query result	WHERE age = ( the first query result ) 
Get the maximum value of age of person	SELECT MAX ( age ) FROM person
Keep the records that job is student	WHERE job = student
Get name of Person	SELECT name FROM Person
Keep the records that job is student AND age is the first query result	WHERE job = student AND age = ( the first query result ) 
Get the maximum value of age of person	SELECT MAX ( age ) FROM person
Keep the records that job is student	WHERE job = student
Get name of Person	SELECT name FROM Person
Keep the records that job is student AND age is the first query result	WHERE job = student AND age = ( the first query result ) 
Get the minimum value of age of person	SELECT MIN ( age ) FROM person
Keep the records that gender is male	WHERE gender = male
Get name of Person	SELECT name FROM Person
Keep the records that gender is male AND age is the first query result	WHERE gender = male AND age = ( the first query result ) 
Get the minimum value of age of person	SELECT MIN ( age ) FROM person
Keep the records that gender is male	WHERE gender = male
Get name of Person	SELECT name FROM Person
Keep the records that gender is male AND age is the first query result	WHERE gender = male AND age = ( the first query result ) 
Get age of Person	SELECT age FROM Person
Keep the records that job is doctor AND name is Zach	WHERE job = doctor AND name = Zach
Get age of Person	SELECT age FROM Person
Keep the records that job is doctor AND name is Zach	WHERE job = doctor AND name = Zach
Get name of Person	SELECT name FROM Person
Keep the records that age is less than 30	WHERE age < 30
Get name of Person	SELECT name FROM Person
Keep the records that age is less than 30	WHERE age < 30
Get the number of Person	SELECT COUNT ( * ) FROM Person
Keep the records that age is greater than 30 AND job is engineer	WHERE age > 30 AND job = engineer
Get the number of Person	SELECT COUNT ( * ) FROM Person
Keep the records that age is greater than 30 AND job is engineer	WHERE age > 30 AND job = engineer
Get the average value of age and gender of Person	SELECT AVG ( age ) , gender FROM Person
Group the records based on gender	GROUP BY gender
Get the average value of age and gender of Person	SELECT AVG ( age ) , gender FROM Person
Group the records based on gender	GROUP BY gender
Get the average value of age and job of Person	SELECT AVG ( age ) , job FROM Person
Group the records based on job	GROUP BY job
Get the average value of age and job of Person	SELECT AVG ( age ) , job FROM Person
Group the records based on job	GROUP BY job
Get the average value of age and job of Person	SELECT AVG ( age ) , job FROM Person
Keep the records that gender is male	WHERE gender = male 
Group the records based on job	GROUP BY job
Get the average value of age and job of Person	SELECT AVG ( age ) , job FROM Person
Keep the records that gender is male	WHERE gender = male 
Group the records based on job	GROUP BY job
Get the minimum value of age and job of Person	SELECT MIN ( age ) , job FROM Person
Group the records based on job	GROUP BY job
Get the minimum value of age and job of Person	SELECT MIN ( age ) , job FROM Person
Group the records based on job	GROUP BY job
Get the number and gender of Person	SELECT COUNT ( * ) , gender FROM Person
Keep the records that age is less than 40	WHERE age < 40 
Group the records based on gender	GROUP BY gender
Get the number and gender of Person	SELECT COUNT ( * ) , gender FROM Person
Keep the records that age is less than 40	WHERE age < 40 
Group the records based on gender	GROUP BY gender
Get the minimum value of age of person	SELECT MIN ( age ) FROM person
Keep the records that job is engineer	WHERE job = engineer
Get name of Person	SELECT name FROM Person
Keep the records that age is greater than the first query result	WHERE age > ( the first query result )  
Order these records based on the age	ORDER BY age 
Get the minimum value of age of person	SELECT MIN ( age ) FROM person
Keep the records that job is engineer	WHERE job = engineer
Get name of Person	SELECT name FROM Person
Keep the records that age is greater than the first query result	WHERE age > ( the first query result )  
Order these records based on the age	ORDER BY age 
Get the maximum value of age of person	SELECT MAX ( age ) FROM person
Keep the records that job is engineer	WHERE job = engineer
Get the number of Person	SELECT COUNT ( * ) FROM Person
Keep the records that age is greater than the first query result	WHERE age > ( the first query result ) 
Get the maximum value of age of person	SELECT MAX ( age ) FROM person
Keep the records that job is engineer	WHERE job = engineer
Get the number of Person	SELECT COUNT ( * ) FROM Person
Keep the records that age is greater than the first query result	WHERE age > ( the first query result ) 
Get name and job of Person	SELECT name , job FROM Person
Order these records based on the name	ORDER BY name 
Get name and job of Person	SELECT name , job FROM Person
Order these records based on the name	ORDER BY name 
Get name of Person	SELECT name FROM Person
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get name of Person	SELECT name FROM Person
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get name of Person	SELECT name FROM Person
Keep the records that gender is male	WHERE gender = male 
Order these records based on the age	ORDER BY age 
Get name of Person	SELECT name FROM Person
Keep the records that gender is male	WHERE gender = male 
Order these records based on the age	ORDER BY age 
Get name and age of Person that has PersonFriend	SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Dan	WHERE T2.friend = Dan
Get name and age of Person that has PersonFriend	SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Alice	WHERE T2.friend = Alice
Get name and age of Person that has PersonFriend	SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Dan	WHERE T2.friend = Dan
Get name and age of Person that has PersonFriend	SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Alice	WHERE T2.friend = Alice
Get name and age of Person that has PersonFriend	SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Dan OR friend of PersonFriend is Alice	WHERE T2.friend = Dan OR T2.friend = Alice
Get name and age of Person that has PersonFriend	SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Dan OR friend of PersonFriend is Alice	WHERE T2.friend = Dan OR T2.friend = Alice
Get name of Person	SELECT name FROM Person
Keep the records that age is greater than 40	WHERE age > 40
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the first query result	WHERE T2.friend IN ( the first query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is less than 30	WHERE age < 30
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the third query result	WHERE T2.friend IN ( the third query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is greater than 40	WHERE age > 40
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the first query result	WHERE T2.friend IN ( the first query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is less than 30	WHERE age < 30
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the third query result	WHERE T2.friend IN ( the third query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is greater than 40	WHERE age > 40
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the first query result	WHERE T2.friend IN ( the first query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is less than 30	WHERE age < 30
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the third query result	WHERE T2.friend IN ( the third query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is greater than 40	WHERE age > 40
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the first query result	WHERE T2.friend IN ( the first query result ) 
Get name of Person	SELECT name FROM Person
Keep the records that age is less than 30	WHERE age < 30
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is in the third query result	WHERE T2.friend IN ( the third query result ) 
Get name of person	SELECT name FROM person
Get name of Person that has PersonFriend	SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that job of Person is student	WHERE T1.job = student
Get name of person	SELECT name FROM person
Get name of Person that has PersonFriend	SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that job of Person is student	WHERE T1.job = student
Get name of PersonFriend	SELECT name FROM PersonFriend
Group the records based on the number name 1 that the number is 1	GROUP BY name HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get name of PersonFriend	SELECT name FROM PersonFriend
Group the records based on the number name 1 that the number is 1	GROUP BY name HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get friend of Person that has PersonFriend	SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that name of Person is Bob	WHERE T1.name = Bob
Get friend of Person that has PersonFriend	SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that name of Person is Bob	WHERE T1.name = Bob
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Bob	WHERE T2.friend = Bob
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Bob	WHERE T2.friend = Bob
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Zach AND gender of Person is female	WHERE T2.friend = Zach AND T1.gender = female
Get name of Person that has PersonFriend	SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Zach AND gender of Person is female	WHERE T2.friend = Zach AND T1.gender = female
Get friend of Person that has PersonFriend	SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that name of PersonFriend is Alice AND gender of Person is female	WHERE T2.name = Alice AND T1.gender = female
Get friend of Person that has PersonFriend	SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that name of PersonFriend is Alice AND gender of Person is female	WHERE T2.name = Alice AND T1.gender = female
Get friend of Person that has PersonFriend	SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that name of PersonFriend is Alice AND gender of Person is male AND job of Person is doctor	WHERE T2.name = Alice AND T1.gender = male AND T1.job = doctor
Get friend of Person that has PersonFriend	SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that name of PersonFriend is Alice AND gender of Person is male AND job of Person is doctor	WHERE T2.name = Alice AND T1.gender = male AND T1.job = doctor
Get name of Person that has PersonFriend	SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that city of Person is new york city	WHERE T1.city = new york city
Get name of Person that has PersonFriend	SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that city of Person is new york city	WHERE T1.city = new york city
Get the average value of age of person	SELECT AVG ( age ) FROM person
Get name of Person that has PersonFriend	SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that age of Person is less than the first query result	WHERE T1.age < ( the first query result ) 
Get the average value of age of person	SELECT AVG ( age ) FROM person
Get name of Person that has PersonFriend	SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that age of Person is less than the first query result	WHERE T1.age < ( the first query result ) 
Get the average value of age of person	SELECT AVG ( age ) FROM person
Get name and friend and age of Person that has PersonFriend	SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that age of Person is greater than the first query result	WHERE T1.age > ( the first query result ) 
Get the average value of age of person	SELECT AVG ( age ) FROM person
Get name and friend and age of Person that has PersonFriend	SELECT DISTINCT T2.name , T2.friend , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that age of Person is greater than the first query result	WHERE T1.age > ( the first query result ) 
Get the maximum value of YEAR of PersonFriend	SELECT MAX ( YEAR ) FROM PersonFriend
Keep the records that name is Zach	WHERE name = Zach
Get friend of PersonFriend	SELECT friend FROM PersonFriend
Keep the records that name is Zach AND is the first query result	WHERE name = Zach AND YEAR = ( the first query result ) 
Get the maximum value of YEAR of PersonFriend	SELECT MAX ( YEAR ) FROM PersonFriend
Keep the records that name is Zach	WHERE name = Zach
Get friend of PersonFriend	SELECT friend FROM PersonFriend
Keep the records that name is Zach AND is the first query result	WHERE name = Zach AND YEAR = ( the first query result ) 
Get the maximum value of YEAR of PersonFriend	SELECT MAX ( YEAR ) FROM PersonFriend
Keep the records that name is Zach	WHERE name = Zach
Get age of Person that has PersonFriend	SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that name of PersonFriend is Zach AND year of PersonFriend is the first query result	WHERE T2.name = Zach AND T2.year = ( the first query result ) 
Get the maximum value of YEAR of PersonFriend	SELECT MAX ( YEAR ) FROM PersonFriend
Keep the records that name is Zach	WHERE name = Zach
Get age of Person that has PersonFriend	SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Keep the records that name of PersonFriend is Zach AND year of PersonFriend is the first query result	WHERE T2.name = Zach AND T2.year = ( the first query result ) 
Get the minimum value of YEAR of PersonFriend	SELECT MIN ( YEAR ) FROM PersonFriend
Keep the records that friend is Alice	WHERE friend = Alice
Get name of PersonFriend	SELECT name FROM PersonFriend
Keep the records that friend is Alice AND is the first query result	WHERE friend = Alice AND YEAR = ( the first query result ) 
Get the minimum value of YEAR of PersonFriend	SELECT MIN ( YEAR ) FROM PersonFriend
Keep the records that friend is Alice	WHERE friend = Alice
Get name of PersonFriend	SELECT name FROM PersonFriend
Keep the records that friend is Alice AND is the first query result	WHERE friend = Alice AND YEAR = ( the first query result ) 
Get the maximum value of YEAR of PersonFriend	SELECT MAX ( YEAR ) FROM PersonFriend
Keep the records that friend is Alice	WHERE friend = Alice
Get name AND age AND job of Person that has PersonFriend	SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Alice AND year of PersonFriend is the first query result	WHERE T2.friend = Alice AND T2.year = ( the first query result ) 
Get the maximum value of YEAR of PersonFriend	SELECT MAX ( YEAR ) FROM PersonFriend
Keep the records that friend is Alice	WHERE friend = Alice
Get name AND age AND job of Person that has PersonFriend	SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name
Keep the records that friend of PersonFriend is Alice AND year of PersonFriend is the first query result	WHERE T2.friend = Alice AND T2.year = ( the first query result ) 
Get name of person	SELECT name FROM person
Get name of PersonFriend	SELECT name FROM PersonFriend
Get name of person	SELECT name FROM person
Get name of PersonFriend	SELECT name FROM PersonFriend
Get the average value of age and name of Person that has PersonFriend	SELECT T2.name , AVG ( T1.age ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Group the records based on name of PersonFriend	GROUP BY T2.name
Order these records based on the the average value of age of Person and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.age ) DESC LIMIT 1
Get the average value of age and name of Person that has PersonFriend	SELECT T2.name , AVG ( T1.age ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend
Group the records based on name of PersonFriend	GROUP BY T2.name
Order these records based on the the average value of age of Person and sort them in descending order, and return the top 1 record	ORDER BY AVG ( T1.age ) DESC LIMIT 1
Get name of person	SELECT name FROM person
Keep the records that city is Austin	WHERE city = Austin
Get the number of distinct name of PersonFriend	SELECT COUNT ( DISTINCT name ) FROM PersonFriend
Keep the records that friend is not in the first query result	WHERE friend NOT IN ( the first query result ) 
Get name of person	SELECT name FROM person
Keep the records that city is Austin	WHERE city = Austin
Get the number of distinct name of PersonFriend	SELECT COUNT ( DISTINCT name ) FROM PersonFriend
Keep the records that friend is not in the first query result	WHERE friend NOT IN ( the first query result ) 
Get name of PersonFriend that has Person AND PersonFriend	SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name
Keep the records that name of Person is Alice AND name of PersonFriend is not Alice	WHERE T2.name = Alice AND T4.name != Alice
Get name of PersonFriend that has Person AND PersonFriend	SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name
Keep the records that name of Person is Alice AND name of PersonFriend is not Alice	WHERE T2.name = Alice AND T4.name != Alice
Get the number of member	SELECT COUNT ( * ) FROM member
Get Name of member	SELECT Name FROM member
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name and Country of member	SELECT Name , Country FROM member
Get Name of member	SELECT Name FROM member
Keep the records that Country is United States OR Country is Canada	WHERE Country = United States OR Country = Canada
Get the number and Country of member	SELECT Country , COUNT ( * ) FROM member
Group the records based on Country	GROUP BY Country
Get Country of member	SELECT Country FROM member
Group the records based on Country	GROUP BY Country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Country of member	SELECT Country FROM member
Group the records based on the number Country 2 that the number is greater than 2	GROUP BY Country HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Leader Name and College Location of college	SELECT Leader_Name , College_Location FROM college
Get Name and Name of college that has member	SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2
Get Name and College Location of college that has member	SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID
Order these records based on the Name of member and sort them in ascending ORDER	ORDER BY T2.Name ASC 
Get Leader Name of college that has member	SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID
Keep the records that Country of member is Canada	WHERE T2.Country = Canada
Get Name and Decoration Theme of member that has round	SELECT T1.Name , T2.Decoration_Theme FROM member AS T1 JOIN round AS T2
Get Name of member that has round	SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID
Keep the records that Rank in Round of round is greater than 3	WHERE T2.Rank_in_Round > 3
Get Name of member that has round	SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID
Order these records based on the Rank in Round and sort them in ascending ORDER	ORDER BY Rank_in_Round ASC 
Get Member ID of round	SELECT Member_ID FROM round
Get Name of member	SELECT Name FROM member
Keep the records that Member ID is not in the first query result	WHERE Member_ID NOT IN ( the first query result ) 
Get document name and access count of documents	SELECT document_name , access_count FROM documents
Order these records based on the document name	ORDER BY document_name 
Get document name and access count of documents	SELECT document_name , access_count FROM documents
Order these records based on the document name	ORDER BY document_name 
Get document name and access count of documents	SELECT document_name , access_count FROM documents
Order these records based on the access count and sort them in descending order, and return the top 1 record	ORDER BY access_count DESC LIMIT 1
Get document name and access count of documents	SELECT document_name , access_count FROM documents
Order these records based on the access count and sort them in descending order, and return the top 1 record	ORDER BY access_count DESC LIMIT 1
Get document type code of documents	SELECT document_type_code FROM documents
Group the records based on the number document type code 4 that the number is greater than 4	GROUP BY document_type_code HAVING COUNT ( * ) > 4 HAVING COUNT ( * ) > 4
Get document type code of documents	SELECT document_type_code FROM documents
Group the records based on the number document type code 4 that the number is greater than 4	GROUP BY document_type_code HAVING COUNT ( * ) > 4 HAVING COUNT ( * ) > 4
Get the SUM of access COUNT of documents	SELECT SUM ( access_count ) FROM documents
Group the records based on document type code	GROUP BY document_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the SUM of access COUNT of documents	SELECT SUM ( access_count ) FROM documents
Group the records based on document type code	GROUP BY document_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of access count of documents	SELECT AVG ( access_count ) FROM documents
Get the average value of access count of documents	SELECT AVG ( access_count ) FROM documents
Get document structure description of documents that has document structures	SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code
Group the records based on document structure code of documents	GROUP BY t1.document_structure_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document structure description of documents that has document structures	SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code
Group the records based on document structure code of documents	GROUP BY t1.document_structure_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document type code of documents	SELECT document_type_code FROM documents
Keep the records that document name is David CV	WHERE document_name = David CV
Get document type code of documents	SELECT document_type_code FROM documents
Keep the records that document name is David CV	WHERE document_name = David CV
Get document name of documents	SELECT document_name FROM documents
Group the records based on document type code	GROUP BY document_type_code
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get document name of documents	SELECT document_name FROM documents
Group the records based on document structure code	GROUP BY document_structure_code
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get document name of documents	SELECT document_name FROM documents
Group the records based on document type code	GROUP BY document_type_code
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get document name of documents	SELECT document_name FROM documents
Group the records based on document structure code	GROUP BY document_structure_code
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get document type code of documents	SELECT document_type_code FROM documents
Group the records based on the SUM of access count document type code 10000 that the SUM of access count is greater than 10000	GROUP BY document_type_code HAVING SUM ( access_count ) > 10000 HAVING SUM ( access_count ) > 10000
Get document type code of documents	SELECT document_type_code FROM documents
Group the records based on the SUM of access count document type code 10000 that the SUM of access count is greater than 10000	GROUP BY document_type_code HAVING SUM ( access_count ) > 10000 HAVING SUM ( access_count ) > 10000
Get section title of documents that has document sections	SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code
Keep the records that document name of documents is David CV	WHERE t1.document_name = David CV
Get section title of documents that has document sections	SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code
Keep the records that document name of documents is David CV	WHERE t1.document_name = David CV
Get document code of document sections	SELECT document_code FROM document_sections
Get document name of documents	SELECT document_name FROM documents
Keep the records that document code is not in the first query result	WHERE document_code NOT IN ( the first query result ) 
Get document code of document sections	SELECT document_code FROM document_sections
Get document name of documents	SELECT document_name FROM documents
Keep the records that document code is not in the first query result	WHERE document_code NOT IN ( the first query result ) 
Get user name and password of users	SELECT user_name , password FROM users
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get user name and password of users	SELECT user_name , password FROM users
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of access count of documents that has document functional areas and functional areas	SELECT AVG ( t1.access_count ) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code
Keep the records that functional area description of functional areas is Acknowledgement	WHERE t3.functional_area_description = Acknowledgement
Get the average value of access count of documents that has document functional areas and functional areas	SELECT AVG ( t1.access_count ) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code
Keep the records that functional area description of functional areas is Acknowledgement	WHERE t3.functional_area_description = Acknowledgement
Get document name of documents	SELECT document_name FROM documents
Get document name of documents that has document sections and document sections images	SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3
Get document name of documents	SELECT document_name FROM documents
Get document name of documents that has document sections and document sections images	SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3
Get document name of documents that has document sections	SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code
Group the records based on document code of documents	GROUP BY t1.document_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document name of documents that has document sections	SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code
Group the records based on document code of documents	GROUP BY t1.document_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document name of documents	SELECT document_name FROM documents
Keep the records that document name is in the form of %CV%	WHERE document_name LIKE %CV%
Get document name of documents	SELECT document_name FROM documents
Keep the records that document name is in the form of %CV%	WHERE document_name LIKE %CV%
Get the number of users	SELECT COUNT ( * ) FROM users
Keep the records that user login is 1	WHERE user_login = 1
Get the number of users	SELECT COUNT ( * ) FROM users
Keep the records that user login is 1	WHERE user_login = 1
Get role code of users	SELECT role_code FROM users
Keep the records that user login is 1	WHERE user_login = 1 
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role description of	SELECT role_description FROM
Keep the records that role code is the first query result	WHERE role_code = ( the first query result ) 
Get role code of users	SELECT role_code FROM users
Keep the records that user login is 1	WHERE user_login = 1 
Group the records based on role code	GROUP BY role_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get role description of	SELECT role_description FROM
Keep the records that role code is the first query result	WHERE role_code = ( the first query result ) 
Get the average value of access COUNT of documents	SELECT AVG ( access_count ) FROM documents
Group the records based on document structure code	GROUP BY document_structure_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the average value of access COUNT of documents	SELECT AVG ( access_count ) FROM documents
Group the records based on document structure code	GROUP BY document_structure_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get image name and image url of images	SELECT image_name , image_url FROM images
Order these records based on the image name	ORDER BY image_name 
Get image name and image url of images	SELECT image_name , image_url FROM images
Order these records based on the image name	ORDER BY image_name 
Get the number and role code of users	SELECT COUNT ( * ) , role_code FROM users
Group the records based on role code	GROUP BY role_code
Get the number and role code of users	SELECT COUNT ( * ) , role_code FROM users
Group the records based on role code	GROUP BY role_code
Get document type code of documents	SELECT document_type_code FROM documents
Group the records based on the number document type code 2 that the number is greater than 2	GROUP BY document_type_code HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get document type code of documents	SELECT document_type_code FROM documents
Group the records based on the number document type code 2 that the number is greater than 2	GROUP BY document_type_code HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of Companies	SELECT COUNT ( * ) FROM Companies
Get the number of Companies	SELECT COUNT ( * ) FROM Companies
Get name of Companies	SELECT name FROM Companies
Order these records based on the Market Value billion and sort them in descending ORDER	ORDER BY Market_Value_billion DESC 
Get name of Companies	SELECT name FROM Companies
Order these records based on the Market Value billion and sort them in descending ORDER	ORDER BY Market_Value_billion DESC 
Get name of Companies	SELECT name FROM Companies
Keep the records that Headquarters is not USA	WHERE Headquarters != USA
Get name of Companies	SELECT name FROM Companies
Keep the records that Headquarters is not USA	WHERE Headquarters != USA
Get name and Assets billion of Companies	SELECT name , Assets_billion FROM Companies
Order these records based on the name and sort them in ascending ORDER	ORDER BY name ASC 
Get name and Assets billion of Companies	SELECT name , Assets_billion FROM Companies
Order these records based on the name and sort them in ascending ORDER	ORDER BY name ASC 
Get the average value of Profits billion of Companies	SELECT AVG ( Profits_billion ) FROM Companies
Get the average value of Profits billion of Companies	SELECT AVG ( Profits_billion ) FROM Companies
Get the maximum value of Sales billion and the minimum value of Sales billion of Companies	SELECT MAX ( Sales_billion ) , MIN ( Sales_billion ) FROM Companies
Keep the records that Industry is not Banking	WHERE Industry != Banking
Get the maximum value of Sales billion and the minimum value of Sales billion of Companies	SELECT MAX ( Sales_billion ) , MIN ( Sales_billion ) FROM Companies
Keep the records that Industry is not Banking	WHERE Industry != Banking
Get the number of distinct Industry of Companies	SELECT COUNT ( DISTINCT Industry ) FROM Companies
Get the number of distinct Industry of Companies	SELECT COUNT ( DISTINCT Industry ) FROM Companies
Get name of buildings	SELECT name FROM buildings
Order these records based on the Height and sort them in descending ORDER	ORDER BY Height DESC 
Get name of buildings	SELECT name FROM buildings
Order these records based on the Height and sort them in descending ORDER	ORDER BY Height DESC 
Get Stories of buildings	SELECT Stories FROM buildings
Order these records based on the Height and sort them in descending order, and return the top 1 record	ORDER BY Height DESC LIMIT 1
Get Stories of buildings	SELECT Stories FROM buildings
Order these records based on the Height and sort them in descending order, and return the top 1 record	ORDER BY Height DESC LIMIT 1
Get name and name of Office locations that has buildings and Companies	SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3
Get name and name of Office locations that has buildings and Companies	SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3
Get name of Office locations that has buildings and Companies	SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
Group the records based on the number building id of Office locations 1 that the number is greater than 1	GROUP BY T1.building_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of Office locations that has buildings and Companies	SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
Group the records based on the number building id of Office locations 1 that the number is greater than 1	GROUP BY T1.building_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of Office locations that has buildings and Companies	SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
Group the records based on building id of Office locations	GROUP BY T1.building_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Office locations that has buildings and Companies	SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id
Group the records based on building id of Office locations	GROUP BY T1.building_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of buildings	SELECT name FROM buildings
Keep the records that Status is on-hold	WHERE Status = on-hold 
Order these records based on the Stories and sort them in ascending ORDER	ORDER BY Stories ASC 
Get name of buildings	SELECT name FROM buildings
Keep the records that Status is on-hold	WHERE Status = on-hold 
Order these records based on the Stories and sort them in ascending ORDER	ORDER BY Stories ASC 
Get the number and Industry of Companies	SELECT Industry , COUNT ( * ) FROM Companies
Group the records based on Industry	GROUP BY Industry
Get the number and Industry of Companies	SELECT Industry , COUNT ( * ) FROM Companies
Group the records based on Industry	GROUP BY Industry
Get Industry of Companies	SELECT Industry FROM Companies
Group the records based on Industry	GROUP BY Industry
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get Industry of Companies	SELECT Industry FROM Companies
Group the records based on Industry	GROUP BY Industry
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get Industry of Companies	SELECT Industry FROM Companies
Group the records based on Industry	GROUP BY Industry
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Industry of Companies	SELECT Industry FROM Companies
Group the records based on Industry	GROUP BY Industry
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get building id of Office locations	SELECT building_id FROM Office_locations
Get name of buildings	SELECT name FROM buildings
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get building id of Office locations	SELECT building_id FROM Office_locations
Get name of buildings	SELECT name FROM buildings
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get Industry of Companies	SELECT Industry FROM Companies
Keep the records that Headquarters is USA	WHERE Headquarters = USA
Get Industry of Companies	SELECT Industry FROM Companies
Keep the records that Headquarters is China	WHERE Headquarters = China
Get Industry of Companies	SELECT Industry FROM Companies
Keep the records that Headquarters is USA	WHERE Headquarters = USA
Get Industry of Companies	SELECT Industry FROM Companies
Keep the records that Headquarters is China	WHERE Headquarters = China
Get the number of Companies	SELECT COUNT ( * ) FROM Companies
Keep the records that Industry is Banking OR Industry is Conglomerate	WHERE Industry = Banking OR Industry = Conglomerate
Get the number of Companies	SELECT COUNT ( * ) FROM Companies
Keep the records that Industry is Banking OR Industry is Conglomerate	WHERE Industry = Banking OR Industry = Conglomerate
Get Headquarters of Companies	SELECT Headquarters FROM Companies
Group the records based on the number Headquarters 2 that the number is greater than 2	GROUP BY Headquarters HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Headquarters of Companies	SELECT Headquarters FROM Companies
Group the records based on the number Headquarters 2 that the number is greater than 2	GROUP BY Headquarters HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of Products	SELECT COUNT ( * ) FROM Products
Get Product Name of Products	SELECT Product_Name FROM Products
Order these records based on the Product Price and sort them in ascending ORDER	ORDER BY Product_Price ASC 
Get Product Name and Product Type Code of Products	SELECT Product_Name , Product_Type_Code FROM Products
Get Product Price of Products	SELECT Product_Price FROM Products
Keep the records that Product Name is Dining OR Product Name is Trading Policy	WHERE Product_Name = Dining OR Product_Name = Trading Policy
Get the average value of Product Price of Products	SELECT AVG ( Product_Price ) FROM Products
Get Product Name of Products	SELECT Product_Name FROM Products
Order these records based on the Product Price and sort them in descending order, and return the top 1 record	ORDER BY Product_Price DESC LIMIT 1
Get the number and Product Type Code of Products	SELECT Product_Type_Code , COUNT ( * ) FROM Products
Group the records based on Product Type Code	GROUP BY Product_Type_Code
Get Product Type Code of Products	SELECT Product_Type_Code FROM Products
Group the records based on Product Type Code	GROUP BY Product_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Product Type Code of Products	SELECT Product_Type_Code FROM Products
Group the records based on the number Product Type Code 2 that the number is greater than or equal to 2	GROUP BY Product_Type_Code HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Product Type Code of Products	SELECT Product_Type_Code FROM Products
Keep the records that Product Price is greater than 4500	WHERE Product_Price > 4500
Get Product Type Code of Products	SELECT Product_Type_Code FROM Products
Keep the records that Product Price is less than 3000	WHERE Product_Price < 3000
Get the number and Product Name of Products that has Products in Events	SELECT T1.Product_Name , COUNT ( * ) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID
Group the records based on Product Name of Products	GROUP BY T1.Product_Name
Get the number and Product Name of Products that has Products in Events	SELECT T1.Product_Name , COUNT ( * ) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID
Group the records based on Product Name of Products	GROUP BY T1.Product_Name
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get Product Name of Products that has Products in Events	SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID
Group the records based on the number Product Name of Products 2 that the number is greater than or equal to 2	GROUP BY T1.Product_Name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Product Name of Products that has Products in Events	SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID
Group the records based on the number Product Name of Products 2 that the number is greater than or equal to 2	GROUP BY T1.Product_Name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Order these records based on the Product Name of Products	ORDER BY T1.Product_Name 
Get Product ID of Products in Events	SELECT Product_ID FROM Products_in_Events
Get Product Name of Products	SELECT Product_Name FROM Products
Keep the records that Product ID is not in the first query result	WHERE Product_ID NOT IN ( the first query result ) 
Get the number of artwork	SELECT COUNT ( * ) FROM artwork
Get Name of artwork	SELECT Name FROM artwork
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of artwork	SELECT Name FROM artwork
Keep the records that is not Program Talent Show	WHERE TYPE != Program Talent Show
Get Festival Name of festival detail	SELECT Festival_Name , LOCATION FROM festival_detail
Get Chair Name of festival detail	SELECT Chair_Name FROM festival_detail
Order these records based on the and sort them in ascending ORDER	ORDER BY ASC 
Get of festival detail	SELECT LOCATION FROM festival_detail
Order these records based on the Num of Audience and sort them in descending order, and return the top 1 record	ORDER BY Num_of_Audience DESC LIMIT 1
Get Festival Name of festival detail	SELECT Festival_Name FROM festival_detail
Keep the records that is 2007	WHERE YEAR = 2007
Get the average value of Num of Audience of festival detail	SELECT AVG ( Num_of_Audience ) FROM festival_detail
Get Festival Name of festival detail	SELECT Festival_Name FROM festival_detail
Order these records based on the and sort them in descending order, and return the top 3 records	ORDER BY DESC LIMIT 3
Get Name and Festival Name of nomination that has artwork and festival detail	SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3
Get Type of nomination that has artwork and festival detail	SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
Keep the records that Year of festival detail is 2007	WHERE T3.Year = 2007
Get Name of nomination that has artwork and festival detail	SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
Order these records based on the Year of festival detail	ORDER BY T3.Year 
Get Festival Name of nomination that has artwork and festival detail	SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
Keep the records that Type of artwork is Program Talent Show	WHERE T2.Type = Program Talent Show
Get Festival ID and Festival Name of nomination that has artwork and festival detail	SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
Group the records based on the number Festival ID of nomination 2 that the number is greater than or equal to 2	GROUP BY T1.Festival_ID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and Festival ID and Festival Name of nomination that has artwork and festival detail	SELECT T1.Festival_ID , T3.Festival_Name , COUNT ( * ) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID
Group the records based on Festival ID of nomination	GROUP BY T1.Festival_ID
Get the number of artwork	SELECT TYPE , COUNT ( * ) FROM artwork
Group the records based on	GROUP BY
Get of artwork	SELECT TYPE FROM artwork
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of festival detail	SELECT YEAR FROM festival_detail
Group the records based on that the number is greater than 1	GROUP BY HAVING COUNT ( * ) > 1
Get Artwork ID of nomination	SELECT Artwork_ID FROM nomination
Get Name of Artwork	SELECT Name FROM Artwork
Keep the records that Artwork ID is not in the first query result	WHERE Artwork_ID NOT IN ( the first query result ) 
Get Num of Audience of festival detail	SELECT Num_of_Audience FROM festival_detail
Keep the records that is 2008 OR is 2010	WHERE YEAR = 2008 OR YEAR = 2010
Get the SUM of Num of Audience of festival detail	SELECT SUM ( Num_of_Audience ) FROM festival_detail
Get of festival detail	SELECT YEAR FROM festival_detail
Keep the records that is United States	WHERE LOCATION = United States
Get of festival detail	SELECT YEAR FROM festival_detail
Keep the records that is not United States	WHERE LOCATION != United States
Get the number of premises	SELECT COUNT ( * ) FROM premises
Get premises type of premises	SELECT DISTINCT premises_type FROM premises
Get premises type and premise details of premises	SELECT premises_type , premise_details FROM premises
Order these records based on the premises type	ORDER BY premises_type 
Get the number and premises type of premises	SELECT premises_type , COUNT ( * ) FROM premises
Group the records based on premises type	GROUP BY premises_type
Get the number and product category of mailshot campaigns	SELECT product_category , COUNT ( * ) FROM mailshot_campaigns
Group the records based on product category	GROUP BY product_category
Get customer id of mailshot customers	SELECT customer_id FROM mailshot_customers
Get customer name and customer phone of customers	SELECT customer_name , customer_phone FROM customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer name and customer phone of customers that has mailshot customers	SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that outcome code of mailshot customers is No Response	WHERE T2.outcome_code = No Response
Get the number and outcome code of mailshot customers	SELECT outcome_code , COUNT ( * ) FROM mailshot_customers
Group the records based on outcome code	GROUP BY outcome_code
Get customer name of mailshot customers that has customers	SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that outcome code is Order	WHERE outcome_code = Order 
Group the records based on the number customer id of mailshot customers 2 that the number is greater than or equal to 2	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer name of mailshot customers that has customers	SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of mailshot customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name and payment method of mailshot customers that has customers	SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that outcome code of mailshot customers is Order	WHERE T1.outcome_code = Order
Get customer name and payment method of mailshot customers that has customers	SELECT T2.customer_name , T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that outcome code of mailshot customers is No Response	WHERE T1.outcome_code = No Response
Get premises type and address type code of customer addresses that has premises	SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2
Get address type code of customer addresses	SELECT DISTINCT address_type_code FROM customer_addresses
Get order shipping charges and customer id of customer orders	SELECT order_shipping_charges , customer_id FROM customer_orders
Keep the records that order status code is Cancelled OR order status code is Paid	WHERE order_status_code = Cancelled OR order_status_code = Paid
Get customer name of customers that has customer orders	SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that shipping method code is FedEx AND order status code is Paid	WHERE shipping_method_code = FedEx AND order_status_code = Paid
Get the number of COURSE	SELECT COUNT ( * ) FROM COURSE
Get the number of COURSE	SELECT COUNT ( * ) FROM COURSE
Get the number of COURSE	SELECT COUNT ( * ) FROM COURSE
Keep the records that Credits is greater than 2	WHERE Credits > 2
Get the number of COURSE	SELECT COUNT ( * ) FROM COURSE
Keep the records that Credits is greater than 2	WHERE Credits > 2
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Credits is 1	WHERE Credits = 1
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Credits is 1	WHERE Credits = 1
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Days is MTW	WHERE Days = MTW
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Days is MTW	WHERE Days = MTW
Get the number of DEPARTMENT	SELECT COUNT ( * ) FROM DEPARTMENT
Keep the records that Division is AS	WHERE Division = AS
Get the number of DEPARTMENT	SELECT COUNT ( * ) FROM DEPARTMENT
Keep the records that Division is AS	WHERE Division = AS
Get DPhone of DEPARTMENT	SELECT DPhone FROM DEPARTMENT
Keep the records that Room is 268	WHERE Room = 268
Get DPhone of DEPARTMENT	SELECT DPhone FROM DEPARTMENT
Keep the records that Room is 268	WHERE Room = 268
Get the number of distinct StuID of ENROLLED IN	SELECT COUNT ( DISTINCT StuID ) FROM ENROLLED_IN
Keep the records that Grade is B	WHERE Grade = B
Get the number of distinct StuID of ENROLLED IN	SELECT COUNT ( DISTINCT StuID ) FROM ENROLLED_IN
Keep the records that Grade is B	WHERE Grade = B
Get the maximum value of gradepoint and the minimum value of gradepoint of GRADECONVERSION	SELECT MAX ( gradepoint ) , MIN ( gradepoint ) FROM GRADECONVERSION
Get the maximum value of gradepoint and the minimum value of gradepoint of GRADECONVERSION	SELECT MAX ( gradepoint ) , MIN ( gradepoint ) FROM GRADECONVERSION
Get Fname of STUDENT	SELECT DISTINCT Fname FROM STUDENT
Keep the records that Fname is in the form of %a%	WHERE Fname LIKE %a%
Get Fname of STUDENT	SELECT DISTINCT Fname FROM STUDENT
Keep the records that Fname is in the form of %a%	WHERE Fname LIKE %a%
Get Fname AND Lname of FACULTY	SELECT Fname , Lname FROM FACULTY
Keep the records that sex is M AND Building is NEB	WHERE sex = M AND Building = NEB
Get Fname AND Lname of FACULTY	SELECT Fname , Lname FROM FACULTY
Keep the records that sex is M AND Building is NEB	WHERE sex = M AND Building = NEB
Get Room of FACULTY	SELECT Room FROM FACULTY
Keep the records that Rank is Professor AND Building is NEB	WHERE Rank = Professor AND Building = NEB
Get Room of FACULTY	SELECT Room FROM FACULTY
Keep the records that Rank is Professor AND Building is NEB	WHERE Rank = Professor AND Building = NEB
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Keep the records that Building is Mergenthaler	WHERE Building = Mergenthaler
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Keep the records that Building is Mergenthaler	WHERE Building = Mergenthaler
Get all of COURSE	SELECT * FROM COURSE
Order these records based on the Credits	ORDER BY Credits 
Get all of COURSE	SELECT * FROM COURSE
Order these records based on the Credits	ORDER BY Credits 
Get CName of COURSE	SELECT CName FROM COURSE
Order these records based on the Credits	ORDER BY Credits 
Get CName of COURSE	SELECT CName FROM COURSE
Order these records based on the Credits	ORDER BY Credits 
Get Fname of STUDENT	SELECT Fname FROM STUDENT
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get Fname of STUDENT	SELECT Fname FROM STUDENT
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get LName of STUDENT	SELECT LName FROM STUDENT
Keep the records that Sex is F	WHERE Sex = F 
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get LName of STUDENT	SELECT LName FROM STUDENT
Keep the records that Sex is F	WHERE Sex = F 
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get Lname of FACULTY	SELECT Lname FROM FACULTY
Keep the records that Building is Barton	WHERE Building = Barton 
Order these records based on the Lname	ORDER BY Lname 
Get Lname of FACULTY	SELECT Lname FROM FACULTY
Keep the records that Building is Barton	WHERE Building = Barton 
Order these records based on the Lname	ORDER BY Lname 
Get Fname of FACULTY	SELECT Fname FROM FACULTY
Keep the records that Rank is Professor	WHERE Rank = Professor 
Order these records based on the Fname	ORDER BY Fname 
Get Fname of FACULTY	SELECT Fname FROM FACULTY
Keep the records that Rank is Professor	WHERE Rank = Professor 
Order these records based on the Fname	ORDER BY Fname 
Get DName of DEPARTMENT that has MINOR IN	SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
Group the records based on DNO of MINOR IN	GROUP BY T2.DNO
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get DName of DEPARTMENT that has MINOR IN	SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO
Group the records based on DNO of MINOR IN	GROUP BY T2.DNO
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Get DName of DEPARTMENT that has MINOR IN	SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Get DName of DEPARTMENT that has MINOR IN	SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2
Get DName of DEPARTMENT that has MEMBER OF	SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO
Group the records based on DNO of MEMBER OF	GROUP BY T2.DNO
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get DName of DEPARTMENT that has MEMBER OF	SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO
Group the records based on DNO of MEMBER OF	GROUP BY T2.DNO
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Rank of FACULTY	SELECT Rank FROM FACULTY
Group the records based on Rank	GROUP BY Rank
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Rank of FACULTY	SELECT Rank FROM FACULTY
Group the records based on Rank	GROUP BY Rank
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get Fname and Lname of COURSE that has FACULTY	SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
Group the records based on Instructor of COURSE	GROUP BY T1.Instructor
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get Fname and Lname of COURSE that has FACULTY	SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
Group the records based on Instructor of COURSE	GROUP BY T1.Instructor
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get Building of COURSE that has FACULTY	SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
Group the records based on Instructor of COURSE	GROUP BY T1.Instructor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Building of COURSE that has FACULTY	SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
Group the records based on Instructor of COURSE	GROUP BY T1.Instructor
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get CName of COURSE that has ENROLLED IN	SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID
Group the records based on the number CID of ENROLLED in 5 that the number is greater than or equal to 5	GROUP BY T2.CID HAVING COUNT ( * ) >= 5 HAVING COUNT ( * ) >= 5
Get CName of COURSE that has ENROLLED IN	SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID
Group the records based on the number CID of ENROLLED in 5 that the number is greater than or equal to 5	GROUP BY T2.CID HAVING COUNT ( * ) >= 5 HAVING COUNT ( * ) >= 5
Get Fname and Lname of COURSE that has FACULTY	SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
Keep the records that CName of COURSE is COMPUTER LITERACY	WHERE T1.CName = COMPUTER LITERACY
Get Fname and Lname of COURSE that has FACULTY	SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID
Keep the records that CName of COURSE is COMPUTER LITERACY	WHERE T1.CName = COMPUTER LITERACY
Get Dname and Room of COURSE that has DEPARTMENT	SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO
Keep the records that CName of COURSE is INTRODUCTION TO COMPUTER SCIENCE	WHERE T1.CName = INTRODUCTION TO COMPUTER SCIENCE
Get Dname and Room of COURSE that has DEPARTMENT	SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO
Keep the records that CName of COURSE is INTRODUCTION TO COMPUTER SCIENCE	WHERE T1.CName = INTRODUCTION TO COMPUTER SCIENCE
Get Fname AND LName AND gradepoint of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Get Fname AND LName AND gradepoint of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT T3.Fname , T3.LName , T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Get Fname of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Keep the records that gradepoint of GRADECONVERSION is greater than or equal to 3.8	WHERE T2.gradepoint >= 3.8
Get Fname of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Keep the records that gradepoint of GRADECONVERSION is greater than or equal to 3.8	WHERE T2.gradepoint >= 3.8
Get Fname and Lname of FACULTY that has MEMBER OF	SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID
Keep the records that DNO of MEMBER of is 520	WHERE T2.DNO = 520
Get Fname and Lname of FACULTY that has MEMBER OF	SELECT T1.Fname , T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID
Keep the records that DNO of MEMBER of is 520	WHERE T2.DNO = 520
Get Fname and Lname of MINOR in that has STUDENT	SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID
Keep the records that DNO of MINOR in is 140	WHERE T1.DNO = 140
Get Fname and Lname of MINOR in that has STUDENT	SELECT T2.Fname , T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID
Keep the records that DNO of MINOR in is 140	WHERE T1.DNO = 140
Get Lname of DEPARTMENT that has FACULTY and MEMBER OF	SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID
Keep the records that DName of DEPARTMENT is Computer Science	WHERE T1.DName = Computer Science
Get Lname of DEPARTMENT that has FACULTY and MEMBER OF	SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID
Keep the records that DName of DEPARTMENT is Computer Science	WHERE T1.DName = Computer Science
Get the average value of gradepoint of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT AVG ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Keep the records that LName of STUDENT is Smith	WHERE T3.LName = Smith
Get the average value of gradepoint of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT AVG ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Keep the records that LName of STUDENT is Smith	WHERE T3.LName = Smith
Get the maximum value of gradepoint AND the minimum value of gradepoint of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT MAX ( T2.gradepoint ) , MIN ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Keep the records that city code of STUDENT is NYC	WHERE T3.city_code = NYC
Get the maximum value of gradepoint AND the minimum value of gradepoint of ENROLLED in that has GRADECONVERSION AND STUDENT	SELECT MAX ( T2.gradepoint ) , MIN ( T2.gradepoint ) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade
Keep the records that city code of STUDENT is NYC	WHERE T3.city_code = NYC
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Credits is 3	WHERE Credits = 3
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Credits is 1 AND Hours is 4	WHERE Credits = 1 AND Hours = 4
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Credits is 3	WHERE Credits = 3
Get CName of COURSE	SELECT CName FROM COURSE
Keep the records that Credits is 1 AND Hours is 4	WHERE Credits = 1 AND Hours = 4
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Keep the records that Division is AS	WHERE Division = AS
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Keep the records that Division is EN AND Building is NEB	WHERE Division = EN AND Building = NEB
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Keep the records that Division is AS	WHERE Division = AS
Get DName of DEPARTMENT	SELECT DName FROM DEPARTMENT
Keep the records that Division is EN AND Building is NEB	WHERE Division = EN AND Building = NEB
Get StuID of ENROLLED IN	SELECT StuID FROM ENROLLED_IN
Get Fname of STUDENT	SELECT Fname FROM STUDENT
Keep the records that StuID is not in the first query result	WHERE StuID NOT IN ( the first query result ) 
Get StuID of ENROLLED IN	SELECT StuID FROM ENROLLED_IN
Get Fname of STUDENT	SELECT Fname FROM STUDENT
Keep the records that StuID is not in the first query result	WHERE StuID NOT IN ( the first query result ) 
Get product id of product suppliers	SELECT product_id FROM product_suppliers
Order these records based on the total amount purchased and sort them in descending order, and return the top 3 records	ORDER BY total_amount_purchased DESC LIMIT 3
Get product id of product suppliers	SELECT product_id FROM product_suppliers
Order these records based on the total amount purchased and sort them in descending order, and return the top 3 records	ORDER BY total_amount_purchased DESC LIMIT 3
Get product id and product type code of products	SELECT product_id , product_type_code FROM products
Order these records based on the product price, and return the top 1 record	ORDER BY product_price LIMIT 1
Get product id and product type code of products	SELECT product_id , product_type_code FROM products
Order these records based on the product price, and return the top 1 record	ORDER BY product_price LIMIT 1
Get the number of distinct product type code of products	SELECT COUNT ( DISTINCT product_type_code ) FROM products
Get the number of distinct product type code of products	SELECT COUNT ( DISTINCT product_type_code ) FROM products
Get address details of addresses that has customer addresses	SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id
Keep the records that customer id of customer addresses is 10	WHERE T2.customer_id = 10
Get address details of addresses that has customer addresses	SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id
Keep the records that customer id of customer addresses is 10	WHERE T2.customer_id = 10
Get staff id and staff gender of staff that has staff department assignments	SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that job title code of staff department assignments is Department Manager	WHERE T2.job_title_code = Department Manager
Get staff id and staff gender of staff that has staff department assignments	SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that job title code of staff department assignments is Department Manager	WHERE T2.job_title_code = Department Manager
Get the number and payment method code of customers	SELECT payment_method_code , COUNT ( * ) FROM customers
Group the records based on payment method code	GROUP BY payment_method_code
Get the number and payment method code of customers	SELECT payment_method_code , COUNT ( * ) FROM customers
Group the records based on payment method code	GROUP BY payment_method_code
Get product id of ORDER items	SELECT product_id FROM order_items
Group the records based on product id	GROUP BY product_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product id of ORDER items	SELECT product_id FROM order_items
Group the records based on product id	GROUP BY product_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name and customer phone and customer email of customers that has customer orders	SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customer orders	GROUP BY T2.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name and customer phone and customer email of customers that has customer orders	SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customer orders	GROUP BY T2.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of product price and product type code of products	SELECT product_type_code , AVG ( product_price ) FROM products
Group the records based on product type code	GROUP BY product_type_code
Get the average value of product price and product type code of products	SELECT product_type_code , AVG ( product_price ) FROM products
Group the records based on product type code	GROUP BY product_type_code
Get the number of department stores that has department store chain	SELECT COUNT ( * ) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id
Keep the records that dept store chain name of department store chain is South	WHERE T2.dept_store_chain_name = South
Get the number of department stores that has department store chain	SELECT COUNT ( * ) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id
Keep the records that dept store chain name of department store chain is South	WHERE T2.dept_store_chain_name = South
Get staff name and job title code of staff that has staff department assignments	SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Order these records based on the date assigned to of staff department assignments and sort them in descending order, and return the top 1 record	ORDER BY T2.date_assigned_to DESC LIMIT 1
Get staff name and job title code of staff that has staff department assignments	SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Order these records based on the date assigned to of staff department assignments and sort them in descending order, and return the top 1 record	ORDER BY T2.date_assigned_to DESC LIMIT 1
Get product type code and product name and product price of product suppliers that has products	SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id
Keep the records that supplier id of product suppliers is 3	WHERE T1.supplier_id = 3
Get product type code and product name and product price of product suppliers that has products	SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id
Keep the records that supplier id of product suppliers is 3	WHERE T1.supplier_id = 3
Get customer name of customers that has customer orders	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that ORDER status code of customer orders is Pending	WHERE T2.order_status_code = Pending 
Order these records based on the customer id of customer orders	ORDER BY T2.customer_id 
Get customer name of customers that has customer orders	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that ORDER status code of customer orders is Pending	WHERE T2.order_status_code = Pending 
Order these records based on the customer id of customer orders	ORDER BY T2.customer_id 
Get customer name and customer address of customers that has customer orders	SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status code of customer orders is New	WHERE T2.order_status_code = New
Get customer name and customer address of customers that has customer orders	SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status code of customer orders is Pending	WHERE T2.order_status_code = Pending
Get customer name and customer address of customers that has customer orders	SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status code of customer orders is New	WHERE T2.order_status_code = New
Get customer name and customer address of customers that has customer orders	SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status code of customer orders is Pending	WHERE T2.order_status_code = Pending
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Get product id of product suppliers that has products	SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id
Keep the records that supplier id of product suppliers is 2 AND product price of products is greater than the first query result	WHERE T1.supplier_id = 2 AND T2.product_price > ( the first query result ) 
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Get product id of product suppliers that has products	SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id
Keep the records that supplier id of product suppliers is 2 AND product price of products is greater than the first query result	WHERE T1.supplier_id = 2 AND T2.product_price > ( the first query result ) 
Get dept store id and store name of departments that has department stores	SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
Keep the records that department name of departments is marketing	WHERE T1.department_name = marketing
Get dept store id and store name of departments that has department stores	SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
Keep the records that department name of departments is managing	WHERE T1.department_name = managing
Get dept store id and store name of departments that has department stores	SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
Keep the records that department name of departments is marketing	WHERE T1.department_name = marketing
Get dept store id and store name of departments that has department stores	SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id
Keep the records that department name of departments is managing	WHERE T1.department_name = managing
Get dept store chain id of department stores	SELECT dept_store_chain_id FROM department_stores
Group the records based on dept store chain id	GROUP BY dept_store_chain_id
Order these records based on the the number and sort them in descending order, and return the top 2 records	ORDER BY COUNT ( * ) DESC LIMIT 2
Get dept store chain id of department stores	SELECT dept_store_chain_id FROM department_stores
Group the records based on dept store chain id	GROUP BY dept_store_chain_id
Order these records based on the the number and sort them in descending order, and return the top 2 records	ORDER BY COUNT ( * ) DESC LIMIT 2
Get department id of staff department assignments	SELECT department_id FROM staff_department_assignments
Group the records based on department id	GROUP BY department_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get department id of staff department assignments	SELECT department_id FROM staff_department_assignments
Group the records based on department id	GROUP BY department_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get the maximum value of product price and the minimum value of product price and product type code of products	SELECT product_type_code , MAX ( product_price ) , MIN ( product_price ) FROM products
Group the records based on product type code	GROUP BY product_type_code
Get the maximum value of product price and the minimum value of product price and product type code of products	SELECT product_type_code , MAX ( product_price ) , MIN ( product_price ) FROM products
Group the records based on product type code	GROUP BY product_type_code
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Get product type code of products	SELECT product_type_code FROM products
Group the records based on the average value of product price product type code the first query result that the average value of product price is greater than the first query result	GROUP BY product_type_code HAVING AVG ( product_price ) > ( the first query result )  HAVING AVG ( product_price ) > ( the first query result ) 
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Get product type code of products	SELECT product_type_code FROM products
Group the records based on the average value of product price product type code the first query result that the average value of product price is greater than the first query result	GROUP BY product_type_code HAVING AVG ( product_price ) > ( the first query result )  HAVING AVG ( product_price ) > ( the first query result ) 
Get staff id and staff name of staff that has Staff Department Assignments	SELECT T1.staff_id , T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
Order these records based on the date assigned to date assigned from, and return the top 1 record	ORDER BY date_assigned_to - date_assigned_from LIMIT 1
Get staff id and staff name of staff that has Staff Department Assignments	SELECT T1.staff_id , T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
Order these records based on the date assigned to date assigned from, and return the top 1 record	ORDER BY date_assigned_to - date_assigned_from LIMIT 1
Get product name AND product id of products	SELECT product_name , product_id FROM products
Keep the records that product price is between 60 X700	WHERE product_price BETWEEN 600 AND 700
Get product name AND product id of products	SELECT product_name , product_id FROM products
Keep the records that product price is between 60 X700	WHERE product_price BETWEEN 600 AND 700
Get the minimum value of order date of Customer Orders	SELECT MIN ( order_date ) FROM Customer_Orders
Keep the records that order status code is Cancelled	WHERE order_status_code = Cancelled
Get customer id of Customer Orders	SELECT DISTINCT customer_id FROM Customer_Orders
Keep the records that order date is greater than the first query result	WHERE order_date > ( the first query result ) 
Get the minimum value of order date of Customer Orders	SELECT MIN ( order_date ) FROM Customer_Orders
Keep the records that order status code is Cancelled	WHERE order_status_code = Cancelled
Get customer id of Customer Orders	SELECT DISTINCT customer_id FROM Customer_Orders
Keep the records that order date is greater than the first query result	WHERE order_date > ( the first query result ) 
Get the maximum value of date assigned to of Staff Department Assignments	SELECT MAX ( date_assigned_to ) FROM Staff_Department_Assignments
Keep the records that job title code is Clerical Staff	WHERE job_title_code = Clerical Staff
Get staff id of Staff Department Assignments	SELECT staff_id FROM Staff_Department_Assignments
Keep the records that date assigned to is less than the first query result	WHERE date_assigned_to < ( the first query result ) 
Get the maximum value of date assigned to of Staff Department Assignments	SELECT MAX ( date_assigned_to ) FROM Staff_Department_Assignments
Keep the records that job title code is Clerical Staff	WHERE job_title_code = Clerical Staff
Get staff id of Staff Department Assignments	SELECT staff_id FROM Staff_Department_Assignments
Keep the records that date assigned to is less than the first query result	WHERE date_assigned_to < ( the first query result ) 
Get customer name and customer id of customers	SELECT customer_name , customer_id FROM customers
Keep the records that customer address is in the form of %TN%	WHERE customer_address LIKE %TN%
Get customer name and customer id of customers	SELECT customer_name , customer_id FROM customers
Keep the records that customer address is in the form of %TN%	WHERE customer_address LIKE %TN%
Get staff name and staff gender of staff that has staff department assignments	SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that date assigned FROM of staff department assignments is in the form of 2016%	WHERE T2.date_assigned_from LIKE 2016%
Get staff name and staff gender of staff that has staff department assignments	SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that date assigned FROM of staff department assignments is in the form of 2016%	WHERE T2.date_assigned_from LIKE 2016%
Get staff name of staff that has staff department assignments	SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Group the records based on the number staff id of staff department assignments 1 that the number is greater than 1	GROUP BY T2.staff_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get staff name of staff that has staff department assignments	SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id
Group the records based on the number staff id of staff department assignments 1 that the number is greater than 1	GROUP BY T2.staff_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get supplier name and supplier phone of Suppliers that has supplier addresses and addresses	SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id
Order these records based on the address details of addresses	ORDER BY T3.address_details 
Get supplier name and supplier phone of Suppliers that has supplier addresses and addresses	SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id
Order these records based on the address details of addresses	ORDER BY T3.address_details 
Get customer phone of customers	SELECT customer_phone FROM customers
Get supplier phone of suppliers	SELECT supplier_phone FROM suppliers
Get customer phone of customers	SELECT customer_phone FROM customers
Get supplier phone of suppliers	SELECT supplier_phone FROM suppliers
Get product id of Order Items	SELECT product_id FROM Order_Items
Group the records based on the number product id 3 that the number is greater than 3	GROUP BY product_id HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get product id of Product Suppliers	SELECT product_id FROM Product_Suppliers
Group the records based on the SUM of total amount purchased product id 80000 that the SUM of total amount purchased is greater than 80000	GROUP BY product_id HAVING SUM ( total_amount_purchased ) > 80000 HAVING SUM ( total_amount_purchased ) > 80000
Get product id of Order Items	SELECT product_id FROM Order_Items
Group the records based on the number product id 3 that the number is greater than 3	GROUP BY product_id HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get product id of Product Suppliers	SELECT product_id FROM Product_Suppliers
Group the records based on the SUM of total amount purchased product id 80000 that the SUM of total amount purchased is greater than 80000	GROUP BY product_id HAVING SUM ( total_amount_purchased ) > 80000 HAVING SUM ( total_amount_purchased ) > 80000
Get product id and product name of products	SELECT product_id , product_name FROM products
Keep the records that product price is less than 600 OR product price is greater than 900	WHERE product_price < 600 OR product_price > 900
Get product id and product name of products	SELECT product_id , product_name FROM products
Keep the records that product price is less than 600 OR product price is greater than 900	WHERE product_price < 600 OR product_price > 900
Get supplier id of Product Suppliers	SELECT supplier_id FROM Product_Suppliers
Group the records based on the average value of total amount purchased the average value of total amount purchased supplier id 50000 30000 that the average value of total amount purchased is greater than 50000 OR the average value of total amount purchased is less than 30000	GROUP BY supplier_id HAVING AVG ( total_amount_purchased ) > 50000 OR AVG ( total_amount_purchased ) < 30000 HAVING AVG ( total_amount_purchased ) > 50000 OR AVG ( total_amount_purchased ) < 30000
Get supplier id of Product Suppliers	SELECT supplier_id FROM Product_Suppliers
Group the records based on the average value of total amount purchased the average value of total amount purchased supplier id 50000 30000 that the average value of total amount purchased is greater than 50000 OR the average value of total amount purchased is less than 30000	GROUP BY supplier_id HAVING AVG ( total_amount_purchased ) > 50000 OR AVG ( total_amount_purchased ) < 30000 HAVING AVG ( total_amount_purchased ) > 50000 OR AVG ( total_amount_purchased ) < 30000
Get supplier id of Product Suppliers	SELECT supplier_id FROM Product_Suppliers
Group the records based on supplier id	GROUP BY supplier_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of total amount purchased and the average value of total value purchased of Product Suppliers	SELECT AVG ( total_amount_purchased ) , AVG ( total_value_purchased ) FROM Product_Suppliers
Keep the records that supplier id is the first query result	WHERE supplier_id = ( the first query result ) 
Get supplier id of Product Suppliers	SELECT supplier_id FROM Product_Suppliers
Group the records based on supplier id	GROUP BY supplier_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of total amount purchased and the average value of total value purchased of Product Suppliers	SELECT AVG ( total_amount_purchased ) , AVG ( total_value_purchased ) FROM Product_Suppliers
Keep the records that supplier id is the first query result	WHERE supplier_id = ( the first query result ) 
Get the maximum value of customer code and the minimum value of customer code of Customers	SELECT MAX ( customer_code ) , MIN ( customer_code ) FROM Customers
Get the maximum value of customer code and the minimum value of customer code of Customers	SELECT MAX ( customer_code ) , MIN ( customer_code ) FROM Customers
Get customer name of customers that has customer orders and order items and products	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id
Keep the records that product name of products is keyboard	WHERE T4.product_name = keyboard
Get customer name of customers that has customer orders and order items and products	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id
Keep the records that product name of products is keyboard	WHERE T4.product_name = keyboard
Get supplier name and supplier phone of suppliers that has product suppliers and products	SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id
Keep the records that product name of products is red jeans	WHERE T3.product_name = red jeans
Get supplier name and supplier phone of suppliers that has product suppliers and products	SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id
Keep the records that product name of products is red jeans	WHERE T3.product_name = red jeans
Get the maximum value of product price and the minimum value of product price and product type code of products	SELECT MAX ( product_price ) , MIN ( product_price ) , product_type_code FROM products
Group the records based on product type code	GROUP BY product_type_code
Order these records based on the product type code	ORDER BY product_type_code 
Get the maximum value of product price and the minimum value of product price and product type code of products	SELECT MAX ( product_price ) , MIN ( product_price ) , product_type_code FROM products
Group the records based on product type code	GROUP BY product_type_code
Order these records based on the product type code	ORDER BY product_type_code 
Get ORDER id and customer id of customer orders	SELECT order_id , customer_id FROM customer_orders
Keep the records that ORDER status code is Cancelled	WHERE order_status_code = Cancelled 
Order these records based on the ORDER date	ORDER BY order_date 
Get ORDER id and customer id of customer orders	SELECT order_id , customer_id FROM customer_orders
Keep the records that ORDER status code is Cancelled	WHERE order_status_code = Cancelled 
Order these records based on the ORDER date	ORDER BY order_date 
Get product name of customer orders that has order items and products	SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id
Group the records based on the number of distinct customer id of customer orders product id of products 2 that the number of distinct customer id of customer orders is greater than or equal to 2	GROUP BY T3.product_id HAVING COUNT ( DISTINCT T1.customer_id ) >= 2 HAVING COUNT ( DISTINCT T1.customer_id ) >= 2
Get product name of customer orders that has order items and products	SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id
Group the records based on the number of distinct customer id of customer orders product id of products 2 that the number of distinct customer id of customer orders is greater than or equal to 2	GROUP BY T3.product_id HAVING COUNT ( DISTINCT T1.customer_id ) >= 2 HAVING COUNT ( DISTINCT T1.customer_id ) >= 2
Get customer name of customers that has customer orders and order items	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id
Group the records based on the number of distinct product id of order items customer id of customers 3 that the number of distinct product id of order items is greater than or equal to 3	GROUP BY T1.customer_id HAVING COUNT ( DISTINCT T3.product_id ) >= 3 HAVING COUNT ( DISTINCT T3.product_id ) >= 3
Get customer name of customers that has customer orders and order items	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id
Group the records based on the number of distinct product id of order items customer id of customers 3 that the number of distinct product id of order items is greater than or equal to 3	GROUP BY T1.customer_id HAVING COUNT ( DISTINCT T3.product_id ) >= 3 HAVING COUNT ( DISTINCT T3.product_id ) >= 3
Get staff name and staff gender of staff that has Staff Department Assignments	SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that job title code of Staff Department Assignments is Sales Person	WHERE T2.job_title_code = Sales Person
Get staff name and staff gender of staff that has Staff Department Assignments	SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that job title code of Staff Department Assignments is Clerical Staff	WHERE T2.job_title_code = Clerical Staff
Get staff name and staff gender of staff that has Staff Department Assignments	SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that job title code of Staff Department Assignments is Sales Person	WHERE T2.job_title_code = Sales Person
Get staff name and staff gender of staff that has Staff Department Assignments	SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id
Keep the records that job title code of Staff Department Assignments is Clerical Staff	WHERE T2.job_title_code = Clerical Staff
Get customer id AND customer name of customers	SELECT customer_id , customer_name FROM customers
Keep the records that customer address is in the form of %WY% AND payment method code is not Credit Card	WHERE customer_address LIKE %WY% AND payment_method_code != Credit Card
Get customer id AND customer name of customers	SELECT customer_id , customer_name FROM customers
Keep the records that customer address is in the form of %WY% AND payment method code is not Credit Card	WHERE customer_address LIKE %WY% AND payment_method_code != Credit Card
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Keep the records that product type code is Clothes	WHERE product_type_code = Clothes
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Keep the records that product type code is Clothes	WHERE product_type_code = Clothes
Get product name of products	SELECT product_name FROM products
Keep the records that product type code is Hardware	WHERE product_type_code = Hardware 
Order these records based on the product price and sort them in descending order, and return the top 1 record	ORDER BY product_price DESC LIMIT 1
Get product name of products	SELECT product_name FROM products
Keep the records that product type code is Hardware	WHERE product_type_code = Hardware 
Order these records based on the product price and sort them in descending order, and return the top 1 record	ORDER BY product_price DESC LIMIT 1
Get the number of aircraft	SELECT COUNT ( * ) FROM aircraft
Get the number of aircraft	SELECT COUNT ( * ) FROM aircraft
Get Description of aircraft	SELECT Description FROM aircraft
Get Description of aircraft	SELECT Description FROM aircraft
Get the average value of International Passengers of airport	SELECT AVG ( International_Passengers ) FROM airport
Get the average value of International Passengers of airport	SELECT AVG ( International_Passengers ) FROM airport
Get International Passengers and Domestic Passengers of airport	SELECT International_Passengers , Domestic_Passengers FROM airport
Keep the records that Airport Name is London Heathrow	WHERE Airport_Name = London Heathrow
Get International Passengers and Domestic Passengers of airport	SELECT International_Passengers , Domestic_Passengers FROM airport
Keep the records that Airport Name is London Heathrow	WHERE Airport_Name = London Heathrow
Get the SUM of Domestic Passengers of airport	SELECT SUM ( Domestic_Passengers ) FROM airport
Keep the records that Airport Name is in the form of %London%	WHERE Airport_Name LIKE %London%
Get the SUM of Domestic Passengers of airport	SELECT SUM ( Domestic_Passengers ) FROM airport
Keep the records that Airport Name is in the form of %London%	WHERE Airport_Name LIKE %London%
Get the maximum value of Transit Passengers and the minimum value of Transit Passengers of airport	SELECT MAX ( Transit_Passengers ) , MIN ( Transit_Passengers ) FROM airport
Get the maximum value of Transit Passengers and the minimum value of Transit Passengers of airport	SELECT MAX ( Transit_Passengers ) , MIN ( Transit_Passengers ) FROM airport
Get Name of pilot	SELECT Name FROM pilot
Keep the records that Age is greater than or equal to 25	WHERE Age >= 25
Get Name of pilot	SELECT Name FROM pilot
Keep the records that Age is greater than or equal to 25	WHERE Age >= 25
Get Name of pilot	SELECT Name FROM pilot
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of pilot	SELECT Name FROM pilot
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of pilot	SELECT Name FROM pilot
Keep the records that Age is less than or equal to 30	WHERE Age <= 30 
Order these records based on the Name and sort them in descending ORDER	ORDER BY Name DESC 
Get Name of pilot	SELECT Name FROM pilot
Keep the records that Age is less than or equal to 30	WHERE Age <= 30 
Order these records based on the Name and sort them in descending ORDER	ORDER BY Name DESC 
Get Aircraft of aircraft that has airport aircraft and airport	SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Airport Name of airport is London Gatwick	WHERE T3.Airport_Name = London Gatwick
Get Aircraft of aircraft that has airport aircraft and airport	SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Airport Name of airport is London Gatwick	WHERE T3.Airport_Name = London Gatwick
Get Aircraft and Description of aircraft that has airport aircraft and airport	SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Total Passengers of airport is greater than 10000000	WHERE T3.Total_Passengers > 10000000
Get Aircraft and Description of aircraft that has airport aircraft and airport	SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Total Passengers of airport is greater than 10000000	WHERE T3.Total_Passengers > 10000000
Get the average value of Total Passengers of aircraft that has airport aircraft and airport	SELECT AVG ( T3.Total_Passengers ) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Aircraft of aircraft is Robinson R-22	WHERE T1.Aircraft = Robinson R-22
Get the average value of Total Passengers of aircraft that has airport aircraft and airport	SELECT AVG ( T3.Total_Passengers ) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Aircraft of aircraft is Robinson R-22	WHERE T1.Aircraft = Robinson R-22
Get Location and Aircraft of aircraft that has MATCH	SELECT T2.Location , T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2
Get Location and Aircraft of aircraft that has MATCH	SELECT T2.Location , T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2
Get Aircraft of aircraft that has MATCH	SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
Group the records based on Winning Aircraft of MATCH	GROUP BY T2.Winning_Aircraft
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Aircraft of aircraft that has MATCH	SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
Group the records based on Winning Aircraft of MATCH	GROUP BY T2.Winning_Aircraft
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Aircraft of aircraft that has MATCH	SELECT T1.Aircraft , COUNT ( * ) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
Group the records based on Winning Aircraft of MATCH	GROUP BY T2.Winning_Aircraft
Get the number and Aircraft of aircraft that has MATCH	SELECT T1.Aircraft , COUNT ( * ) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
Group the records based on Winning Aircraft of MATCH	GROUP BY T2.Winning_Aircraft
Get Name of pilot	SELECT Name FROM pilot
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get Name of pilot	SELECT Name FROM pilot
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get Aircraft of aircraft that has MATCH	SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
Group the records based on the number Winning Aircraft of MATCH 2 that the number is greater than or equal to 2	GROUP BY T2.Winning_Aircraft HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Aircraft of aircraft that has MATCH	SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft
Group the records based on the number Winning Aircraft of MATCH 2 that the number is greater than or equal to 2	GROUP BY T2.Winning_Aircraft HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Winning Aircraft of	SELECT Winning_Aircraft FROM
Get Aircraft of Aircraft	SELECT Aircraft FROM aircraft
Keep the records that Aircraft ID is not in the first query result	WHERE Aircraft_ID NOT IN ( the first query result ) 
Get Winning Aircraft of	SELECT Winning_Aircraft FROM
Get Aircraft of Aircraft	SELECT Aircraft FROM aircraft
Keep the records that Aircraft ID is not in the first query result	WHERE Aircraft_ID NOT IN ( the first query result ) 
Get Aircraft of aircraft that has airport aircraft and airport	SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Airport Name of airport is London Heathrow	WHERE T3.Airport_Name = London Heathrow
Get Aircraft of aircraft that has airport aircraft and airport	SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Airport Name of airport is London Gatwick	WHERE T3.Airport_Name = London Gatwick
Get Aircraft of aircraft that has airport aircraft and airport	SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Airport Name of airport is London Heathrow	WHERE T3.Airport_Name = London Heathrow
Get Aircraft of aircraft that has airport aircraft and airport	SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID
Keep the records that Airport Name of airport is London Gatwick	WHERE T3.Airport_Name = London Gatwick
Get all of airport	SELECT * FROM airport
Order these records based on the International Passengers and sort them in descending order, and return the top 1 record	ORDER BY International_Passengers DESC LIMIT 1
Get all of airport	SELECT * FROM airport
Order these records based on the International Passengers and sort them in descending order, and return the top 1 record	ORDER BY International_Passengers DESC LIMIT 1
Get name and age of pilot that has MATCH	SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot
Keep the records that age of pilot is less than 30	WHERE t1.age < 30 
Group the records based on winning pilot of MATCH	GROUP BY t2.winning_pilot
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and age of pilot that has MATCH	SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot
Keep the records that age of pilot is less than 30	WHERE t1.age < 30 
Group the records based on winning pilot of MATCH	GROUP BY t2.winning_pilot
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and age of pilot that has MATCH	SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot
Order these records based on the age of pilot, and return the top 1 record	ORDER BY t1.age LIMIT 1
Get name and age of pilot that has MATCH	SELECT t1.name , t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot
Order these records based on the age of pilot, and return the top 1 record	ORDER BY t1.age LIMIT 1
Get Winning Pilot of	SELECT Winning_Pilot FROM
Keep the records that country is Australia	WHERE country = Australia
Get name of pilot	SELECT name FROM pilot
Keep the records that pilot id is not in the first query result	WHERE pilot_id NOT IN ( the first query result ) 
Get Winning Pilot of	SELECT Winning_Pilot FROM
Keep the records that country is Australia	WHERE country = Australia
Get name of pilot	SELECT name FROM pilot
Keep the records that pilot id is not in the first query result	WHERE pilot_id NOT IN ( the first query result ) 
Get the number and property id of properties that has residents	SELECT T1.property_id , COUNT ( * ) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id
Group the records based on property id of properties	GROUP BY T1.property_id
Get service type code of services that has organizations	SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id
Keep the records that organization details of organizations is Denesik and Sons Party	WHERE T2.organization_details = Denesik and Sons Party
Get the number and resident id and other details of Residents that has Residents Services	SELECT T1.resident_id , T1.other_details , COUNT ( * ) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id
Group the records based on resident id of Residents	GROUP BY T1.resident_id
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and service id and service details of Services that has Residents Services	SELECT T1.service_id , T1.service_details , COUNT ( * ) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id
Group the records based on service id of Services	GROUP BY T1.service_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get thing id and type of Thing Code and organization details of Things that has Organizations	SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2
Get customer id and customer details of Customers that has Customer Events	SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Customers 3 that the number is greater than or equal to 3	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get date moved in and customer id and customer details of Customers that has Customer Events	SELECT T2.date_moved_in , T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2
Get Customer Event ID AND property id of Customer Events that has Customer Event Notes	SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID
Group the records based on the number customer event id of Customer Events 1 3 that the number is between 1 AND 3	GROUP BY T1.customer_event_id HAVING COUNT ( * ) BETWEEN 1 AND 3 HAVING COUNT ( * ) BETWEEN 1 AND 3
Get thing id and Type of Thing Code of Timed Status of Things that has Things	SELECT DISTINCT T2.thing_id , T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id
Keep the records that Status of Thing Code of Timed Status of Things is Close OR Date and Date of Timed Status of Things is less than 2017-06-19 02:59:21	WHERE T1.Status_of_Thing_Code = Close OR T1.Date_and_Date < 2017-06-19 02:59:21
Get the number of distinct Location Code of Things that has Timed Locations of Things	SELECT COUNT ( DISTINCT T2.Location_Code ) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id
Keep the records that service details of Things is Unsatisfied	WHERE T1.service_details = Unsatisfied
Get the number of distinct Status of Thing Code of Timed Status of Things	SELECT COUNT ( DISTINCT Status_of_Thing_Code ) FROM Timed_Status_of_Things
Get organization id of organizations	SELECT organization_id FROM organizations
Get parent organization id of organizations	SELECT parent_organization_id FROM organizations
Get the maximum value of date moved in of Residents	SELECT MAX ( date_moved_in ) FROM Residents
Get other details of Residents	SELECT other_details FROM Residents
Keep the records that other details is in the form of %Miss%	WHERE other_details LIKE %Miss%
Get customer event id and date moved in and property id of customer events	SELECT customer_event_id , date_moved_in , property_id FROM customer_events
Get customer id of customer events	SELECT customer_id FROM customer_events
Get the number of customers	SELECT COUNT ( * ) FROM customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get date moved in of residents	SELECT DISTINCT date_moved_in FROM residents
Get the number of school	SELECT COUNT ( * ) FROM school
Get the number of school	SELECT COUNT ( * ) FROM school
Get of school	SELECT LOCATION FROM school
Order these records based on the Enrollment and sort them in ascending ORDER	ORDER BY Enrollment ASC 
Get of school	SELECT LOCATION FROM school
Order these records based on the Enrollment and sort them in ascending ORDER	ORDER BY Enrollment ASC 
Get of school	SELECT LOCATION FROM school
Order these records based on the Founded and sort them in descending ORDER	ORDER BY Founded DESC 
Get of school	SELECT LOCATION FROM school
Order these records based on the Founded and sort them in descending ORDER	ORDER BY Founded DESC 
Get Enrollment of school	SELECT Enrollment FROM school
Keep the records that Denomination is not Catholic	WHERE Denomination != Catholic
Get Enrollment of school	SELECT Enrollment FROM school
Keep the records that Denomination is not Catholic	WHERE Denomination != Catholic
Get the average value of Enrollment of school	SELECT AVG ( Enrollment ) FROM school
Get the average value of Enrollment of school	SELECT AVG ( Enrollment ) FROM school
Get Team of player	SELECT Team FROM player
Order these records based on the Team and sort them in ascending ORDER	ORDER BY Team ASC 
Get Team of player	SELECT Team FROM player
Order these records based on the Team and sort them in ascending ORDER	ORDER BY Team ASC 
Get the number of distinct POSITION of player	SELECT COUNT ( DISTINCT POSITION ) FROM player
Get the number of distinct POSITION of player	SELECT COUNT ( DISTINCT POSITION ) FROM player
Get Team of player	SELECT Team FROM player
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Team of player	SELECT Team FROM player
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Team of player	SELECT Team FROM player
Order these records based on the Age and sort them in descending order, and return the top 5 records	ORDER BY Age DESC LIMIT 5
Get Team of player	SELECT Team FROM player
Order these records based on the Age and sort them in descending order, and return the top 5 records	ORDER BY Age DESC LIMIT 5
Get Team and Location of player that has school	SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2
Get Team and Location of player that has school	SELECT T1.Team , T2.Location FROM player AS T1 JOIN school AS T2
Get Location of player that has school	SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID
Group the records based on the number School ID of player 1 that the number is greater than 1	GROUP BY T1.School_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Location of player that has school	SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID
Group the records based on the number School ID of player 1 that the number is greater than 1	GROUP BY T1.School_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Denomination of player that has school	SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID
Group the records based on School ID of player	GROUP BY T1.School_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Denomination of player that has school	SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID
Group the records based on School ID of player	GROUP BY T1.School_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Location and Nickname of school that has school details	SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2
Get Location and Nickname of school that has school details	SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2
Get the number and Denomination of school	SELECT Denomination , COUNT ( * ) FROM school
Group the records based on Denomination	GROUP BY Denomination
Get the number and Denomination of school	SELECT Denomination , COUNT ( * ) FROM school
Group the records based on Denomination	GROUP BY Denomination
Get the number and Denomination of school	SELECT Denomination , COUNT ( * ) FROM school
Group the records based on Denomination	GROUP BY Denomination
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and Denomination of school	SELECT Denomination , COUNT ( * ) FROM school
Group the records based on Denomination	GROUP BY Denomination
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get School Colors of school	SELECT School_Colors FROM school
Order these records based on the Enrollment and sort them in descending order, and return the top 1 record	ORDER BY Enrollment DESC LIMIT 1
Get School Colors of school	SELECT School_Colors FROM school
Order these records based on the Enrollment and sort them in descending order, and return the top 1 record	ORDER BY Enrollment DESC LIMIT 1
Get School ID of Player	SELECT School_ID FROM Player
Get of school	SELECT LOCATION FROM school
Keep the records that School ID is not in the first query result	WHERE School_ID NOT IN ( the first query result ) 
Get School ID of Player	SELECT School_ID FROM Player
Get of school	SELECT LOCATION FROM school
Keep the records that School ID is not in the first query result	WHERE School_ID NOT IN ( the first query result ) 
Get Denomination of school	SELECT Denomination FROM school
Keep the records that Founded is less than 1890	WHERE Founded < 1890
Get Denomination of school	SELECT Denomination FROM school
Keep the records that Founded is greater than 1900	WHERE Founded > 1900
Get Denomination of school	SELECT Denomination FROM school
Keep the records that Founded is less than 1890	WHERE Founded < 1890
Get Denomination of school	SELECT Denomination FROM school
Keep the records that Founded is greater than 1900	WHERE Founded > 1900
Get Nickname of school details	SELECT Nickname FROM school_details
Keep the records that Division is not Division 1	WHERE Division != Division 1
Get Nickname of school details	SELECT Nickname FROM school_details
Keep the records that Division is not Division 1	WHERE Division != Division 1
Get Denomination of school	SELECT Denomination FROM school
Group the records based on the number Denomination 1 that the number is greater than 1	GROUP BY Denomination HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Denomination of school	SELECT Denomination FROM school
Group the records based on the number Denomination 1 that the number is greater than 1	GROUP BY Denomination HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get District name of district	SELECT DISTINCT District_name FROM district
Order these records based on the city area and sort them in descending ORDER	ORDER BY city_area DESC 
Get District name of district	SELECT DISTINCT District_name FROM district
Order these records based on the city area and sort them in descending ORDER	ORDER BY city_area DESC 
Get max page size of product	SELECT max_page_size FROM product
Group the records based on the number max page size 3 that the number is greater than 3	GROUP BY max_page_size HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get max page size of product	SELECT max_page_size FROM product
Group the records based on the number max page size 3 that the number is greater than 3	GROUP BY max_page_size HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get District name AND City Population of district	SELECT District_name , City_Population FROM district
Keep the records that City Population is between 20000 X2000000	WHERE City_Population BETWEEN 200000 AND 2000000
Get District name AND City Population of district	SELECT District_name , City_Population FROM district
Keep the records that City Population is between 20000 X2000000	WHERE City_Population BETWEEN 200000 AND 2000000
Get district name of district	SELECT district_name FROM district
Keep the records that city area is greater than 10 OR City Population is greater than 100000	WHERE city_area > 10 OR City_Population > 100000
Get district name of district	SELECT district_name FROM district
Keep the records that city area is greater than 10 OR City Population is greater than 100000	WHERE city_area > 10 OR City_Population > 100000
Get district name of district	SELECT district_name FROM district
Order these records based on the city population and sort them in descending order, and return the top 1 record	ORDER BY city_population DESC LIMIT 1
Get district name of district	SELECT district_name FROM district
Order these records based on the city population and sort them in descending order, and return the top 1 record	ORDER BY city_population DESC LIMIT 1
Get district name of district	SELECT district_name FROM district
Order these records based on the city area and sort them in ascending order, and return the top 1 record	ORDER BY city_area ASC LIMIT 1
Get district name of district	SELECT district_name FROM district
Order these records based on the city area and sort them in ascending order, and return the top 1 record	ORDER BY city_area ASC LIMIT 1
Get the SUM of city population of district	SELECT SUM ( city_population ) FROM district
Order these records based on the city area and sort them in descending order, and return the top 3 records	ORDER BY city_area DESC LIMIT 3
Get the SUM of city population of district	SELECT SUM ( city_population ) FROM district
Order these records based on the city area and sort them in descending order, and return the top 3 records	ORDER BY city_area DESC LIMIT 3
Get the number of store	SELECT TYPE , COUNT ( * ) FROM store
Group the records based on	GROUP BY
Get the number of store	SELECT TYPE , COUNT ( * ) FROM store
Group the records based on	GROUP BY
Get store name of store that has store district and district	SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that district name of district is Khanewal District	WHERE t3.district_name = Khanewal District
Get store name of store that has store district and district	SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that district name of district is Khanewal District	WHERE t3.district_name = Khanewal District
Get district id of district	SELECT district_id FROM district
Order these records based on the city population and sort them in descending order, and return the top 1 record	ORDER BY city_population DESC LIMIT 1
Get store name of store that has store district	SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id
Keep the records that district id is the first query result	WHERE district_id = ( the first query result ) 
Get district id of district	SELECT district_id FROM district
Order these records based on the city population and sort them in descending order, and return the top 1 record	ORDER BY city_population DESC LIMIT 1
Get store name of store that has store district	SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id
Keep the records that district id is the first query result	WHERE district_id = ( the first query result ) 
Get headquartered city of store that has store district and district	SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that store name of store is Blackville	WHERE t1.store_name = Blackville
Get headquartered city of store that has store district and district	SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that store name of store is Blackville	WHERE t1.store_name = Blackville
Get the number and headquartered city of store that has store district and district	SELECT t3.headquartered_city , COUNT ( * ) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Group the records based on headquartered city of district	GROUP BY t3.headquartered_city
Get the number and headquartered city of store that has store district and district	SELECT t3.headquartered_city , COUNT ( * ) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Group the records based on headquartered city of district	GROUP BY t3.headquartered_city
Get headquartered city of store that has store district and district	SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Group the records based on headquartered city of district	GROUP BY t3.headquartered_city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get headquartered city of store that has store district and district	SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Group the records based on headquartered city of district	GROUP BY t3.headquartered_city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of pages per minute color of product	SELECT AVG ( pages_per_minute_color ) FROM product
Get the average value of pages per minute color of product	SELECT AVG ( pages_per_minute_color ) FROM product
Get product of product that has store product and store	SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id
Keep the records that store name of store is Miramichi	WHERE t3.store_name = Miramichi
Get product of product that has store product and store	SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id
Keep the records that store name of store is Miramichi	WHERE t3.store_name = Miramichi
Get product of product	SELECT product FROM product
Keep the records that max page size is A4 AND pages per minute color is less than 5	WHERE max_page_size = A4 AND pages_per_minute_color < 5
Get product of product	SELECT product FROM product
Keep the records that max page size is A4 AND pages per minute color is less than 5	WHERE max_page_size = A4 AND pages_per_minute_color < 5
Get product of product	SELECT product FROM product
Keep the records that max page size is A4 OR pages per minute color is less than 5	WHERE max_page_size = A4 OR pages_per_minute_color < 5
Get product of product	SELECT product FROM product
Keep the records that max page size is A4 OR pages per minute color is less than 5	WHERE max_page_size = A4 OR pages_per_minute_color < 5
Get product of product	SELECT product FROM product
Keep the records that product is in the form of %Scanner%	WHERE product LIKE %Scanner%
Get product of product	SELECT product FROM product
Keep the records that product is in the form of %Scanner%	WHERE product LIKE %Scanner%
Get max page size of product	SELECT max_page_size FROM product
Group the records based on max page size	GROUP BY max_page_size
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get max page size of product	SELECT max_page_size FROM product
Group the records based on max page size	GROUP BY max_page_size
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get max page size of product	SELECT max_page_size FROM product
Group the records based on max page size	GROUP BY max_page_size
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product of product	SELECT product FROM product
Keep the records that product is not the first query result	WHERE product != ( the first query result ) 
Get max page size of product	SELECT max_page_size FROM product
Group the records based on max page size	GROUP BY max_page_size
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product of product	SELECT product FROM product
Keep the records that product is not the first query result	WHERE product != ( the first query result ) 
Get the average value of city area of district	SELECT AVG ( city_area ) FROM district
Get the SUM of city population of district	SELECT SUM ( city_population ) FROM district
Keep the records that city area is greater than the first query result	WHERE city_area > ( the first query result ) 
Get the average value of city area of district	SELECT AVG ( city_area ) FROM district
Get the SUM of city population of district	SELECT SUM ( city_population ) FROM district
Keep the records that city area is greater than the first query result	WHERE city_area > ( the first query result ) 
Get District name of store that has store district and district	SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that Type of store is City Mall	WHERE t1.Type = City Mall
Get District name of store that has store district and district	SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that Type of store is Village Store	WHERE t1.Type = Village Store
Get District name of store that has store district and district	SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that Type of store is City Mall	WHERE t1.Type = City Mall
Get District name of store that has store district and district	SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id
Keep the records that Type of store is Village Store	WHERE t1.Type = Village Store
Get the SUM of enr of College	SELECT SUM ( enr ) FROM College
Get the SUM of enr of College	SELECT SUM ( enr ) FROM College
Get the average value of enr of College	SELECT AVG ( enr ) FROM College
Get the average value of enr of College	SELECT AVG ( enr ) FROM College
Get the number of College	SELECT COUNT ( * ) FROM College
Get the number of College	SELECT COUNT ( * ) FROM College
Get the number of Player	SELECT COUNT ( * ) FROM Player
Keep the records that HS is greater than 1000	WHERE HS > 1000
Get the number of Player	SELECT COUNT ( * ) FROM Player
Keep the records that HS is greater than 1000	WHERE HS > 1000
Get the number of College	SELECT COUNT ( * ) FROM College
Keep the records that enr is greater than 15000	WHERE enr > 15000
Get the number of College	SELECT COUNT ( * ) FROM College
Keep the records that enr is greater than 15000	WHERE enr > 15000
Get the average value of HS of Player	SELECT AVG ( HS ) FROM Player
Get the average value of HS of Player	SELECT AVG ( HS ) FROM Player
Get pName and HS of Player	SELECT pName , HS FROM Player
Keep the records that HS is less than 1500	WHERE HS < 1500
Get pName and HS of Player	SELECT pName , HS FROM Player
Keep the records that HS is less than 1500	WHERE HS < 1500
Get the number of distinct cName of tryout	SELECT COUNT ( DISTINCT cName ) FROM tryout
Get the number of distinct cName of tryout	SELECT COUNT ( DISTINCT cName ) FROM tryout
Get the number of distinct pPos of tryout	SELECT COUNT ( DISTINCT pPos ) FROM tryout
Get the number of distinct pPos of tryout	SELECT COUNT ( DISTINCT pPos ) FROM tryout
Get the number of tryout	SELECT COUNT ( * ) FROM tryout
Keep the records that decision is yes	WHERE decision = yes
Get the number of tryout	SELECT COUNT ( * ) FROM tryout
Keep the records that decision is yes	WHERE decision = yes
Get the number of tryout	SELECT COUNT ( * ) FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get the number of tryout	SELECT COUNT ( * ) FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get the average value of HS and the maximum value of HS and the minimum value of HS of Player	SELECT AVG ( HS ) , MAX ( HS ) , MIN ( HS ) FROM Player
Get the average value of HS and the maximum value of HS and the minimum value of HS of Player	SELECT AVG ( HS ) , MAX ( HS ) , MIN ( HS ) FROM Player
Get the average value of enr of College	SELECT AVG ( enr ) FROM College
Keep the records that state is FL	WHERE state = FL
Get the average value of enr of College	SELECT AVG ( enr ) FROM College
Keep the records that state is FL	WHERE state = FL
Get pName of Player	SELECT pName FROM Player
Keep the records that HS is between 50 X1500	WHERE HS BETWEEN 500 AND 1500
Get pName of Player	SELECT pName FROM Player
Keep the records that HS is between 50 X1500	WHERE HS BETWEEN 500 AND 1500
Get pName of Player	SELECT DISTINCT pName FROM Player
Keep the records that pName is in the form of %a%	WHERE pName LIKE %a%
Get pName of Player	SELECT DISTINCT pName FROM Player
Keep the records that pName is in the form of %a%	WHERE pName LIKE %a%
Get cName AND enr of College	SELECT cName , enr FROM College
Keep the records that enr is greater than 10000 AND state is LA	WHERE enr > 10000 AND state = LA
Get cName AND enr of College	SELECT cName , enr FROM College
Keep the records that enr is greater than 10000 AND state is LA	WHERE enr > 10000 AND state = LA
Get all of College	SELECT * FROM College
Order these records based on the enr	ORDER BY enr 
Get all of College	SELECT * FROM College
Order these records based on the enr	ORDER BY enr 
Get cName of College	SELECT cName FROM College
Keep the records that enr is greater than 18000	WHERE enr > 18000 
Order these records based on the cName	ORDER BY cName 
Get cName of College	SELECT cName FROM College
Keep the records that enr is greater than 18000	WHERE enr > 18000 
Order these records based on the cName	ORDER BY cName 
Get pName of Player	SELECT pName FROM Player
Keep the records that yCard is yes	WHERE yCard = yes 
Order these records based on the HS and sort them in descending ORDER	ORDER BY HS DESC 
Get pName of Player	SELECT pName FROM Player
Keep the records that yCard is yes	WHERE yCard = yes 
Order these records based on the HS and sort them in descending ORDER	ORDER BY HS DESC 
Get cName of tryout	SELECT DISTINCT cName FROM tryout
Order these records based on the cName	ORDER BY cName 
Get cName of tryout	SELECT DISTINCT cName FROM tryout
Order these records based on the cName	ORDER BY cName 
Get pPos of tryout	SELECT pPos FROM tryout
Group the records based on pPos	GROUP BY pPos
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get pPos of tryout	SELECT pPos FROM tryout
Group the records based on pPos	GROUP BY pPos
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and cName of tryout	SELECT COUNT ( * ) , cName FROM tryout
Group the records based on cName	GROUP BY cName
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and cName of tryout	SELECT COUNT ( * ) , cName FROM tryout
Group the records based on cName	GROUP BY cName
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the minimum value of HS and pPos of tryout that has player	SELECT MIN ( T2.HS ) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID
Group the records based on pPos of tryout	GROUP BY T1.pPos
Get the minimum value of HS and pPos of tryout that has player	SELECT MIN ( T2.HS ) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID
Group the records based on pPos of tryout	GROUP BY T1.pPos
Get cName of college	SELECT cName FROM college
Order these records based on the enr and sort them in descending order, and return the top 3 records	ORDER BY enr DESC LIMIT 3
Get cName of college	SELECT cName FROM college
Order these records based on the enr and sort them in descending order, and return the top 3 records	ORDER BY enr DESC LIMIT 3
Get the minimum value of enr and cName and state of college	SELECT cName , state , MIN ( enr ) FROM college
Group the records based on state	GROUP BY state
Get the minimum value of enr and cName and state of college	SELECT cName , state , MIN ( enr ) FROM college
Group the records based on state	GROUP BY state
Get state of college that has tryout	SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2
Get state of college that has tryout	SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2
Get state of college that has tryout	SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get state of college that has tryout	SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get pName and cName of player that has tryout	SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get pName and cName of player that has tryout	SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get pName of player that has tryout	SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Order these records based on the pName of player	ORDER BY T1.pName 
Get pName of player that has tryout	SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Order these records based on the pName of player	ORDER BY T1.pName 
Get pName and HS of player that has tryout	SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get pName and HS of player that has tryout	SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is striker	WHERE T2.pPos = striker
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is striker	WHERE T2.pPos = striker
Get pName of player that has tryout	SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes AND pPos of tryout is striker	WHERE T2.decision = yes AND T2.pPos = striker
Get pName of player that has tryout	SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes AND pPos of tryout is striker	WHERE T2.decision = yes AND T2.pPos = striker
Get state of college that has tryout and player	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID
Keep the records that pName of player is Charles	WHERE T3.pName = Charles
Get state of college that has tryout and player	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID
Keep the records that pName of player is Charles	WHERE T3.pName = Charles
Get the average value of HS and the maximum value of HS of player that has tryout	SELECT AVG ( T1.HS ) , MAX ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get the average value of HS and the maximum value of HS of player that has tryout	SELECT AVG ( T1.HS ) , MAX ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get the average value of HS of player that has tryout	SELECT AVG ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is no	WHERE T2.decision = no
Get the average value of HS of player that has tryout	SELECT AVG ( T1.HS ) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that decision of tryout is no	WHERE T2.decision = no
Get the maximum value of HS and pPos of player that has tryout	SELECT MAX ( T1.HS ) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that HS of player is greater than 1000	WHERE T1.HS > 1000 
Group the records based on pPos of tryout	GROUP BY T2.pPos
Get the maximum value of HS and pPos of player that has tryout	SELECT MAX ( T1.HS ) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID
Keep the records that HS of player is greater than 1000	WHERE T1.HS > 1000 
Group the records based on pPos of tryout	GROUP BY T2.pPos
Get cName of tryout that has player	SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID
Keep the records that pName of player is in the form of D%	WHERE T2.pName LIKE D%
Get cName of tryout that has player	SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID
Keep the records that pName of player is in the form of D%	WHERE T2.pName LIKE D%
Get cName of tryout	SELECT cName FROM tryout
Keep the records that decision is yes AND pPos is goalie	WHERE decision = yes AND pPos = goalie
Get cName of tryout	SELECT cName FROM tryout
Keep the records that decision is yes AND pPos is goalie	WHERE decision = yes AND pPos = goalie
Get cName of college	SELECT cName FROM college
Order these records based on the enr and sort them in descending order, and return the top 1 record	ORDER BY enr DESC LIMIT 1
Get pName of tryout that has player	SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID
Keep the records that cName of tryout is the first query result	WHERE T1.cName = ( the first query result ) 
Get cName of college	SELECT cName FROM college
Order these records based on the enr and sort them in descending order, and return the top 1 record	ORDER BY enr DESC LIMIT 1
Get pName of tryout that has player	SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID
Keep the records that cName of tryout is the first query result	WHERE T1.cName = ( the first query result ) 
Get state and enr of college that has tryout	SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get state and enr of college that has tryout	SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that decision of tryout is yes	WHERE T2.decision = yes
Get cName of College	SELECT cName FROM College
Keep the records that enr is less than 13000 AND state is AZ	WHERE enr < 13000 AND state = AZ
Get cName of College	SELECT cName FROM College
Keep the records that enr is greater than 15000 AND state is LA	WHERE enr > 15000 AND state = LA
Get cName of College	SELECT cName FROM College
Keep the records that enr is less than 13000 AND state is AZ	WHERE enr < 13000 AND state = AZ
Get cName of College	SELECT cName FROM College
Keep the records that enr is greater than 15000 AND state is LA	WHERE enr > 15000 AND state = LA
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is mid	WHERE pPos = mid
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is mid	WHERE pPos = mid
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is goalie	WHERE T2.pPos = goalie
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is mid	WHERE T2.pPos = mid
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is goalie	WHERE T2.pPos = goalie
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is mid	WHERE T2.pPos = mid
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is mid	WHERE pPos = mid
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is mid	WHERE pPos = mid
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is mid	WHERE pPos = mid
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is mid	WHERE pPos = mid
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is mid	WHERE T2.pPos = mid
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is goalie	WHERE T2.pPos = goalie
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is mid	WHERE T2.pPos = mid
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is goalie	WHERE T2.pPos = goalie
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is mid	WHERE T2.pPos = mid
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is goalie	WHERE T2.pPos = goalie
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is mid	WHERE T2.pPos = mid
Get state of college that has tryout	SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName
Keep the records that pPos of tryout is goalie	WHERE T2.pPos = goalie
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get the maximum value of enr of college	SELECT MAX ( enr ) FROM college
Get state of college	SELECT DISTINCT state FROM college
Keep the records that enr is less than the first query result	WHERE enr < ( the first query result ) 
Get the maximum value of enr of college	SELECT MAX ( enr ) FROM college
Get state of college	SELECT DISTINCT state FROM college
Keep the records that enr is less than the first query result	WHERE enr < ( the first query result ) 
Get the minimum value of enr of college	SELECT MIN ( enr ) FROM college
Keep the records that state is FL	WHERE state = FL
Get cName of college	SELECT DISTINCT cName FROM college
Keep the records that enr is greater than the first query result	WHERE enr > ( the first query result ) 
Get the minimum value of enr of college	SELECT MIN ( enr ) FROM college
Keep the records that state is FL	WHERE state = FL
Get cName of college	SELECT DISTINCT cName FROM college
Keep the records that enr is greater than the first query result	WHERE enr > ( the first query result ) 
Get the maximum value of enr of college	SELECT MAX ( enr ) FROM college
Keep the records that state is FL	WHERE state = FL
Get cName of college	SELECT cName FROM college
Keep the records that enr is greater than the first query result	WHERE enr > ( the first query result ) 
Get the maximum value of enr of college	SELECT MAX ( enr ) FROM college
Keep the records that state is FL	WHERE state = FL
Get cName of college	SELECT cName FROM college
Keep the records that enr is greater than the first query result	WHERE enr > ( the first query result ) 
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get the SUM of enr of college	SELECT SUM ( enr ) FROM college
Keep the records that cName is not in the first query result	WHERE cName NOT IN ( the first query result ) 
Get cName of tryout	SELECT cName FROM tryout
Keep the records that pPos is goalie	WHERE pPos = goalie
Get the SUM of enr of college	SELECT SUM ( enr ) FROM college
Keep the records that cName is not in the first query result	WHERE cName NOT IN ( the first query result ) 
Get the average value of enr of college	SELECT AVG ( enr ) FROM college
Get the number of distinct state of college	SELECT COUNT ( DISTINCT state ) FROM college
Keep the records that enr is greater than the first query result	WHERE enr > ( the first query result ) 
Get the average value of enr of college	SELECT AVG ( enr ) FROM college
Get the number of distinct state of college	SELECT COUNT ( DISTINCT state ) FROM college
Keep the records that enr is greater than the first query result	WHERE enr > ( the first query result ) 
Get the average value of enr of college	SELECT AVG ( enr ) FROM college
Get the number of distinct state of college	SELECT COUNT ( DISTINCT state ) FROM college
Keep the records that enr is less than the first query result	WHERE enr < ( the first query result ) 
Get the average value of enr of college	SELECT AVG ( enr ) FROM college
Get the number of distinct state of college	SELECT COUNT ( DISTINCT state ) FROM college
Keep the records that enr is less than the first query result	WHERE enr < ( the first query result ) 
Get the number of device	SELECT COUNT ( * ) FROM device
Get the number of device	SELECT COUNT ( * ) FROM device
Get Carrier of device	SELECT Carrier FROM device
Order these records based on the Carrier and sort them in ascending ORDER	ORDER BY Carrier ASC 
Get Carrier of device	SELECT Carrier FROM device
Order these records based on the Carrier and sort them in ascending ORDER	ORDER BY Carrier ASC 
Get Carrier of device	SELECT Carrier FROM device
Keep the records that Software Platform is not Android	WHERE Software_Platform != Android
Get Carrier of device	SELECT Carrier FROM device
Keep the records that Software Platform is not Android	WHERE Software_Platform != Android
Get Shop Name of shop	SELECT Shop_Name FROM shop
Order these records based on the Open Year and sort them in ascending ORDER	ORDER BY Open_Year ASC 
Get Shop Name of shop	SELECT Shop_Name FROM shop
Order these records based on the Open Year and sort them in ascending ORDER	ORDER BY Open_Year ASC 
Get the average value of Quantity of stock	SELECT AVG ( Quantity ) FROM stock
Get the average value of Quantity of stock	SELECT AVG ( Quantity ) FROM stock
Get Shop Name of shop	SELECT Shop_Name , LOCATION FROM shop
Order these records based on the Shop Name and sort them in ascending ORDER	ORDER BY Shop_Name ASC 
Get Shop Name of shop	SELECT Shop_Name , LOCATION FROM shop
Order these records based on the Shop Name and sort them in ascending ORDER	ORDER BY Shop_Name ASC 
Get the number of distinct Software Platform of device	SELECT COUNT ( DISTINCT Software_Platform ) FROM device
Get the number of distinct Software Platform of device	SELECT COUNT ( DISTINCT Software_Platform ) FROM device
Get Open Date and Open Year of shop	SELECT Open_Date , Open_Year FROM shop
Keep the records that Shop Name is Apple	WHERE Shop_Name = Apple
Get Open Date and Open Year of shop	SELECT Open_Date , Open_Year FROM shop
Keep the records that Shop Name is Apple	WHERE Shop_Name = Apple
Get Shop Name of shop	SELECT Shop_Name FROM shop
Order these records based on the Open Year and sort them in descending order, and return the top 1 record	ORDER BY Open_Year DESC LIMIT 1
Get Shop Name of shop	SELECT Shop_Name FROM shop
Order these records based on the Open Year and sort them in descending order, and return the top 1 record	ORDER BY Open_Year DESC LIMIT 1
Get Shop Name and Carrier of stock that has device and shop	SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3
Get Shop Name and Carrier of stock that has device and shop	SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3
Get Shop Name of stock that has shop	SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
Group the records based on the number Shop ID of stock 1 that the number is greater than 1	GROUP BY T1.Shop_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Shop Name of stock that has shop	SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
Group the records based on the number Shop ID of stock 1 that the number is greater than 1	GROUP BY T1.Shop_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Shop Name of stock that has shop	SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
Group the records based on Shop ID of stock	GROUP BY T1.Shop_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Shop Name of stock that has shop	SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
Group the records based on Shop ID of stock	GROUP BY T1.Shop_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Shop Name of stock that has shop	SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
Group the records based on Shop ID of stock	GROUP BY T1.Shop_ID
Order these records based on the the SUM of quantity of stock and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.quantity ) DESC LIMIT 1
Get Shop Name of stock that has shop	SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID
Group the records based on Shop ID of stock	GROUP BY T1.Shop_ID
Order these records based on the the SUM of quantity of stock and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T1.quantity ) DESC LIMIT 1
Get the number and Software Platform of device	SELECT Software_Platform , COUNT ( * ) FROM device
Group the records based on Software Platform	GROUP BY Software_Platform
Get the number and Software Platform of device	SELECT Software_Platform , COUNT ( * ) FROM device
Group the records based on Software Platform	GROUP BY Software_Platform
Get Software Platform of device	SELECT Software_Platform FROM device
Group the records based on Software Platform	GROUP BY Software_Platform
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get Software Platform of device	SELECT Software_Platform FROM device
Group the records based on Software Platform	GROUP BY Software_Platform
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get Software Platform of device	SELECT Software_Platform FROM device
Group the records based on Software Platform	GROUP BY Software_Platform
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Software Platform of device	SELECT Software_Platform FROM device
Group the records based on Software Platform	GROUP BY Software_Platform
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Shop ID of stock	SELECT Shop_ID FROM stock
Get Shop Name of shop	SELECT Shop_Name FROM shop
Keep the records that Shop ID is not in the first query result	WHERE Shop_ID NOT IN ( the first query result ) 
Get Shop ID of stock	SELECT Shop_ID FROM stock
Get Shop Name of shop	SELECT Shop_Name FROM shop
Keep the records that Shop ID is not in the first query result	WHERE Shop_ID NOT IN ( the first query result ) 
Get of shop	SELECT LOCATION FROM shop
Keep the records that Open Year is greater than 2012	WHERE Open_Year > 2012
Get of shop	SELECT LOCATION FROM shop
Keep the records that Open Year is less than 2008	WHERE Open_Year < 2008
Get of shop	SELECT LOCATION FROM shop
Keep the records that Open Year is greater than 2012	WHERE Open_Year > 2012
Get of shop	SELECT LOCATION FROM shop
Keep the records that Open Year is less than 2008	WHERE Open_Year < 2008
Get Device ID of stock	SELECT Device_ID FROM stock
Get Carrier of device	SELECT Carrier FROM device
Keep the records that Device ID is not in the first query result	WHERE Device_ID NOT IN ( the first query result ) 
Get Device ID of stock	SELECT Device_ID FROM stock
Get Carrier of device	SELECT Carrier FROM device
Keep the records that Device ID is not in the first query result	WHERE Device_ID NOT IN ( the first query result ) 
Get Carrier of stock that has device	SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID
Group the records based on the number Device ID of stock 1 that the number is greater than 1	GROUP BY T1.Device_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Carrier of stock that has device	SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID
Group the records based on the number Device ID of stock 1 that the number is greater than 1	GROUP BY T1.Device_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number of BOOKINGS	SELECT COUNT ( * ) FROM BOOKINGS
Get the number of BOOKINGS	SELECT COUNT ( * ) FROM BOOKINGS
Get Order Date of BOOKINGS	SELECT Order_Date FROM BOOKINGS
Get Order Date of BOOKINGS	SELECT Order_Date FROM BOOKINGS
Get Planned Delivery Date and Actual Delivery Date of BOOKINGS	SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS
Get Planned Delivery Date and Actual Delivery Date of BOOKINGS	SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS
Get the number of CUSTOMERS	SELECT COUNT ( * ) FROM CUSTOMERS
Get the number of CUSTOMERS	SELECT COUNT ( * ) FROM CUSTOMERS
Get Customer Phone and Customer Email Address of CUSTOMERS	SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS
Keep the records that Customer Name is Harold	WHERE Customer_Name = Harold
Get Customer Phone and Customer Email Address of CUSTOMERS	SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS
Keep the records that Customer Name is Harold	WHERE Customer_Name = Harold
Get Store Name of Drama Workshop Groups	SELECT Store_Name FROM Drama_Workshop_Groups
Get Store Name of Drama Workshop Groups	SELECT Store_Name FROM Drama_Workshop_Groups
Get the minimum value of Order Quantity and the average value of Order Quantity and the maximum value of Order Quantity of INVOICES	SELECT MIN ( Order_Quantity ) , AVG ( Order_Quantity ) , MAX ( Order_Quantity ) FROM INVOICES
Get the minimum value of Order Quantity and the average value of Order Quantity and the maximum value of Order Quantity of INVOICES	SELECT MIN ( Order_Quantity ) , AVG ( Order_Quantity ) , MAX ( Order_Quantity ) FROM INVOICES
Get payment method code of INVOICES	SELECT DISTINCT payment_method_code FROM INVOICES
Get payment method code of INVOICES	SELECT DISTINCT payment_method_code FROM INVOICES
Get Marketing Region Descriptrion of Marketing Regions	SELECT Marketing_Region_Descriptrion FROM Marketing_Regions
Keep the records that Marketing Region Name is China	WHERE Marketing_Region_Name = China
Get Marketing Region Descriptrion of Marketing Regions	SELECT Marketing_Region_Descriptrion FROM Marketing_Regions
Keep the records that Marketing Region Name is China	WHERE Marketing_Region_Name = China
Get the average value of Product Price of PRODUCTS	SELECT AVG ( Product_Price ) FROM PRODUCTS
Get Product Name of PRODUCTS	SELECT DISTINCT Product_Name FROM PRODUCTS
Keep the records that Product Price is greater than the first query result	WHERE Product_Price > ( the first query result ) 
Get the average value of Product Price of PRODUCTS	SELECT AVG ( Product_Price ) FROM PRODUCTS
Get Product Name of PRODUCTS	SELECT DISTINCT Product_Name FROM PRODUCTS
Keep the records that Product Price is greater than the first query result	WHERE Product_Price > ( the first query result ) 
Get Product Name of PRODUCTS	SELECT Product_Name FROM PRODUCTS
Order these records based on the Product Price and sort them in descending order, and return the top 1 record	ORDER BY Product_Price DESC LIMIT 1
Get Product Name of PRODUCTS	SELECT Product_Name FROM PRODUCTS
Order these records based on the Product Price and sort them in descending order, and return the top 1 record	ORDER BY Product_Price DESC LIMIT 1
Get Product Name of Products	SELECT Product_Name FROM Products
Order these records based on the Product Price and sort them in ascending ORDER	ORDER BY Product_Price ASC 
Get Product Name of Products	SELECT Product_Name FROM Products
Order these records based on the Product Price and sort them in ascending ORDER	ORDER BY Product_Price ASC 
Get Customer Phone of PERFORMERS	SELECT Customer_Phone FROM PERFORMERS
Keep the records that Customer Name is Ashley	WHERE Customer_Name = Ashley
Get Customer Phone of PERFORMERS	SELECT Customer_Phone FROM PERFORMERS
Keep the records that Customer Name is Ashley	WHERE Customer_Name = Ashley
Get the number and payment method code of INVOICES	SELECT payment_method_code , COUNT ( * ) FROM INVOICES
Group the records based on payment method code	GROUP BY payment_method_code
Get the number and payment method code of INVOICES	SELECT payment_method_code , COUNT ( * ) FROM INVOICES
Group the records based on payment method code	GROUP BY payment_method_code
Get payment method code of INVOICES	SELECT payment_method_code FROM INVOICES
Group the records based on payment method code	GROUP BY payment_method_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get payment method code of INVOICES	SELECT payment_method_code FROM INVOICES
Group the records based on payment method code	GROUP BY payment_method_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get City Town of Addresses that has Stores	SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that Store Name of Stores is FJA Filming	WHERE T2.Store_Name = FJA Filming
Get City Town of Addresses that has Stores	SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that Store Name of Stores is FJA Filming	WHERE T2.Store_Name = FJA Filming
Get State County of Addresses that has Stores	SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that Marketing Region Code of Stores is CA	WHERE T2.Marketing_Region_Code = CA
Get State County of Addresses that has Stores	SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that Marketing Region Code of Stores is CA	WHERE T2.Marketing_Region_Code = CA
Get Marketing Region Name of Marketing Regions that has Stores	SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code
Keep the records that Store Name of Stores is Rob Dinning	WHERE T2.Store_Name = Rob Dinning
Get Marketing Region Name of Marketing Regions that has Stores	SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code
Keep the records that Store Name of Stores is Rob Dinning	WHERE T2.Store_Name = Rob Dinning
Get Service Type Description of Ref Service Types that has Services	SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Keep the records that Product Price of Services is greater than 100	WHERE T2.Product_Price > 100
Get Service Type Description of Ref Service Types that has Services	SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Keep the records that Product Price of Services is greater than 100	WHERE T2.Product_Price > 100
Get the number and Service Type Description and Service Type Code of Ref Service Types that has Services	SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT ( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Group the records based on Service Type Code of Services	GROUP BY T2.Service_Type_Code
Get the number and Service Type Description and Service Type Code of Ref Service Types that has Services	SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT ( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Group the records based on Service Type Code of Services	GROUP BY T2.Service_Type_Code
Get Service Type Description and Service Type Code of Ref Service Types that has Services	SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Group the records based on Service Type Code of Ref Service Types	GROUP BY T1.Service_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Service Type Description and Service Type Code of Ref Service Types that has Services	SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Group the records based on Service Type Code of Ref Service Types	GROUP BY T1.Service_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Store Phone and Store Email Address of Drama Workshop Groups that has Services	SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2
Get Store Phone and Store Email Address of Drama Workshop Groups that has Services	SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2
Get Store Phone and Store Email Address of Drama Workshop Groups that has Services	SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
Keep the records that Product Name of Services is film	WHERE T2.Product_Name = film
Get Store Phone and Store Email Address of Drama Workshop Groups that has Services	SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
Keep the records that Product Name of Services is film	WHERE T2.Product_Name = film
Get the average value of Product Price and Product Name of PRODUCTS	SELECT Product_Name , AVG ( Product_Price ) FROM PRODUCTS
Group the records based on Product Name	GROUP BY Product_Name
Get the average value of Product Price and Product Name of PRODUCTS	SELECT Product_Name , AVG ( Product_Price ) FROM PRODUCTS
Group the records based on Product Name	GROUP BY Product_Name
Get Product Name of PRODUCTS	SELECT Product_Name FROM PRODUCTS
Group the records based on the average value of Product Price Product Name 1000000 that the average value of Product Price is less than 1000000	GROUP BY Product_Name HAVING AVG ( Product_Price ) < 1000000 HAVING AVG ( Product_Price ) < 1000000
Get Product Name of PRODUCTS	SELECT Product_Name FROM PRODUCTS
Group the records based on the average value of Product Price Product Name 1000000 that the average value of Product Price is less than 1000000	GROUP BY Product_Name HAVING AVG ( Product_Price ) < 1000000 HAVING AVG ( Product_Price ) < 1000000
Get the SUM of Order Quantity of ORDER ITEMS that has Products	SELECT SUM ( T1.Order_Quantity ) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
Keep the records that Product Name of Products is photo	WHERE T2.Product_Name = photo
Get the SUM of Order Quantity of ORDER ITEMS that has Products	SELECT SUM ( T1.Order_Quantity ) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
Keep the records that Product Name of Products is photo	WHERE T2.Product_Name = photo
Get Other Item Details of ORDER ITEMS that has Products	SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
Keep the records that Product price of Products is greater than 2000	WHERE T2.Product_price > 2000
Get Other Item Details of ORDER ITEMS that has Products	SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID
Keep the records that Product price of Products is greater than 2000	WHERE T2.Product_price > 2000
Get Actual Delivery Date of Customer Orders that has ORDER ITEMS	SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID
Keep the records that Order Quantity of ORDER ITEMS is 1	WHERE T2.Order_Quantity = 1
Get Actual Delivery Date of Customer Orders that has ORDER ITEMS	SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID
Keep the records that Order Quantity of ORDER ITEMS is 1	WHERE T2.Order_Quantity = 1
Get Order Date of Customer Orders that has ORDER ITEMS and Products	SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID
Keep the records that Product price of Products is greater than 1000	WHERE T3.Product_price > 1000
Get Order Date of Customer Orders that has ORDER ITEMS and Products	SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID
Keep the records that Product price of Products is greater than 1000	WHERE T3.Product_price > 1000
Get the number of distinct Currency Code of Drama Workshop Groups	SELECT COUNT ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups
Get the number of distinct Currency Code of Drama Workshop Groups	SELECT COUNT ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups
Get Store Name of Addresses that has Drama Workshop Groups	SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that City Town of Addresses is Feliciaberg	WHERE T1.City_Town = Feliciaberg
Get Store Name of Addresses that has Drama Workshop Groups	SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that City Town of Addresses is Feliciaberg	WHERE T1.City_Town = Feliciaberg
Get Store Email Address of Addresses that has Drama Workshop Groups	SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that State County of Addresses is Alaska	WHERE T1.State_County = Alaska
Get Store Email Address of Addresses that has Drama Workshop Groups	SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
Keep the records that State County of Addresses is Alaska	WHERE T1.State_County = Alaska
Get the number and City Town of Addresses that has Drama Workshop Groups	SELECT T1.City_Town , COUNT ( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
Group the records based on City Town of Addresses	GROUP BY T1.City_Town
Get the number and City Town of Addresses that has Drama Workshop Groups	SELECT T1.City_Town , COUNT ( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID
Group the records based on City Town of Addresses	GROUP BY T1.City_Town
Get Marketing Region Code of Drama Workshop Groups	SELECT Marketing_Region_Code FROM Drama_Workshop_Groups
Group the records based on Marketing Region Code	GROUP BY Marketing_Region_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Marketing Region Code of Drama Workshop Groups	SELECT Marketing_Region_Code FROM Drama_Workshop_Groups
Group the records based on Marketing Region Code	GROUP BY Marketing_Region_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get City Town of Addresses that has Customers	SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2
Get City Town of Addresses that has Performers	SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2
Get City Town of Addresses that has Customers	SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2
Get City Town of Addresses that has Performers	SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2
Get Status Code of BOOKINGS	SELECT Status_Code FROM BOOKINGS
Group the records based on Status Code	GROUP BY Status_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Status Code of BOOKINGS	SELECT Status_Code FROM BOOKINGS
Group the records based on Status Code	GROUP BY Status_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Store Name of Bookings that has Drama Workshop Groups	SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
Keep the records that Status Code of Bookings is stop	WHERE T1.Status_Code = stop
Get Store Name of Bookings that has Drama Workshop Groups	SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID
Keep the records that Status Code of Bookings is stop	WHERE T1.Status_Code = stop
Get Customer Name of Clients	SELECT Customer_Name FROM Clients
Get Customer Name of Bookings that has Clients	SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2
Get Customer Name of Clients	SELECT Customer_Name FROM Clients
Get Customer Name of Bookings that has Clients	SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2
Get the average value of Order Quantity of Invoices	SELECT AVG ( Order_Quantity ) FROM Invoices
Keep the records that payment method code is MasterCard	WHERE payment_method_code = MasterCard
Get the average value of Order Quantity of Invoices	SELECT AVG ( Order_Quantity ) FROM Invoices
Keep the records that payment method code is MasterCard	WHERE payment_method_code = MasterCard
Get Product ID of INVOICES	SELECT Product_ID FROM INVOICES
Group the records based on Product ID	GROUP BY Product_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Product ID of INVOICES	SELECT Product_ID FROM INVOICES
Group the records based on Product ID	GROUP BY Product_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Service Type Description of Ref Service Types that has Services	SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Keep the records that Product Name of Services is photo	WHERE T2.Product_Name = photo
Get Service Type Description of Ref Service Types that has Services	SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Keep the records that Product Name of Services is film	WHERE T2.Product_Name = film
Get Service Type Description of Ref Service Types that has Services	SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Keep the records that Product Name of Services is photo	WHERE T2.Product_Name = photo
Get Service Type Description of Ref Service Types that has Services	SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code
Keep the records that Product Name of Services is film	WHERE T2.Product_Name = film
Get the number of Band	SELECT COUNT ( * ) FROM Band
Get the number of Band	SELECT COUNT ( * ) FROM Band
Get label of Albums	SELECT DISTINCT label FROM Albums
Get label of Albums	SELECT DISTINCT label FROM Albums
Get all of Albums	SELECT * FROM Albums
Keep the records that is 2012	WHERE YEAR = 2012
Get all of Albums	SELECT * FROM Albums
Keep the records that is 2012	WHERE YEAR = 2012
Get stageposition of Performance that has Band	SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id
Keep the records that Firstname is Solveig	WHERE Firstname = Solveig
Get stageposition of Performance that has Band	SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id
Keep the records that Firstname is Solveig	WHERE Firstname = Solveig
Get the number of Songs	SELECT COUNT ( * ) FROM Songs
Get the number of Songs	SELECT COUNT ( * ) FROM Songs
Get Title of Performance that has Band and Songs	SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Lastname of Band is Heilo	WHERE T2.Lastname = Heilo
Get Title of Performance that has Band and Songs	SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Lastname of Band is Heilo	WHERE T2.Lastname = Heilo
Get the number of performance that has band and songs	SELECT COUNT ( * ) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid
Keep the records that Title of songs is Flash	WHERE T3.Title = Flash
Get the number of performance that has band and songs	SELECT COUNT ( * ) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid
Keep the records that Title of songs is Flash	WHERE T3.Title = Flash
Get Title of Performance that has Band and Songs	SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that firstname of Band is Marianne	WHERE T2.firstname = Marianne
Get Title of Performance that has Band and Songs	SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that firstname of Band is Marianne	WHERE T2.firstname = Marianne
Get firstname and lastname of Performance that has Band and Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Badlands	WHERE T3.Title = Badlands
Get firstname and lastname of Performance that has Band and Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Badlands	WHERE T3.Title = Badlands
Get firstname AND lastname of Performance that has Band AND Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Badlands AND StagePosition of Performance is back	WHERE T3.Title = Badlands AND T1.StagePosition = back
Get firstname AND lastname of Performance that has Band AND Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Badlands AND StagePosition of Performance is back	WHERE T3.Title = Badlands AND T1.StagePosition = back
Get the number of distinct label of albums	SELECT COUNT ( DISTINCT label ) FROM albums
Get the number of distinct label of albums	SELECT COUNT ( DISTINCT label ) FROM albums
Get label of albums	SELECT label FROM albums
Group the records based on label	GROUP BY label
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get label of albums	SELECT label FROM albums
Group the records based on label	GROUP BY label
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lastname of Performance that has Band and Songs	SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Group the records based on lastname	GROUP BY lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lastname of Performance that has Band and Songs	SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Group the records based on lastname	GROUP BY lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lastname of Performance that has Band	SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id
Keep the records that stageposition is back	WHERE stageposition = back 
Group the records based on lastname	GROUP BY lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lastname of Performance that has Band	SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id
Keep the records that stageposition is back	WHERE stageposition = back 
Group the records based on lastname	GROUP BY lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title of songs	SELECT title FROM songs
Keep the records that title is in the form of % the %	WHERE title LIKE % the %
Get title of songs	SELECT title FROM songs
Keep the records that title is in the form of % the %	WHERE title LIKE % the %
Get instrument of Instruments	SELECT DISTINCT instrument FROM Instruments
Get instrument of Instruments	SELECT DISTINCT instrument FROM Instruments
Get instrument of Performance that has Band AND Songs AND Instruments	SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid
Keep the records that lastname of Band is Heilo AND title of Songs is Le Pop	WHERE T2.lastname = Heilo AND T3.title = Le Pop
Get instrument of Performance that has Band AND Songs AND Instruments	SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid
Keep the records that lastname of Band is Heilo AND title of Songs is Le Pop	WHERE T2.lastname = Heilo AND T3.title = Le Pop
Get instrument of instruments	SELECT instrument FROM instruments
Group the records based on instrument	GROUP BY instrument
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get instrument of instruments	SELECT instrument FROM instruments
Group the records based on instrument	GROUP BY instrument
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of instruments	SELECT COUNT ( * ) FROM instruments
Keep the records that instrument is drums	WHERE instrument = drums
Get the number of instruments	SELECT COUNT ( * ) FROM instruments
Keep the records that instrument is drums	WHERE instrument = drums
Get instrument of instruments that has songs	SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get instrument of instruments that has songs	SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get the number of distinct instrument of instruments that has songs	SELECT COUNT ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get the number of distinct instrument of instruments that has songs	SELECT COUNT ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get the number of distinct instrument of instruments that has Band	SELECT COUNT ( DISTINCT instrument ) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id
Keep the records that lastname of Band is Heilo	WHERE T2.lastname = Heilo
Get the number of distinct instrument of instruments that has Band	SELECT COUNT ( DISTINCT instrument ) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id
Keep the records that lastname of Band is Heilo	WHERE T2.lastname = Heilo
Get instrument of instruments that has Band	SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id
Keep the records that lastname of Band is Heilo	WHERE T2.lastname = Heilo
Get instrument of instruments that has Band	SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id
Keep the records that lastname of Band is Heilo	WHERE T2.lastname = Heilo
Get title of vocals that has songs	SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Group the records based on songid of vocals	GROUP BY T1.songid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get title of vocals that has songs	SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Group the records based on songid of vocals	GROUP BY T1.songid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals	SELECT TYPE FROM vocals
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals	SELECT TYPE FROM vocals
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has band	SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id
Keep the records that lastname is Heilo	WHERE lastname = Heilo 
Group the records based ON	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has band	SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id
Keep the records that lastname is Heilo	WHERE lastname = Heilo 
Group the records based ON	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has songs	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get of vocals that has songs	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get the number of vocals that has songs	SELECT COUNT ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Demon Kitty Rag	WHERE title = Demon Kitty Rag
Get the number of vocals that has songs	SELECT COUNT ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Demon Kitty Rag	WHERE title = Demon Kitty Rag
Get the number of distinct title of vocals that has songs	SELECT COUNT ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that is lead	WHERE TYPE = lead
Get the number of distinct title of vocals that has songs	SELECT COUNT ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that is lead	WHERE TYPE = lead
Get of vocals that has songs AND band	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id
Keep the records that firstname of band is Solveig AND title of songs is A Bar In Amsterdam	WHERE T3.firstname = Solveig AND T2.title = A Bar In Amsterdam
Get of vocals that has songs AND band	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id
Keep the records that firstname of band is Solveig AND title of songs is A Bar In Amsterdam	WHERE T3.firstname = Solveig AND T2.title = A Bar In Amsterdam
Get title of vocals that has songs	SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2
Get title of vocals that has songs	SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid
Keep the records that is lead	WHERE TYPE = lead
Get title of vocals that has songs	SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2
Get title of vocals that has songs	SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid
Keep the records that is lead	WHERE TYPE = lead
Get of vocals	SELECT DISTINCT TYPE FROM vocals
Get of vocals	SELECT DISTINCT TYPE FROM vocals
Get all of Albums	SELECT * FROM Albums
Keep the records that is 2010	WHERE YEAR = 2010
Get all of Albums	SELECT * FROM Albums
Keep the records that is 2010	WHERE YEAR = 2010
Get firstname and lastname of Performance that has Band and Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Le Pop	WHERE T3.Title = Le Pop
Get firstname and lastname of Performance that has Band and Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Le Pop	WHERE T3.Title = Le Pop
Get lastname of Performance that has Band and Songs	SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Group the records based on lastname	GROUP BY lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lastname of Performance that has Band and Songs	SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Group the records based on lastname	GROUP BY lastname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get instrument of Performance that has Band AND Songs AND Instruments	SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid
Keep the records that lastname of Band is Heilo AND title of Songs is Badlands	WHERE T2.lastname = Heilo AND T3.title = Badlands
Get instrument of Performance that has Band AND Songs AND Instruments	SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid
Keep the records that lastname of Band is Heilo AND title of Songs is Badlands	WHERE T2.lastname = Heilo AND T3.title = Badlands
Get the number of distinct instrument of instruments that has songs	SELECT COUNT ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Badlands	WHERE title = Badlands
Get the number of distinct instrument of instruments that has songs	SELECT COUNT ( DISTINCT instrument ) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Badlands	WHERE title = Badlands
Get of vocals that has songs	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Badlands	WHERE title = Badlands
Get of vocals that has songs	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Badlands	WHERE title = Badlands
Get the number of vocals that has songs	SELECT COUNT ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get the number of vocals that has songs	SELECT COUNT ( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that title is Le Pop	WHERE title = Le Pop
Get the number of distinct title of vocals that has songs	SELECT COUNT ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that is shared	WHERE TYPE = shared
Get the number of distinct title of vocals that has songs	SELECT COUNT ( DISTINCT title ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid
Keep the records that is shared	WHERE TYPE = shared
Get title of vocals that has songs	SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2
Get title of vocals that has songs	SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid
Keep the records that is back	WHERE TYPE = back
Get title of vocals that has songs	SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2
Get title of vocals that has songs	SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid
Keep the records that is back	WHERE TYPE = back
Get of vocals that has band	SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id
Keep the records that firstname is Solveig	WHERE firstname = Solveig 
Group the records based ON	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has band	SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id
Keep the records that firstname is Solveig	WHERE firstname = Solveig 
Group the records based ON	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has songs AND band	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id
Keep the records that lastname of band is Heilo AND title of songs is Der Kapitan	WHERE T3.lastname = Heilo AND T2.title = Der Kapitan
Get of vocals that has songs AND band	SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id
Keep the records that lastname of band is Heilo AND title of songs is Der Kapitan	WHERE T3.lastname = Heilo AND T2.title = Der Kapitan
Get firstname of Performance that has Band and Songs	SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Group the records based on firstname	GROUP BY firstname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get firstname of Performance that has Band and Songs	SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Group the records based on firstname	GROUP BY firstname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has band	SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id
Keep the records that firstname is Marianne	WHERE firstname = Marianne 
Group the records based ON	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of vocals that has band	SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id
Keep the records that firstname is Marianne	WHERE firstname = Marianne 
Group the records based ON	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get firstname AND lastname of Performance that has Band AND Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Der Kapitan AND StagePosition of Performance is back	WHERE T3.Title = Der Kapitan AND T1.StagePosition = back
Get firstname AND lastname of Performance that has Band AND Songs	SELECT T2.firstname , T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId
Keep the records that Title of Songs is Der Kapitan AND StagePosition of Performance is back	WHERE T3.Title = Der Kapitan AND T1.StagePosition = back
Get title of vocals that has songs	SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2
Get title of vocals that has songs	SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid
Keep the records that is back	WHERE TYPE = back
Get title of vocals that has songs	SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2
Get title of vocals that has songs	SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid
Keep the records that is back	WHERE TYPE = back
Get title of albums that has tracklists and songs	SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid
Keep the records that title of albums is A Kiss Before You Go: Live in Hamburg	WHERE T1.title = A Kiss Before You Go: Live in Hamburg
Get title of albums that has tracklists and songs	SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid
Keep the records that title of albums is A Kiss Before You Go: Live in Hamburg	WHERE T1.title = A Kiss Before You Go: Live in Hamburg
Get title of albums that has tracklists and songs	SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid
Keep the records that label of T1 is Universal Music Group	WHERE t1.label = Universal Music Group
Get title of albums that has tracklists and songs	SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid
Keep the records that label of T1 is Universal Music Group	WHERE t1.label = Universal Music Group
Get the number of distinct title of albums that has tracklists and songs	SELECT COUNT ( DISTINCT T3.title ) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid
Keep the records that type of T1 is Studio	WHERE t1.type = Studio
Get the number of distinct title of albums that has tracklists and songs	SELECT COUNT ( DISTINCT T3.title ) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid
Keep the records that type of T1 is Studio	WHERE t1.type = Studio
Get founder of manufacturers	SELECT founder FROM manufacturers
Keep the records that name is Sony	WHERE name = Sony
Get founder of manufacturers	SELECT founder FROM manufacturers
Keep the records that name is Sony	WHERE name = Sony
Get headquarter of manufacturers	SELECT headquarter FROM manufacturers
Keep the records that founder is James	WHERE founder = James
Get headquarter of manufacturers	SELECT headquarter FROM manufacturers
Keep the records that founder is James	WHERE founder = James
Get name and headquarter of manufacturers	SELECT name , headquarter FROM manufacturers
Order these records based on the revenue and sort them in descending ORDER	ORDER BY revenue DESC 
Get name and headquarter of manufacturers	SELECT name , headquarter FROM manufacturers
Order these records based on the revenue and sort them in descending ORDER	ORDER BY revenue DESC 
Get the average value of revenue and the maximum value of revenue and the SUM of revenue of manufacturers	SELECT AVG ( revenue ) , MAX ( revenue ) , SUM ( revenue ) FROM manufacturers
Get the average value of revenue and the maximum value of revenue and the SUM of revenue of manufacturers	SELECT AVG ( revenue ) , MAX ( revenue ) , SUM ( revenue ) FROM manufacturers
Get the number of manufacturers	SELECT COUNT ( * ) FROM manufacturers
Keep the records that founder is Andy	WHERE founder = Andy
Get the number of manufacturers	SELECT COUNT ( * ) FROM manufacturers
Keep the records that founder is Andy	WHERE founder = Andy
Get the SUM of revenue of manufacturers	SELECT SUM ( revenue ) FROM manufacturers
Keep the records that headquarter is Austin	WHERE headquarter = Austin
Get the SUM of revenue of manufacturers	SELECT SUM ( revenue ) FROM manufacturers
Keep the records that headquarter is Austin	WHERE headquarter = Austin
Get headquarter of manufacturers	SELECT DISTINCT headquarter FROM manufacturers
Get headquarter of manufacturers	SELECT DISTINCT headquarter FROM manufacturers
Get the number of manufacturers	SELECT COUNT ( * ) FROM manufacturers
Keep the records that headquarter is Tokyo OR headquarter is Beijing	WHERE headquarter = Tokyo OR headquarter = Beijing
Get the number of manufacturers	SELECT COUNT ( * ) FROM manufacturers
Keep the records that headquarter is Tokyo OR headquarter is Beijing	WHERE headquarter = Tokyo OR headquarter = Beijing
Get founder of manufacturers	SELECT founder FROM manufacturers
Keep the records that name is in the form of S%	WHERE name LIKE S%
Get founder of manufacturers	SELECT founder FROM manufacturers
Keep the records that name is in the form of S%	WHERE name LIKE S%
Get name of manufacturers	SELECT name FROM manufacturers
Keep the records that revenue is between 10 X150	WHERE revenue BETWEEN 100 AND 150
Get name of manufacturers	SELECT name FROM manufacturers
Keep the records that revenue is between 10 X150	WHERE revenue BETWEEN 100 AND 150
Get the SUM of revenue of manufacturers	SELECT SUM ( revenue ) FROM manufacturers
Keep the records that Headquarter is Tokyo OR Headquarter is Taiwan	WHERE Headquarter = Tokyo OR Headquarter = Taiwan
Get the SUM of revenue of manufacturers	SELECT SUM ( revenue ) FROM manufacturers
Keep the records that Headquarter is Tokyo OR Headquarter is Taiwan	WHERE Headquarter = Tokyo OR Headquarter = Taiwan
Get name of products that has manufacturers	SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of manufacturers is Creative Labs	WHERE T2.name = Creative Labs
Get name of products that has manufacturers	SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of manufacturers is Sony	WHERE T2.name = Sony
Get name of products that has manufacturers	SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of manufacturers is Creative Labs	WHERE T2.name = Creative Labs
Get name of products that has manufacturers	SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of manufacturers is Sony	WHERE T2.name = Sony
Get name and headquarter and founder of manufacturers	SELECT name , headquarter , founder FROM manufacturers
Order these records based on the revenue and sort them in descending order, and return the top 1 record	ORDER BY revenue DESC LIMIT 1
Get name and headquarter and founder of manufacturers	SELECT name , headquarter , founder FROM manufacturers
Order these records based on the revenue and sort them in descending order, and return the top 1 record	ORDER BY revenue DESC LIMIT 1
Get name and headquarter and revenue of manufacturers	SELECT name , headquarter , revenue FROM manufacturers
Order these records based on the revenue and sort them in descending ORDER	ORDER BY revenue DESC 
Get name and headquarter and revenue of manufacturers	SELECT name , headquarter , revenue FROM manufacturers
Order these records based on the revenue and sort them in descending ORDER	ORDER BY revenue DESC 
Get the average value of revenue of manufacturers	SELECT AVG ( revenue ) FROM manufacturers
Get name of manufacturers	SELECT name FROM manufacturers
Keep the records that revenue is greater than the first query result	WHERE revenue > ( the first query result ) 
Get the average value of revenue of manufacturers	SELECT AVG ( revenue ) FROM manufacturers
Get name of manufacturers	SELECT name FROM manufacturers
Keep the records that revenue is greater than the first query result	WHERE revenue > ( the first query result ) 
Get the minimum value of revenue of manufacturers	SELECT MIN ( revenue ) FROM manufacturers
Keep the records that headquarter is Austin	WHERE headquarter = Austin
Get name of manufacturers	SELECT name FROM manufacturers
Keep the records that revenue is less than the first query result	WHERE revenue < ( the first query result ) 
Get the minimum value of revenue of manufacturers	SELECT MIN ( revenue ) FROM manufacturers
Keep the records that headquarter is Austin	WHERE headquarter = Austin
Get name of manufacturers	SELECT name FROM manufacturers
Keep the records that revenue is less than the first query result	WHERE revenue < ( the first query result ) 
Get the minimum value of revenue of manufacturers	SELECT MIN ( revenue ) FROM manufacturers
Keep the records that headquarter is Austin	WHERE headquarter = Austin
Get the SUM of revenue of manufacturers	SELECT SUM ( revenue ) FROM manufacturers
Keep the records that revenue is greater than the first query result	WHERE revenue > ( the first query result ) 
Get the minimum value of revenue of manufacturers	SELECT MIN ( revenue ) FROM manufacturers
Keep the records that headquarter is Austin	WHERE headquarter = Austin
Get the SUM of revenue of manufacturers	SELECT SUM ( revenue ) FROM manufacturers
Keep the records that revenue is greater than the first query result	WHERE revenue > ( the first query result ) 
Get the SUM of revenue and founder of manufacturers	SELECT SUM ( revenue ) , founder FROM manufacturers
Group the records based on founder	GROUP BY founder
Get the SUM of revenue and founder of manufacturers	SELECT SUM ( revenue ) , founder FROM manufacturers
Group the records based on founder	GROUP BY founder
Get the maximum value of revenue and name and Headquarter of manufacturers	SELECT name , MAX ( revenue ) , Headquarter FROM manufacturers
Group the records based on Headquarter	GROUP BY Headquarter
Get the maximum value of revenue and name and Headquarter of manufacturers	SELECT name , MAX ( revenue ) , Headquarter FROM manufacturers
Group the records based on Headquarter	GROUP BY Headquarter
Get the SUM of revenue and name of manufacturers	SELECT SUM ( revenue ) , name FROM manufacturers
Group the records based on name	GROUP BY name
Get the SUM of revenue and name of manufacturers	SELECT SUM ( revenue ) , name FROM manufacturers
Group the records based on name	GROUP BY name
Get the average value of price and name of products that has manufacturers	SELECT AVG ( T1.price ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Group the records based on name of manufacturers	GROUP BY T2.name
Get the average value of price and name of products that has manufacturers	SELECT AVG ( T1.price ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Group the records based on name of manufacturers	GROUP BY T2.name
Get the number of distinct name and Headquarter of products that has manufacturers	SELECT COUNT ( DISTINCT T1.name ) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Group the records based on Headquarter of manufacturers	GROUP BY T2.Headquarter
Get the number of distinct name and Headquarter of products that has manufacturers	SELECT COUNT ( DISTINCT T1.name ) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Group the records based on Headquarter of manufacturers	GROUP BY T2.Headquarter
Get name of products that has manufacturers	SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of manufacturers is Sony	WHERE T2.name = Sony
Get the number of distinct name of products	SELECT COUNT ( DISTINCT name ) FROM products
Keep the records that name is not in the first query result	WHERE name NOT IN ( the first query result ) 
Get name of products that has manufacturers	SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of manufacturers is Sony	WHERE T2.name = Sony
Get the number of distinct name of products	SELECT COUNT ( DISTINCT name ) FROM products
Keep the records that name is not in the first query result	WHERE name NOT IN ( the first query result ) 
Get name of manufacturers	SELECT name FROM manufacturers
Get name of products that has manufacturers	SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of products is DVD drive	WHERE T1.name = DVD drive
Get name of manufacturers	SELECT name FROM manufacturers
Get name of products that has manufacturers	SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Keep the records that name of products is DVD drive	WHERE T1.name = DVD drive
Get the number and name of products that has manufacturers	SELECT COUNT ( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Group the records based on name of manufacturers	GROUP BY T2.name
Get the number and name of products that has manufacturers	SELECT COUNT ( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code
Group the records based on name of manufacturers	GROUP BY T2.name
Get Name of Products	SELECT Name FROM Products
Get Name of Products	SELECT Name FROM Products
Get name and price of products	SELECT name , price FROM products
Get name and price of products	SELECT name , price FROM products
Get name of products	SELECT name FROM products
Keep the records that price is less than or equal to 200	WHERE price <= 200
Get name of products	SELECT name FROM products
Keep the records that price is less than or equal to 200	WHERE price <= 200
Get all of products	SELECT * FROM products
Keep the records that price is between 6 X120	WHERE price BETWEEN 60 AND 120
Get all of products	SELECT * FROM products
Keep the records that price is between 6 X120	WHERE price BETWEEN 60 AND 120
Get the average value of price of products	SELECT AVG ( price ) FROM products
Get the average value of price of products	SELECT AVG ( price ) FROM products
Get the average value of price of products	SELECT AVG ( price ) FROM products
Keep the records that Manufacturer is 2	WHERE Manufacturer = 2
Get the average value of price of products	SELECT AVG ( price ) FROM products
Keep the records that Manufacturer is 2	WHERE Manufacturer = 2
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that price is greater than or equal to 180	WHERE price >= 180
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that price is greater than or equal to 180	WHERE price >= 180
Get name and price of products	SELECT name , price FROM products
Keep the records that price is greater than or equal to 180	WHERE price >= 180 
Order these records based on the price and sort them in ascending ORDER	ORDER BY price ASC 
Get name and price of products	SELECT name , price FROM products
Keep the records that price is greater than or equal to 180	WHERE price >= 180 
Order these records based on the price and sort them in ascending ORDER	ORDER BY price ASC 
Get all of products that has Manufacturers	SELECT * FROM products AS T1 JOIN Manufacturers AS T2
Get all of products that has Manufacturers	SELECT * FROM products AS T1 JOIN Manufacturers AS T2
Get the average value of Price and Manufacturer of Products	SELECT AVG ( Price ) , Manufacturer FROM Products
Group the records based on Manufacturer	GROUP BY Manufacturer
Get the average value of Price and Manufacturer of Products	SELECT AVG ( Price ) , Manufacturer FROM Products
Group the records based on Manufacturer	GROUP BY Manufacturer
Get the average value of Price and name of products that has Manufacturers	SELECT AVG ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
Group the records based on name of Manufacturers	GROUP BY T2.name
Get the average value of Price and name of products that has Manufacturers	SELECT AVG ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
Group the records based on name of Manufacturers	GROUP BY T2.name
Get the average value of Price and name of products that has Manufacturers	SELECT AVG ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
Group the records based on the average value of price of products name of Manufacturers 150 that the average value of price of products is greater than or equal to 150	GROUP BY T2.name HAVING AVG ( T1.price ) >= 150 HAVING AVG ( T1.price ) >= 150
Get the average value of Price and name of products that has Manufacturers	SELECT AVG ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
Group the records based on the average value of price of products name of Manufacturers 150 that the average value of price of products is greater than or equal to 150	GROUP BY T2.name HAVING AVG ( T1.price ) >= 150 HAVING AVG ( T1.price ) >= 150
Get name and price of Products	SELECT name , price FROM Products
Order these records based on the price and sort them in ascending order, and return the top 1 record	ORDER BY price ASC LIMIT 1
Get name and price of Products	SELECT name , price FROM Products
Order these records based on the price and sort them in ascending order, and return the top 1 record	ORDER BY price ASC LIMIT 1
Get the maximum value of Price and Name and name of products that has Manufacturers	SELECT T1.Name , MAX ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
Group the records based on name of Manufacturers	GROUP BY T2.name
Get the maximum value of Price and Name and name of products that has Manufacturers	SELECT T1.Name , MAX ( T1.Price ) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code
Group the records based on name of Manufacturers	GROUP BY T2.name
Get the minimum value of price and code and name of products	SELECT code , name , MIN ( price ) FROM products
Group the records based on name	GROUP BY name
Get the minimum value of price and code and name of products	SELECT code , name , MIN ( price ) FROM products
Group the records based on name	GROUP BY name
Get problem log id of problem log	SELECT problem_log_id FROM problem_log
Order these records based on the log entry date and sort them in descending order, and return the top 1 record	ORDER BY log_entry_date DESC LIMIT 1
Get problem log id of problem log	SELECT problem_log_id FROM problem_log
Order these records based on the log entry date and sort them in descending order, and return the top 1 record	ORDER BY log_entry_date DESC LIMIT 1
Get problem log id and problem id of problem log	SELECT problem_log_id , problem_id FROM problem_log
Order these records based on the log entry date, and return the top 1 record	ORDER BY log_entry_date LIMIT 1
Get problem log id and problem id of problem log	SELECT problem_log_id , problem_id FROM problem_log
Order these records based on the log entry date, and return the top 1 record	ORDER BY log_entry_date LIMIT 1
Get problem log id and log entry date of problem log	SELECT problem_log_id , log_entry_date FROM problem_log
Keep the records that problem id is 10	WHERE problem_id = 10
Get problem log id and log entry date of problem log	SELECT problem_log_id , log_entry_date FROM problem_log
Keep the records that problem id is 10	WHERE problem_id = 10
Get problem log id and log entry description of problem log	SELECT problem_log_id , log_entry_description FROM problem_log
Get problem log id and log entry description of problem log	SELECT problem_log_id , log_entry_description FROM problem_log
Get staff first name and staff last name of staff that has problem log	SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
Keep the records that problem id of problem log is 1	WHERE T2.problem_id = 1
Get staff first name and staff last name of staff that has problem log	SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
Keep the records that problem id of problem log is 1	WHERE T2.problem_id = 1
Get problem id AND problem log id of staff that has problem log	SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
Keep the records that staff first name of staff is Rylan AND staff last name of staff is Homenick	WHERE T1.staff_first_name = Rylan AND T1.staff_last_name = Homenick
Get problem id AND problem log id of staff that has problem log	SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id
Keep the records that staff first name of staff is Rylan AND staff last name of staff is Homenick	WHERE T1.staff_first_name = Rylan AND T1.staff_last_name = Homenick
Get the number of product that has problems	SELECT COUNT ( * ) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id
Keep the records that product name of product is voluptatem	WHERE T1.product_name = voluptatem
Get the number of product that has problems	SELECT COUNT ( * ) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id
Keep the records that product name of product is voluptatem	WHERE T1.product_name = voluptatem
Get the number and product name of product that has problems	SELECT COUNT ( * ) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id
Group the records based on product name of product	GROUP BY T1.product_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and product name of product that has problems	SELECT COUNT ( * ) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id
Group the records based on product name of product	GROUP BY T1.product_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get problem description of problems that has staff	SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Christop	WHERE T2.staff_first_name = Christop
Get problem description of problems that has staff	SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Christop	WHERE T2.staff_first_name = Christop
Get problem id of problems that has staff	SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff last name of staff is Bosco	WHERE T2.staff_last_name = Bosco
Get problem id of problems that has staff	SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff last name of staff is Bosco	WHERE T2.staff_last_name = Bosco
Get problem id of problems	SELECT problem_id FROM problems
Keep the records that date problem reported is greater than 1978-06-26	WHERE date_problem_reported > 1978-06-26
Get problem id of problems	SELECT problem_id FROM problems
Keep the records that date problem reported is greater than 1978-06-26	WHERE date_problem_reported > 1978-06-26
Get problem id of problems	SELECT problem_id FROM problems
Keep the records that date problem reported is less than 1978-06-26	WHERE date_problem_reported < 1978-06-26
Get problem id of problems	SELECT problem_id FROM problems
Keep the records that date problem reported is less than 1978-06-26	WHERE date_problem_reported < 1978-06-26
Get the number and product id of problems that has product	SELECT COUNT ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Group the records based on product id of product	GROUP BY T2.product_id
Get the number and product id of problems that has product	SELECT COUNT ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Group the records based on product id of product	GROUP BY T2.product_id
Get the number and product id of problems that has product	SELECT COUNT ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Keep the records that date problem reported of problems is greater than 1986-11-13	WHERE T1.date_problem_reported > 1986-11-13 
Group the records based on product id of product	GROUP BY T2.product_id
Get the number and product id of problems that has product	SELECT COUNT ( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Keep the records that date problem reported of problems is greater than 1986-11-13	WHERE T1.date_problem_reported > 1986-11-13 
Group the records based on product id of product	GROUP BY T2.product_id
Get product name of product	SELECT DISTINCT product_name FROM product
Order these records based on the product name	ORDER BY product_name 
Get product name of product	SELECT DISTINCT product_name FROM product
Order these records based on the product name	ORDER BY product_name 
Get product name of product	SELECT DISTINCT product_name FROM product
Order these records based on the product id	ORDER BY product_id 
Get product name of product	SELECT DISTINCT product_name FROM product
Order these records based on the product id	ORDER BY product_id 
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Dameon AND staff last name of staff is Frami	WHERE T2.staff_first_name = Dameon AND T2.staff_last_name = Frami
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Jolie AND staff last name of staff is Weber	WHERE T2.staff_first_name = Jolie AND T2.staff_last_name = Weber
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Dameon AND staff last name of staff is Frami	WHERE T2.staff_first_name = Dameon AND T2.staff_last_name = Frami
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Jolie AND staff last name of staff is Weber	WHERE T2.staff_first_name = Jolie AND T2.staff_last_name = Weber
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Christop AND staff last name of staff is Berge	WHERE T2.staff_first_name = Christop AND T2.staff_last_name = Berge
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Ashley AND staff last name of staff is Medhurst	WHERE T2.staff_first_name = Ashley AND T2.staff_last_name = Medhurst
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Christop AND staff last name of staff is Berge	WHERE T2.staff_first_name = Christop AND T2.staff_last_name = Berge
Get product id of problems that has staff	SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id
Keep the records that staff first name of staff is Ashley AND staff last name of staff is Medhurst	WHERE T2.staff_first_name = Ashley AND T2.staff_last_name = Medhurst
Get the minimum value of date problem reported of problems that has staff	SELECT MIN ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id
Keep the records that staff first name of staff is Lysanne AND staff last name of staff is Turcotte	WHERE T4.staff_first_name = Lysanne AND T4.staff_last_name = Turcotte
Get problem id of problems that has staff	SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that date problem reported is less than the first query result	WHERE date_problem_reported < ( the first query result ) 
Get the minimum value of date problem reported of problems that has staff	SELECT MIN ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id
Keep the records that staff first name of staff is Lysanne AND staff last name of staff is Turcotte	WHERE T4.staff_first_name = Lysanne AND T4.staff_last_name = Turcotte
Get problem id of problems that has staff	SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that date problem reported is less than the first query result	WHERE date_problem_reported < ( the first query result ) 
Get the maximum value of date problem reported of problems that has staff	SELECT MAX ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id
Keep the records that staff first name of staff is Rylan AND staff last name of staff is Homenick	WHERE T4.staff_first_name = Rylan AND T4.staff_last_name = Homenick
Get problem id of problems that has staff	SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that date problem reported is greater than the first query result	WHERE date_problem_reported > ( the first query result ) 
Get the maximum value of date problem reported of problems that has staff	SELECT MAX ( date_problem_reported ) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id
Keep the records that staff first name of staff is Rylan AND staff last name of staff is Homenick	WHERE T4.staff_first_name = Rylan AND T4.staff_last_name = Homenick
Get problem id of problems that has staff	SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id
Keep the records that date problem reported is greater than the first query result	WHERE date_problem_reported > ( the first query result ) 
Get product name of problems that has product	SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Group the records based on product name of product	GROUP BY T2.product_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get product name of problems that has product	SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Group the records based on product name of product	GROUP BY T2.product_name
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get problem id of problems that has product	SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Keep the records that product name of product is voluptatem AND date problem reported of problems is greater than 1995	WHERE T2.product_name = voluptatem AND T1.date_problem_reported > 1995
Get problem id of problems that has product	SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id
Keep the records that product name of product is voluptatem AND date problem reported of problems is greater than 1995	WHERE T2.product_name = voluptatem AND T1.date_problem_reported > 1995
Get staff first name AND staff last name of problems that has product AND staff	SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the records that product name of product is rem	WHERE T2.product_name = rem
Get staff first name AND staff last name of problems that has product AND staff	SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the records that product name of product is aut	WHERE T2.product_name = aut
Get staff first name AND staff last name of problems that has product AND staff	SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the autcords that product name of product is autm	WHERE T2.product_name = autm
Get staff first name AND staff last name of problems that has product AND staff	SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the autcords that product name of product is aut	WHERE T2.product_name = aut
Get product name of problems that has product AND staff	SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the records that staff first name of staff is Lacey AND staff last name of staff is Bosco	WHERE T3.staff_first_name = Lacey AND T3.staff_last_name = Bosco
Get product name of problems that has product AND staff	SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the records that staff first name of staff is Kenton AND staff last name of staff is Champlin	WHERE T3.staff_first_name = Kenton AND T3.staff_last_name = Champlin
Get product name of problems that has product AND staff	SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the records that staff first name of staff is Lacey AND staff last name of staff is Bosco	WHERE T3.staff_first_name = Lacey AND T3.staff_last_name = Bosco
Get product name of problems that has product AND staff	SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id
Keep the records that staff first name of staff is Kenton AND staff last name of staff is Champlin	WHERE T3.staff_first_name = Kenton AND T3.staff_last_name = Champlin
Get the average value of membership amount of branch	SELECT AVG ( membership_amount ) FROM branch
Get the number of branch	SELECT COUNT ( * ) FROM branch
Keep the records that membership amount is greater than the first query result	WHERE membership_amount > ( the first query result ) 
Get the average value of membership amount of branch	SELECT AVG ( membership_amount ) FROM branch
Get the number of branch	SELECT COUNT ( * ) FROM branch
Keep the records that membership amount is greater than the first query result	WHERE membership_amount > ( the first query result ) 
Get name and address road and city of branch	SELECT name , address_road , city FROM branch
Order these records based on the open year	ORDER BY open_year 
Get name and address road and city of branch	SELECT name , address_road , city FROM branch
Order these records based on the open year	ORDER BY open_year 
Get name of branch	SELECT name FROM branch
Order these records based on the membership amount and sort them in descending order, and return the top 3 records	ORDER BY membership_amount DESC LIMIT 3
Get name of branch	SELECT name FROM branch
Order these records based on the membership amount and sort them in descending order, and return the top 3 records	ORDER BY membership_amount DESC LIMIT 3
Get city of branch	SELECT DISTINCT city FROM branch
Keep the records that membership amount is greater than or equal to 100	WHERE membership_amount >= 100
Get city of branch	SELECT DISTINCT city FROM branch
Keep the records that membership amount is greater than or equal to 100	WHERE membership_amount >= 100
Get open year of branch	SELECT open_year FROM branch
Group the records based on the number open year 2 that the number is greater than or equal to 2	GROUP BY open_year HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get open year of branch	SELECT open_year FROM branch
Group the records based on the number open year 2 that the number is greater than or equal to 2	GROUP BY open_year HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the minimum value of membership amount and the maximum value of membership amount of branch	SELECT MIN ( membership_amount ) , MAX ( membership_amount ) FROM branch
Keep the records that open year is 2011 OR city is London	WHERE open_year = 2011 OR city = London
Get the minimum value of membership amount and the maximum value of membership amount of branch	SELECT MIN ( membership_amount ) , MAX ( membership_amount ) FROM branch
Keep the records that open year is 2011 OR city is London	WHERE open_year = 2011 OR city = London
Get the number and city of branch	SELECT city , COUNT ( * ) FROM branch
Keep the records that open year is less than 2010	WHERE open_year < 2010 
Group the records based on city	GROUP BY city
Get the number and city of branch	SELECT city , COUNT ( * ) FROM branch
Keep the records that open year is less than 2010	WHERE open_year < 2010 
Group the records based on city	GROUP BY city
Get the number of distinct LEVEL of member	SELECT COUNT ( DISTINCT LEVEL ) FROM member
Get the number of distinct LEVEL of member	SELECT COUNT ( DISTINCT LEVEL ) FROM member
Get card number and name and hometown of member	SELECT card_number , name , hometown FROM member
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get card number and name and hometown of member	SELECT card_number , name , hometown FROM member
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get of member	SELECT LEVEL FROM member
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of member	SELECT LEVEL FROM member
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and name of membership register branch that has branch and member	SELECT T3.name , T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
Order these records based on the register year of membership register branch	ORDER BY T1.register_year 
Get name and name of membership register branch that has branch and member	SELECT T3.name , T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
Order these records based on the register year of membership register branch	ORDER BY T1.register_year 
Get the number and name of membership register branch that has branch	SELECT T2.name , COUNT ( * ) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id
Keep the records that register year of membership register branch is greater than 2015	WHERE T1.register_year > 2015 
Group the records based on branch id of branch	GROUP BY T2.branch_id
Get the number and name of membership register branch that has branch	SELECT T2.name , COUNT ( * ) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id
Keep the records that register year of membership register branch is greater than 2015	WHERE T1.register_year > 2015 
Group the records based on branch id of branch	GROUP BY T2.branch_id
Get member id of membership register branch	SELECT member_id FROM membership_register_branch
Get name of member	SELECT name FROM member
Keep the records that member id is not in the first query result	WHERE member_id NOT IN ( the first query result ) 
Get member id of membership register branch	SELECT member_id FROM membership_register_branch
Get name of member	SELECT name FROM member
Keep the records that member id is not in the first query result	WHERE member_id NOT IN ( the first query result ) 
Get branch id of membership register branch	SELECT branch_id FROM membership_register_branch
Get name and city of branch	SELECT name , city FROM branch
Keep the records that branch id is not in the first query result	WHERE branch_id NOT IN ( the first query result ) 
Get branch id of membership register branch	SELECT branch_id FROM membership_register_branch
Get name and city of branch	SELECT name , city FROM branch
Keep the records that branch id is not in the first query result	WHERE branch_id NOT IN ( the first query result ) 
Get name and open year of membership register branch that has branch	SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id
Keep the records that register year of membership register branch is 2016	WHERE T1.register_year = 2016 
Group the records based on branch id of branch	GROUP BY T2.branch_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and open year of membership register branch that has branch	SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id
Keep the records that register year of membership register branch is 2016	WHERE T1.register_year = 2016 
Group the records based on branch id of branch	GROUP BY T2.branch_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and hometown of membership register branch that has member	SELECT T2.name , T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id
Keep the records that register year of membership register branch is 2016	WHERE T1.register_year = 2016
Get name and hometown of membership register branch that has member	SELECT T2.name , T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id
Keep the records that register year of membership register branch is 2016	WHERE T1.register_year = 2016
Get city of branch	SELECT city FROM branch
Keep the records that open year is 2001 AND membership amount is greater than 100	WHERE open_year = 2001 AND membership_amount > 100
Get city of branch	SELECT city FROM branch
Keep the records that open year is 2001 AND membership amount is greater than 100	WHERE open_year = 2001 AND membership_amount > 100
Get city of branch	SELECT city FROM branch
Get city of branch	SELECT city FROM branch
Keep the records that membership amount is greater than 100	WHERE membership_amount > 100
Get city of branch	SELECT city FROM branch
Get city of branch	SELECT city FROM branch
Keep the records that membership amount is greater than 100	WHERE membership_amount > 100
Get the SUM of total pounds of purchase that has branch	SELECT SUM ( total_pounds ) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id
Keep the records that city of branch is London AND year of purchase is 2018	WHERE T2.city = London AND T1.year = 2018
Get the SUM of total pounds of purchase that has branch	SELECT SUM ( total_pounds ) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id
Keep the records that city of branch is London AND year of purchase is 2018	WHERE T2.city = London AND T1.year = 2018
Get the number of purchase that has member	SELECT COUNT ( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id
Keep the records that level of member is 6	WHERE T2.level = 6
Get the number of purchase that has member	SELECT COUNT ( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id
Keep the records that level of member is 6	WHERE T2.level = 6
Get name of membership register branch that has branch and member	SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
Keep the records that Hometown of member is Louisville , Kentucky	WHERE T3.Hometown = Louisville , Kentucky
Get name of membership register branch that has branch and member	SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
Keep the records that Hometown of member is Hiram , Georgia	WHERE T3.Hometown = Hiram , Georgia
Get name of membership register branch that has branch and member	SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
Keep the records that Hometown of member is Louisville , Kentucky	WHERE T3.Hometown = Louisville , Kentucky
Get name of membership register branch that has branch and member	SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id
Keep the records that Hometown of member is Hiram , Georgia	WHERE T3.Hometown = Hiram , Georgia
Get card number of member	SELECT card_number FROM member
Keep the records that Hometown is in the form of %Kentucky%	WHERE Hometown LIKE %Kentucky%
Get card number of member	SELECT card_number FROM member
Keep the records that Hometown is in the form of %Kentucky%	WHERE Hometown LIKE %Kentucky%
Get the number of STUDENT	SELECT COUNT ( * ) FROM STUDENT
Get the number of STUDENT	SELECT COUNT ( * ) FROM STUDENT
Get the number of VOTING RECORD	SELECT COUNT ( * ) FROM VOTING_RECORD
Get the number of VOTING RECORD	SELECT COUNT ( * ) FROM VOTING_RECORD
Get the number of distinct President Vote of VOTING RECORD	SELECT COUNT ( DISTINCT President_Vote ) FROM VOTING_RECORD
Get the number of distinct President Vote of VOTING RECORD	SELECT COUNT ( DISTINCT President_Vote ) FROM VOTING_RECORD
Get the maximum value of Age of STUDENT	SELECT MAX ( Age ) FROM STUDENT
Get the maximum value of Age of STUDENT	SELECT MAX ( Age ) FROM STUDENT
Get LName of STUDENT	SELECT LName FROM STUDENT
Keep the records that Major is 50	WHERE Major = 50
Get LName of STUDENT	SELECT LName FROM STUDENT
Keep the records that Major is 50	WHERE Major = 50
Get Fname of STUDENT	SELECT Fname FROM STUDENT
Keep the records that Age is greater than 22	WHERE Age > 22
Get Fname of STUDENT	SELECT Fname FROM STUDENT
Keep the records that Age is greater than 22	WHERE Age > 22
Get Major of STUDENT	SELECT Major FROM STUDENT
Keep the records that Sex is M	WHERE Sex = M
Get Major of STUDENT	SELECT Major FROM STUDENT
Keep the records that Sex is M	WHERE Sex = M
Get the average value of Age of STUDENT	SELECT AVG ( Age ) FROM STUDENT
Keep the records that Sex is F	WHERE Sex = F
Get the average value of Age of STUDENT	SELECT AVG ( Age ) FROM STUDENT
Keep the records that Sex is F	WHERE Sex = F
Get the maximum value of Age and the minimum value of Age of STUDENT	SELECT MAX ( Age ) , MIN ( Age ) FROM STUDENT
Keep the records that Major is 600	WHERE Major = 600
Get the maximum value of Age and the minimum value of Age of STUDENT	SELECT MAX ( Age ) , MIN ( Age ) FROM STUDENT
Keep the records that Major is 600	WHERE Major = 600
Get Advisor of STUDENT	SELECT Advisor FROM STUDENT
Keep the records that city code is BAL	WHERE city_code = BAL
Get Advisor of STUDENT	SELECT Advisor FROM STUDENT
Keep the records that city code is BAL	WHERE city_code = BAL
Get Secretary Vote of VOTING RECORD	SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD
Keep the records that ELECTION CYCLE is Fall	WHERE ELECTION_CYCLE = Fall
Get Secretary Vote of VOTING RECORD	SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD
Keep the records that ELECTION CYCLE is Fall	WHERE ELECTION_CYCLE = Fall
Get PRESIDENT Vote of VOTING RECORD	SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD
Keep the records that Registration Date is 08/30/2015	WHERE Registration_Date = 08/30/2015
Get PRESIDENT Vote of VOTING RECORD	SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD
Keep the records that Registration Date is 08/30/2015	WHERE Registration_Date = 08/30/2015
Get Registration Date and Election Cycle of VOTING RECORD	SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD
Get Registration Date and Election Cycle of VOTING RECORD	SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD
Get President Vote and VICE President Vote of VOTING RECORD	SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD
Get President Vote and VICE President Vote of VOTING RECORD	SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD
Get LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Fname of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Fname of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Age of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote
Keep the records that Election Cycle of VOTING RECORD is Fall	WHERE T2.Election_Cycle = Fall
Get Age of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote
Keep the records that Election Cycle of VOTING RECORD is Fall	WHERE T2.Election_Cycle = Fall
Get Advisor of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
Keep the records that Election Cycle of VOTING RECORD is Spring	WHERE T2.Election_Cycle = Spring
Get Advisor of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote
Keep the records that Election Cycle of VOTING RECORD is Spring	WHERE T2.Election_Cycle = Spring
Get Major of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Major of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Fname and LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE
Keep the records that sex of STUDENT is F	WHERE T1.sex = F
Get Fname and LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE
Keep the records that sex of STUDENT is F	WHERE T1.sex = F
Get Fname and LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE
Keep the records that age of STUDENT is 18	WHERE T1.age = 18
Get Fname and LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE
Keep the records that age of STUDENT is 18	WHERE T1.age = 18
Get the number of STUDENT that has VOTING RECORD	SELECT COUNT ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
Keep the records that Sex of STUDENT is M AND Election Cycle of VOTING RECORD is Fall	WHERE T1.Sex = M AND T2.Election_Cycle = Fall
Get the number of STUDENT that has VOTING RECORD	SELECT COUNT ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
Keep the records that Sex of STUDENT is M AND Election Cycle of VOTING RECORD is Fall	WHERE T1.Sex = M AND T2.Election_Cycle = Fall
Get the number of STUDENT that has VOTING RECORD	SELECT COUNT ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
Keep the records that city code of STUDENT is NYC AND Election Cycle of VOTING RECORD is Spring	WHERE T1.city_code = NYC AND T2.Election_Cycle = Spring
Get the number of STUDENT that has VOTING RECORD	SELECT COUNT ( * ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote
Keep the records that city code of STUDENT is NYC AND Election Cycle of VOTING RECORD is Spring	WHERE T1.city_code = NYC AND T2.Election_Cycle = Spring
Get the average value of Age of STUDENT that has VOTING RECORD	SELECT AVG ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
Keep the records that city code of STUDENT is NYC AND Election Cycle of VOTING RECORD is Spring	WHERE T1.city_code = NYC AND T2.Election_Cycle = Spring
Get the average value of Age of STUDENT that has VOTING RECORD	SELECT AVG ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
Keep the records that city code of STUDENT is NYC AND Election Cycle of VOTING RECORD is Spring	WHERE T1.city_code = NYC AND T2.Election_Cycle = Spring
Get the average value of Age of STUDENT that has VOTING RECORD	SELECT AVG ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
Keep the records that Sex of STUDENT is F AND Election Cycle of VOTING RECORD is Spring	WHERE T1.Sex = F AND T2.Election_Cycle = Spring
Get the average value of Age of STUDENT that has VOTING RECORD	SELECT AVG ( T1.Age ) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote
Keep the records that Sex of STUDENT is F AND Election Cycle of VOTING RECORD is Spring	WHERE T1.Sex = F AND T2.Election_Cycle = Spring
Get Fname of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Fname of STUDENT	SELECT DISTINCT Fname FROM STUDENT
Keep the records that city code is PIT	WHERE city_code = PIT
Get Fname of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get Fname of STUDENT	SELECT DISTINCT Fname FROM STUDENT
Keep the records that city code is PIT	WHERE city_code = PIT
Get LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get LName of STUDENT	SELECT DISTINCT LName FROM STUDENT
Keep the records that Advisor is 2192	WHERE Advisor = 2192
Get LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get LName of STUDENT	SELECT DISTINCT LName FROM STUDENT
Keep the records that Advisor is 2192	WHERE Advisor = 2192
Get LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get LName of STUDENT	SELECT DISTINCT LName FROM STUDENT
Keep the records that Advisor is 8741	WHERE Advisor = 8741
Get LName of STUDENT that has VOTING RECORD	SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2
Get LName of STUDENT	SELECT DISTINCT LName FROM STUDENT
Keep the records that Advisor is 8741	WHERE Advisor = 8741
Get the number and Advisor of STUDENT	SELECT Advisor , COUNT ( * ) FROM STUDENT
Group the records based on Advisor	GROUP BY Advisor
Get the number and Advisor of STUDENT	SELECT Advisor , COUNT ( * ) FROM STUDENT
Group the records based on Advisor	GROUP BY Advisor
Get Advisor of STUDENT	SELECT Advisor FROM STUDENT
Group the records based on the number Advisor 2 that the number is greater than 2	GROUP BY Advisor HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Advisor of STUDENT	SELECT Advisor FROM STUDENT
Group the records based on the number Advisor 2 that the number is greater than 2	GROUP BY Advisor HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Major of STUDENT	SELECT Major FROM STUDENT
Group the records based on the number Major 3 that the number is less than 3	GROUP BY Major HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get Major of STUDENT	SELECT Major FROM STUDENT
Group the records based on the number Major 3 that the number is less than 3	GROUP BY Major HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get the number and Election Cycle of VOTING RECORD	SELECT Election_Cycle , COUNT ( * ) FROM VOTING_RECORD
Group the records based on Election Cycle	GROUP BY Election_Cycle
Get the number and Election Cycle of VOTING RECORD	SELECT Election_Cycle , COUNT ( * ) FROM VOTING_RECORD
Group the records based on Election Cycle	GROUP BY Election_Cycle
Get Major of STUDENT	SELECT Major FROM STUDENT
Group the records based on Major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Major of STUDENT	SELECT Major FROM STUDENT
Group the records based on Major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Major of STUDENT	SELECT Major FROM STUDENT
Keep the records that Sex is F	WHERE Sex = F 
Group the records based on Major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Major of STUDENT	SELECT Major FROM STUDENT
Keep the records that Sex is F	WHERE Sex = F 
Group the records based on Major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city code of STUDENT	SELECT city_code FROM STUDENT
Group the records based on city code	GROUP BY city_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city code of STUDENT	SELECT city_code FROM STUDENT
Group the records based on city code	GROUP BY city_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Advisor of STUDENT	SELECT Advisor FROM STUDENT
Group the records based on the number Advisor 2 that the number is greater than 2	GROUP BY Advisor HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Advisor of STUDENT	SELECT Advisor FROM STUDENT
Group the records based on the number Advisor 2 that the number is greater than 2	GROUP BY Advisor HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of products	SELECT COUNT ( * ) FROM products
Get the number of products	SELECT COUNT ( * ) FROM products
Get the number of ref colors	SELECT COUNT ( * ) FROM ref_colors
Get the number of ref colors	SELECT COUNT ( * ) FROM ref_colors
Get the number of	SELECT COUNT ( * ) FROM
Get the number of	SELECT COUNT ( * ) FROM
Get product name and typical buying price of products	SELECT product_name , typical_buying_price FROM products
Get product name and typical buying price of products	SELECT product_name , typical_buying_price FROM products
Get color description of ref colors	SELECT color_description FROM ref_colors
Get color description of ref colors	SELECT color_description FROM ref_colors
Get characteristic name of	SELECT DISTINCT characteristic_name FROM
Get characteristic name of	SELECT DISTINCT characteristic_name FROM
Get product name of products	SELECT product_name FROM products
Keep the records that product category code is Spices	WHERE product_category_code = Spices
Get product name of products	SELECT product_name FROM products
Keep the records that product category code is Spices	WHERE product_category_code = Spices
Get product name and color description and product description of products that has Ref colors	SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code
Keep the records that product category code is Herbs	WHERE product_category_code = Herbs
Get product name and color description and product description of products that has Ref colors	SELECT T1.product_name , T2.color_description , T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code
Keep the records that product category code is Herbs	WHERE product_category_code = Herbs
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product category code is Seeds	WHERE product_category_code = Seeds
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product category code is Seeds	WHERE product_category_code = Seeds
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product category code is Spices AND typical buying price is greater than 1000	WHERE product_category_code = Spices AND typical_buying_price > 1000
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product category code is Spices AND typical buying price is greater than 1000	WHERE product_category_code = Spices AND typical_buying_price > 1000
Get product category code and typical buying price of products	SELECT product_category_code , typical_buying_price FROM products
Keep the records that product name is cumin	WHERE product_name = cumin
Get product category code and typical buying price of products	SELECT product_category_code , typical_buying_price FROM products
Keep the records that product name is cumin	WHERE product_name = cumin
Get product category code of products	SELECT product_category_code FROM products
Keep the records that product name is flax	WHERE product_name = flax
Get product category code of products	SELECT product_category_code FROM products
Keep the records that product name is flax	WHERE product_name = flax
Get product name of products that has ref colors	SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code
Keep the records that color description of ref colors is yellow	WHERE T2.color_description = yellow
Get product name of products that has ref colors	SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code
Keep the records that color description of ref colors is yellow	WHERE T2.color_description = yellow
Get product category description of ref product categories that has products	SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code
Keep the records that product description of products is in the form of %t%	WHERE T2.product_description LIKE %t%
Get product category description of ref product categories that has products	SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code
Keep the records that product description of products is in the form of %t%	WHERE T2.product_description LIKE %t%
Get color description of products that has ref colors	SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that product name of products is catnip	WHERE t1.product_name = catnip
Get color description of products that has ref colors	SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that product name of products is catnip	WHERE t1.product_name = catnip
Get color code and color description of products that has ref colors	SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that product name of products is chervil	WHERE t1.product_name = chervil
Get color code and color description of products that has ref colors	SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that product name of products is chervil	WHERE t1.product_name = chervil
Get product id and color description of products that has ref colors and product characteristics	SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id
Group the records based on the number product id of products 2 that the number is greater than or equal to 2	GROUP BY t1.product_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get product id and color description of products that has ref colors and product characteristics	SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id
Group the records based on the number product id of products 2 that the number is greater than or equal to 2	GROUP BY t1.product_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get product name of products that has ref colors	SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that color description of ref colors is white	WHERE t2.color_description = white
Get product name of products that has ref colors	SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that color description of ref colors is white	WHERE t2.color_description = white
Get product name and typical buying price and typical selling price of products that has ref colors	SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that color description of ref colors is yellow	WHERE t2.color_description = yellow
Get product name and typical buying price and typical selling price of products that has ref colors	SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Keep the records that color description of ref colors is yellow	WHERE t2.color_description = yellow
Get the number of products that has product characteristics	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id
Keep the records that product name of products is sesame	WHERE t1.product_name = sesame
Get the number of products that has product characteristics	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id
Keep the records that product name of products is sesame	WHERE t1.product_name = sesame
Get the number of distinct characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( DISTINCT t3.characteristic_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is sesame	WHERE t1.product_name = sesame
Get the number of distinct characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( DISTINCT t3.characteristic_name ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is sesame	WHERE t1.product_name = sesame
Get characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is sesame	WHERE t1.product_name = sesame
Get characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is sesame	WHERE t1.product_name = sesame
Get characteristic name and characteristic data type of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is cumin	WHERE t1.product_name = cumin
Get characteristic name and characteristic data type of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is cumin	WHERE t1.product_name = cumin
Get characteristic name of products that has product CHARACTERISTICS AND CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is sesame AND characteristic type code of CHARACTERISTICS is Grade	WHERE t1.product_name = sesame AND t3.characteristic_type_code = Grade
Get characteristic name of products that has product CHARACTERISTICS AND CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is sesame AND characteristic type code of CHARACTERISTICS is Grade	WHERE t1.product_name = sesame AND t3.characteristic_type_code = Grade
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is laurel	WHERE t1.product_name = laurel
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is laurel	WHERE t1.product_name = laurel
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is flax	WHERE t1.product_name = flax
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that product name of products is flax	WHERE t1.product_name = flax
Get product name of products that has product CHARACTERISTICS AND CHARACTERISTICS AND ref colors	SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
Keep the records that color description of ref colors is red AND characteristic name of CHARACTERISTICS is fast	WHERE t4.color_description = red AND t3.characteristic_name = fast
Get product name of products that has product CHARACTERISTICS AND CHARACTERISTICS AND ref colors	SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
Keep the records that color description of ref colors is red AND characteristic name of CHARACTERISTICS is fast	WHERE t4.color_description = red AND t3.characteristic_name = fast
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that characteristic name of CHARACTERISTICS is hot	WHERE t3.characteristic_name = hot
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that characteristic name of CHARACTERISTICS is hot	WHERE t3.characteristic_name = hot
Get product name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that characteristic name of CHARACTERISTICS is warm	WHERE t3.characteristic_name = warm
Get product name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Keep the records that characteristic name of CHARACTERISTICS is warm	WHERE t3.characteristic_name = warm
Get the number of products that has product CHARACTERISTICS AND CHARACTERISTICS AND ref colors	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
Keep the records that color description of ref colors is red AND characteristic name of CHARACTERISTICS is slow	WHERE t4.color_description = red AND t3.characteristic_name = slow
Get the number of products that has product CHARACTERISTICS AND CHARACTERISTICS AND ref colors	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
Keep the records that color description of ref colors is red AND characteristic name of CHARACTERISTICS is slow	WHERE t4.color_description = red AND t3.characteristic_name = slow
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS and ref colors	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
Keep the records that color description of ref colors is white OR characteristic name of CHARACTERISTICS is hot	WHERE t4.color_description = white OR t3.characteristic_name = hot
Get the number of products that has product CHARACTERISTICS and CHARACTERISTICS and ref colors	SELECT COUNT ( * ) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code
Keep the records that color description of ref colors is white OR characteristic name of CHARACTERISTICS is hot	WHERE t4.color_description = white OR t3.characteristic_name = hot
Get unit of measure of ref product categories	SELECT unit_of_measure FROM ref_product_categories
Keep the records that product category code is Herbs	WHERE product_category_code = Herbs
Get unit of measure of ref product categories	SELECT unit_of_measure FROM ref_product_categories
Keep the records that product category code is Herbs	WHERE product_category_code = Herbs
Get product category description of ref product categories	SELECT product_category_description FROM ref_product_categories
Keep the records that product category code is Spices	WHERE product_category_code = Spices
Get product category description of ref product categories	SELECT product_category_description FROM ref_product_categories
Keep the records that product category code is Spices	WHERE product_category_code = Spices
Get product category description and unit of measure of ref product categories	SELECT product_category_description , unit_of_measure FROM ref_product_categories
Keep the records that product category code is Herbs	WHERE product_category_code = Herbs
Get product category description and unit of measure of ref product categories	SELECT product_category_description , unit_of_measure FROM ref_product_categories
Keep the records that product category code is Herbs	WHERE product_category_code = Herbs
Get unit of measure of products that has ref product categories	SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
Keep the records that product name of products is cumin	WHERE t1.product_name = cumin
Get unit of measure of products that has ref product categories	SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
Keep the records that product name of products is cumin	WHERE t1.product_name = cumin
Get unit of measure and product category code of products that has ref product categories	SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
Keep the records that product name of products is chervil	WHERE t1.product_name = chervil
Get unit of measure and product category code of products that has ref product categories	SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code
Keep the records that product name of products is chervil	WHERE t1.product_name = chervil
Get product name of products that has ref product categories AND ref colors	SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code
Keep the records that color description of ref colors is white AND unit of measure of ref product categories is not Handful	WHERE t3.color_description = white AND t2.unit_of_measure != Handful
Get product name of products that has ref product categories AND ref colors	SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code
Keep the records that color description of ref colors is white AND unit of measure of ref product categories is not Handful	WHERE t3.color_description = white AND t2.unit_of_measure != Handful
Get color description of products that has ref colors	SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Group the records based on color description of ref colors	GROUP BY t2.color_description
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get color description of products that has ref colors	SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Group the records based on color description of ref colors	GROUP BY t2.color_description
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get color description of products that has ref colors	SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Group the records based on color description of ref colors	GROUP BY t2.color_description
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get color description of products that has ref colors	SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code
Group the records based on color description of ref colors	GROUP BY t2.color_description
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Group the records based on characteristic name of CHARACTERISTICS	GROUP BY t3.characteristic_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Group the records based on characteristic name of CHARACTERISTICS	GROUP BY t3.characteristic_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get characteristic name and other characteristic details and characteristic data type of	SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM
Get characteristic name and other characteristic details and characteristic data type of CHARACTERISTICS that has product CHARACTERISTICS	SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2
Get characteristic name and other characteristic details and characteristic data type of	SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM
Get characteristic name and other characteristic details and characteristic data type of CHARACTERISTICS that has product CHARACTERISTICS	SELECT t1.characteristic_name , t1.other_characteristic_details , t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2
Get characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Group the records based on the number characteristic name of CHARACTERISTICS 2 that the number is greater than or equal to 2	GROUP BY t3.characteristic_name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get characteristic name of products that has product CHARACTERISTICS and CHARACTERISTICS	SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id
Group the records based on the number characteristic name of CHARACTERISTICS 2 that the number is greater than or equal to 2	GROUP BY t3.characteristic_name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get color code of products	SELECT color_code FROM products
Get the number of Ref colors	SELECT COUNT ( * ) FROM Ref_colors
Keep the records that color code is not in the first query result	WHERE color_code NOT IN ( the first query result ) 
Get color code of products	SELECT color_code FROM products
Get the number of Ref colors	SELECT COUNT ( * ) FROM Ref_colors
Keep the records that color code is not in the first query result	WHERE color_code NOT IN ( the first query result ) 
Get the number of event	SELECT COUNT ( * ) FROM event
Get name of event	SELECT name FROM event
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get name of event	SELECT name FROM event
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get the number of stadium	SELECT COUNT ( * ) FROM stadium
Get name of stadium	SELECT name FROM stadium
Order these records based on the capacity and sort them in descending order, and return the top 1 record	ORDER BY capacity DESC LIMIT 1
Get the average value of capacity of stadium	SELECT AVG ( capacity ) FROM stadium
Get name of stadium	SELECT name FROM stadium
Keep the records that capacity is less than the first query result	WHERE capacity < ( the first query result ) 
Get country of stadium	SELECT country FROM stadium
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of stadium	SELECT country FROM stadium
Group the records based on the number country 3 that the number is less than or equal to 3	GROUP BY country HAVING COUNT ( * ) <= 3 HAVING COUNT ( * ) <= 3
Get country of stadium	SELECT country FROM stadium
Keep the records that capacity is greater than 60000	WHERE capacity > 60000
Get country of stadium	SELECT country FROM stadium
Keep the records that capacity is less than 50000	WHERE capacity < 50000
Get the number of distinct city of stadium	SELECT COUNT ( DISTINCT city ) FROM stadium
Keep the records that opening year is less than 2006	WHERE opening_year < 2006
Get the number and country of stadium	SELECT country , COUNT ( * ) FROM stadium
Group the records based on country	GROUP BY country
Get country of stadium	SELECT country FROM stadium
Get country of stadium	SELECT country FROM stadium
Keep the records that opening year is greater than 2006	WHERE opening_year > 2006
Get the number of stadium	SELECT COUNT ( * ) FROM stadium
Keep the records that country is not Russia	WHERE country != Russia
Get name of swimmer	SELECT name FROM swimmer
Order these records based on the meter 100	ORDER BY meter_100 
Get the number of distinct nationality of swimmer	SELECT COUNT ( DISTINCT nationality ) FROM swimmer
Get the number and nationality of swimmer	SELECT nationality , COUNT ( * ) FROM swimmer
Group the records based on the number nationality 1 that the number is greater than 1	GROUP BY nationality HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get meter 200 and meter 300 of swimmer	SELECT meter_200 , meter_300 FROM swimmer
Keep the records that nationality is Australia	WHERE nationality = Australia
Get name of swimmer that has record	SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id
Keep the records that is Win	WHERE RESULT = Win
Get name of stadium that has event	SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id
Group the records based on stadium id of event	GROUP BY t2.stadium_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and capacity of stadium that has event	SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id
Keep the records that name of event is World Junior	WHERE t2.name = World Junior
Get stadium id of event	SELECT stadium_id FROM event
Get name of stadium	SELECT name FROM stadium
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get name of swimmer that has record	SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id
Group the records based on swimmer id of record	GROUP BY t2.swimmer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of swimmer that has record	SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id
Group the records based on the number swimmer id of record 2 that the number is greater than or equal to 2	GROUP BY t2.swimmer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name and nationality of swimmer that has record	SELECT t1.name , t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id
Keep the records that is Win	WHERE RESULT = Win 
Group the records based on the number swimmer id of record 1 that the number is greater than 1	GROUP BY t2.swimmer_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get swimmer id of record	SELECT swimmer_id FROM record
Get name of swimmer	SELECT name FROM swimmer
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get name of swimmer that has record	SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id
Keep the records that is Win	WHERE RESULT = Win
Get name of swimmer that has record	SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id
Keep the records that is Loss	WHERE RESULT = Loss
Get name of swimmer that has record and event and stadium	SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id
Keep the records that nationality of swimmer is Australia	WHERE t1.nationality = Australia
Get name of record that has event and stadium	SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id
Group the records based on stadium id of event	GROUP BY t2.stadium_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get all of swimmer	SELECT * FROM swimmer
Get the average value of capacity of stadium	SELECT AVG ( capacity ) FROM stadium
Keep the records that opening year is 2005	WHERE opening_year = 2005
Get the number of railway	SELECT COUNT ( * ) FROM railway
Get Builder of railway	SELECT Builder FROM railway
Order these records based on the Builder and sort them in ascending ORDER	ORDER BY Builder ASC 
Get Wheels of railway	SELECT Wheels , LOCATION FROM railway
Get the maximum value of LEVEL of manager	SELECT MAX ( LEVEL ) FROM manager
Keep the records that Country is not Australia	WHERE Country != Australia
Get the average value of Age of manager	SELECT AVG ( Age ) FROM manager
Get Name of manager	SELECT Name FROM manager
Order these records based on the and sort them in ascending ORDER	ORDER BY ASC 
Get Name and Arrival of train	SELECT Name , Arrival FROM train
Get Name of manager	SELECT Name FROM manager
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Name and Location of railway that has train	SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2
Get Builder of railway that has train	SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
Keep the records that Name of train is Andaman Exp	WHERE T2.Name = Andaman Exp
Get Railway ID and Location of railway that has train	SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
Group the records based on the number Railway ID of train 1 that the number is greater than 1	GROUP BY T2.Railway_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Railway ID and Builder of railway that has train	SELECT T2.Railway_ID , T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID
Group the records based on Railway ID of train	GROUP BY T2.Railway_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Builder of railway	SELECT Builder , COUNT ( * ) FROM railway
Group the records based on Builder	GROUP BY Builder
Get Builder of railway	SELECT Builder FROM railway
Group the records based on Builder	GROUP BY Builder
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of railway	SELECT LOCATION , COUNT ( * ) FROM railway
Group the records based on	GROUP BY
Get of railway	SELECT LOCATION FROM railway
Group the records based on that the number is greater than 1	GROUP BY HAVING COUNT ( * ) > 1
Get Railway ID of train	SELECT Railway_ID FROM train
Get ObjectNumber of railway	SELECT ObjectNumber FROM railway
Keep the records that Railway ID is not in the first query result	WHERE Railway_ID NOT IN ( the first query result ) 
Get Country of manager	SELECT Country FROM manager
Keep the records that Age is greater than 50	WHERE Age > 50
Get Country of manager	SELECT Country FROM manager
Keep the records that Age is less than 46	WHERE Age < 46
Get Country of manager	SELECT DISTINCT Country FROM manager
Get Working year starts of manager	SELECT Working_year_starts FROM manager
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get Country of manager	SELECT Country FROM manager
Keep the records that Age is greater than 50 OR Age is less than 46	WHERE Age > 50 OR Age < 46
Get the number of addresses	SELECT COUNT ( * ) FROM addresses
Keep the records that country is USA	WHERE country = USA
Get city of addresses	SELECT DISTINCT city FROM addresses
Get the number and state province county of addresses	SELECT state_province_county , COUNT ( * ) FROM addresses
Group the records based on state province county	GROUP BY state_province_county
Get customer id of customer address history	SELECT customer_id FROM customer_address_history
Get customer name and customer phone of customers	SELECT customer_name , customer_phone FROM customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer name of customers that has customer orders	SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product type code of products	SELECT product_type_code FROM products
Group the records based on the number product type code 2 that the number is greater than or equal to 2	GROUP BY product_type_code HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer name of customers that has customer orders	SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status code of customer orders is Completed	WHERE T2.order_status_code = Completed
Get customer name of customers that has customer orders	SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status code of customer orders is Part	WHERE T2.order_status_code = Part
Get customer name and customer phone and payment method code of customers	SELECT customer_name , customer_phone , payment_method_code FROM customers
Order these records based on the customer number and sort them in descending ORDER	ORDER BY customer_number DESC 
Get the SUM of order quantity and product name of products that has order items	SELECT T1.product_name , SUM ( T2.order_quantity ) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id
Group the records based on product id of products	GROUP BY T1.product_id
Get the minimum value of product price and the maximum value of product price and the average value of product price of products	SELECT MIN ( product_price ) , MAX ( product_price ) , AVG ( product_price ) FROM products
Get the average value of product price of products	SELECT AVG ( product_price ) FROM products
Get the number of products	SELECT COUNT ( * ) FROM products
Keep the records that product price is greater than the first query result	WHERE product_price > ( the first query result ) 
Get customer name and city and date FROM and date to of customer address history that has customers and addresses	SELECT T2.customer_name , T3.city , T1.date_from , T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3
Get customer name of customers that has customer orders	SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that payment method code of customers is Credit Card	WHERE T1.payment_method_code = Credit Card 
Group the records based on the number customer id of customers 2 that the number is greater than 2	GROUP BY T1.customer_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get customer name and customer phone of customers that has customer orders and ORDER items	SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the SUM of ORDER quantity of ORDER items and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T3.order_quantity ) DESC LIMIT 1
Get product type code and product name of products	SELECT product_type_code , product_name FROM products
Keep the records that product price is greater than 1000 OR product price is less than 500	WHERE product_price > 1000 OR product_price < 500
Get dorm name of dorm	SELECT dorm_name FROM dorm
Keep the records that gender is F	WHERE gender = F
Get dorm name of dorm	SELECT dorm_name FROM dorm
Keep the records that gender is F	WHERE gender = F
Get dorm name of dorm	SELECT dorm_name FROM dorm
Keep the records that student capacity is greater than 300	WHERE student_capacity > 300
Get dorm name of dorm	SELECT dorm_name FROM dorm
Keep the records that student capacity is greater than 300	WHERE student_capacity > 300
Get the number of student	SELECT COUNT ( * ) FROM student
Keep the records that sex is F AND age is less than 25	WHERE sex = F AND age < 25
Get the number of student	SELECT COUNT ( * ) FROM student
Keep the records that sex is F AND age is less than 25	WHERE sex = F AND age < 25
Get fname of student	SELECT fname FROM student
Keep the records that age is greater than 20	WHERE age > 20
Get fname of student	SELECT fname FROM student
Keep the records that age is greater than 20	WHERE age > 20
Get fname of student	SELECT fname FROM student
Keep the records that city code is PHL AND age is between 2 X25	WHERE city_code = PHL AND age BETWEEN 20 AND 25
Get fname of student	SELECT fname FROM student
Keep the records that city code is PHL AND age is between 2 X25	WHERE city_code = PHL AND age BETWEEN 20 AND 25
Get the number of dorm	SELECT COUNT ( * ) FROM dorm
Get the number of dorm	SELECT COUNT ( * ) FROM dorm
Get the number of dorm amenity	SELECT COUNT ( * ) FROM dorm_amenity
Get the number of dorm amenity	SELECT COUNT ( * ) FROM dorm_amenity
Get the SUM of student capacity of dorm	SELECT SUM ( student_capacity ) FROM dorm
Get the SUM of student capacity of dorm	SELECT SUM ( student_capacity ) FROM dorm
Get the number of student	SELECT COUNT ( * ) FROM student
Get the number of student	SELECT COUNT ( * ) FROM student
Get the average value of age and city code of student	SELECT AVG ( age ) , city_code FROM student
Group the records based on city code	GROUP BY city_code
Get the average value of age and city code of student	SELECT AVG ( age ) , city_code FROM student
Group the records based on city code	GROUP BY city_code
Get the average value of student capacity and the SUM of student capacity of dorm	SELECT AVG ( student_capacity ) , SUM ( student_capacity ) FROM dorm
Keep the records that gender is X	WHERE gender = X
Get the average value of student capacity and the SUM of student capacity of dorm	SELECT AVG ( student_capacity ) , SUM ( student_capacity ) FROM dorm
Keep the records that gender is X	WHERE gender = X
Get the number of distinct dormid of has amenity	SELECT COUNT ( DISTINCT dormid ) FROM has_amenity
Get the number of distinct dormid of has amenity	SELECT COUNT ( DISTINCT dormid ) FROM has_amenity
Get dormid of has amenity	SELECT dormid FROM has_amenity
Get dorm name of dorm	SELECT dorm_name FROM dorm
Keep the records that dormid is not in the first query result	WHERE dormid NOT IN ( the first query result ) 
Get dormid of has amenity	SELECT dormid FROM has_amenity
Get dorm name of dorm	SELECT dorm_name FROM dorm
Keep the records that dormid is not in the first query result	WHERE dormid NOT IN ( the first query result ) 
Get the number of distinct gender of dorm	SELECT COUNT ( DISTINCT gender ) FROM dorm
Get the number of distinct gender of dorm	SELECT COUNT ( DISTINCT gender ) FROM dorm
Get student capacity and gender of dorm	SELECT student_capacity , gender FROM dorm
Keep the records that dorm name is in the form of %Donor%	WHERE dorm_name LIKE %Donor%
Get student capacity and gender of dorm	SELECT student_capacity , gender FROM dorm
Keep the records that dorm name is in the form of %Donor%	WHERE dorm_name LIKE %Donor%
Get dorm name and gender of dorm	SELECT dorm_name , gender FROM dorm
Keep the records that student capacity is greater than 300 OR student capacity is less than 100	WHERE student_capacity > 300 OR student_capacity < 100
Get dorm name and gender of dorm	SELECT dorm_name , gender FROM dorm
Keep the records that student capacity is greater than 300 OR student capacity is less than 100	WHERE student_capacity > 300 OR student_capacity < 100
Get the number of distinct major and the number of distinct city code of student	SELECT COUNT ( DISTINCT major ) , COUNT ( DISTINCT city_code ) FROM student
Get the number of distinct major and the number of distinct city code of student	SELECT COUNT ( DISTINCT major ) , COUNT ( DISTINCT city_code ) FROM student
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T3.amenity_name = TV Lounge
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is Study Room	WHERE T3.amenity_name = Study Room
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T3.amenity_name = TV Lounge
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is Study Room	WHERE T3.amenity_name = Study Room
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T3.amenity_name = TV Lounge
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is Study Room	WHERE T3.amenity_name = Study Room
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T3.amenity_name = TV Lounge
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is Study Room	WHERE T3.amenity_name = Study Room
Get lname of student	SELECT lname FROM student
Keep the records that sex is F AND city code is BAL	WHERE sex = F AND city_code = BAL
Get lname of student	SELECT lname FROM student
Keep the records that sex is M AND age is less than 20	WHERE sex = M AND age < 20
Get lname of student	SELECT lname FROM student
Keep the records that sex is F AND city code is BAL	WHERE sex = F AND city_code = BAL
Get lname of student	SELECT lname FROM student
Keep the records that sex is M AND age is less than 20	WHERE sex = M AND age < 20
Get dorm name of dorm	SELECT dorm_name FROM dorm
Order these records based on the student capacity and sort them in descending order, and return the top 1 record	ORDER BY student_capacity DESC LIMIT 1
Get dorm name of dorm	SELECT dorm_name FROM dorm
Order these records based on the student capacity and sort them in descending order, and return the top 1 record	ORDER BY student_capacity DESC LIMIT 1
Get amenity name of dorm amenity	SELECT amenity_name FROM dorm_amenity
Order these records based on the amenity name	ORDER BY amenity_name 
Get amenity name of dorm amenity	SELECT amenity_name FROM dorm_amenity
Order these records based on the amenity name	ORDER BY amenity_name 
Get city code of student	SELECT city_code FROM student
Group the records based on city code	GROUP BY city_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city code of student	SELECT city_code FROM student
Group the records based on city code	GROUP BY city_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of age of student	SELECT AVG ( age ) FROM student
Get fname and lname of student	SELECT fname , lname FROM student
Keep the records that age is less than the first query result	WHERE age < ( the first query result ) 
Get the average value of age of student	SELECT AVG ( age ) FROM student
Get fname and lname of student	SELECT fname , lname FROM student
Keep the records that age is less than the first query result	WHERE age < ( the first query result ) 
Get fname and lname of student	SELECT fname , lname FROM student
Keep the records that city code is not HKG	WHERE city_code != HKG 
Order these records based on the age	ORDER BY age 
Get fname and lname of student	SELECT fname , lname FROM student
Keep the records that city code is not HKG	WHERE city_code != HKG 
Order these records based on the age	ORDER BY age 
Get amenity name of dorm amenity that has has amenity and dorm	SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid
Keep the records that dorm name of dorm is Anonymous Donor Hall	WHERE T3.dorm_name = Anonymous Donor Hall 
Order these records based on the amenity name of dorm amenity	ORDER BY T1.amenity_name 
Get amenity name of dorm amenity that has has amenity and dorm	SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid
Keep the records that dorm name of dorm is Anonymous Donor Hall	WHERE T3.dorm_name = Anonymous Donor Hall 
Order these records based on the amenity name of dorm amenity	ORDER BY T1.amenity_name 
Get the number and the SUM of student capacity and gender of dorm	SELECT COUNT ( * ) , SUM ( student_capacity ) , gender FROM dorm
Group the records based on gender	GROUP BY gender
Get the number and the SUM of student capacity and gender of dorm	SELECT COUNT ( * ) , SUM ( student_capacity ) , gender FROM dorm
Group the records based on gender	GROUP BY gender
Get the average value of age and the maximum value of age and sex of student	SELECT AVG ( age ) , MAX ( age ) , sex FROM student
Group the records based on sex	GROUP BY sex
Get the average value of age and the maximum value of age and sex of student	SELECT AVG ( age ) , MAX ( age ) , sex FROM student
Group the records based on sex	GROUP BY sex
Get the number and major of student	SELECT COUNT ( * ) , major FROM student
Group the records based on major	GROUP BY major
Get the number and major of student	SELECT COUNT ( * ) , major FROM student
Group the records based on major	GROUP BY major
Get the number and the average value of age and city code of student	SELECT COUNT ( * ) , AVG ( age ) , city_code FROM student
Group the records based on city code	GROUP BY city_code
Get the number and the average value of age and city code of student	SELECT COUNT ( * ) , AVG ( age ) , city_code FROM student
Group the records based on city code	GROUP BY city_code
Get the number and the average value of age and city code of student	SELECT COUNT ( * ) , AVG ( age ) , city_code FROM student
Keep the records that sex is M	WHERE sex = M 
Group the records based on city code	GROUP BY city_code
Get the number and the average value of age and city code of student	SELECT COUNT ( * ) , AVG ( age ) , city_code FROM student
Keep the records that sex is M	WHERE sex = M 
Group the records based on city code	GROUP BY city_code
Get the number and city code of student	SELECT COUNT ( * ) , city_code FROM student
Group the records based on the number city code 1 that the number is greater than 1	GROUP BY city_code HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number and city code of student	SELECT COUNT ( * ) , city_code FROM student
Group the records based on the number city code 1 that the number is greater than 1	GROUP BY city_code HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get major of student	SELECT major FROM student
Group the records based on major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname and lname of student	SELECT fname , lname FROM student
Keep the records that major is not the first query result	WHERE major != ( the first query result ) 
Get major of student	SELECT major FROM student
Group the records based on major	GROUP BY major
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname and lname of student	SELECT fname , lname FROM student
Keep the records that major is not the first query result	WHERE major != ( the first query result ) 
Get the average value of age of student	SELECT AVG ( age ) FROM student
Get the number and sex of student	SELECT COUNT ( * ) , sex FROM student
Keep the records that age is greater than the first query result	WHERE age > ( the first query result )  
Group the records based on sex	GROUP BY sex
Get the average value of age of student	SELECT AVG ( age ) FROM student
Get the number and sex of student	SELECT COUNT ( * ) , sex FROM student
Keep the records that age is greater than the first query result	WHERE age > ( the first query result )  
Group the records based on sex	GROUP BY sex
Get the average value of age and dorm name of student that has lives in and dorm	SELECT AVG ( T1.age ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Group the records based on dorm name of dorm	GROUP BY T3.dorm_name
Get the average value of age and dorm name of student that has lives in and dorm	SELECT AVG ( T1.age ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Group the records based on dorm name of dorm	GROUP BY T3.dorm_name
Get the number and dormid of dorm that has has amenity	SELECT COUNT ( * ) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid
Keep the records that student capacity of dorm is greater than 100	WHERE T1.student_capacity > 100 
Group the records based on dormid of dorm	GROUP BY T1.dormid
Get the number and dormid of dorm that has has amenity	SELECT COUNT ( * ) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid
Keep the records that student capacity of dorm is greater than 100	WHERE T1.student_capacity > 100 
Group the records based on dormid of dorm	GROUP BY T1.dormid
Get the number and dorm name of student that has lives in and dorm	SELECT COUNT ( * ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that age of student is greater than 20	WHERE T1.age > 20 
Group the records based on dorm name of dorm	GROUP BY T3.dorm_name
Get the number and dorm name of student that has lives in and dorm	SELECT COUNT ( * ) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that age of student is greater than 20	WHERE T1.age > 20 
Group the records based on dorm name of dorm	GROUP BY T3.dorm_name
Get fname of student that has lives in and dorm	SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that dorm name of dorm is Smith Hall	WHERE T3.dorm_name = Smith Hall
Get fname of student that has lives in and dorm	SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that dorm name of dorm is Smith Hall	WHERE T3.dorm_name = Smith Hall
Get the maximum value of student capacity of dorm	SELECT MAX ( student_capacity ) FROM dorm
Get the average value of age of student that has lives in and dorm	SELECT AVG ( T1.age ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that student capacity of dorm is the first query result	WHERE T3.student_capacity = ( the first query result ) 
Get the maximum value of student capacity of dorm	SELECT MAX ( student_capacity ) FROM dorm
Get the average value of age of student that has lives in and dorm	SELECT AVG ( T1.age ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that student capacity of dorm is the first query result	WHERE T3.student_capacity = ( the first query result ) 
Get the number of student that has lives in and dorm	SELECT COUNT ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that gender of dorm is M	WHERE T3.gender = M
Get the number of student that has lives in and dorm	SELECT COUNT ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that gender of dorm is M	WHERE T3.gender = M
Get the number of student that has lives in AND dorm	SELECT COUNT ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that dorm name of dorm is Smith Hall AND sex of student is F	WHERE T3.dorm_name = Smith Hall AND T1.sex = F
Get the number of student that has lives in AND dorm	SELECT COUNT ( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid
Keep the records that dorm name of dorm is Smith Hall AND sex of student is F	WHERE T3.dorm_name = Smith Hall AND T1.sex = F
Get amenity name of dorm that has has amenity and dorm amenity	SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that dorm name of dorm is Smith Hall	WHERE T1.dorm_name = Smith Hall
Get amenity name of dorm that has has amenity and dorm amenity	SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that dorm name of dorm is Smith Hall	WHERE T1.dorm_name = Smith Hall
Get amenity name of dorm that has has amenity and dorm amenity	SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that dorm name of dorm is Smith Hall	WHERE T1.dorm_name = Smith Hall 
Order these records based on the amenity name of dorm amenity	ORDER BY T3.amenity_name 
Get amenity name of dorm that has has amenity and dorm amenity	SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that dorm name of dorm is Smith Hall	WHERE T1.dorm_name = Smith Hall 
Order these records based on the amenity name of dorm amenity	ORDER BY T3.amenity_name 
Get amenity name of dorm amenity that has has amenity	SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid
Group the records based on amenid of has amenity	GROUP BY T2.amenid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get amenity name of dorm amenity that has has amenity	SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid
Group the records based on amenid of has amenity	GROUP BY T2.amenid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get dormid of dorm that has has amenity and dorm amenity	SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid
Group the records based on dormid of dorm	GROUP BY T3.dormid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname of student that has lives IN	SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid
Keep the records that dormid of lives in is in the first query result	WHERE T2.dormid IN ( the first query result ) 
Get dormid of dorm that has has amenity and dorm amenity	SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid
Group the records based on dormid of dorm	GROUP BY T3.dormid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname of student that has lives IN	SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid
Keep the records that dormid of lives in is in the first query result	WHERE T2.dormid IN ( the first query result ) 
Get dorm name and student capacity of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Group the records based on dormid of has amenity	GROUP BY T2.dormid
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get dorm name and student capacity of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Group the records based on dormid of has amenity	GROUP BY T2.dormid
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get dorm name of dorm	SELECT dorm_name FROM dorm
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T3.amenity_name = TV Lounge
Get dorm name of dorm	SELECT dorm_name FROM dorm
Get dorm name of dorm that has has amenity and dorm amenity	SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T3.amenity_name = TV Lounge
Get dormid of has amenity that has dorm amenity	SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T4.amenity_name = TV Lounge
Get fname and lname of student that has lives IN	SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid
Keep the records that dormid of lives in is in the first query result	WHERE T2.dormid IN ( the first query result ) 
Get dormid of has amenity that has dorm amenity	SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T4.amenity_name = TV Lounge
Get fname and lname of student that has lives IN	SELECT T1.fname , T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid
Keep the records that dormid of lives in is in the first query result	WHERE T2.dormid IN ( the first query result ) 
Get dormid of has amenity that has dorm amenity	SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T4.amenity_name = TV Lounge
Get fname and age of student that has lives IN	SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid
Keep the records that dormid of lives in is not in the first query result	WHERE T2.dormid NOT IN ( the first query result ) 
Get dormid of has amenity that has dorm amenity	SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid
Keep the records that amenity name of dorm amenity is TV Lounge	WHERE T4.amenity_name = TV Lounge
Get fname and age of student that has lives IN	SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid
Keep the records that dormid of lives in is not in the first query result	WHERE T2.dormid NOT IN ( the first query result ) 
Get amenity name of dorm that has has amenity and dorm amenity and lives in and student	SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid
Keep the records that lname of student is Smith	WHERE T5.lname = Smith
Get amenity name of dorm that has has amenity and dorm amenity and lives in and student	SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid
Keep the records that lname of student is Smith	WHERE T5.lname = Smith
Get the number of customers	SELECT COUNT ( * ) FROM customers
Get the number of customers	SELECT COUNT ( * ) FROM customers
Get email address and phone number of customers	SELECT email_address , phone_number FROM customers
Order these records based on the email address phone number	ORDER BY email_address , phone_number 
Get email address and phone number of customers	SELECT email_address , phone_number FROM customers
Order these records based on the email address phone number	ORDER BY email_address , phone_number 
Get town city of customers	SELECT town_city FROM customers
Keep the records that customer type code is Good Credit Rating	WHERE customer_type_code = Good Credit Rating 
Group the records based on town city	GROUP BY town_city
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get town city of customers	SELECT town_city FROM customers
Keep the records that customer type code is Good Credit Rating	WHERE customer_type_code = Good Credit Rating 
Group the records based on town city	GROUP BY town_city
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get the number and product name of products that has complaints	SELECT t1.product_name , COUNT ( * ) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id
Group the records based on product name of products	GROUP BY t1.product_name
Get the number and product name of products that has complaints	SELECT t1.product_name , COUNT ( * ) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id
Group the records based on product name of products	GROUP BY t1.product_name
Get email address of customers that has complaints	SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer id of customers	GROUP BY t1.customer_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get email address of customers that has complaints	SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
Group the records based on customer id of customers	GROUP BY t1.customer_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get product name of products that has complaints and customers	SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3
Group the records based on customer id of customers	GROUP BY t3.customer_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get product name of products that has complaints and customers	SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3
Group the records based on customer id of customers	GROUP BY t3.customer_id
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get phone number of customers that has complaints	SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
Order these records based on the date complaint raised of complaints and sort them in descending order, and return the top 1 record	ORDER BY t2.date_complaint_raised DESC LIMIT 1
Get phone number of customers that has complaints	SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id
Order these records based on the date complaint raised of complaints and sort them in descending order, and return the top 1 record	ORDER BY t2.date_complaint_raised DESC LIMIT 1
Get customer id of complaints	SELECT customer_id FROM complaints
Get email address and phone number of customers	SELECT email_address , phone_number FROM customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer id of complaints	SELECT customer_id FROM complaints
Get email address and phone number of customers	SELECT email_address , phone_number FROM customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get phone number of customers	SELECT phone_number FROM customers
Get phone number of staff	SELECT phone_number FROM staff
Get phone number of customers	SELECT phone_number FROM customers
Get phone number of staff	SELECT phone_number FROM staff
Get product description of products	SELECT product_description FROM products
Keep the records that product name is Chocolate	WHERE product_name = Chocolate
Get product description of products	SELECT product_description FROM products
Keep the records that product name is Chocolate	WHERE product_name = Chocolate
Get product name and product category code of products	SELECT product_name , product_category_code FROM products
Order these records based on the product price and sort them in descending order, and return the top 1 record	ORDER BY product_price DESC LIMIT 1
Get product name and product category code of products	SELECT product_name , product_category_code FROM products
Order these records based on the product price and sort them in descending order, and return the top 1 record	ORDER BY product_price DESC LIMIT 1
Get product id of complaints	SELECT product_id FROM complaints
Get product price of products	SELECT product_price FROM products
Keep the records that product id is not in the first query result	WHERE product_id NOT IN ( the first query result ) 
Get product id of complaints	SELECT product_id FROM complaints
Get product price of products	SELECT product_price FROM products
Keep the records that product id is not in the first query result	WHERE product_id NOT IN ( the first query result ) 
Get the average value of product price and product category code of products	SELECT AVG ( product_price ) , product_category_code FROM products
Group the records based on product category code	GROUP BY product_category_code
Get the average value of product price and product category code of products	SELECT AVG ( product_price ) , product_category_code FROM products
Group the records based on product category code	GROUP BY product_category_code
Get last name of staff that has complaints and products	SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id
Order these records based on the product price of products, and return the top 1 record	ORDER BY t3.product_price LIMIT 1
Get last name of staff that has complaints and products	SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id
Order these records based on the product price of products, and return the top 1 record	ORDER BY t3.product_price LIMIT 1
Get complaint status code of complaints	SELECT complaint_status_code FROM complaints
Group the records based on the number complaint status code 3 that the number is greater than 3	GROUP BY complaint_status_code HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get complaint status code of complaints	SELECT complaint_status_code FROM complaints
Group the records based on the number complaint status code 3 that the number is greater than 3	GROUP BY complaint_status_code HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get last name of staff	SELECT last_name FROM staff
Keep the records that email address is in the form of %wrau%	WHERE email_address LIKE %wrau%
Get last name of staff	SELECT last_name FROM staff
Keep the records that email address is in the form of %wrau%	WHERE email_address LIKE %wrau%
Get the number of customers	SELECT COUNT ( * ) FROM customers
Group the records based on customer type code	GROUP BY customer_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of customers	SELECT COUNT ( * ) FROM customers
Group the records based on customer type code	GROUP BY customer_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get last name of staff that has complaints	SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
Order these records based on the date complaint raised of complaints, and return the top 1 record	ORDER BY t2.date_complaint_raised LIMIT 1
Get last name of staff that has complaints	SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
Order these records based on the date complaint raised of complaints, and return the top 1 record	ORDER BY t2.date_complaint_raised LIMIT 1
Get the number of distinct complaint type code of complaints	SELECT COUNT ( DISTINCT complaint_type_code ) FROM complaints
Get the number of distinct complaint type code of complaints	SELECT COUNT ( DISTINCT complaint_type_code ) FROM complaints
Get address line 1 and address line 2 of customers	SELECT address_line_1 , address_line_2 FROM customers
Keep the records that email address is vbogisich@example.org	WHERE email_address = vbogisich@example.org
Get address line 1 and address line 2 of customers	SELECT address_line_1 , address_line_2 FROM customers
Keep the records that email address is vbogisich@example.org	WHERE email_address = vbogisich@example.org
Get the number and complaint status code of complaints	SELECT complaint_status_code , COUNT ( * ) FROM complaints
Keep the records that complaint type code is Product Failure	WHERE complaint_type_code = Product Failure 
Group the records based on complaint status code	GROUP BY complaint_status_code
Get the number and complaint status code of complaints	SELECT complaint_status_code , COUNT ( * ) FROM complaints
Keep the records that complaint type code is Product Failure	WHERE complaint_type_code = Product Failure 
Group the records based on complaint status code	GROUP BY complaint_status_code
Get first name of staff that has complaints	SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
Group the records based on staff id of complaints	GROUP BY t2.staff_id
Order these records based on the the number, and return the top 5 records	ORDER BY COUNT ( * ) LIMIT 5
Get first name of staff that has complaints	SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id
Group the records based on staff id of complaints	GROUP BY t2.staff_id
Order these records based on the the number, and return the top 5 records	ORDER BY COUNT ( * ) LIMIT 5
Get state of customers	SELECT state FROM customers
Group the records based on state	GROUP BY state
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get state of customers	SELECT state FROM customers
Group the records based on state	GROUP BY state
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get the number of submission	SELECT COUNT ( * ) FROM submission
Get the number of submission	SELECT COUNT ( * ) FROM submission
Get Author of submission	SELECT Author FROM submission
Order these records based on the Scores and sort them in ascending ORDER	ORDER BY Scores ASC 
Get Author of submission	SELECT Author FROM submission
Order these records based on the Scores and sort them in ascending ORDER	ORDER BY Scores ASC 
Get Author and College of submission	SELECT Author , College FROM submission
Get Author and College of submission	SELECT Author , College FROM submission
Get Author of submission	SELECT Author FROM submission
Keep the records that College is Florida OR College is Temple	WHERE College = Florida OR College = Temple
Get Author of submission	SELECT Author FROM submission
Keep the records that College is Florida OR College is Temple	WHERE College = Florida OR College = Temple
Get the average value of Scores of submission	SELECT AVG ( Scores ) FROM submission
Get the average value of Scores of submission	SELECT AVG ( Scores ) FROM submission
Get Author of submission	SELECT Author FROM submission
Order these records based on the Scores and sort them in descending order, and return the top 1 record	ORDER BY Scores DESC LIMIT 1
Get Author of submission	SELECT Author FROM submission
Order these records based on the Scores and sort them in descending order, and return the top 1 record	ORDER BY Scores DESC LIMIT 1
Get the number and College of submission	SELECT College , COUNT ( * ) FROM submission
Group the records based on College	GROUP BY College
Get the number and College of submission	SELECT College , COUNT ( * ) FROM submission
Group the records based on College	GROUP BY College
Get College of submission	SELECT College FROM submission
Group the records based on College	GROUP BY College
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get College of submission	SELECT College FROM submission
Group the records based on College	GROUP BY College
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get College of submission	SELECT College FROM submission
Keep the records that Scores is greater than 90	WHERE Scores > 90
Get College of submission	SELECT College FROM submission
Keep the records that Scores is less than 80	WHERE Scores < 80
Get College of submission	SELECT College FROM submission
Keep the records that Scores is greater than 90	WHERE Scores > 90
Get College of submission	SELECT College FROM submission
Keep the records that Scores is less than 80	WHERE Scores < 80
Get Author and Result of acceptance that has submission	SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2
Get Author and Result of acceptance that has submission	SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2
Get Result of acceptance that has submission	SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
Order these records based on the Scores of submission and sort them in descending order, and return the top 1 record	ORDER BY T2.Scores DESC LIMIT 1
Get Result of acceptance that has submission	SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
Order these records based on the Scores of submission and sort them in descending order, and return the top 1 record	ORDER BY T2.Scores DESC LIMIT 1
Get the number of distinct workshop id and Author of acceptance that has submission	SELECT T2.Author , COUNT ( DISTINCT T1.workshop_id ) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
Group the records based on Author of submission	GROUP BY T2.Author
Get the number of distinct workshop id and Author of acceptance that has submission	SELECT T2.Author , COUNT ( DISTINCT T1.workshop_id ) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
Group the records based on Author of submission	GROUP BY T2.Author
Get Author of acceptance that has submission	SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
Group the records based on the number of distinct workshop id of acceptance Author of submission 1 that the number of distinct workshop id of acceptance is greater than 1	GROUP BY T2.Author HAVING COUNT ( DISTINCT T1.workshop_id ) > 1 HAVING COUNT ( DISTINCT T1.workshop_id ) > 1
Get Author of acceptance that has submission	SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID
Group the records based on the number of distinct workshop id of acceptance Author of submission 1 that the number of distinct workshop id of acceptance is greater than 1	GROUP BY T2.Author HAVING COUNT ( DISTINCT T1.workshop_id ) > 1 HAVING COUNT ( DISTINCT T1.workshop_id ) > 1
Get Venue of workshop	SELECT DATE , Venue FROM workshop
Order these records based on the Venue	ORDER BY Venue 
Get Venue of workshop	SELECT DATE , Venue FROM workshop
Order these records based on the Venue	ORDER BY Venue 
Get Submission ID of acceptance	SELECT Submission_ID FROM acceptance
Get Author of submission	SELECT Author FROM submission
Keep the records that Submission ID is not in the first query result	WHERE Submission_ID NOT IN ( the first query result ) 
Get Submission ID of acceptance	SELECT Submission_ID FROM acceptance
Get Author of submission	SELECT Author FROM submission
Keep the records that Submission ID is not in the first query result	WHERE Submission_ID NOT IN ( the first query result ) 
Get the number of INVESTORS	SELECT COUNT ( * ) FROM INVESTORS
Get Investor details of INVESTORS	SELECT Investor_details FROM INVESTORS
Get lot details of LOTS	SELECT DISTINCT lot_details FROM LOTS
Get the maximum value of amount of transaction of TRANSACTIONS	SELECT MAX ( amount_of_transaction ) FROM TRANSACTIONS
Get date of transaction and share count of TRANSACTIONS	SELECT date_of_transaction , share_count FROM TRANSACTIONS
Get the SUM of share count of TRANSACTIONS	SELECT SUM ( share_count ) FROM TRANSACTIONS
Get transaction id of TRANSACTIONS	SELECT transaction_id FROM TRANSACTIONS
Keep the records that transaction type code is PUR	WHERE transaction_type_code = PUR
Get date of transaction of TRANSACTIONS	SELECT date_of_transaction FROM TRANSACTIONS
Keep the records that transaction type code is SALE	WHERE transaction_type_code = SALE
Get the average value of amount of transaction of TRANSACTIONS	SELECT AVG ( amount_of_transaction ) FROM TRANSACTIONS
Keep the records that transaction type code is SALE	WHERE transaction_type_code = SALE
Get transaction type description of Ref Transaction Types	SELECT transaction_type_description FROM Ref_Transaction_Types
Keep the records that transaction type code is PUR	WHERE transaction_type_code = PUR
Get the minimum value of amount of transaction of TRANSACTIONS	SELECT MIN ( amount_of_transaction ) FROM TRANSACTIONS
Keep the records that transaction type code is PUR AND share count is greater than 50	WHERE transaction_type_code = PUR AND share_count > 50
Get the maximum value of share count of TRANSACTIONS	SELECT MAX ( share_count ) FROM TRANSACTIONS
Keep the records that amount of transaction is less than 10000	WHERE amount_of_transaction < 10000
Get date of transaction of TRANSACTIONS	SELECT date_of_transaction FROM TRANSACTIONS
Keep the records that share count is greater than 100 OR amount of transaction is greater than 1000	WHERE share_count > 100 OR amount_of_transaction > 1000
Get transaction type description and date of transaction of Ref Transaction Types that has TRANSACTIONS	SELECT T1.transaction_type_description , T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code
Keep the records that share count of TRANSACTIONS is less than 10	WHERE T2.share_count < 10
Get Investor details of INVESTORS that has TRANSACTIONS	SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
Keep the records that share count of TRANSACTIONS is greater than 100	WHERE T2.share_count > 100
Get the number of distinct transaction type code of TRANSACTIONS	SELECT COUNT ( DISTINCT transaction_type_code ) FROM TRANSACTIONS
Get lot details and investor id of LOTS	SELECT lot_details , investor_id FROM LOTS
Get lot details of INVESTORS that has LOTS	SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id
Keep the records that Investor details of INVESTORS is l	WHERE T1.Investor_details = l
Get purchase details of PURCHASES that has TRANSACTIONS	SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id
Keep the records that amount of transaction of TRANSACTIONS is greater than 10000	WHERE T2.amount_of_transaction > 10000
Get SALES details and date of transaction of SALES that has TRANSACTIONS	SELECT T1.sales_details , T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id
Keep the records that amount of transaction of TRANSACTIONS is less than 3000	WHERE T2.amount_of_transaction < 3000
Get lot details of LOTS that has TRANSACTIONS LOTS and TRANSACTIONS	SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id
Keep the records that share count of TRANSACTIONS is less than 50	WHERE T3.share_count < 50
Get lot details of LOTS that has TRANSACTIONS LOTS AND TRANSACTIONS	SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id
Keep the records that share count of TRANSACTIONS is greater than 100 AND transaction type code of TRANSACTIONS is PUR	WHERE T3.share_count > 100 AND T3.transaction_type_code = PUR
Get the average value of amount of transaction and transaction type code of TRANSACTIONS	SELECT transaction_type_code , AVG ( amount_of_transaction ) FROM TRANSACTIONS
Group the records based on transaction type code	GROUP BY transaction_type_code
Get the maximum value of share count and the minimum value of share count and transaction type code of TRANSACTIONS	SELECT transaction_type_code , MAX ( share_count ) , MIN ( share_count ) FROM TRANSACTIONS
Group the records based on transaction type code	GROUP BY transaction_type_code
Get the average value of share count and investor id of TRANSACTIONS	SELECT investor_id , AVG ( share_count ) FROM TRANSACTIONS
Group the records based on investor id	GROUP BY investor_id
Get the average value of share count and investor id of TRANSACTIONS	SELECT investor_id , AVG ( share_count ) FROM TRANSACTIONS
Group the records based on investor id	GROUP BY investor_id
Order these records based on the the average value of share count	ORDER BY AVG ( share_count ) 
Get the average value of amount of transaction and investor id of TRANSACTIONS	SELECT investor_id , AVG ( amount_of_transaction ) FROM TRANSACTIONS
Group the records based on investor id	GROUP BY investor_id
Get the average value of amount of transaction and lot id of TRANSACTIONS that has Transactions Lots	SELECT T2.lot_id , AVG ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id
Group the records based on lot id of Transactions Lots	GROUP BY T2.lot_id
Get the average value of amount of transaction and lot id of TRANSACTIONS that has Transactions Lots	SELECT T2.lot_id , AVG ( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id
Group the records based on lot id of Transactions Lots	GROUP BY T2.lot_id
Order these records based on the the average value of amount of transaction	ORDER BY AVG ( amount_of_transaction ) 
Get the number and investor id of TRANSACTIONS	SELECT investor_id , COUNT ( * ) FROM TRANSACTIONS
Keep the records that transaction type code is SALE	WHERE transaction_type_code = SALE 
Group the records based on investor id	GROUP BY investor_id
Get the number and investor id of TRANSACTIONS	SELECT investor_id , COUNT ( * ) FROM TRANSACTIONS
Group the records based on investor id	GROUP BY investor_id
Get transaction type code of TRANSACTIONS	SELECT transaction_type_code FROM TRANSACTIONS
Group the records based on transaction type code	GROUP BY transaction_type_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get transaction type code of TRANSACTIONS	SELECT transaction_type_code FROM TRANSACTIONS
Group the records based on transaction type code	GROUP BY transaction_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get transaction type description of Ref Transaction Types that has TRANSACTIONS	SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code
Group the records based on transaction type code of Ref Transaction Types	GROUP BY T1.transaction_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get investor id and Investor details of INVESTORS that has TRANSACTIONS	SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
Group the records based on investor id of TRANSACTIONS	GROUP BY T2.investor_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get investor id and Investor details of INVESTORS that has TRANSACTIONS	SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
Group the records based on investor id of TRANSACTIONS	GROUP BY T2.investor_id
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get investor id of INVESTORS that has TRANSACTIONS	SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
Group the records based on the number investor id of TRANSACTIONS 2 that the number is greater than or equal to 2	GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get investor id and Investor details of INVESTORS that has TRANSACTIONS	SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id
Keep the records that transaction type code of TRANSACTIONS is SALE	WHERE T2.transaction_type_code = SALE 
Group the records based on the number investor id of TRANSACTIONS 2 that the number is greater than or equal to 2	GROUP BY T2.investor_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get date of transaction of TRANSACTIONS	SELECT date_of_transaction FROM TRANSACTIONS
Keep the records that share count is greater than OR equal to 100 OR amount of transaction is greater than OR equal to 100	WHERE share_count >= 100 OR amount_of_transaction >= 100
Get sales details of sales	SELECT sales_details FROM sales
Get purchase details of purchases	SELECT purchase_details FROM purchases
Get lot details of Lots	SELECT lot_details FROM Lots
Get lot details of Lots that has transactions Lots	SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2
Get the number of HOTELS	SELECT COUNT ( * ) FROM HOTELS
Get the number of HOTELS	SELECT COUNT ( * ) FROM HOTELS
Get price range of HOTELS	SELECT price_range FROM HOTELS
Get price range of HOTELS	SELECT price_range FROM HOTELS
Get Location Name of LOCATIONS	SELECT DISTINCT Location_Name FROM LOCATIONS
Get Location Name of LOCATIONS	SELECT DISTINCT Location_Name FROM LOCATIONS
Get Name and Other Details of Staff	SELECT Name , Other_Details FROM Staff
Get Name and Other Details of Staff	SELECT Name , Other_Details FROM Staff
Get Tourist Details of VISITORS	SELECT Tourist_Details FROM VISITORS
Get Tourist Details of VISITORS	SELECT Tourist_Details FROM VISITORS
Get price range of HOTELS	SELECT price_range FROM HOTELS
Keep the records that star rating code is 5	WHERE star_rating_code = 5
Get price range of HOTELS	SELECT price_range FROM HOTELS
Keep the records that star rating code is 5	WHERE star_rating_code = 5
Get the average value of price range of HOTELS	SELECT 5G ( price_range ) FROM HOTELS
Keep the records that star rating code is 5 AND pets allowed yn is 1	WHERE star_rating_code = 5 AND pets_allowed_yn = 1
Get the average value of price range of HOTELS	SELECT AVG ( price_range ) FROM HOTELS
Keep the records that star rating code is 5 AND pets allowed yn is 1	WHERE star_rating_code = 5 AND pets_allowed_yn = 1
Get Address of LOCATIONS	SELECT Address FROM LOCATIONS
Keep the records that Location Name is UK Gallery	WHERE Location_Name = UK Gallery
Get Address of LOCATIONS	SELECT Address FROM LOCATIONS
Keep the records that Location Name is UK Gallery	WHERE Location_Name = UK Gallery
Get Other Details of LOCATIONS	SELECT Other_Details FROM LOCATIONS
Keep the records that Location Name is UK Gallery	WHERE Location_Name = UK Gallery
Get Other Details of LOCATIONS	SELECT Other_Details FROM LOCATIONS
Keep the records that Location Name is UK Gallery	WHERE Location_Name = UK Gallery
Get Location Name of LOCATIONS	SELECT Location_Name FROM LOCATIONS
Keep the records that Location Name is in the form of %film%	WHERE Location_Name LIKE %film%
Get Location Name of LOCATIONS	SELECT Location_Name FROM LOCATIONS
Keep the records that Location Name is in the form of %film%	WHERE Location_Name LIKE %film%
Get the number of distinct Name of PHOTOS	SELECT COUNT ( DISTINCT Name ) FROM PHOTOS
Get the number of distinct Name of PHOTOS	SELECT COUNT ( DISTINCT Name ) FROM PHOTOS
Get Visit Date of VISITS	SELECT DISTINCT Visit_Date FROM VISITS
Get Visit Date of VISITS	SELECT DISTINCT Visit_Date FROM VISITS
Get Name of TOURIST ATTRACTIONS	SELECT Name FROM TOURIST_ATTRACTIONS
Keep the records that How to Get There is bus	WHERE How_to_Get_There = bus
Get Name of TOURIST ATTRACTIONS	SELECT Name FROM TOURIST_ATTRACTIONS
Keep the records that How to Get There is bus	WHERE How_to_Get_There = bus
Get Name and Opening Hours of TOURIST ATTRACTIONS	SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS
Keep the records that How to Get There is bus OR How to Get There is walk	WHERE How_to_Get_There = bus OR How_to_Get_There = walk
Get Name and Opening Hours of TOURIST ATTRACTIONS	SELECT Name , Opening_Hours FROM TOURIST_ATTRACTIONS
Keep the records that How to Get There is bus OR How to Get There is walk	WHERE How_to_Get_There = bus OR How_to_Get_There = walk
Get star rating description of HOTELS that has Ref Hotel Star Ratings	SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code
Keep the records that price range of HOTELS is greater than 10000	WHERE T1.price_range > 10000
Get star rating description of HOTELS that has Ref Hotel Star Ratings	SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code
Keep the records that price range of HOTELS is greater than 10000	WHERE T1.price_range > 10000
Get Museum Details and Opening Hours of MUSEUMS that has TOURIST ATTRACTIONS	SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2
Get Museum Details and Opening Hours of MUSEUMS that has TOURIST ATTRACTIONS	SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2
Get Name of PHOTOS that has TOURIST ATTRACTIONS	SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Keep the records that Name of PHOTOS is game1	WHERE T1.Name = game1
Get Name of PHOTOS that has TOURIST ATTRACTIONS	SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Keep the records that Name of PHOTOS is game1	WHERE T1.Name = game1
Get Name and Description of PHOTOS that has TOURIST ATTRACTIONS	SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Keep the records that Name of TOURIST ATTRACTIONS is film festival	WHERE T2.Name = film festival
Get Name and Description of PHOTOS that has TOURIST ATTRACTIONS	SELECT T1.Name , T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Keep the records that Name of TOURIST ATTRACTIONS is film festival	WHERE T2.Name = film festival
Get Royal Family Details and How to Get There of ROYAL FAMILY that has TOURIST ATTRACTIONS	SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2
Get Royal Family Details and How to Get There of ROYAL FAMILY that has TOURIST ATTRACTIONS	SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2
Get Shop Details of SHOPS that has TOURIST ATTRACTIONS	SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID
Keep the records that How to Get There of TOURIST ATTRACTIONS is walk	WHERE T2.How_to_Get_There = walk
Get Shop Details of SHOPS that has TOURIST ATTRACTIONS	SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID
Keep the records that How to Get There of TOURIST ATTRACTIONS is walk	WHERE T2.How_to_Get_There = walk
Get Name of STAFF that has TOURIST ATTRACTIONS	SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Keep the records that Name of TOURIST ATTRACTIONS is US museum	WHERE T2.Name = US museum
Get Name of STAFF that has TOURIST ATTRACTIONS	SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Keep the records that Name of TOURIST ATTRACTIONS is US museum	WHERE T2.Name = US museum
Get Market Details of Street Markets that has TOURIST ATTRACTIONS	SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID
Keep the records that How to Get There of TOURIST ATTRACTIONS is walk OR How to Get There of TOURIST ATTRACTIONS is bus	WHERE T2.How_to_Get_There = walk OR T2.How_to_Get_There = bus
Get Market Details of Street Markets that has TOURIST ATTRACTIONS	SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID
Keep the records that How to Get There of TOURIST ATTRACTIONS is walk OR How to Get There of TOURIST ATTRACTIONS is bus	WHERE T2.How_to_Get_There = walk OR T2.How_to_Get_There = bus
Get Visit Date and Visit Details of VISITORS that has VISITS	SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID
Keep the records that Tourist Details of VISITORS is Vincent	WHERE T1.Tourist_Details = Vincent
Get Visit Date and Visit Details of VISITORS that has VISITS	SELECT T2.Visit_Date , T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID
Keep the records that Tourist Details of VISITORS is Vincent	WHERE T1.Tourist_Details = Vincent
Get Name of Tourist Attractions that has VISITS and VISITORS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID
Keep the records that Tourist Details of VISITORS is Vincent	WHERE T3.Tourist_Details = Vincent
Get Name of Tourist Attractions that has VISITS and VISITORS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID
Keep the records that Tourist Details of VISITORS is Vincent	WHERE T3.Tourist_Details = Vincent
Get Name AND Visit Date of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Vincent OR Tourist Details of VISITORS is Vivian	WHERE T2.Tourist_Details = Vincent OR T2.Tourist_Details = Vivian
Get Name AND Visit Date of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name , T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Vincent OR Tourist Details of VISITORS is Vivian	WHERE T2.Tourist_Details = Vincent OR T2.Tourist_Details = Vivian
Get the average value of price range and star rating code of HOTELS	SELECT star_rating_code , AVG ( price_range ) FROM HOTELS
Group the records based on star rating code	GROUP BY star_rating_code
Get the average value of price range and star rating code of HOTELS	SELECT star_rating_code , AVG ( price_range ) FROM HOTELS
Group the records based on star rating code	GROUP BY star_rating_code
Get the average value of price range and pets allowed yn of HOTELS	SELECT pets_allowed_yn , AVG ( price_range ) FROM HOTELS
Group the records based on pets allowed yn	GROUP BY pets_allowed_yn
Get the average value of price range and pets allowed yn of HOTELS	SELECT pets_allowed_yn , AVG ( price_range ) FROM HOTELS
Group the records based on pets allowed yn	GROUP BY pets_allowed_yn
Get hotel id and star rating code of HOTELS	SELECT hotel_id , star_rating_code FROM HOTELS
Order these records based on the price range and sort them in ascending ORDER	ORDER BY price_range ASC 
Get hotel id and star rating code of HOTELS	SELECT hotel_id , star_rating_code FROM HOTELS
Order these records based on the price range and sort them in ascending ORDER	ORDER BY price_range ASC 
Get other hotel details of HOTELS	SELECT other_hotel_details FROM HOTELS
Order these records based on the price range and sort them in descending order, and return the top 3 records	ORDER BY price_range DESC LIMIT 3
Get other hotel details of HOTELS	SELECT other_hotel_details FROM HOTELS
Order these records based on the price range and sort them in descending order, and return the top 3 records	ORDER BY price_range DESC LIMIT 3
Get other hotel details and star rating code of HOTELS	SELECT other_hotel_details , star_rating_code FROM HOTELS
Order these records based on the price range and sort them in ascending order, and return the top 3 records	ORDER BY price_range ASC LIMIT 3
Get other hotel details and star rating code of HOTELS	SELECT other_hotel_details , star_rating_code FROM HOTELS
Order these records based on the price range and sort them in ascending order, and return the top 3 records	ORDER BY price_range ASC LIMIT 3
Get How to Get There of Tourist Attractions	SELECT How_to_Get_There FROM Tourist_Attractions
Group the records based on How to Get There	GROUP BY How_to_Get_There
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get How to Get There of Tourist Attractions	SELECT How_to_Get_There FROM Tourist_Attractions
Group the records based on How to Get There	GROUP BY How_to_Get_There
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Attraction Type Description and Attraction Type Code of Ref Attraction Types that has Tourist Attractions	SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code
Group the records based on Attraction Type Code of Tourist Attractions	GROUP BY T2.Attraction_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Attraction Type Description and Attraction Type Code of Ref Attraction Types that has Tourist Attractions	SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code
Group the records based on Attraction Type Code of Tourist Attractions	GROUP BY T2.Attraction_Type_Code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and How to Get There of Tourist Attractions	SELECT How_to_Get_There , COUNT ( * ) FROM Tourist_Attractions
Group the records based on How to Get There	GROUP BY How_to_Get_There
Get the number and How to Get There of Tourist Attractions	SELECT How_to_Get_There , COUNT ( * ) FROM Tourist_Attractions
Group the records based on How to Get There	GROUP BY How_to_Get_There
Get the number and Name and Tourist Attraction ID of Tourist Attractions that has VISITS	SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Group the records based on Tourist Attraction ID of VISITS	GROUP BY T2.Tourist_Attraction_ID
Get the number and Name and Tourist Attraction ID of Tourist Attractions that has VISITS	SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT ( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Group the records based on Tourist Attraction ID of VISITS	GROUP BY T2.Tourist_Attraction_ID
Get Name and Tourist Attraction ID of Tourist Attractions that has VISITS	SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Group the records based on the number Tourist Attraction ID of VISITS 2 that the number is greater than or equal to 2	GROUP BY T2.Tourist_Attraction_ID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name and Tourist Attraction ID of Tourist Attractions that has VISITS	SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Group the records based on the number Tourist Attraction ID of VISITS 2 that the number is greater than or equal to 2	GROUP BY T2.Tourist_Attraction_ID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name and Tourist Attraction ID of Tourist Attractions that has VISITS	SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Group the records based on the number Tourist Attraction ID of VISITS 1 that the number is less than or equal to 1	GROUP BY T2.Tourist_Attraction_ID HAVING COUNT ( * ) <= 1 HAVING COUNT ( * ) <= 1
Get Name and Tourist Attraction ID of Tourist Attractions that has VISITS	SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID
Group the records based on the number Tourist Attraction ID of VISITS 1 that the number is less than or equal to 1	GROUP BY T2.Tourist_Attraction_ID HAVING COUNT ( * ) <= 1 HAVING COUNT ( * ) <= 1
Get Name of Locations that has Tourist Attractions	SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
Keep the records that Address of Locations is 660 Shea Crescent OR How to Get There of Tourist Attractions is walk	WHERE T1.Address = 660 Shea Crescent OR T2.How_to_Get_There = walk
Get Name of Locations that has Tourist Attractions	SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
Keep the records that Address of Locations is 660 Shea Crescent OR How to Get There of Tourist Attractions is walk	WHERE T1.Address = 660 Shea Crescent OR T2.How_to_Get_There = walk
Get Name of Tourist Attractions that has Tourist Attraction Features and Features	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
Keep the records that feature Details of Features is park	WHERE T3.feature_Details = park
Get Name of Tourist Attractions that has Tourist Attraction Features and Features	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
Keep the records that feature Details of Features is shopping	WHERE T3.feature_Details = shopping
Get Name of Tourist Attractions that has Tourist Attraction Features and Features	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
Keep the records that feature Details of Features is park	WHERE T3.feature_Details = park
Get Name of Tourist Attractions that has Tourist Attraction Features and Features	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID
Keep the records that feature Details of Features is shopping	WHERE T3.feature_Details = shopping
Get Name of Locations that has Tourist Attractions	SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
Keep the records that Address of Locations is 254 Ottilie Junction OR How to Get There of Tourist Attractions is bus	WHERE T1.Address = 254 Ottilie Junction OR T2.How_to_Get_There = bus
Get Name of Locations that has Tourist Attractions	SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID
Keep the records that Address of Locations is 254 Ottilie Junction OR How to Get There of Tourist Attractions is bus	WHERE T1.Address = 254 Ottilie Junction OR T2.How_to_Get_There = bus
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Vincent	WHERE T2.Tourist_Details = Vincent
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Marcelle	WHERE T2.Tourist_Details = Marcelle
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Vincent	WHERE T2.Tourist_Details = Vincent
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Marcelle	WHERE T2.Tourist_Details = Marcelle
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Alison	WHERE T2.Tourist_Details = Alison
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Rosalind	WHERE T2.Tourist_Details = Rosalind
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Alison	WHERE T2.Tourist_Details = Alison
Get Name of Tourist Attractions that has VISITORS AND VISITS	SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID
Keep the records that Tourist Details of VISITORS is Rosalind	WHERE T2.Tourist_Details = Rosalind
Get Tourist ID of Visits	SELECT Tourist_ID FROM Visits
Get the number of Visitors	SELECT COUNT ( * ) FROM Visitors
Keep the records that Tourist ID is not in the first query result	WHERE Tourist_ID NOT IN ( the first query result ) 
Get Tourist ID of Visits	SELECT Tourist_ID FROM Visits
Get the number of Visitors	SELECT COUNT ( * ) FROM Visitors
Keep the records that Tourist ID is not in the first query result	WHERE Tourist_ID NOT IN ( the first query result ) 
Get the number of Video games	SELECT COUNT ( * ) FROM Video_games
Get the number of Video games	SELECT COUNT ( * ) FROM Video_games
Get the number of distinct gtype of Video games	SELECT COUNT ( DISTINCT gtype ) FROM Video_games
Get the number of distinct gtype of Video games	SELECT COUNT ( DISTINCT gtype ) FROM Video_games
Get gtype of Video games	SELECT DISTINCT gtype FROM Video_games
Get gtype of Video games	SELECT DISTINCT gtype FROM Video_games
Get gname and gtype of Video games	SELECT gname , gtype FROM Video_games
Order these records based on the gname	ORDER BY gname 
Get gname and gtype of Video games	SELECT gname , gtype FROM Video_games
Order these records based on the gname	ORDER BY gname 
Get gname of Video games	SELECT gname FROM Video_games
Keep the records that gtype is Collectible card game	WHERE gtype = Collectible card game
Get gname of Video games	SELECT gname FROM Video_games
Keep the records that gtype is Collectible card game	WHERE gtype = Collectible card game
Get gtype of Video games	SELECT gtype FROM Video_games
Keep the records that gname is Call of Destiny	WHERE gname = Call of Destiny
Get gtype of Video games	SELECT gtype FROM Video_games
Keep the records that gname is Call of Destiny	WHERE gname = Call of Destiny
Get the number of Video games	SELECT COUNT ( * ) FROM Video_games
Keep the records that gtype is Massively multiplayer online game	WHERE gtype = Massively multiplayer online game
Get the number of Video games	SELECT COUNT ( * ) FROM Video_games
Keep the records that gtype is Massively multiplayer online game	WHERE gtype = Massively multiplayer online game
Get the number and gtype of Video games	SELECT gtype , COUNT ( * ) FROM Video_games
Group the records based on gtype	GROUP BY gtype
Get the number and gtype of Video games	SELECT gtype , COUNT ( * ) FROM Video_games
Group the records based on gtype	GROUP BY gtype
Get gtype of Video games	SELECT gtype FROM Video_games
Group the records based on gtype	GROUP BY gtype
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get gtype of Video games	SELECT gtype FROM Video_games
Group the records based on gtype	GROUP BY gtype
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get gtype of Video games	SELECT gtype FROM Video_games
Group the records based on gtype	GROUP BY gtype
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get gtype of Video games	SELECT gtype FROM Video_games
Group the records based on gtype	GROUP BY gtype
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get StuID of Student	SELECT StuID FROM Student
Keep the records that city code is CHI	WHERE city_code = CHI
Get StuID of Student	SELECT StuID FROM Student
Keep the records that city code is CHI	WHERE city_code = CHI
Get StuID of Student	SELECT StuID FROM Student
Keep the records that Advisor is 1121	WHERE Advisor = 1121
Get StuID of Student	SELECT StuID FROM Student
Keep the records that Advisor is 1121	WHERE Advisor = 1121
Get Fname of Student	SELECT Fname FROM Student
Keep the records that Major is 600	WHERE Major = 600
Get Fname of Student	SELECT Fname FROM Student
Keep the records that Major is 600	WHERE Major = 600
Get the average value of age and the minimum value of age and the maximum value of age and major of Student	SELECT major , AVG ( age ) , MIN ( age ) , MAX ( age ) FROM Student
Group the records based on major	GROUP BY major
Get the average value of age and the minimum value of age and the maximum value of age and major of Student	SELECT major , AVG ( age ) , MIN ( age ) , MAX ( age ) FROM Student
Group the records based on major	GROUP BY major
Get advisor of Student	SELECT advisor FROM Student
Group the records based on the number advisor 2 that the number is greater than or equal to 2	GROUP BY advisor HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get advisor of Student	SELECT advisor FROM Student
Group the records based on the number advisor 2 that the number is greater than or equal to 2	GROUP BY advisor HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number of distinct sportname of Sportsinfo	SELECT COUNT ( DISTINCT sportname ) FROM Sportsinfo
Get the number of distinct sportname of Sportsinfo	SELECT COUNT ( DISTINCT sportname ) FROM Sportsinfo
Get the number of distinct StuID of Sportsinfo	SELECT COUNT ( DISTINCT StuID ) FROM Sportsinfo
Get the number of distinct StuID of Sportsinfo	SELECT COUNT ( DISTINCT StuID ) FROM Sportsinfo
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that onscholarship is Y	WHERE onscholarship = Y
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that onscholarship is Y	WHERE onscholarship = Y
Get Lname of Sportsinfo that has Student	SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that onscholarship of Sportsinfo is Y	WHERE T1.onscholarship = Y
Get Lname of Sportsinfo that has Student	SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that onscholarship of Sportsinfo is Y	WHERE T1.onscholarship = Y
Get the SUM of gamesplayed of Sportsinfo	SELECT SUM ( gamesplayed ) FROM Sportsinfo
Get the SUM of gamesplayed of Sportsinfo	SELECT SUM ( gamesplayed ) FROM Sportsinfo
Get the SUM of gamesplayed of Sportsinfo	SELECT SUM ( gamesplayed ) FROM Sportsinfo
Keep the records that sportname is Football AND onscholarship is Y	WHERE sportname = Football AND onscholarship = Y
Get the SUM of gamesplayed of Sportsinfo	SELECT SUM ( gamesplayed ) FROM Sportsinfo
Keep the records that sportname is Football AND onscholarship is Y	WHERE sportname = Football AND onscholarship = Y
Get the number and sportname of Sportsinfo	SELECT sportname , COUNT ( * ) FROM Sportsinfo
Group the records based on sportname	GROUP BY sportname
Get the number and sportname of Sportsinfo	SELECT sportname , COUNT ( * ) FROM Sportsinfo
Group the records based on sportname	GROUP BY sportname
Get the number and the SUM of gamesplayed and StuID of Sportsinfo	SELECT StuID , COUNT ( * ) , SUM ( gamesplayed ) FROM Sportsinfo
Group the records based on StuID	GROUP BY StuID
Get the number and the SUM of gamesplayed and StuID of Sportsinfo	SELECT StuID , COUNT ( * ) , SUM ( gamesplayed ) FROM Sportsinfo
Group the records based on StuID	GROUP BY StuID
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Group the records based on the SUM of hoursperweek StuID 10 that the SUM of hoursperweek is greater than 10	GROUP BY StuID HAVING SUM ( hoursperweek ) > 10 HAVING SUM ( hoursperweek ) > 10
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Group the records based on the SUM of hoursperweek StuID 10 that the SUM of hoursperweek is greater than 10	GROUP BY StuID HAVING SUM ( hoursperweek ) > 10 HAVING SUM ( hoursperweek ) > 10
Get Fname and Lname of Sportsinfo that has Student	SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Group the records based on StuID of Sportsinfo	GROUP BY T1.StuID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Fname and Lname of Sportsinfo that has Student	SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Group the records based on StuID of Sportsinfo	GROUP BY T1.StuID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get sportname of Sportsinfo	SELECT sportname FROM Sportsinfo
Keep the records that onscholarship is Y	WHERE onscholarship = Y 
Group the records based on sportname	GROUP BY sportname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get sportname of Sportsinfo	SELECT sportname FROM Sportsinfo
Keep the records that onscholarship is Y	WHERE onscholarship = Y 
Group the records based on sportname	GROUP BY sportname
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Get StuID of Student	SELECT StuID FROM Student
Keep the records that major is 600	WHERE major = 600
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that onscholarship is Y	WHERE onscholarship = Y
Get StuID of Student	SELECT StuID FROM Student
Keep the records that major is 600	WHERE major = 600
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that onscholarship is Y	WHERE onscholarship = Y
Get StuID of Student	SELECT StuID FROM Student
Keep the records that sex is F	WHERE sex = F
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that sportname is Football	WHERE sportname = Football
Get StuID of Student	SELECT StuID FROM Student
Keep the records that sex is F	WHERE sex = F
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that sportname is Football	WHERE sportname = Football
Get StuID of Student	SELECT StuID FROM Student
Keep the records that sex is M	WHERE sex = M
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that sportname is Football	WHERE sportname = Football
Get StuID of Student	SELECT StuID FROM Student
Keep the records that sex is M	WHERE sex = M
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that sportname is Football	WHERE sportname = Football
Get the SUM of hoursperweek AND the SUM of gamesplayed of Sportsinfo that has Student	SELECT SUM ( hoursperweek ) , SUM ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that Fname of Student is David AND Lname of Student is Shieber	WHERE T2.Fname = David AND T2.Lname = Shieber
Get the SUM of hoursperweek AND the SUM of gamesplayed of Sportsinfo that has Student	SELECT SUM ( hoursperweek ) , SUM ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that Fname of Student is David AND Lname of Student is Shieber	WHERE T2.Fname = David AND T2.Lname = Shieber
Get the SUM of hoursperweek and the SUM of gamesplayed of Sportsinfo that has Student	SELECT SUM ( hoursperweek ) , SUM ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that age of Student is less than 20	WHERE T2.age < 20
Get the SUM of hoursperweek and the SUM of gamesplayed of Sportsinfo that has Student	SELECT SUM ( hoursperweek ) , SUM ( gamesplayed ) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that age of Student is less than 20	WHERE T2.age < 20
Get the number of distinct StuID of Plays games	SELECT COUNT ( DISTINCT StuID ) FROM Plays_games
Get the number of distinct StuID of Plays games	SELECT COUNT ( DISTINCT StuID ) FROM Plays_games
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Plays games	SELECT StuID FROM Plays_games
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Plays games	SELECT StuID FROM Plays_games
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Get StuID of Plays games	SELECT StuID FROM Plays_games
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Get StuID of Plays games	SELECT StuID FROM Plays_games
Get the SUM of hours played and gameid of Plays games	SELECT gameid , SUM ( hours_played ) FROM Plays_games
Group the records based on gameid	GROUP BY gameid
Get the SUM of hours played and gameid of Plays games	SELECT gameid , SUM ( hours_played ) FROM Plays_games
Group the records based on gameid	GROUP BY gameid
Get the SUM of hours played and Stuid of Plays games	SELECT Stuid , SUM ( hours_played ) FROM Plays_games
Group the records based on Stuid	GROUP BY Stuid
Get the SUM of hours played and Stuid of Plays games	SELECT Stuid , SUM ( hours_played ) FROM Plays_games
Group the records based on Stuid	GROUP BY Stuid
Get gname of Plays games that has Video games	SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid
Group the records based on gameid of Plays games	GROUP BY T1.gameid
Order these records based on the the SUM of hours played and sort them in descending order, and return the top 1 record	ORDER BY SUM ( hours_played ) DESC LIMIT 1
Get gname of Plays games that has Video games	SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid
Group the records based on gameid of Plays games	GROUP BY T1.gameid
Order these records based on the the SUM of hours played and sort them in descending order, and return the top 1 record	ORDER BY SUM ( hours_played ) DESC LIMIT 1
Get gname of Plays games that has Video games	SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid
Group the records based on the SUM of hours played gameid of Plays games 1000 that the SUM of hours played is greater than or equal to 1000	GROUP BY T1.gameid HAVING SUM ( hours_played ) >= 1000 HAVING SUM ( hours_played ) >= 1000
Get gname of Plays games that has Video games	SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid
Group the records based on the SUM of hours played gameid of Plays games 1000 that the SUM of hours played is greater than or equal to 1000	GROUP BY T1.gameid HAVING SUM ( hours_played ) >= 1000 HAVING SUM ( hours_played ) >= 1000
Get Gname of Plays games that has Video games AND Student	SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid
Keep the records that Lname of Student is Smith AND Fname of Student is Linda	WHERE T3.Lname = Smith AND T3.Fname = Linda
Get Gname of Plays games that has Video games AND Student	SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid
Keep the records that Lname of Student is Smith AND Fname of Student is Linda	WHERE T3.Lname = Smith AND T3.Fname = Linda
Get lname and fname of SportsInfo that has Student	SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that SportName of SportsInfo is Football OR SportName of SportsInfo is Lacrosse	WHERE T1.SportName = Football OR T1.SportName = Lacrosse
Get lname and fname of SportsInfo that has Student	SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID
Keep the records that SportName of SportsInfo is Football OR SportName of SportsInfo is Lacrosse	WHERE T1.SportName = Football OR T1.SportName = Lacrosse
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that SportName is Football	WHERE SportName = Football
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that SportName is Lacrosse	WHERE SportName = Lacrosse
Get fname and age of Student	SELECT fname , age FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that SportName is Football	WHERE SportName = Football
Get StuID of Sportsinfo	SELECT StuID FROM Sportsinfo
Keep the records that SportName is Lacrosse	WHERE SportName = Lacrosse
Get fname and age of Student	SELECT fname , age FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Plays games that has Video games	SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID
Keep the records that Gname of Video games is Call of Destiny	WHERE T2.Gname = Call of Destiny
Get StuID of Plays games that has Video games	SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID
Keep the records that Gname of Video games is Works of Widenius	WHERE T2.Gname = Works of Widenius
Get lname and sex of Student	SELECT lname , sex FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get StuID of Plays games that has Video games	SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID
Keep the records that Gname of Video games is Call of Destiny	WHERE T2.Gname = Call of Destiny
Get StuID of Plays games that has Video games	SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID
Keep the records that Gname of Video games is Works of Widenius	WHERE T2.Gname = Works of Widenius
Get lname and sex of Student	SELECT lname , sex FROM Student
Keep the records that StuID is in the third query result	WHERE StuID IN ( the third query result ) 
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers	SELECT customer_name FROM customers
Get the number of customers	SELECT COUNT ( * ) FROM customers
Get the number of customers	SELECT COUNT ( * ) FROM customers
Get the average value of order quantity of order items	SELECT AVG ( order_quantity ) FROM order_items
Get the average value of order quantity of order items	SELECT AVG ( order_quantity ) FROM order_items
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that payment method is Cash	WHERE payment_method = Cash
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that payment method is Cash	WHERE payment_method = Cash
Get date became customer of customers	SELECT date_became_customer FROM customers
Keep the records that customer id is between 1 X20	WHERE customer_id BETWEEN 10 AND 20
Get date became customer of customers	SELECT date_became_customer FROM customers
Keep the records that customer id is between 1 X20	WHERE customer_id BETWEEN 10 AND 20
Get payment method of customers	SELECT payment_method FROM customers
Group the records based on payment method	GROUP BY payment_method
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get payment method of customers	SELECT payment_method FROM customers
Group the records based on payment method	GROUP BY payment_method
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get payment method of customers	SELECT payment_method FROM customers
Group the records based on payment method	GROUP BY payment_method
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that payment method is the first query result	WHERE payment_method = ( the first query result ) 
Get payment method of customers	SELECT payment_method FROM customers
Group the records based on payment method	GROUP BY payment_method
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that payment method is the first query result	WHERE payment_method = ( the first query result ) 
Get payment method of customers	SELECT DISTINCT payment_method FROM customers
Get payment method of customers	SELECT DISTINCT payment_method FROM customers
Get product details of products	SELECT DISTINCT product_details FROM products
Get product details of products	SELECT DISTINCT product_details FROM products
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that customer name is in the form of %Alex%	WHERE customer_name LIKE %Alex%
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that customer name is in the form of %Alex%	WHERE customer_name LIKE %Alex%
Get product details of products	SELECT product_details FROM products
Keep the records that product details is in the form of %Latte% OR product details is in the form of %Americano%	WHERE product_details LIKE %Latte% OR product_details LIKE %Americano%
Get product details of products	SELECT product_details FROM products
Keep the records that product details is in the form of %Latte% OR product details is in the form of %Americano%	WHERE product_details LIKE %Latte% OR product_details LIKE %Americano%
Get address content of customers that has customer addresses and addresses	SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that customer name of customers is Maudie Kertzmann	WHERE t1.customer_name = Maudie Kertzmann
Get address content of customers that has customer addresses and addresses	SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that customer name of customers is Maudie Kertzmann	WHERE t1.customer_name = Maudie Kertzmann
Get the number of customers that has customer addresses and addresses	SELECT COUNT ( * ) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that city of addresses is Lake Geovannyton	WHERE t3.city = Lake Geovannyton
Get the number of customers that has customer addresses and addresses	SELECT COUNT ( * ) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that city of addresses is Lake Geovannyton	WHERE t3.city = Lake Geovannyton
Get customer name of customers that has customer addresses and addresses	SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that state province county of addresses is Colorado	WHERE t3.state_province_county = Colorado
Get customer name of customers that has customer addresses and addresses	SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Keep the records that state province county of addresses is Colorado	WHERE t3.state_province_county = Colorado
Get city of customers that has customer addresses and addresses	SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3
Get city of addresses	SELECT city FROM addresses
Keep the records that city is not in the first query result	WHERE city NOT IN ( the first query result ) 
Get city of customers that has customer addresses and addresses	SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3
Get city of addresses	SELECT city FROM addresses
Keep the records that city is not in the first query result	WHERE city NOT IN ( the first query result ) 
Get city of customers that has customer addresses and addresses	SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Group the records based on city of addresses	GROUP BY t3.city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city of customers that has customer addresses and addresses	SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id
Group the records based on city of addresses	GROUP BY t3.city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city of addresses	SELECT DISTINCT city FROM addresses
Get city of addresses	SELECT DISTINCT city FROM addresses
Get city of addresses	SELECT city FROM addresses
Keep the records that zip postcode is 255	WHERE zip_postcode = 255
Get city of addresses	SELECT city FROM addresses
Keep the records that zip postcode is 255	WHERE zip_postcode = 255
Get state province county and country of addresses	SELECT state_province_county , country FROM addresses
Keep the records that zip postcode is in the form of 4%	WHERE zip_postcode LIKE 4%
Get state province county and country of addresses	SELECT state_province_county , country FROM addresses
Keep the records that zip postcode is in the form of 4%	WHERE zip_postcode LIKE 4%
Get country of addresses	SELECT country FROM addresses
Group the records based on the number of address id country 4 that the number of address id is greater than 4	GROUP BY country HAVING COUNT ( address_id ) > 4 HAVING COUNT ( address_id ) > 4
Get country of addresses	SELECT country FROM addresses
Group the records based on the number of address id country 4 that the number of address id is greater than 4	GROUP BY country HAVING COUNT ( address_id ) > 4 HAVING COUNT ( address_id ) > 4
Get channel code of customer contact channels	SELECT channel_code FROM customer_contact_channels
Group the records based on the number of customer id channel code 5 that the number of customer id is less than 5	GROUP BY channel_code HAVING COUNT ( customer_id ) < 5 HAVING COUNT ( customer_id ) < 5
Get channel code of customer contact channels	SELECT channel_code FROM customer_contact_channels
Group the records based on the number of customer id channel code 5 that the number of customer id is less than 5	GROUP BY channel_code HAVING COUNT ( customer_id ) < 5 HAVING COUNT ( customer_id ) < 5
Get channel code of customers that has customer contact channels	SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is Tillman Ernser	WHERE t1.customer_name = Tillman Ernser
Get channel code of customers that has customer contact channels	SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is Tillman Ernser	WHERE t1.customer_name = Tillman Ernser
Get the maximum value of active to date of customers that has customer contact channels	SELECT MAX ( t2.active_to_date ) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is Tillman Ernser	WHERE t1.customer_name = Tillman Ernser
Get the maximum value of active to date of customers that has customer contact channels	SELECT MAX ( t2.active_to_date ) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
Keep the records that customer name of customers is Tillman Ernser	WHERE t1.customer_name = Tillman Ernser
Get the average value of active to date - active FROM date of customer contact channels	SELECT AVG ( active_to_date - active_from_date ) FROM customer_contact_channels
Get the average value of active to date - active FROM date of customer contact channels	SELECT AVG ( active_to_date - active_from_date ) FROM customer_contact_channels
Get active to date and active FROM date of customer contact channels	SELECT active_to_date - active_from_date FROM customer_contact_channels
Order these records based on the active to date - active FROM date and sort them in descending order, and return the top 1 record	ORDER BY ( active_to_date - active_from_date ) DESC LIMIT 1
Get channel code and contact number of customer contact channels	SELECT channel_code , contact_number FROM customer_contact_channels
Keep the records that active to date active FROM date is the first query result	WHERE active_to_date - active_from_date = ( the first query result ) 
Get active to date and active FROM date of customer contact channels	SELECT active_to_date - active_from_date FROM customer_contact_channels
Order these records based on the active to date - active FROM date and sort them in descending order, and return the top 1 record	ORDER BY ( active_to_date - active_from_date ) DESC LIMIT 1
Get channel code and contact number of customer contact channels	SELECT channel_code , contact_number FROM customer_contact_channels
Keep the records that active to date active FROM date is the first query result	WHERE active_to_date - active_from_date = ( the first query result ) 
Get customer name and active FROM date of customers that has customer contact channels	SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
Keep the records that channel code of customer contact channels is Email	WHERE t2.channel_code = Email
Get customer name and active FROM date of customers that has customer contact channels	SELECT t1.customer_name , t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id
Keep the records that channel code of customer contact channels is Email	WHERE t2.channel_code = Email
Get the maximum value of order quantity of order items	SELECT MAX ( order_quantity ) FROM order_items
Get customer name of customers that has customer orders and order items	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Keep the records that order quantity of order items is the first query result	WHERE t3.order_quantity = ( the first query result ) 
Get the maximum value of order quantity of order items	SELECT MAX ( order_quantity ) FROM order_items
Get customer name of customers that has customer orders and order items	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Keep the records that order quantity of order items is the first query result	WHERE t3.order_quantity = ( the first query result ) 
Get customer name of customers that has customer orders and ORDER items	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the SUM of ORDER quantity of ORDER items and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1
Get customer name of customers that has customer orders and ORDER items	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the SUM of ORDER quantity of ORDER items and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t3.order_quantity ) DESC LIMIT 1
Get payment method of customers that has customer orders and ORDER items	SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the SUM of ORDER quantity of ORDER items, and return the top 1 record	ORDER BY SUM ( t3.order_quantity ) LIMIT 1
Get payment method of customers that has customer orders and ORDER items	SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Group the records based on customer name of customers	GROUP BY t1.customer_name
Order these records based on the the SUM of ORDER quantity of ORDER items, and return the top 1 record	ORDER BY SUM ( t3.order_quantity ) LIMIT 1
Get the number of distinct product id of customers that has customer orders and order items	SELECT COUNT ( DISTINCT t3.product_id ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Keep the records that customer name of customers is Rodrick Heaney	WHERE t1.customer_name = Rodrick Heaney
Get the number of distinct product id of customers that has customer orders and order items	SELECT COUNT ( DISTINCT t3.product_id ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Keep the records that customer name of customers is Rodrick Heaney	WHERE t1.customer_name = Rodrick Heaney
Get the SUM of order quantity of customers that has customer orders and order items	SELECT SUM ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Keep the records that customer name of customers is Rodrick Heaney	WHERE t1.customer_name = Rodrick Heaney
Get the SUM of order quantity of customers that has customer orders and order items	SELECT SUM ( t3.order_quantity ) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id
Keep the records that customer name of customers is Rodrick Heaney	WHERE t1.customer_name = Rodrick Heaney
Get the number of distinct customer id of customer orders	SELECT COUNT ( DISTINCT customer_id ) FROM customer_orders
Keep the records that order status is Cancelled	WHERE order_status = Cancelled
Get the number of distinct customer id of customer orders	SELECT COUNT ( DISTINCT customer_id ) FROM customer_orders
Keep the records that order status is Cancelled	WHERE order_status = Cancelled
Get the number of customer orders	SELECT COUNT ( * ) FROM customer_orders
Keep the records that order details is Second time	WHERE order_details = Second time
Get the number of customer orders	SELECT COUNT ( * ) FROM customer_orders
Keep the records that order details is Second time	WHERE order_details = Second time
Get customer name and order date of customers that has customer orders	SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
Keep the records that order status is Delivered	WHERE order_status = Delivered
Get customer name and order date of customers that has customer orders	SELECT t1.customer_name , t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
Keep the records that order status is Delivered	WHERE order_status = Delivered
Get the SUM of order quantity of customer orders that has order items	SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id
Keep the records that order status of customer orders is Cancelled	WHERE t1.order_status = Cancelled
Get the SUM of order quantity of customer orders that has order items	SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id
Keep the records that order status of customer orders is Cancelled	WHERE t1.order_status = Cancelled
Get the SUM of order quantity of customer orders that has order items	SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id
Keep the records that order date of customer orders is less than 2018-03-17 07:13:53	WHERE t1.order_date < 2018-03-17 07:13:53
Get the SUM of order quantity of customer orders that has order items	SELECT SUM ( t2.order_quantity ) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id
Keep the records that order date of customer orders is less than 2018-03-17 07:13:53	WHERE t1.order_date < 2018-03-17 07:13:53
Get customer name of customers that has customer orders	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
Order these records based on the ORDER date of customer orders and sort them in descending order, and return the top 1 record	ORDER BY t2.order_date DESC LIMIT 1
Get customer name of customers that has customer orders	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id
Order these records based on the ORDER date of customer orders and sort them in descending order, and return the top 1 record	ORDER BY t2.order_date DESC LIMIT 1
Get product details of ORDER items that has products	SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id
Group the records based on product id of ORDER items	GROUP BY t1.product_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product details of ORDER items that has products	SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id
Group the records based on product id of ORDER items	GROUP BY t1.product_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get product details and product id of ORDER items that has products	SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id
Group the records based on product id of ORDER items	GROUP BY t1.product_id
Order these records based on the the SUM of ORDER quantity of ORDER items, and return the top 1 record	ORDER BY SUM ( t1.order_quantity ) LIMIT 1
Get product details and product id of ORDER items that has products	SELECT t2.product_details , t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id
Group the records based on product id of ORDER items	GROUP BY t1.product_id
Order these records based on the the SUM of ORDER quantity of ORDER items, and return the top 1 record	ORDER BY SUM ( t1.order_quantity ) LIMIT 1
Get address content of addresses	SELECT address_content FROM addresses
Keep the records that city is East Julianaside AND state province county is Texas	WHERE city = East Julianaside AND state_province_county = Texas
Get address content of addresses	SELECT address_content FROM addresses
Keep the records that city is Gleasonmouth AND state province county is Arizona	WHERE city = Gleasonmouth AND state_province_county = Arizona
Get address content of addresses	SELECT address_content FROM addresses
Keep the records that city is East Julianaside AND state province county is Texas	WHERE city = East Julianaside AND state_province_county = Texas
Get address content of addresses	SELECT address_content FROM addresses
Keep the records that city is Gleasonmouth AND state province county is Arizona	WHERE city = Gleasonmouth AND state_province_county = Arizona
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that payment method is not Cash	WHERE payment_method != Cash
Get customer name of customers	SELECT customer_name FROM customers
Keep the records that payment method is not Cash	WHERE payment_method != Cash
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has customer orders and order items and products	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id
Keep the records that product details of products is Latte	WHERE t4.product_details = Latte
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has customer orders and order items and products	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id
Keep the records that product details of products is Latte	WHERE t4.product_details = Latte
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has customer orders	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2
Get customer name of customers	SELECT customer_name FROM customers
Get customer name of customers that has customer orders	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2
Get customer name of customers that has customer orders and order items and products	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id
Keep the records that product details of products is Latte	WHERE t4.product_details = Latte
Get customer name of customers that has customer orders and order items and products	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id
Keep the records that product details of products is Americano	WHERE t4.product_details = Americano
Get customer name of customers that has customer orders and order items and products	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id
Keep the records that product details of products is Latte	WHERE t4.product_details = Latte
Get customer name of customers that has customer orders and order items and products	SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id
Keep the records that product details of products is Americano	WHERE t4.product_details = Americano
Get the number of artist	SELECT COUNT ( * ) FROM artist
Get the number of artist	SELECT COUNT ( * ) FROM artist
Get Age of artist	SELECT Age FROM artist
Get Age of artist	SELECT Age FROM artist
Get the average value of Age of artist	SELECT AVG ( Age ) FROM artist
Get the average value of Age of artist	SELECT AVG ( Age ) FROM artist
Get Famous Title of Artist	SELECT Famous_Title FROM artist
Keep the records that Artist is Triumfall	WHERE Artist = Triumfall
Get Famous Title of Artist	SELECT Famous_Title FROM artist
Keep the records that Artist is Triumfall	WHERE Artist = Triumfall
Get Famous Release date of artist	SELECT DISTINCT ( Famous_Release_date ) FROM artist
Get Famous Release date of artist	SELECT DISTINCT ( Famous_Release_date ) FROM artist
Get Date of ceremony of music festival	SELECT Date_of_ceremony , RESULT FROM music_festival
Get Date of ceremony of music festival	SELECT Date_of_ceremony , RESULT FROM music_festival
Get Category of music festival	SELECT Category FROM music_festival
Keep the records that is Awarded	WHERE RESULT = Awarded
Get Category of music festival	SELECT Category FROM music_festival
Keep the records that is Awarded	WHERE RESULT = Awarded
Get the maximum value of Weeks on Top and the minimum value of Weeks on Top of volume	SELECT MAX ( Weeks_on_Top ) , MIN ( Weeks_on_Top ) FROM volume
Get the maximum value of Weeks on Top and the minimum value of Weeks on Top of volume	SELECT MAX ( Weeks_on_Top ) , MIN ( Weeks_on_Top ) FROM volume
Get Song of volume	SELECT Song FROM volume
Keep the records that Weeks on Top is greater than 1	WHERE Weeks_on_Top > 1
Get Song of volume	SELECT Song FROM volume
Keep the records that Weeks on Top is greater than 1	WHERE Weeks_on_Top > 1
Get Song of volume	SELECT Song FROM volume
Order these records based on the Song	ORDER BY Song 
Get Song of volume	SELECT Song FROM volume
Order these records based on the Song	ORDER BY Song 
Get the number of distinct Artist ID of volume	SELECT COUNT ( DISTINCT Artist_ID ) FROM volume
Get the number of distinct Artist ID of volume	SELECT COUNT ( DISTINCT Artist_ID ) FROM volume
Get Date of ceremony of music festival that has volume	SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
Keep the records that Weeks on Top of volume is greater than 2	WHERE T2.Weeks_on_Top > 2
Get Date of ceremony of music festival that has volume	SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
Keep the records that Weeks on Top of volume is greater than 2	WHERE T2.Weeks_on_Top > 2
Get Song of music festival that has volume	SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
Keep the records that Result of music festival is Nominated	WHERE T1.Result = Nominated
Get Song of music festival that has volume	SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID
Keep the records that Result of music festival is Nominated	WHERE T1.Result = Nominated
Get Issue Date of artist that has volume	SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Artist of artist is Gorgoroth	WHERE T1.Artist = Gorgoroth
Get Issue Date of artist that has volume	SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Artist of artist is Gorgoroth	WHERE T1.Artist = Gorgoroth
Get Song of artist that has volume	SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that age of artist is greater than or equal to 32	WHERE T1.age >= 32
Get Song of artist that has volume	SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that age of artist is greater than or equal to 32	WHERE T1.age >= 32
Get the average value of Weeks on Top of artist that has volume	SELECT AVG ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that age of artist is less than or equal to 25	WHERE T1.age <= 25
Get the average value of Weeks on Top of artist that has volume	SELECT AVG ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that age of artist is less than or equal to 25	WHERE T1.age <= 25
Get Famous Title of artist that has volume	SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Weeks on Top of volume is greater than 2	WHERE T2.Weeks_on_Top > 2
Get Famous Title of artist that has volume	SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Weeks on Top of volume is greater than 2	WHERE T2.Weeks_on_Top > 2
Get Famous Title and Age of artist	SELECT Famous_Title , Age FROM artist
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get Famous Title and Age of artist	SELECT Famous_Title , Age FROM artist
Order these records based on the Age and sort them in descending ORDER	ORDER BY Age DESC 
Get Famous Release date of artist	SELECT Famous_Release_date FROM artist
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get Famous Release date of artist	SELECT Famous_Release_date FROM artist
Order these records based on the Age and sort them in descending order, and return the top 1 record	ORDER BY Age DESC LIMIT 1
Get the number and Category of music festival	SELECT Category , COUNT ( * ) FROM music_festival
Group the records based on Category	GROUP BY Category
Get the number and Category of music festival	SELECT Category , COUNT ( * ) FROM music_festival
Group the records based on Category	GROUP BY Category
Get of music festival	SELECT RESULT FROM music_festival
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of music festival	SELECT RESULT FROM music_festival
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Category of music festival	SELECT Category FROM music_festival
Group the records based on the number Category 1 that the number is greater than 1	GROUP BY Category HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Category of music festival	SELECT Category FROM music_festival
Group the records based on the number Category 1 that the number is greater than 1	GROUP BY Category HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Song of volume	SELECT Song FROM volume
Order these records based on the Weeks on Top and sort them in descending order, and return the top 1 record	ORDER BY Weeks_on_Top DESC LIMIT 1
Get Song of volume	SELECT Song FROM volume
Order these records based on the Weeks on Top and sort them in descending order, and return the top 1 record	ORDER BY Weeks_on_Top DESC LIMIT 1
Get Artist ID of volume	SELECT Artist_ID FROM volume
Get Famous Title of artist	SELECT Famous_Title FROM artist
Keep the records that Artist ID is not in the first query result	WHERE Artist_ID NOT IN ( the first query result ) 
Get Artist ID of volume	SELECT Artist_ID FROM volume
Get Famous Title of artist	SELECT Famous_Title FROM artist
Keep the records that Artist ID is not in the first query result	WHERE Artist_ID NOT IN ( the first query result ) 
Get Famous Title of artist that has volume	SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Weeks on Top of volume is greater than 2	WHERE T2.Weeks_on_Top > 2
Get Famous Title of artist that has volume	SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Weeks on Top of volume is less than 2	WHERE T2.Weeks_on_Top < 2
Get Famous Title of artist that has volume	SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Weeks on Top of volume is greater than 2	WHERE T2.Weeks_on_Top > 2
Get Famous Title of artist that has volume	SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that Weeks on Top of volume is less than 2	WHERE T2.Weeks_on_Top < 2
Get Date of ceremony of music festival	SELECT Date_of_ceremony FROM music_festival
Keep the records that Category is Best Song AND is Awarded	WHERE Category = Best Song AND RESULT = Awarded
Get Date of ceremony of music festival	SELECT Date_of_ceremony FROM music_festival
Keep the records that Category is Best Song AND is Awarded	WHERE Category = Best Song AND RESULT = Awarded
Get Issue Date of volume	SELECT Issue_Date FROM volume
Order these records based on the Weeks on Top and sort them in ascending order, and return the top 1 record	ORDER BY Weeks_on_Top ASC LIMIT 1
Get Issue Date of volume	SELECT Issue_Date FROM volume
Order these records based on the Weeks on Top and sort them in ascending order, and return the top 1 record	ORDER BY Weeks_on_Top ASC LIMIT 1
Get the number of distinct Artist ID of volume	SELECT COUNT ( DISTINCT Artist_ID ) FROM volume
Get the number of distinct Artist ID of volume	SELECT COUNT ( DISTINCT Artist_ID ) FROM volume
Get the number of music festival	SELECT RESULT , COUNT ( * ) FROM music_festival
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number of music festival	SELECT RESULT , COUNT ( * ) FROM music_festival
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get Issue Date of artist that has volume	SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that age of artist is less than or equal to 23	WHERE T1.age <= 23
Get Issue Date of artist that has volume	SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID
Keep the records that age of artist is less than or equal to 23	WHERE T1.age <= 23
Get the number of roller coaster	SELECT COUNT ( * ) FROM roller_coaster
Get Name of roller coaster	SELECT Name FROM roller_coaster
Order these records based on the and sort them in ascending ORDER	ORDER BY ASC 
Get Height of roller coaster	SELECT LENGTH , Height FROM roller_coaster
Get Name of country	SELECT Name FROM country
Keep the records that Languages is not German	WHERE Languages != German
Get Status of roller coaster	SELECT Status FROM roller_coaster
Keep the records that is greater than 3300 OR Height is greater than 100	WHERE LENGTH > 3300 OR Height > 100
Get Speed of roller coaster	SELECT Speed FROM roller_coaster
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get the average value of Speed of roller coaster	SELECT AVG ( Speed ) FROM roller_coaster
Get the number and Status of roller coaster	SELECT Status , COUNT ( * ) FROM roller_coaster
Group the records based on Status	GROUP BY Status
Get Status of roller coaster	SELECT Status FROM roller_coaster
Group the records based on Status	GROUP BY Status
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Status of roller coaster	SELECT Status FROM roller_coaster
Group the records based on the number Status 2 that the number is greater than 2	GROUP BY Status HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get Park of roller coaster	SELECT Park FROM roller_coaster
Order these records based on the Speed and sort them in descending order, and return the top 1 record	ORDER BY Speed DESC LIMIT 1
Get Name and Name of country that has roller coaster	SELECT T2.Name , T1.Name FROM country AS T1 JOIN roller_coaster AS T2
Get Name of country that has roller coaster	SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
Group the records based on the number Name of country 1 that the number is greater than 1	GROUP BY T1.Name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Name and population of country that has roller coaster	SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
Order these records based on the Height of roller coaster and sort them in descending order, and return the top 1 record	ORDER BY T2.Height DESC LIMIT 1
Get the average value of Speed and Name of country that has roller coaster	SELECT T1.Name , AVG ( T2.Speed ) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
Group the records based on Name of country	GROUP BY T1.Name
Get country id of roller coaster	SELECT country_id FROM roller_coaster
Keep the records that is greater than 3000	WHERE LENGTH > 3000
Get the number of country	SELECT COUNT ( * ) FROM country
Keep the records that country id is not in the first query result	WHERE country_id NOT IN ( the first query result ) 
Get name and area and population of country that has roller coaster	SELECT T1.name , T1.area , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
Keep the records that speed of roller coaster is greater than 60	WHERE T2.speed > 60
Get name and area and population of country that has roller coaster	SELECT T1.name , T1.area , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID
Keep the records that speed of roller coaster is less than 55	WHERE T2.speed < 55
Get the number of distinct rank of captain	SELECT COUNT ( DISTINCT rank ) FROM captain
Get the number of distinct rank of captain	SELECT COUNT ( DISTINCT rank ) FROM captain
Get the number and rank of captain	SELECT COUNT ( * ) , rank FROM captain
Group the records based on rank	GROUP BY rank
Get the number and rank of captain	SELECT COUNT ( * ) , rank FROM captain
Group the records based on rank	GROUP BY rank
Get the number and rank of captain	SELECT COUNT ( * ) , rank FROM captain
Keep the records that age is less than 50	WHERE age < 50 
Group the records based on rank	GROUP BY rank
Get the number and rank of captain	SELECT COUNT ( * ) , rank FROM captain
Keep the records that age is less than 50	WHERE age < 50 
Group the records based on rank	GROUP BY rank
Get name of captain	SELECT name FROM captain
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get name of captain	SELECT name FROM captain
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get name and rank of captain	SELECT name , CLASS , rank FROM captain
Get name and rank of captain	SELECT name , CLASS , rank FROM captain
Get rank of captain	SELECT rank FROM captain
Group the records based on rank	GROUP BY rank
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get rank of captain	SELECT rank FROM captain
Group the records based on rank	GROUP BY rank
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of captain	SELECT CLASS FROM captain
Group the records based on that the number is greater than 2	GROUP BY HAVING COUNT ( * ) > 2
Get of captain	SELECT CLASS FROM captain
Group the records based on that the number is greater than 2	GROUP BY HAVING COUNT ( * ) > 2
Get name of captain	SELECT name FROM captain
Keep the records that rank is Midshipman OR rank is Lieutenant	WHERE rank = Midshipman OR rank = Lieutenant
Get name of captain	SELECT name FROM captain
Keep the records that rank is Midshipman OR rank is Lieutenant	WHERE rank = Midshipman OR rank = Lieutenant
Get the average value of age and the minimum value of age of captain	SELECT AVG ( age ) , MIN ( age ) , CLASS FROM captain
Group the records based on	GROUP BY
Get the average value of age and the minimum value of age of captain	SELECT AVG ( age ) , MIN ( age ) , CLASS FROM captain
Group the records based on	GROUP BY
Get rank of captain	SELECT rank FROM captain
Keep the records that is Cutter	WHERE CLASS = Cutter
Get rank of captain	SELECT rank FROM captain
Keep the records that is Armed schooner	WHERE CLASS = Armed schooner
Get rank of captain	SELECT rank FROM captain
Keep the records that is Cutter	WHERE CLASS = Cutter
Get rank of captain	SELECT rank FROM captain
Keep the records that is Armed schooner	WHERE CLASS = Armed schooner
Get rank of captain	SELECT rank FROM captain
Get rank of captain	SELECT rank FROM captain
Keep the records that is Third-rate ship of the line	WHERE CLASS = Third-rate ship of the line
Get rank of captain	SELECT rank FROM captain
Get rank of captain	SELECT rank FROM captain
Keep the records that is Third-rate ship of the line	WHERE CLASS = Third-rate ship of the line
Get name of captain	SELECT name FROM captain
Order these records based on the age, and return the top 1 record	ORDER BY age LIMIT 1
Get name of captain	SELECT name FROM captain
Order these records based on the age, and return the top 1 record	ORDER BY age LIMIT 1
Get the number of ship	SELECT COUNT ( * ) FROM ship
Get the number of ship	SELECT COUNT ( * ) FROM ship
Get name and flag of ship	SELECT name , TYPE , flag FROM ship
Order these records based on the built year and sort them in descending order, and return the top 1 record	ORDER BY built_year DESC LIMIT 1
Get name and flag of ship	SELECT name , TYPE , flag FROM ship
Order these records based on the built year and sort them in descending order, and return the top 1 record	ORDER BY built_year DESC LIMIT 1
Get the number and flag of ship	SELECT COUNT ( * ) , flag FROM ship
Group the records based on flag	GROUP BY flag
Get the number and flag of ship	SELECT COUNT ( * ) , flag FROM ship
Group the records based on flag	GROUP BY flag
Get flag of ship	SELECT flag FROM ship
Group the records based on flag	GROUP BY flag
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get flag of ship	SELECT flag FROM ship
Group the records based on flag	GROUP BY flag
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of ship	SELECT name FROM ship
Order these records based on the built year	ORDER BY built_year , 
Get name of ship	SELECT name FROM ship
Order these records based on the built year	ORDER BY built_year , 
Get of ship	SELECT TYPE FROM ship
Keep the records that flag is Panama	WHERE flag = Panama
Get of ship	SELECT TYPE FROM ship
Keep the records that flag is Malta	WHERE flag = Malta
Get of ship	SELECT TYPE FROM ship
Keep the records that flag is Panama	WHERE flag = Panama
Get of ship	SELECT TYPE FROM ship
Keep the records that flag is Malta	WHERE flag = Malta
Get built year of ship	SELECT built_year FROM ship
Group the records based on built year	GROUP BY built_year
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get built year of ship	SELECT built_year FROM ship
Group the records based on built year	GROUP BY built_year
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Group the records based on the number ship id of captain 1 that the number is greater than 1	GROUP BY t2.ship_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Group the records based on the number ship id of captain 1 that the number is greater than 1	GROUP BY t2.ship_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get ship id of captain	SELECT ship_id FROM captain
Get name of ship	SELECT name , CLASS FROM ship
Keep the records that ship id is not in the first query result	WHERE ship_id NOT IN ( the first query result ) 
Get ship id of captain	SELECT ship_id FROM captain
Get name of ship	SELECT name , CLASS FROM ship
Keep the records that ship id is not in the first query result	WHERE ship_id NOT IN ( the first query result ) 
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Order these records based on the age of captain, and return the top 1 record	ORDER BY t2.age LIMIT 1
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Order these records based on the age of captain, and return the top 1 record	ORDER BY t2.age LIMIT 1
Get ship id of captain	SELECT ship_id FROM captain
Keep the records that rank is Midshipman	WHERE rank = Midshipman
Get name and flag of ship	SELECT name , flag FROM ship
Keep the records that ship id is not in the first query result	WHERE ship_id NOT IN ( the first query result ) 
Get ship id of captain	SELECT ship_id FROM captain
Keep the records that rank is Midshipman	WHERE rank = Midshipman
Get name and flag of ship	SELECT name , flag FROM ship
Keep the records that ship id is not in the first query result	WHERE ship_id NOT IN ( the first query result ) 
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Keep the records that rank of captain is Midshipman	WHERE t2.rank = Midshipman
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Keep the records that rank of captain is Lieutenant	WHERE t2.rank = Lieutenant
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Keep the records that rank of captain is Midshipman	WHERE t2.rank = Midshipman
Get name of ship that has captain	SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id
Keep the records that rank of captain is Lieutenant	WHERE t2.rank = Lieutenant
Get host city of hosting city	SELECT host_city FROM hosting_city
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get host city of hosting city	SELECT host_city FROM hosting_city
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get MATCH id of	SELECT match_id FROM
Keep the records that competition is 1994 FIFA World Cup qualification	WHERE competition = 1994 FIFA World Cup qualification
Get MATCH id of	SELECT match_id FROM
Keep the records that competition is 1994 FIFA World Cup qualification	WHERE competition = 1994 FIFA World Cup qualification
Get city of city that has hosting city	SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Keep the records that year of hosting city is greater than 2010	WHERE T2.year > 2010
Get city of city that has hosting city	SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Keep the records that year of hosting city is greater than 2010	WHERE T2.year > 2010
Get city of city that has hosting city	SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Group the records based on host city of hosting city	GROUP BY T2.host_city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city of city that has hosting city	SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Group the records based on host city of hosting city	GROUP BY T2.host_city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get venue of city that has hosting city AND MATCH	SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id
Keep the records that city of city is Nanjing ( Jiangsu ) AND competition of MATCH is 1994 FIFA World Cup qualification	WHERE T1.city = Nanjing ( Jiangsu ) AND T3.competition = 1994 FIFA World Cup qualification
Get venue of city that has hosting city AND MATCH	SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id
Keep the records that city of city is Nanjing ( Jiangsu ) AND competition of MATCH is 1994 FIFA World Cup qualification	WHERE T1.city = Nanjing ( Jiangsu ) AND T3.competition = 1994 FIFA World Cup qualification
Get Jan of city that has temperature	SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that city of city is Shanghai	WHERE T1.city = Shanghai
Get Jan of city that has temperature	SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that city of city is Shanghai	WHERE T1.city = Shanghai
Get year of city that has hosting city	SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Keep the records that city of city is Taizhou ( Zhejiang )	WHERE T1.city = Taizhou ( Zhejiang )
Get year of city that has hosting city	SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Keep the records that city of city is Taizhou ( Zhejiang )	WHERE T1.city = Taizhou ( Zhejiang )
Get city of city	SELECT city FROM city
Order these records based on the regional population and sort them in descending order, and return the top 3 records	ORDER BY regional_population DESC LIMIT 3
Get city of city	SELECT city FROM city
Order these records based on the regional population and sort them in descending order, and return the top 3 records	ORDER BY regional_population DESC LIMIT 3
Get city and GDP of city	SELECT city , GDP FROM city
Order these records based on the GDP, and return the top 1 record	ORDER BY GDP LIMIT 1
Get city and GDP of city	SELECT city , GDP FROM city
Order these records based on the GDP, and return the top 1 record	ORDER BY GDP LIMIT 1
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Order these records based on the Feb of temperature and sort them in descending order, and return the top 1 record	ORDER BY T2.Feb DESC LIMIT 1
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Order these records based on the Feb of temperature and sort them in descending order, and return the top 1 record	ORDER BY T2.Feb DESC LIMIT 1
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Mar of temperature is less than Jul of temperature OR Mar of temperature is greater than Oct of temperature	WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Mar of temperature is less than Jul of temperature OR Mar of temperature is greater than Oct of temperature	WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Mar of temperature is less than Jul of temperature	WHERE T2.Mar < T2.Jul
Get city of city that has hosting city	SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Mar of temperature is less than Jul of temperature	WHERE T2.Mar < T2.Jul
Get city of city that has hosting city	SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Mar of temperature is less than Dec of temperature	WHERE T2.Mar < T2.Dec
Get city of city that has hosting city	SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Mar of temperature is less than Dec of temperature	WHERE T2.Mar < T2.Dec
Get city of city that has hosting city	SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Feb of temperature is greater than Jun of temperature	WHERE T2.Feb > T2.Jun
Get city of city that has hosting city	SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4
Get city of city that has temperature	SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id
Keep the records that Feb of temperature is greater than Jun of temperature	WHERE T2.Feb > T2.Jun
Get city of city that has hosting city	SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4
Get city of city	SELECT city FROM city
Keep the records that regional population is greater than 10000000	WHERE regional_population > 10000000
Get city of city	SELECT city FROM city
Keep the records that regional population is greater than 10000000	WHERE regional_population > 10000000
Get city of city	SELECT city FROM city
Keep the records that regional population is greater than 10000000	WHERE regional_population > 10000000
Get city of city	SELECT city FROM city
Keep the records that regional population is less than 5000000	WHERE regional_population < 5000000
Get city of city	SELECT city FROM city
Keep the records that regional population is greater than 10000000	WHERE regional_population > 10000000
Get city of city	SELECT city FROM city
Keep the records that regional population is less than 5000000	WHERE regional_population < 5000000
Get the number and Competition of	SELECT COUNT ( * ) , Competition FROM
Group the records based on Competition	GROUP BY Competition
Get the number and Competition of	SELECT COUNT ( * ) , Competition FROM
Group the records based on Competition	GROUP BY Competition
Get venue of	SELECT venue FROM
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get venue of	SELECT venue FROM
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get gdp of city	SELECT gdp FROM city
Order these records based on the Regional Population and sort them in descending order, and return the top 1 record	ORDER BY Regional_Population DESC LIMIT 1
Get gdp of city	SELECT gdp FROM city
Order these records based on the Regional Population and sort them in descending order, and return the top 1 record	ORDER BY Regional_Population DESC LIMIT 1
Get gdp and Regional Population of city that has hosting city	SELECT t1.gdp , t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Group the records based on the number Host City of T2 1 that the number is greater than 1	GROUP BY t2.Host_City HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get gdp and Regional Population of city that has hosting city	SELECT t1.gdp , t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city
Group the records based on the number Host City of T2 1 that the number is greater than 1	GROUP BY t2.Host_City HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get individual first name and individual middle name and individual last name of individuals	SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals
Order these records based on the individual last name	ORDER BY individual_last_name 
Get individual first name and individual middle name and individual last name of individuals	SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals
Order these records based on the individual last name	ORDER BY individual_last_name 
Get form type code of forms	SELECT DISTINCT form_type_code FROM forms
Get form type code of forms	SELECT DISTINCT form_type_code FROM forms
Get form name of forms that has party forms	SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id
Group the records based on form id of party forms	GROUP BY t2.form_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get form name of forms that has party forms	SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id
Group the records based on form id of party forms	GROUP BY t2.form_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get payment method code and party phone of parties	SELECT payment_method_code , party_phone FROM parties
Keep the records that party email is enrico09@example.com	WHERE party_email = enrico09@example.com
Get payment method code and party phone of parties	SELECT payment_method_code , party_phone FROM parties
Keep the records that party email is enrico09@example.com	WHERE party_email = enrico09@example.com
Get form id of party forms	SELECT form_id FROM party_forms
Group the records based on form id	GROUP BY form_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get party email of parties that has party forms	SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id
Keep the records that form id of party forms is the first query result	WHERE t2.form_id = ( the first query result ) 
Get form id of party forms	SELECT form_id FROM party_forms
Group the records based on form id	GROUP BY form_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get party email of parties that has party forms	SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id
Keep the records that form id of party forms is the first query result	WHERE t2.form_id = ( the first query result ) 
Get organization name of organizations	SELECT organization_name FROM organizations
Order these records based on the date formed and sort them in ascending ORDER	ORDER BY date_formed ASC 
Get organization name of organizations	SELECT organization_name FROM organizations
Order these records based on the date formed and sort them in ascending ORDER	ORDER BY date_formed ASC 
Get organization name of organizations	SELECT organization_name FROM organizations
Order these records based on the date formed and sort them in descending order, and return the top 1 record	ORDER BY date_formed DESC LIMIT 1
Get organization name of organizations	SELECT organization_name FROM organizations
Order these records based on the date formed and sort them in descending order, and return the top 1 record	ORDER BY date_formed DESC LIMIT 1
Get individual last name of organizations that has organization contact individuals and individuals	SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
Keep the records that organization name of organizations is Labour Party	WHERE t1.organization_name = Labour Party 
Order these records based on the date contact to of organization contact individuals and sort them in descending order, and return the top 1 record	ORDER BY t2.date_contact_to DESC LIMIT 1
Get individual last name of organizations that has organization contact individuals and individuals	SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
Keep the records that organization name of organizations is Labour Party	WHERE t1.organization_name = Labour Party 
Order these records based on the date contact to of organization contact individuals and sort them in descending order, and return the top 1 record	ORDER BY t2.date_contact_to DESC LIMIT 1
Get the maximum value of uk vat number of organizations	SELECT MAX ( uk_vat_number ) FROM organizations
Get individual last name of organizations that has organization contact individuals and individuals	SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
Keep the records that uk vat number of organizations is the first query result	WHERE t1.uk_vat_number = ( the first query result )  
Order these records based on the date contact to of organization contact individuals and sort them in ascending order, and return the top 1 record	ORDER BY t2.date_contact_to ASC LIMIT 1
Get the maximum value of uk vat number of organizations	SELECT MAX ( uk_vat_number ) FROM organizations
Get individual last name of organizations that has organization contact individuals and individuals	SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id
Keep the records that uk vat number of organizations is the first query result	WHERE t1.uk_vat_number = ( the first query result )  
Order these records based on the date contact to of organization contact individuals and sort them in ascending order, and return the top 1 record	ORDER BY t2.date_contact_to ASC LIMIT 1
Get the number of services	SELECT COUNT ( * ) FROM services
Get the number of services	SELECT COUNT ( * ) FROM services
Get service name of services	SELECT service_name FROM services
Get service name of services that has party services	SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2
Get service name of services	SELECT service_name FROM services
Get service name of services that has party services	SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2
Get town city of addresses	SELECT town_city FROM addresses
Get state province county of addresses	SELECT state_province_county FROM addresses
Get town city of addresses	SELECT town_city FROM addresses
Get state province county of addresses	SELECT state_province_county FROM addresses
Get the number of addresses	SELECT COUNT ( * ) FROM addresses
Keep the records that state province county is Colorado	WHERE state_province_county = Colorado
Get the number of addresses	SELECT COUNT ( * ) FROM addresses
Keep the records that state province county is Colorado	WHERE state_province_county = Colorado
Get payment method code of parties	SELECT payment_method_code FROM parties
Group the records based on the number payment method code 3 that the number is greater than 3	GROUP BY payment_method_code HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get payment method code of parties	SELECT payment_method_code FROM parties
Group the records based on the number payment method code 3 that the number is greater than 3	GROUP BY payment_method_code HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get organization name of organizations	SELECT organization_name FROM organizations
Keep the records that organization name is in the form of %Party%	WHERE organization_name LIKE %Party%
Get organization name of organizations	SELECT organization_name FROM organizations
Keep the records that organization name is in the form of %Party%	WHERE organization_name LIKE %Party%
Get the number of distinct payment method code of parties	SELECT COUNT ( DISTINCT payment_method_code ) FROM parties
Get the number of distinct payment method code of parties	SELECT COUNT ( DISTINCT payment_method_code ) FROM parties
Get party email of parties that has party services	SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id
Group the records based on party email of parties	GROUP BY t1.party_email
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get party email of parties that has party services	SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id
Group the records based on party email of parties	GROUP BY t1.party_email
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get state province county of addresses	SELECT state_province_county FROM addresses
Keep the records that line 1 number building is in the form of %6862 Kaitlyn Knolls%	WHERE line_1_number_building LIKE %6862 Kaitlyn Knolls%
Get state province county of addresses	SELECT state_province_county FROM addresses
Keep the records that line 1 number building is in the form of %6862 Kaitlyn Knolls%	WHERE line_1_number_building LIKE %6862 Kaitlyn Knolls%
Get organization name of organizations that has organization contact individuals	SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
Group the records based on organization name of organizations	GROUP BY t1.organization_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get organization name of organizations that has organization contact individuals	SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id
Group the records based on organization name of organizations	GROUP BY t1.organization_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get individual last name of individuals that has organization contact individuals	SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2
Get individual last name of individuals that has organization contact individuals	SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2
Get the number of driver	SELECT COUNT ( * ) FROM driver
Get name and home city and age of driver	SELECT name , home_city , age FROM driver
Get the number and party of driver	SELECT party , COUNT ( * ) FROM driver
Group the records based on party	GROUP BY party
Get name of driver	SELECT name FROM driver
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get home city of driver	SELECT DISTINCT home_city FROM driver
Get home city of driver	SELECT home_city FROM driver
Group the records based on home city	GROUP BY home_city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get party of driver	SELECT party FROM driver
Keep the records that home city is Hartford AND age is greater than 40	WHERE home_city = Hartford AND age > 40
Get home city of driver	SELECT home_city FROM driver
Keep the records that age is greater than 40	WHERE age > 40 
Group the records based on the number home city 2 that the number is greater than or equal to 2	GROUP BY home_city HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get home city of driver	SELECT home_city FROM driver
Get home city of driver	SELECT home_city FROM driver
Keep the records that age is greater than 40	WHERE age > 40
Get driver id of school bus	SELECT driver_id FROM school_bus
Get name of driver	SELECT name FROM driver
Keep the records that driver id is not in the first query result	WHERE driver_id NOT IN ( the first query result ) 
Get of school	SELECT TYPE FROM school
Group the records based on that the number is 2	GROUP BY HAVING COUNT ( * ) = 2
Get school and name of school bus that has school and driver	SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3
Get the maximum value of years working and the minimum value of years working and the average value of years working of school bus	SELECT MAX ( years_working ) , MIN ( years_working ) , AVG ( years_working ) FROM school_bus
Get school id of school bus	SELECT school_id FROM school_bus
Get school of school	SELECT school , TYPE FROM school
Keep the records that school id is not in the first query result	WHERE school_id NOT IN ( the first query result ) 
Get the number and type of school bus that has school	SELECT T2.type , COUNT ( * ) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id
Group the records based on type of school	GROUP BY T2.type
Get the number of driver	SELECT COUNT ( * ) FROM driver
Keep the records that home city is Hartford OR age is less than 40	WHERE home_city = Hartford OR age < 40
Get name of driver	SELECT name FROM driver
Keep the records that home city is Hartford AND age is less than 40	WHERE home_city = Hartford AND age < 40
Get name of driver that has school bus	SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id
Order these records based on the years working and sort them in descending order, and return the top 1 record	ORDER BY years_working DESC LIMIT 1
Get the number of flight	SELECT COUNT ( * ) FROM flight
Keep the records that velocity is greater than 200	WHERE velocity > 200
Get vehicle flight number and pilot of flight	SELECT vehicle_flight_number , DATE , pilot FROM flight
Order these records based on the altitude and sort them in ascending ORDER	ORDER BY altitude ASC 
Get id and country and city and name of airport	SELECT id , country , city , name FROM airport
Order these records based on the name	ORDER BY name 
Get the maximum value of group equity shareholding of operate company	SELECT MAX ( group_equity_shareholding ) FROM operate_company
Get the average value of velocity of flight	SELECT AVG ( velocity ) FROM flight
Keep the records that pilot is Thompson	WHERE pilot = Thompson
Get name and type of operate company that has flight	SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS t2
Get name of airport	SELECT name FROM airport
Keep the records that country is not Iceland	WHERE country != Iceland
Get type of operate company that has flight	SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id
Keep the records that velocity of T2 is less than 200	WHERE T2.velocity < 200
Get id and name of operate company that has flight	SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id
Group the records based on the number id of operate company 1 that the number is greater than 1	GROUP BY T1.id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get id and name and IATA of airport that has flight	SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id
Group the records based on id of flight	GROUP BY T2.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get pilot of airport that has flight	SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id
Keep the records that country of airport is United States OR name of airport is Billund Airport	WHERE T1.country = United States OR T1.name = Billund Airport
Get the number of operate company	SELECT TYPE , COUNT ( * ) FROM operate_company
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get airport id of flight	SELECT airport_id FROM flight
Keep the records that pilot is Thompson	WHERE pilot = Thompson
Get the number of airport	SELECT COUNT ( * ) FROM airport
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get pilot of operate company that has flight	SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id
Keep the records that principal activities of operate company is Cargo	WHERE T1.principal_activities = Cargo
Get pilot of operate company that has flight	SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id
Keep the records that principal activities of operate company is Catering services	WHERE T1.principal_activities = Catering services
Get name of airport	SELECT name FROM airport
Keep the records that name is in the form of %international%	WHERE name LIKE %international%
Get the number and id of operate company that has flight and airport	SELECT T3.id , COUNT ( * ) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id
Group the records based on id of airport	GROUP BY T3.id
Get the number and country of airport	SELECT COUNT ( * ) , country FROM airport
Group the records based on country	GROUP BY country
Get country of airport	SELECT country FROM airport
Group the records based on the number country 2 that the number is greater than 2	GROUP BY country HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get pilot of flight	SELECT pilot FROM flight
Group the records based on pilot	GROUP BY pilot
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of Accounts	SELECT COUNT ( * ) FROM Accounts
Get the number of Accounts	SELECT COUNT ( * ) FROM Accounts
Get account id and account details of Accounts	SELECT account_id , account_details FROM Accounts
Get account id and account details of Accounts	SELECT account_id , account_details FROM Accounts
Get the number of Statements	SELECT COUNT ( * ) FROM Statements
Get the number of Statements	SELECT COUNT ( * ) FROM Statements
Get statement details of Statements	SELECT STATEMENT_ID , statement_details FROM Statements
Get statement details of Statements	SELECT STATEMENT_ID , statement_details FROM Statements
Get statement id and statement details and account details of Accounts that has Statements	SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2
Get statement id and statement details and account details of Accounts that has Statements	SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2
Get the number of Accounts	SELECT STATEMENT_ID , COUNT ( * ) FROM Accounts
Group the records based on	GROUP BY
Get the number of Accounts	SELECT STATEMENT_ID , COUNT ( * ) FROM Accounts
Group the records based on	GROUP BY
Get statement id and statement details of Accounts that has Statements	SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
Group the records based on statement id of Accounts	GROUP BY T1.statement_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get statement id and statement details of Accounts that has Statements	SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id
Group the records based on statement id of Accounts	GROUP BY T1.statement_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Get document type code and document name and document description of Documents	SELECT document_type_code , document_name , document_description FROM Documents
Keep the records that document name is Noel CV OR document name is King Book	WHERE document_name = Noel CV OR document_name = King Book
Get document type code and document name and document description of Documents	SELECT document_type_code , document_name , document_description FROM Documents
Keep the records that document name is Noel CV OR document name is King Book	WHERE document_name = Noel CV OR document_name = King Book
Get document id and document name of Documents	SELECT document_id , document_name FROM Documents
Get document id and document name of Documents	SELECT document_id , document_name FROM Documents
Get document name and document id of Documents	SELECT document_name , document_id FROM Documents
Keep the records that document type code is BK	WHERE document_type_code = BK
Get document name and document id of Documents	SELECT document_name , document_id FROM Documents
Keep the records that document type code is BK	WHERE document_type_code = BK
Get the number and project id of Documents	SELECT COUNT ( * ) , project_id FROM Documents
Keep the records that document type code is BK	WHERE document_type_code = BK 
Group the records based on project id	GROUP BY project_id
Get the number and project id of Documents	SELECT COUNT ( * ) , project_id FROM Documents
Keep the records that document type code is BK	WHERE document_type_code = BK 
Group the records based on project id	GROUP BY project_id
Get document name and document date of Documents that has projects	SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id
Keep the records that project details of projects is Graph Database project	WHERE T2.project_details = Graph Database project
Get document name and document date of Documents that has projects	SELECT document_name , document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id
Keep the records that project details of projects is Graph Database project	WHERE T2.project_details = Graph Database project
Get the number and project id of Documents	SELECT project_id , COUNT ( * ) FROM Documents
Group the records based on project id	GROUP BY project_id
Get the number and project id of Documents	SELECT project_id , COUNT ( * ) FROM Documents
Group the records based on project id	GROUP BY project_id
Get project id of Documents	SELECT project_id FROM Documents
Group the records based on project id	GROUP BY project_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get project id of Documents	SELECT project_id FROM Documents
Group the records based on project id	GROUP BY project_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get project id of Documents	SELECT project_id FROM Documents
Group the records based on the number project id 2 that the number is greater than or equal to 2	GROUP BY project_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get project id of Documents	SELECT project_id FROM Documents
Group the records based on the number project id 2 that the number is greater than or equal to 2	GROUP BY project_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and document type code of Documents	SELECT document_type_code , COUNT ( * ) FROM Documents
Group the records based on document type code	GROUP BY document_type_code
Get the number and document type code of Documents	SELECT document_type_code , COUNT ( * ) FROM Documents
Group the records based on document type code	GROUP BY document_type_code
Get document type code of Documents	SELECT document_type_code FROM Documents
Group the records based on document type code	GROUP BY document_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document type code of Documents	SELECT document_type_code FROM Documents
Group the records based on document type code	GROUP BY document_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document type code of Documents	SELECT document_type_code FROM Documents
Group the records based on the number document type code 3 that the number is less than 3	GROUP BY document_type_code HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get document type code of Documents	SELECT document_type_code FROM Documents
Group the records based on the number document type code 3 that the number is less than 3	GROUP BY document_type_code HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get statement details and document name of Statements that has Documents	SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id
Keep the records that statement details of Statements is Private Project	WHERE T1.statement_details = Private Project
Get statement details and document name of Statements that has Documents	SELECT T1.statement_details , T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id
Keep the records that statement details of Statements is Private Project	WHERE T1.statement_details = Private Project
Get document type code and document type name and document type description of Ref document types	SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types
Get document type code and document type name and document type description of Ref document types	SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types
Get document type description of Ref document types	SELECT document_type_description FROM Ref_document_types
Keep the records that document type name is Film	WHERE document_type_name = Film
Get document type description of Ref document types	SELECT document_type_description FROM Ref_document_types
Keep the records that document type name is Film	WHERE document_type_name = Film
Get document type name and document type description and Document date of Ref document types that has Documents	SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2
Get document type name and document type description and Document date of Ref document types that has Documents	SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2
Get the number of Projects	SELECT COUNT ( * ) FROM Projects
Get the number of Projects	SELECT COUNT ( * ) FROM Projects
Get project id and project details of Projects	SELECT project_id , project_details FROM Projects
Get project id and project details of Projects	SELECT project_id , project_details FROM Projects
Get project id and project details of Projects that has Documents	SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id
Group the records based on the number project id of Projects 2 that the number is greater than 2	GROUP BY T1.project_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get project id and project details of Projects that has Documents	SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id
Group the records based on the number project id of Projects 2 that the number is greater than 2	GROUP BY T1.project_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get project details of Projects that has Documents	SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id
Keep the records that document name of Documents is King Book	WHERE T2.document_name = King Book
Get project details of Projects that has Documents	SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id
Keep the records that document name of Documents is King Book	WHERE T2.document_name = King Book
Get the number of Ref budget codes	SELECT COUNT ( * ) FROM Ref_budget_codes
Get the number of Ref budget codes	SELECT COUNT ( * ) FROM Ref_budget_codes
Get budget type code and budget type description of Ref budget codes	SELECT budget_type_code , budget_type_description FROM Ref_budget_codes
Get budget type code and budget type description of Ref budget codes	SELECT budget_type_code , budget_type_description FROM Ref_budget_codes
Get budget type description of Ref budget codes	SELECT budget_type_description FROM Ref_budget_codes
Keep the records that budget type code is ORG	WHERE budget_type_code = ORG
Get budget type description of Ref budget codes	SELECT budget_type_description FROM Ref_budget_codes
Keep the records that budget type code is ORG	WHERE budget_type_code = ORG
Get the number of Documents with expenses	SELECT COUNT ( * ) FROM Documents_with_expenses
Get the number of Documents with expenses	SELECT COUNT ( * ) FROM Documents_with_expenses
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Keep the records that budget type code is SF	WHERE budget_type_code = SF
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Keep the records that budget type code is SF	WHERE budget_type_code = SF
Get budget type code and budget type description and document id of Documents with expenses that has Ref budget codes	SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2
Get budget type code and budget type description and document id of Documents with expenses that has Ref budget codes	SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2
Get document id of Documents with expenses that has Ref Budget Codes	SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
Keep the records that budget type Description of Ref Budget Codes is Government	WHERE T2.budget_type_Description = Government
Get document id of Documents with expenses that has Ref Budget Codes	SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code
Keep the records that budget type Description of Ref Budget Codes is Government	WHERE T2.budget_type_Description = Government
Get the number and budget type code of Documents with expenses	SELECT budget_type_code , COUNT ( * ) FROM Documents_with_expenses
Group the records based on budget type code	GROUP BY budget_type_code
Get the number and budget type code of Documents with expenses	SELECT budget_type_code , COUNT ( * ) FROM Documents_with_expenses
Group the records based on budget type code	GROUP BY budget_type_code
Get budget type code of Documents with expenses	SELECT budget_type_code FROM Documents_with_expenses
Group the records based on budget type code	GROUP BY budget_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get budget type code of Documents with expenses	SELECT budget_type_code FROM Documents_with_expenses
Group the records based on budget type code	GROUP BY budget_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document id of Documents	SELECT document_id FROM Documents
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Get document id of Documents	SELECT document_id FROM Documents
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Get document id of Documents	SELECT document_id FROM Documents
Keep the records that document type code is CV	WHERE document_type_code = CV
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Get document id of Documents	SELECT document_id FROM Documents
Keep the records that document type code is CV	WHERE document_type_code = CV
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Get document id of Documents that has Documents with expenses	SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id
Keep the records that document name of Documents is in the form of %s%	WHERE T1.document_name LIKE %s%
Get document id of Documents that has Documents with expenses	SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id
Keep the records that document name of Documents is in the form of %s%	WHERE T1.document_name LIKE %s%
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Keep the records that document id is not in the first query result	WHERE document_id NOT IN ( the first query result ) 
Get document id of Documents with expenses	SELECT document_id FROM Documents_with_expenses
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Keep the records that document id is not in the first query result	WHERE document_id NOT IN ( the first query result ) 
Get document date of Documents that has Documents with Expenses	SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
Keep the records that budget type code of Documents with Expenses is GV	WHERE T2.budget_type_code = GV
Get document date of Documents that has Documents with Expenses	SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
Keep the records that budget type code of Documents with Expenses is SF	WHERE T2.budget_type_code = SF
Get document date of Documents that has Documents with Expenses	SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
Keep the records that budget type code of Documents with Expenses is GV	WHERE T2.budget_type_code = GV
Get document date of Documents that has Documents with Expenses	SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id
Keep the records that budget type code of Documents with Expenses is SF	WHERE T2.budget_type_code = SF
Get the maximum value of Account details of Accounts	SELECT MAX ( Account_details ) FROM Accounts
Get Account details of Accounts	SELECT Account_details FROM Accounts
Keep the records that Account details is in the form of %5%	WHERE Account_details LIKE %5%
Get the maximum value of Account details of Accounts	SELECT MAX ( Account_details ) FROM Accounts
Get Account details of Accounts	SELECT Account_details FROM Accounts
Keep the records that Account details is in the form of %5%	WHERE Account_details LIKE %5%
Get the number of scientists	SELECT COUNT ( * ) FROM scientists
Get the number of scientists	SELECT COUNT ( * ) FROM scientists
Get the SUM of hours of projects	SELECT SUM ( hours ) FROM projects
Get the SUM of hours of projects	SELECT SUM ( hours ) FROM projects
Get the number of distinct scientist of assignedto	SELECT COUNT ( DISTINCT scientist ) FROM assignedto
Get the number of distinct scientist of assignedto	SELECT COUNT ( DISTINCT scientist ) FROM assignedto
Get the number of distinct name of projects	SELECT COUNT ( DISTINCT name ) FROM projects
Get the number of distinct name of projects	SELECT COUNT ( DISTINCT name ) FROM projects
Get the average value of hours of projects	SELECT AVG ( hours ) FROM projects
Get the average value of hours of projects	SELECT AVG ( hours ) FROM projects
Get name of projects	SELECT name FROM projects
Order these records based on the hours and sort them in descending order, and return the top 1 record	ORDER BY hours DESC LIMIT 1
Get name of projects	SELECT name FROM projects
Order these records based on the hours and sort them in descending order, and return the top 1 record	ORDER BY hours DESC LIMIT 1
Get the average value of hours of projects	SELECT AVG ( hours ) FROM projects
Get name of projects	SELECT name FROM projects
Keep the records that hours is greater than the first query result	WHERE hours > ( the first query result ) 
Get the average value of hours of projects	SELECT AVG ( hours ) FROM projects
Get name of projects	SELECT name FROM projects
Keep the records that hours is greater than the first query result	WHERE hours > ( the first query result ) 
Get name and hours of projects that has assignedto	SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
Group the records based on project of assignedto	GROUP BY T2.project
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and hours of projects that has assignedto	SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
Group the records based on project of assignedto	GROUP BY T2.project
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of assignedto that has projects and scientists	SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of scientists is in the form of %Smith%	WHERE T3.name LIKE %Smith%
Get name of assignedto that has projects and scientists	SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of scientists is in the form of %Smith%	WHERE T3.name LIKE %Smith%
Get the SUM of hours of assignedto that has projects and scientists	SELECT SUM ( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of scientists is Michael Rogers OR name of scientists is Carol Smith	WHERE T3.name = Michael Rogers OR T3.name = Carol Smith
Get the SUM of hours of assignedto that has projects and scientists	SELECT SUM ( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of scientists is Michael Rogers OR name of scientists is Carol Smith	WHERE T3.name = Michael Rogers OR T3.name = Carol Smith
Get name of projects	SELECT name FROM projects
Keep the records that hours is between 10 X300	WHERE hours BETWEEN 100 AND 300
Get name of projects	SELECT name FROM projects
Keep the records that hours is between 10 X300	WHERE hours BETWEEN 100 AND 300
Get name of assignedto that has projects and scientists	SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of projects is Matter of Time	WHERE T2.name = Matter of Time
Get name of assignedto that has projects and scientists	SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of projects is A Puzzling Parallax	WHERE T2.name = A Puzzling Parallax
Get name of assignedto that has projects and scientists	SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of projects is Matter of Time	WHERE T2.name = Matter of Time
Get name of assignedto that has projects and scientists	SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that name of projects is A Puzzling Parallax	WHERE T2.name = A Puzzling Parallax
Get name of scientists	SELECT name FROM scientists
Order these records based on the name	ORDER BY name 
Get name of scientists	SELECT name FROM scientists
Order these records based on the name	ORDER BY name 
Get the number and name of projects that has assignedto	SELECT COUNT ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
Group the records based on name of projects	GROUP BY T1.name
Get the number and name of projects that has assignedto	SELECT COUNT ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
Group the records based on name of projects	GROUP BY T1.name
Get the number and name of projects that has assignedto	SELECT COUNT ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
Keep the records that hours of projects is greater than 300	WHERE T1.hours > 300 
Group the records based on name of projects	GROUP BY T1.name
Get the number and name of projects that has assignedto	SELECT COUNT ( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
Keep the records that hours of projects is greater than 300	WHERE T1.hours > 300 
Group the records based on name of projects	GROUP BY T1.name
Get the number and name of scientists that has assignedto	SELECT COUNT ( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist
Group the records based on name of scientists	GROUP BY T1.name
Get the number and name of scientists that has assignedto	SELECT COUNT ( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist
Group the records based on name of scientists	GROUP BY T1.name
Get the maximum value of hours of projects	SELECT MAX ( hours ) FROM projects
Get ssn and name of assignedto that has projects and scientists	SELECT T3.ssn , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that hours of projects is the first query result	WHERE T2.hours = ( the first query result ) 
Get the maximum value of hours of projects	SELECT MAX ( hours ) FROM projects
Get ssn and name of assignedto that has projects and scientists	SELECT T3.ssn , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that hours of projects is the first query result	WHERE T2.hours = ( the first query result ) 
Get name of assignedto that has scientists	SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2
Get name of assignedto that has scientists	SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2
Get Project of AssignedTo	SELECT Project FROM AssignedTo
Get Name of Projects	SELECT Name FROM Projects
Keep the records that Code is not in the first query result	WHERE Code NOT IN ( the first query result ) 
Get Project of AssignedTo	SELECT Project FROM AssignedTo
Get Name of Projects	SELECT Name FROM Projects
Keep the records that Code is not in the first query result	WHERE Code NOT IN ( the first query result ) 
Get scientist of AssignedTo	SELECT scientist FROM AssignedTo
Get Name of scientists	SELECT Name FROM scientists
Keep the records that ssn is not in the first query result	WHERE ssn NOT IN ( the first query result ) 
Get scientist of AssignedTo	SELECT scientist FROM AssignedTo
Get Name of scientists	SELECT Name FROM scientists
Keep the records that ssn is not in the first query result	WHERE ssn NOT IN ( the first query result ) 
Get scientist of AssignedTo	SELECT scientist FROM AssignedTo
Get the number of scientists	SELECT COUNT ( * ) FROM scientists
Keep the records that ssn is not in the first query result	WHERE ssn NOT IN ( the first query result ) 
Get scientist of AssignedTo	SELECT scientist FROM AssignedTo
Get the number of scientists	SELECT COUNT ( * ) FROM scientists
Keep the records that ssn is not in the first query result	WHERE ssn NOT IN ( the first query result ) 
Get name of scientists	SELECT name FROM scientists
Get the maximum value of hours of projects	SELECT MAX ( hours ) FROM projects
Get name of assignedto that has projects and scientists	SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that hours of projects is the second query result	WHERE T2.hours = ( the second query result ) 
Get name of scientists	SELECT name FROM scientists
Get the maximum value of hours of projects	SELECT MAX ( hours ) FROM projects
Get name of assignedto that has projects and scientists	SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that hours of projects is the second query result	WHERE T2.hours = ( the second query result ) 
Get Name and Name and Hours of Scientists that has AssignedTo and Projects	SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code
Order these records based on the Name of Projects Name of Scientists	ORDER BY T3.Name , T1.Name 
Get Name and Name and Hours of Scientists that has AssignedTo and Projects	SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code
Order these records based on the Name of Projects Name of Scientists	ORDER BY T3.Name , T1.Name 
Get the minimum value of hours of projects	SELECT MIN ( hours ) FROM projects
Get name and name of assignedto that has projects and scientists	SELECT T2.name , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that hours of projects is the first query result	WHERE T2.hours = ( the first query result ) 
Get the minimum value of hours of projects	SELECT MIN ( hours ) FROM projects
Get name and name of assignedto that has projects and scientists	SELECT T2.name , T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN
Keep the records that hours of projects is the first query result	WHERE T2.hours = ( the first query result ) 
Get Name of WINE	SELECT Name FROM WINE
Order these records based on the Score, and return the top 1 record	ORDER BY Score LIMIT 1
Get Name of WINE	SELECT Name FROM WINE
Order these records based on the Score, and return the top 1 record	ORDER BY Score LIMIT 1
Get Winery of WINE	SELECT Winery FROM WINE
Order these records based on the SCORE, and return the top 1 record	ORDER BY SCORE LIMIT 1
Get Winery of WINE	SELECT Winery FROM WINE
Order these records based on the SCORE, and return the top 1 record	ORDER BY SCORE LIMIT 1
Get Name of WINE	SELECT Name FROM WINE
Keep the records that is 2008	WHERE YEAR = 2008
Get Name of WINE	SELECT Name FROM WINE
Keep the records that is 2008	WHERE YEAR = 2008
Get Grape and Appelation of WINE	SELECT Grape , Appelation FROM WINE
Get Grape and Appelation of WINE	SELECT Grape , Appelation FROM WINE
Get Name and Score of WINE	SELECT Name , Score FROM WINE
Get Name and Score of WINE	SELECT Name , Score FROM WINE
Get Area and County of APPELLATIONS	SELECT Area , County FROM APPELLATIONS
Get Area and County of APPELLATIONS	SELECT Area , County FROM APPELLATIONS
Get Price of WINE	SELECT Price FROM WINE
Keep the records that is less than 2010	WHERE YEAR < 2010
Get Price of WINE	SELECT Price FROM WINE
Keep the records that is less than 2010	WHERE YEAR < 2010
Get Name of WINE	SELECT Name FROM WINE
Keep the records that score is greater than 90	WHERE score > 90
Get Name of WINE	SELECT Name FROM WINE
Keep the records that score is greater than 90	WHERE score > 90
Get Name of GRAPES that has WINE	SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of GRAPES is Red	WHERE T1.Color = Red
Get Name of GRAPES that has WINE	SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of GRAPES is Red	WHERE T1.Color = Red
Get Name of APPELLATIONs that has WINE	SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that Area of APPELLATIONs is North Coast	WHERE T1.Area = North Coast
Get Name of APPELLATIONs that has WINE	SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that Area of APPELLATIONs is North Coast	WHERE T1.Area = North Coast
Get the number of WINE	SELECT COUNT ( * ) FROM WINE
Keep the records that Winery is Robert Biale	WHERE Winery = Robert Biale
Get the number of WINE	SELECT COUNT ( * ) FROM WINE
Keep the records that Winery is Robert Biale	WHERE Winery = Robert Biale
Get the number of APPELLATIONS	SELECT COUNT ( * ) FROM APPELLATIONS
Keep the records that County is Napa	WHERE County = Napa
Get the number of APPELLATIONS	SELECT COUNT ( * ) FROM APPELLATIONS
Keep the records that County is Napa	WHERE County = Napa
Get the average value of Price of APPELLATIONS that has WINE	SELECT AVG ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that County of APPELLATIONS is Sonoma	WHERE T1.County = Sonoma
Get the average value of Price of APPELLATIONS that has WINE	SELECT AVG ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that County of APPELLATIONS is Sonoma	WHERE T1.County = Sonoma
Get Name and Score of GRAPES that has WINE	SELECT T2.Name , T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of GRAPES is White	WHERE T1.Color = White
Get Name and Score of GRAPES that has WINE	SELECT T2.Name , T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of GRAPES is White	WHERE T1.Color = White
Get the maximum value of Price of APPELLATIONS that has WINE	SELECT MAX ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that Area of APPELLATIONS is Central Coast AND year of WINE is less than 2005	WHERE T1.Area = Central Coast AND T2.year < 2005
Get the maximum value of Price of APPELLATIONS that has WINE	SELECT MAX ( T2.Price ) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that Area of APPELLATIONS is Central Coast AND year of WINE is less than 2005	WHERE T1.Area = Central Coast AND T2.year < 2005
Get Grape of GRAPES that has WINE	SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of GRAPES is White AND score of WINE is greater than 90	WHERE T1.Color = White AND T2.score > 90
Get Grape of GRAPES that has WINE	SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of GRAPES is White AND score of WINE is greater than 90	WHERE T1.Color = White AND T2.score > 90
Get Name of Grapes that has WINE	SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of Grapes is Red AND price of WINE is greater than 50	WHERE T1.Color = Red AND T2.price > 50
Get Name of Grapes that has WINE	SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Keep the records that Color of Grapes is Red AND price of WINE is greater than 50	WHERE T1.Color = Red AND T2.price > 50
Get Name of APPELLATIONS that has WINE	SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that County of APPELLATIONS is Monterey AND price of WINE is less than 50	WHERE T1.County = Monterey AND T2.price < 50
Get Name of APPELLATIONS that has WINE	SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that County of APPELLATIONS is Monterey AND price of WINE is less than 50	WHERE T1.County = Monterey AND T2.price < 50
Get the number and Grape of WINE	SELECT COUNT ( * ) , Grape FROM WINE
Group the records based on Grape	GROUP BY Grape
Get the number and Grape of WINE	SELECT COUNT ( * ) , Grape FROM WINE
Group the records based on Grape	GROUP BY Grape
Get the average value of Price of WINE	SELECT AVG ( Price ) , YEAR FROM WINE
Group the records based on	GROUP BY
Get the average value of Price of WINE	SELECT AVG ( Price ) , YEAR FROM WINE
Group the records based on	GROUP BY
Get the minimum value of Price of wine	SELECT MIN ( Price ) FROM wine
Keep the records that Winery is John Anthony	WHERE Winery = John Anthony
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Keep the records that Price is greater than the first query result	WHERE Price > ( the first query result ) 
Get the minimum value of Price of wine	SELECT MIN ( Price ) FROM wine
Keep the records that Winery is John Anthony	WHERE Winery = John Anthony
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Keep the records that Price is greater than the first query result	WHERE Price > ( the first query result ) 
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Order these records based on the Name	ORDER BY Name 
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Order these records based on the Name	ORDER BY Name 
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Order these records based on the price	ORDER BY price 
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Order these records based on the price	ORDER BY price 
Get Area of APPELLATIONS that has WINE	SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Group the records based on Appelation of WINE year of WINE 2010 that year of WINE is less than 2010	GROUP BY T2.Appelation HAVING T2.year < 2010 HAVING T2.year < 2010
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Area of APPELLATIONS that has WINE	SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Group the records based on Appelation of WINE year of WINE 2010 that year of WINE is less than 2010	GROUP BY T2.Appelation HAVING T2.year < 2010 HAVING T2.year < 2010
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Color of GRAPES that has WINE	SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Group the records based on Grape of WINE	GROUP BY T2.Grape
Order these records based on the the average value of Price and sort them in descending order, and return the top 1 record	ORDER BY AVG ( Price ) DESC LIMIT 1
Get Color of GRAPES that has WINE	SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape
Group the records based on Grape of WINE	GROUP BY T2.Grape
Order these records based on the the average value of Price and sort them in descending order, and return the top 1 record	ORDER BY AVG ( Price ) DESC LIMIT 1
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Keep the records that is less than 2000 OR is greater than 2010	WHERE YEAR < 2000 OR YEAR > 2010
Get Name of WINE	SELECT DISTINCT Name FROM WINE
Keep the records that is less than 2000 OR is greater than 2010	WHERE YEAR < 2000 OR YEAR > 2010
Get Winery of WINE	SELECT DISTINCT Winery FROM WINE
Keep the records that Price is between 5 X100	WHERE Price BETWEEN 50 AND 100
Get Winery of WINE	SELECT DISTINCT Winery FROM WINE
Keep the records that Price is between 5 X100	WHERE Price BETWEEN 50 AND 100
Get the average value of Price AND the average value of Cases of WINE	SELECT AVG ( Price ) , AVG ( Cases ) FROM WINE
Keep the records that is 2009 AND Grape is Zinfandel	WHERE YEAR = 2009 AND Grape = Zinfandel
Get the average value of Price AND the average value of Cases of WINE	SELECT AVG ( Price ) , AVG ( Cases ) FROM WINE
Keep the records that is 2009 AND Grape is Zinfandel	WHERE YEAR = 2009 AND Grape = Zinfandel
Get the maximum value of Price and the maximum value of Score of WINE	SELECT MAX ( Price ) , MAX ( Score ) FROM WINE
Keep the records that Appelation is St. Helena	WHERE Appelation = St. Helena
Get the maximum value of Price and the maximum value of Score of WINE	SELECT MAX ( Price ) , MAX ( Score ) FROM WINE
Keep the records that Appelation is St. Helena	WHERE Appelation = St. Helena
Get the maximum value of Price and the maximum value of Score of WINE	SELECT MAX ( Price ) , MAX ( Score ) , YEAR FROM WINE
Group the records based on	GROUP BY
Get the maximum value of Price and the maximum value of Score of WINE	SELECT MAX ( Price ) , MAX ( Score ) , YEAR FROM WINE
Group the records based on	GROUP BY
Get the average value of Price and the average value of Score and Appelation of WINE	SELECT AVG ( Price ) , AVG ( Score ) , Appelation FROM WINE
Group the records based on Appelation	GROUP BY Appelation
Get the average value of Price and the average value of Score and Appelation of WINE	SELECT AVG ( Price ) , AVG ( Score ) , Appelation FROM WINE
Group the records based on Appelation	GROUP BY Appelation
Get Winery of WINE	SELECT Winery FROM WINE
Group the records based on the number Winery 4 that the number is greater than or equal to 4	GROUP BY Winery HAVING COUNT ( * ) >= 4 HAVING COUNT ( * ) >= 4
Get Winery of WINE	SELECT Winery FROM WINE
Group the records based on the number Winery 4 that the number is greater than or equal to 4	GROUP BY Winery HAVING COUNT ( * ) >= 4 HAVING COUNT ( * ) >= 4
Get County of APPELLATIONS that has WINE	SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Group the records based on the number Appelation of WINE 3 that the number is less than or equal to 3	GROUP BY T2.Appelation HAVING COUNT ( * ) <= 3 HAVING COUNT ( * ) <= 3
Get County of APPELLATIONS that has WINE	SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Group the records based on the number Appelation of WINE 3 that the number is less than or equal to 3	GROUP BY T2.Appelation HAVING COUNT ( * ) <= 3 HAVING COUNT ( * ) <= 3
Get the minimum value of YEAR of WINE	SELECT MIN ( YEAR ) FROM WINE
Keep the records that Winery is Brander	WHERE Winery = Brander
Get Name of WINE	SELECT Name FROM WINE
Keep the records that is less than the first query result	WHERE YEAR < ( the first query result ) 
Get the minimum value of YEAR of WINE	SELECT MIN ( YEAR ) FROM WINE
Keep the records that Winery is Brander	WHERE Winery = Brander
Get Name of WINE	SELECT Name FROM WINE
Keep the records that is less than the first query result	WHERE YEAR < ( the first query result ) 
Get the maximum value of Price of WINE	SELECT MAX ( Price ) FROM WINE
Keep the records that is 2006	WHERE YEAR = 2006
Get Name of WINE	SELECT Name FROM WINE
Keep the records that Price is greater than the first query result	WHERE Price > ( the first query result ) 
Get the maximum value of Price of WINE	SELECT MAX ( Price ) FROM WINE
Keep the records that is 2006	WHERE YEAR = 2006
Get Name of WINE	SELECT Name FROM WINE
Keep the records that Price is greater than the first query result	WHERE Price > ( the first query result ) 
Get Winery of GRAPES that has WINE	SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE
Keep the records that Color of GRAPES is White	WHERE T1.Color = White 
Group the records based on Winery of WINE	GROUP BY T2.Winery
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get Winery of GRAPES that has WINE	SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE
Keep the records that Color of GRAPES is White	WHERE T1.Color = White 
Group the records based on Winery of WINE	GROUP BY T2.Winery
Order these records based on the the number and sort them in descending order, and return the top 3 records	ORDER BY COUNT ( * ) DESC LIMIT 3
Get Grape and Winery of WINE	SELECT Grape , Winery , YEAR FROM WINE
Keep the records that Price is greater than 100	WHERE Price > 100 
Order these records based on the	ORDER BY 
Get Grape and Winery of WINE	SELECT Grape , Winery , YEAR FROM WINE
Keep the records that Price is greater than 100	WHERE Price > 100 
Order these records based on the	ORDER BY 
Get Grape and Appelation and Name of WINE	SELECT Grape , Appelation , Name FROM WINE
Keep the records that Score is greater than 93	WHERE Score > 93 
Order these records based on the Name	ORDER BY Name 
Get Grape and Appelation and Name of WINE	SELECT Grape , Appelation , Name FROM WINE
Keep the records that Score is greater than 93	WHERE Score > 93 
Order these records based on the Name	ORDER BY Name 
Get Appelation of WINE	SELECT Appelation FROM WINE
Keep the records that is greater than 2008	WHERE YEAR > 2008
Get Appelation of APPELLATIONS	SELECT Appelation FROM APPELLATIONS
Keep the records that Area is Central Coast	WHERE Area = Central Coast
Get Appelation of WINE	SELECT Appelation FROM WINE
Keep the records that is greater than 2008	WHERE YEAR > 2008
Get Appelation of APPELLATIONS	SELECT Appelation FROM APPELLATIONS
Keep the records that Area is Central Coast	WHERE Area = Central Coast
Get Appelation of APPELLATIONS that has WINE	SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that County of APPELLATIONS is Sonoma	WHERE T1.County = Sonoma
Get the average value of price of wine	SELECT AVG ( price ) FROM wine
Keep the records that Appelation is not in the first query result	WHERE Appelation NOT IN ( the first query result ) 
Get Appelation of APPELLATIONS that has WINE	SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that County of APPELLATIONS is Sonoma	WHERE T1.County = Sonoma
Get the average value of price of wine	SELECT AVG ( price ) FROM wine
Keep the records that Appelation is not in the first query result	WHERE Appelation NOT IN ( the first query result ) 
Get County of APPELLATIONS that has WINE	SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that Score of WINE is greater than 90	WHERE T2.Score > 90 
Group the records based on County of APPELLATIONS	GROUP BY T1.County
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get County of APPELLATIONS that has WINE	SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation
Keep the records that Score of WINE is greater than 90	WHERE T2.Score > 90 
Group the records based on County of APPELLATIONS	GROUP BY T1.County
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of station	SELECT COUNT ( * ) FROM station
Get name and number of platforms of station	SELECT name , LOCATION , number_of_platforms FROM station
Get of station	SELECT DISTINCT LOCATION FROM station
Get name and total passengers of station	SELECT name , total_passengers FROM station
Keep the records that is not London	WHERE LOCATION != London
Get name and main services of station	SELECT name , main_services FROM station
Order these records based on the total passengers and sort them in descending order, and return the top 3 records	ORDER BY total_passengers DESC LIMIT 3
Get the average value of total passengers and the maximum value of total passengers of station	SELECT AVG ( total_passengers ) , MAX ( total_passengers ) FROM station
Keep the records that is London OR is Glasgow	WHERE LOCATION = London OR LOCATION = Glasgow
Get the SUM of number of platforms and the SUM of total passengers of station	SELECT LOCATION , SUM ( number_of_platforms ) , SUM ( total_passengers ) FROM station
Group the records based on	GROUP BY
Get of station	SELECT DISTINCT LOCATION FROM station
Keep the records that number of platforms is greater than or equal to 15 AND total passengers is greater than 25	WHERE number_of_platforms >= 15 AND total_passengers > 25
Get of station	SELECT LOCATION FROM station
Get of station	SELECT LOCATION FROM station
Keep the records that number of platforms is greater than or equal to 15	WHERE number_of_platforms >= 15
Get of station	SELECT LOCATION FROM station
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and service of train	SELECT name , TIME , service FROM train
Get the number of train	SELECT COUNT ( * ) FROM train
Get name and service of train	SELECT name , service FROM train
Order these records based on the	ORDER BY 
Get the number and name of train station that has station	SELECT T2.name , COUNT ( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id
Group the records based on station id of train station	GROUP BY T1.station_id
Get name and name of train station that has station and train	SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3
Get name and time of train station that has station and train	SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id
Keep the records that location of station is London	WHERE T2.location = London 
Order these records based on the time of train and sort them in descending ORDER	ORDER BY T3.time DESC 
Get name of train station that has station	SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id
Group the records based on station id of train station	GROUP BY T1.station_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of train station that has station	SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id
Group the records based on the number station id of train station 2 that the number is greater than or equal to 2	GROUP BY T1.station_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get of station	SELECT LOCATION FROM station
Group the records based on that the number is 1	GROUP BY HAVING COUNT ( * ) = 1
Get station id of train station	SELECT station_id FROM train_station
Get name of station	SELECT name FROM station
Keep the records that station id is not in the first query result	WHERE station_id NOT IN ( the first query result ) 
Get name of train station that has station and train	SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id
Keep the records that Name of train is Ananthapuri Express	WHERE T3.Name = Ananthapuri Express
Get name of train station that has station and train	SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id
Keep the records that Name of train is Guruvayur Express	WHERE T3.Name = Guruvayur Express
Get station id of train station that has station	SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id
Keep the records that location of T4 is London	WHERE t4.location = London
Get name of train station that has train	SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id
Keep the records that station id of train station is not in the first query result	WHERE T1.station_id NOT IN ( the first query result ) 
Get name of station	SELECT name , LOCATION FROM station
Order these records based on the Annual entry exit Annual interchanges	ORDER BY Annual_entry_exit , Annual_interchanges 
Get vehicle id of Vehicles	SELECT vehicle_id FROM Vehicles
Get vehicle id of Vehicles	SELECT vehicle_id FROM Vehicles
Get the number of Vehicles	SELECT COUNT ( * ) FROM Vehicles
Get the number of Vehicles	SELECT COUNT ( * ) FROM Vehicles
Get vehicle details of Vehicles	SELECT vehicle_details FROM Vehicles
Keep the records that vehicle id is 1	WHERE vehicle_id = 1
Get vehicle details of Vehicles	SELECT vehicle_details FROM Vehicles
Keep the records that vehicle id is 1	WHERE vehicle_id = 1
Get first name and middle name and last name of Staff	SELECT first_name , middle_name , last_name FROM Staff
Get first name and middle name and last name of Staff	SELECT first_name , middle_name , last_name FROM Staff
Get date of birth of Staff	SELECT date_of_birth FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get date of birth of Staff	SELECT date_of_birth FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get date joined Staff of Staff	SELECT date_joined_staff FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get date joined Staff of Staff	SELECT date_joined_staff FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get date left Staff of Staff	SELECT date_left_staff FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get date left Staff of Staff	SELECT date_left_staff FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get the number of Staff	SELECT COUNT ( * ) FROM Staff
Keep the records that first name is Ludie	WHERE first_name = Ludie
Get the number of Staff	SELECT COUNT ( * ) FROM Staff
Keep the records that first name is Ludie	WHERE first_name = Ludie
Get nickname of Staff	SELECT nickname FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get nickname of Staff	SELECT nickname FROM Staff
Keep the records that first name is Janessa AND last name is Sawayn	WHERE first_name = Janessa AND last_name = Sawayn
Get the number of Staff	SELECT COUNT ( * ) FROM Staff
Get the number of Staff	SELECT COUNT ( * ) FROM Staff
Get city of Addresses that has Staff	SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get city of Addresses that has Staff	SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get country AND state province county of Addresses that has Staff	SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get country AND state province county of Addresses that has Staff	SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get the SUM of lesson time of Lessons that has Customers	SELECT SUM ( T1.lesson_time ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Rylan AND last name of Customers is Goodwin	WHERE T2.first_name = Rylan AND T2.last_name = Goodwin
Get the SUM of lesson time of Lessons that has Customers	SELECT SUM ( T1.lesson_time ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Rylan AND last name of Customers is Goodwin	WHERE T2.first_name = Rylan AND T2.last_name = Goodwin
Get zip postcode of Addresses that has Staff	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get zip postcode of Addresses that has Staff	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get the number of Addresses	SELECT COUNT ( * ) FROM Addresses
Keep the records that state province county is Georgia	WHERE state_province_county = Georgia
Get the number of Addresses	SELECT COUNT ( * ) FROM Addresses
Keep the records that state province county is Georgia	WHERE state_province_county = Georgia
Get first name and last name of Addresses that has Staff	SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that city of Addresses is Damianfort	WHERE T1.city = Damianfort
Get first name and last name of Addresses that has Staff	SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Keep the records that city of Addresses is Damianfort	WHERE T1.city = Damianfort
Get the number and city of Addresses that has Staff	SELECT T1.city , COUNT ( * ) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Group the records based on city of Addresses	GROUP BY T1.city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and city of Addresses that has Staff	SELECT T1.city , COUNT ( * ) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Group the records based on city of Addresses	GROUP BY T1.city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get state province county of Addresses that has Staff	SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Group the records based on the number state province county of Addresses 2 4 that the number is between 2 AND 4	GROUP BY T1.state_province_county HAVING COUNT ( * ) BETWEEN 2 AND 4 HAVING COUNT ( * ) BETWEEN 2 AND 4
Get state province county of Addresses that has Staff	SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id
Group the records based on the number state province county of Addresses 2 4 that the number is between 2 AND 4	GROUP BY T1.state_province_county HAVING COUNT ( * ) BETWEEN 2 AND 4 HAVING COUNT ( * ) BETWEEN 2 AND 4
Get first name and last name of Customers	SELECT first_name , last_name FROM Customers
Get first name and last name of Customers	SELECT first_name , last_name FROM Customers
Get email address and date of birth of Customers	SELECT email_address , date_of_birth FROM Customers
Keep the records that first name is Carole	WHERE first_name = Carole
Get email address and date of birth of Customers	SELECT email_address , date_of_birth FROM Customers
Keep the records that first name is Carole	WHERE first_name = Carole
Get phone number and email address of Customers	SELECT phone_number , email_address FROM Customers
Keep the records that amount outstanding is greater than 2000	WHERE amount_outstanding > 2000
Get phone number and email address of Customers	SELECT phone_number , email_address FROM Customers
Keep the records that amount outstanding is greater than 2000	WHERE amount_outstanding > 2000
Get customer status code and cell mobile phone number and email address of Customers	SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers
Keep the records that first name is Marina OR last name is Kohler	WHERE first_name = Marina OR last_name = Kohler
Get customer status code and cell mobile phone number and email address of Customers	SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers
Keep the records that first name is Marina OR last name is Kohler	WHERE first_name = Marina OR last_name = Kohler
Get date of birth of Customers	SELECT date_of_birth FROM Customers
Keep the records that customer status code is Good Customer	WHERE customer_status_code = Good Customer
Get date of birth of Customers	SELECT date_of_birth FROM Customers
Keep the records that customer status code is Good Customer	WHERE customer_status_code = Good Customer
Get date became customer of Customers	SELECT date_became_customer FROM Customers
Keep the records that first name is Carole AND last name is Bernhard	WHERE first_name = Carole AND last_name = Bernhard
Get date became customer of Customers	SELECT date_became_customer FROM Customers
Keep the records that first name is Carole AND last name is Bernhard	WHERE first_name = Carole AND last_name = Bernhard
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Get the number and customer status code of Customers	SELECT customer_status_code , COUNT ( * ) FROM Customers
Group the records based on customer status code	GROUP BY customer_status_code
Get the number and customer status code of Customers	SELECT customer_status_code , COUNT ( * ) FROM Customers
Group the records based on customer status code	GROUP BY customer_status_code
Get customer status code of Customers	SELECT customer_status_code FROM Customers
Group the records based on customer status code	GROUP BY customer_status_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get customer status code of Customers	SELECT customer_status_code FROM Customers
Group the records based on customer status code	GROUP BY customer_status_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number of Lessons that has Customers	SELECT COUNT ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Rylan AND last name of Customers is Goodwin AND lesson status code of Lessons is Completed	WHERE T2.first_name = Rylan AND T2.last_name = Goodwin AND T1.lesson_status_code = Completed
Get the number of Lessons that has Customers	SELECT COUNT ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Rylan AND last name of Customers is Goodwin AND lesson status code of Lessons is Completed	WHERE T2.first_name = Rylan AND T2.last_name = Goodwin AND T1.lesson_status_code = Completed
Get the maximum value of amount outstanding and the minimum value of amount outstanding and the average value of amount outstanding of Customers	SELECT MAX ( amount_outstanding ) , MIN ( amount_outstanding ) , AVG ( amount_outstanding ) FROM Customers
Get the maximum value of amount outstanding and the minimum value of amount outstanding and the average value of amount outstanding of Customers	SELECT MAX ( amount_outstanding ) , MIN ( amount_outstanding ) , AVG ( amount_outstanding ) FROM Customers
Get first name AND last name of Customers	SELECT first_name , last_name FROM Customers
Keep the records that amount outstanding is between 100 X3000	WHERE amount_outstanding BETWEEN 1000 AND 3000
Get first name AND last name of Customers	SELECT first_name , last_name FROM Customers
Keep the records that amount outstanding is between 100 X3000	WHERE amount_outstanding BETWEEN 1000 AND 3000
Get first name and last name of Customers that has Addresses	SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Keep the records that city of Addresses is Lockmanfurt	WHERE T2.city = Lockmanfurt
Get first name and last name of Customers that has Addresses	SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Keep the records that city of Addresses is Lockmanfurt	WHERE T2.city = Lockmanfurt
Get country of Customers that has Addresses	SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Keep the records that first name of Customers is Carole AND last name of Customers is Bernhard	WHERE T1.first_name = Carole AND T1.last_name = Bernhard
Get country of Customers that has Addresses	SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Keep the records that first name of Customers is Carole AND last name of Customers is Bernhard	WHERE T1.first_name = Carole AND T1.last_name = Bernhard
Get zip postcode of Customers that has Addresses	SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Keep the records that first name of Customers is Carole AND last name of Customers is Bernhard	WHERE T1.first_name = Carole AND T1.last_name = Bernhard
Get zip postcode of Customers that has Addresses	SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Keep the records that first name of Customers is Carole AND last name of Customers is Bernhard	WHERE T1.first_name = Carole AND T1.last_name = Bernhard
Get city of Customers that has Addresses	SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Group the records based on city of Addresses	GROUP BY T2.city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get city of Customers that has Addresses	SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id
Group the records based on city of Addresses	GROUP BY T2.city
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the SUM of amount payment of Customer Payments that has Customers	SELECT SUM ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Carole AND last name of Customers is Bernhard	WHERE T2.first_name = Carole AND T2.last_name = Bernhard
Get the SUM of amount payment of Customer Payments that has Customers	SELECT SUM ( T1.amount_payment ) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Carole AND last name of Customers is Bernhard	WHERE T2.first_name = Carole AND T2.last_name = Bernhard
Get customer id of Customer Payments	SELECT customer_id FROM Customer_Payments
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get customer id of Customer Payments	SELECT customer_id FROM Customer_Payments
Get the number of Customers	SELECT COUNT ( * ) FROM Customers
Keep the records that customer id is not in the first query result	WHERE customer_id NOT IN ( the first query result ) 
Get first name and last name of Customer Payments that has Customers	SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Customer Payments 2 that the number is greater than 2	GROUP BY T1.customer_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get first name and last name of Customer Payments that has Customers	SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of Customer Payments 2 that the number is greater than 2	GROUP BY T1.customer_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number and payment method code of Customer Payments	SELECT payment_method_code , COUNT ( * ) FROM Customer_Payments
Group the records based on payment method code	GROUP BY payment_method_code
Get the number and payment method code of Customer Payments	SELECT payment_method_code , COUNT ( * ) FROM Customer_Payments
Group the records based on payment method code	GROUP BY payment_method_code
Get the number of Lessons	SELECT COUNT ( * ) FROM Lessons
Keep the records that lesson status code is Cancelled	WHERE lesson_status_code = Cancelled
Get the number of Lessons	SELECT COUNT ( * ) FROM Lessons
Keep the records that lesson status code is Cancelled	WHERE lesson_status_code = Cancelled
Get lesson id of Lessons that has Staff	SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn AND nickname is in the form of %s%	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn AND nickname LIKE %s%
Get lesson id of Lessons that has Staff	SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn AND nickname is in the form of %s%	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn AND nickname LIKE %s%
Get the number of Lessons that has Staff	SELECT COUNT ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is in the form of %a%	WHERE T2.first_name LIKE %a%
Get the number of Lessons that has Staff	SELECT COUNT ( * ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is in the form of %a%	WHERE T2.first_name LIKE %a%
Get the SUM of lesson time of Lessons that has Staff	SELECT SUM ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get the SUM of lesson time of Lessons that has Staff	SELECT SUM ( lesson_time ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get the average value of price of Lessons that has Staff	SELECT AVG ( price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get the average value of price of Lessons that has Staff	SELECT AVG ( price ) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id
Keep the records that first name of Staff is Janessa AND last name of Staff is Sawayn	WHERE T2.first_name = Janessa AND T2.last_name = Sawayn
Get the number of Lessons that has Customers	SELECT COUNT ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Ray	WHERE T2.first_name = Ray
Get the number of Lessons that has Customers	SELECT COUNT ( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id
Keep the records that first name of Customers is Ray	WHERE T2.first_name = Ray
Get last name of Customers	SELECT last_name FROM Customers
Get last name of Staff	SELECT last_name FROM Staff
Get last name of Customers	SELECT last_name FROM Customers
Get last name of Staff	SELECT last_name FROM Staff
Get first name of Staff	SELECT first_name FROM Staff
Get first name of Lessons that has Staff	SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2
Get first name of Staff	SELECT first_name FROM Staff
Get first name of Lessons that has Staff	SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2
Get vehicle id and vehicle details of Vehicles that has Lessons	SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id
Group the records based on vehicle id of Vehicles	GROUP BY T1.vehicle_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of Faculty	SELECT COUNT ( * ) FROM Faculty
Get the number of Faculty	SELECT COUNT ( * ) FROM Faculty
Get rank of Faculty	SELECT DISTINCT rank FROM Faculty
Get rank of Faculty	SELECT DISTINCT rank FROM Faculty
Get building of Faculty	SELECT DISTINCT building FROM Faculty
Get building of Faculty	SELECT DISTINCT building FROM Faculty
Get rank and Fname and Lname of Faculty	SELECT rank , Fname , Lname FROM Faculty
Get rank and Fname and Lname of Faculty	SELECT rank , Fname , Lname FROM Faculty
Get Fname and Lname and phone of Faculty	SELECT Fname , Lname , phone FROM Faculty
Keep the records that Sex is F	WHERE Sex = F
Get Fname and Lname and phone of Faculty	SELECT Fname , Lname , phone FROM Faculty
Keep the records that Sex is F	WHERE Sex = F
Get FacID of Faculty	SELECT FacID FROM Faculty
Keep the records that Sex is M	WHERE Sex = M
Get FacID of Faculty	SELECT FacID FROM Faculty
Keep the records that Sex is M	WHERE Sex = M
Get the number of Faculty	SELECT COUNT ( * ) FROM Faculty
Keep the records that Sex is F AND Rank is Professor	WHERE Sex = F AND Rank = Professor
Get the number of Faculty	SELECT COUNT ( * ) FROM Faculty
Keep the records that Sex is F AND Rank is Professor	WHERE Sex = F AND Rank = Professor
Get phone AND room AND building of Faculty	SELECT phone , room , building FROM Faculty
Keep the records that Fname is Jerry AND Lname is Prince	WHERE Fname = Jerry AND Lname = Prince
Get phone AND room AND building of Faculty	SELECT phone , room , building FROM Faculty
Keep the records that Fname is Jerry AND Lname is Prince	WHERE Fname = Jerry AND Lname = Prince
Get the number of Faculty	SELECT COUNT ( * ) FROM Faculty
Keep the records that Rank is Professor AND building is NEB	WHERE Rank = Professor AND building = NEB
Get the number of Faculty	SELECT COUNT ( * ) FROM Faculty
Keep the records that Rank is Professor AND building is NEB	WHERE Rank = Professor AND building = NEB
Get fname and lname of Faculty	SELECT fname , lname FROM Faculty
Keep the records that Rank is Instructor	WHERE Rank = Instructor
Get fname and lname of Faculty	SELECT fname , lname FROM Faculty
Keep the records that Rank is Instructor	WHERE Rank = Instructor
Get the number and building of Faculty	SELECT building , COUNT ( * ) FROM Faculty
Group the records based on building	GROUP BY building
Get the number and building of Faculty	SELECT building , COUNT ( * ) FROM Faculty
Group the records based on building	GROUP BY building
Get building of Faculty	SELECT building FROM Faculty
Group the records based on building	GROUP BY building
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get building of Faculty	SELECT building FROM Faculty
Group the records based on building	GROUP BY building
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get building of Faculty	SELECT building FROM Faculty
Keep the records that rank is Professor	WHERE rank = Professor 
Group the records based on the number building 10 that the number is greater than or equal to 10	GROUP BY building HAVING COUNT ( * ) >= 10 HAVING COUNT ( * ) >= 10
Get building of Faculty	SELECT building FROM Faculty
Keep the records that rank is Professor	WHERE rank = Professor 
Group the records based on the number building 10 that the number is greater than or equal to 10	GROUP BY building HAVING COUNT ( * ) >= 10 HAVING COUNT ( * ) >= 10
Get the number and rank of Faculty	SELECT rank , COUNT ( * ) FROM Faculty
Group the records based on rank	GROUP BY rank
Get the number and rank of Faculty	SELECT rank , COUNT ( * ) FROM Faculty
Group the records based on rank	GROUP BY rank
Get the number and rank and sex of Faculty	SELECT rank , sex , COUNT ( * ) FROM Faculty
Group the records based on rank sex	GROUP BY rank , sex
Get the number and rank and sex of Faculty	SELECT rank , sex , COUNT ( * ) FROM Faculty
Group the records based on rank sex	GROUP BY rank , sex
Get rank of Faculty	SELECT rank FROM Faculty
Group the records based on rank	GROUP BY rank
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get rank of Faculty	SELECT rank FROM Faculty
Group the records based on rank	GROUP BY rank
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number and sex of Faculty	SELECT sex , COUNT ( * ) FROM Faculty
Keep the records that rank is AsstProf	WHERE rank = AsstProf 
Group the records based on sex	GROUP BY sex
Get the number and sex of Faculty	SELECT sex , COUNT ( * ) FROM Faculty
Keep the records that rank is AsstProf	WHERE rank = AsstProf 
Group the records based on sex	GROUP BY sex
Get fname AND lname of Faculty that has Student	SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Keep the records that fname of Student is Linda AND lname of Student is Smith	WHERE T2.fname = Linda AND T2.lname = Smith
Get fname AND lname of Faculty that has Student	SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Keep the records that fname of Student is Linda AND lname of Student is Smith	WHERE T2.fname = Linda AND T2.lname = Smith
Get StuID of Faculty that has Student	SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Keep the records that rank of Faculty is Professor	WHERE T1.rank = Professor
Get StuID of Faculty that has Student	SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Keep the records that rank of Faculty is Professor	WHERE T1.rank = Professor
Get fname AND lname of Faculty that has Student	SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Keep the records that fname of Faculty is Michael AND lname of Faculty is Goodrich	WHERE T1.fname = Michael AND T1.lname = Goodrich
Get fname AND lname of Faculty that has Student	SELECT T2.fname , T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Keep the records that fname of Faculty is Michael AND lname of Faculty is Goodrich	WHERE T1.fname = Michael AND T1.lname = Goodrich
Get the number and FacID of Faculty that has Student	SELECT T1.FacID , COUNT ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Get the number and FacID of Faculty that has Student	SELECT T1.FacID , COUNT ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Get the number and rank of Faculty that has Student	SELECT T1.rank , COUNT ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on rank of Faculty	GROUP BY T1.rank
Get the number and rank of Faculty that has Student	SELECT T1.rank , COUNT ( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on rank of Faculty	GROUP BY T1.rank
Get fname and lname of Faculty that has Student	SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname and lname of Faculty that has Student	SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get FacID of Faculty that has Student	SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on the number FacID of Faculty 2 that the number is greater than or equal to 2	GROUP BY T1.FacID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get FacID of Faculty that has Student	SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor
Group the records based on the number FacID of Faculty 2 that the number is greater than or equal to 2	GROUP BY T1.FacID HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get FacID of Faculty	SELECT FacID FROM Faculty
Get advisor of Student	SELECT advisor FROM Student
Get FacID of Faculty	SELECT FacID FROM Faculty
Get advisor of Student	SELECT advisor FROM Student
Get Activity name of Activity	SELECT activity_name FROM Activity
Get Activity name of Activity	SELECT activity_name FROM Activity
Get the number of Activity	SELECT COUNT ( * ) FROM Activity
Get the number of Activity	SELECT COUNT ( * ) FROM Activity
Get the number of distinct FacID of Faculty participates in	SELECT COUNT ( DISTINCT FacID ) FROM Faculty_participates_in
Get the number of distinct FacID of Faculty participates in	SELECT COUNT ( DISTINCT FacID ) FROM Faculty_participates_in
Get FacID of Faculty	SELECT FacID FROM Faculty
Get FacID of Faculty participates in	SELECT FacID FROM Faculty_participates_in
Get FacID of Faculty	SELECT FacID FROM Faculty
Get FacID of Faculty participates in	SELECT FacID FROM Faculty_participates_in
Get FacID of Faculty participates in	SELECT FacID FROM Faculty_participates_in
Get advisor of Student	SELECT advisor FROM Student
Get FacID of Faculty participates in	SELECT FacID FROM Faculty_participates_in
Get advisor of Student	SELECT advisor FROM Student
Get the number of Faculty that has Faculty participates in	SELECT COUNT ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
Keep the records that fname of Faculty is Mark AND lname of Faculty is Giuliano	WHERE T1.fname = Mark AND T1.lname = Giuliano
Get the number of Faculty that has Faculty participates in	SELECT COUNT ( * ) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
Keep the records that fname of Faculty is Mark AND lname of Faculty is Giuliano	WHERE T1.fname = Mark AND T1.lname = Giuliano
Get Activity name of Faculty that has Faculty participates in AND Activity	SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid
Keep the records that fname of Faculty is Mark AND lname of Faculty is Giuliano	WHERE T1.fname = Mark AND T1.lname = Giuliano
Get Activity name of Faculty that has Faculty participates in AND Activity	SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid
Keep the records that fname of Faculty is Mark AND lname of Faculty is Giuliano	WHERE T1.fname = Mark AND T1.lname = Giuliano
Get the number and fname and lname and FacID of Faculty that has Faculty participates in	SELECT T1.fname , T1.lname , COUNT ( * ) , T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Get the number and fname and lname and FacID of Faculty that has Faculty participates in	SELECT T1.fname , T1.lname , COUNT ( * ) , T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Get the number and Activity name of Activity that has Faculty participates in	SELECT T1.activity_name , COUNT ( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
Group the records based on actID of Activity	GROUP BY T1.actID
Get the number and Activity name of Activity that has Faculty participates in	SELECT T1.activity_name , COUNT ( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
Group the records based on actID of Activity	GROUP BY T1.actID
Get fname and lname of Faculty that has Faculty participates in	SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname and lname of Faculty that has Faculty participates in	SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID
Group the records based on FacID of Faculty	GROUP BY T1.FacID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Activity name of Activity that has Faculty participates in	SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
Group the records based on actID of Activity	GROUP BY T1.actID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Activity name of Activity that has Faculty participates in	SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID
Group the records based on actID of Activity	GROUP BY T1.actID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Participates in	SELECT StuID FROM Participates_in
Get StuID of Student	SELECT StuID FROM Student
Get StuID of Participates in	SELECT StuID FROM Participates_in
Get StuID of Participates in	SELECT StuID FROM Participates_in
Get StuID of Student	SELECT StuID FROM Student
Keep the records that age is less than 20	WHERE age < 20
Get StuID of Participates in	SELECT StuID FROM Participates_in
Get StuID of Student	SELECT StuID FROM Student
Keep the records that age is less than 20	WHERE age < 20
Get fname and lname of Student that has Participates in	SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID
Group the records based on StuID of Student	GROUP BY T1.StuID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get fname and lname of Student that has Participates in	SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID
Group the records based on StuID of Student	GROUP BY T1.StuID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Activity name of Activity that has Participates in	SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID
Group the records based on actID of Activity	GROUP BY T1.actID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Activity name of Activity that has Participates in	SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID
Group the records based on actID of Activity	GROUP BY T1.actID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get lname of Faculty that has Faculty participates in and activity	SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing OR activity name of activity is Kayaking	WHERE T3.activity_name = Canoeing OR T3.activity_name = Kayaking
Get lname of Faculty that has Faculty participates in and activity	SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing OR activity name of activity is Kayaking	WHERE T3.activity_name = Canoeing OR T3.activity_name = Kayaking
Get lname of faculty	SELECT lname FROM faculty
Keep the records that rank is Professor	WHERE rank = Professor
Get lname of Faculty that has Faculty participates in and activity	SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing OR activity name of activity is Kayaking	WHERE T3.activity_name = Canoeing OR T3.activity_name = Kayaking
Get lname of faculty	SELECT lname FROM faculty
Keep the records that rank is Professor	WHERE rank = Professor
Get lname of Faculty that has Faculty participates in and activity	SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing OR activity name of activity is Kayaking	WHERE T3.activity_name = Canoeing OR T3.activity_name = Kayaking
Get lname of Faculty that has Faculty participates in and activity	SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing	WHERE T3.activity_name = Canoeing
Get lname of Faculty that has Faculty participates in and activity	SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Kayaking	WHERE T3.activity_name = Kayaking
Get lname of Faculty that has Faculty participates in and activity	SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing	WHERE T3.activity_name = Canoeing
Get lname of Faculty that has Faculty participates in and activity	SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid
Keep the records that activity name of activity is Kayaking	WHERE T3.activity_name = Kayaking
Get stuid of participates in that has activity	SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing	WHERE T2.activity_name = Canoeing
Get stuid of participates in that has activity	SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid
Keep the records that activity name of activity is Kayaking	WHERE T2.activity_name = Kayaking
Get stuid of participates in that has activity	SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid
Keep the records that activity name of activity is Canoeing	WHERE T2.activity_name = Canoeing
Get stuid of participates in that has activity	SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid
Keep the records that activity name of activity is Kayaking	WHERE T2.activity_name = Kayaking
Get name of airports	SELECT name FROM airports
Keep the records that city is Goroka	WHERE city = Goroka
Get name of airports	SELECT name FROM airports
Keep the records that city is Goroka	WHERE city = Goroka
Get name and city and country and elevation of airports	SELECT name , city , country , elevation FROM airports
Keep the records that city is New York	WHERE city = New York
Get name and city and country and elevation of airports	SELECT name , city , country , elevation FROM airports
Keep the records that city is New York	WHERE city = New York
Get the number of airlines	SELECT COUNT ( * ) FROM airlines
Get the number of airlines	SELECT COUNT ( * ) FROM airlines
Get the number of airlines	SELECT COUNT ( * ) FROM airlines
Keep the records that country is Russia	WHERE country = Russia
Get the number of airlines	SELECT COUNT ( * ) FROM airlines
Keep the records that country is Russia	WHERE country = Russia
Get the maximum value of elevation of airports	SELECT MAX ( elevation ) FROM airports
Keep the records that country is Iceland	WHERE country = Iceland
Get the maximum value of elevation of airports	SELECT MAX ( elevation ) FROM airports
Keep the records that country is Iceland	WHERE country = Iceland
Get name of airports	SELECT name FROM airports
Keep the records that country is Cuba OR country is Argentina	WHERE country = Cuba OR country = Argentina
Get name of airports	SELECT name FROM airports
Keep the records that country is Cuba OR country is Argentina	WHERE country = Cuba OR country = Argentina
Get country of airlines	SELECT country FROM airlines
Keep the records that name is in the form of Orbit%	WHERE name LIKE Orbit%
Get country of airlines	SELECT country FROM airlines
Keep the records that name is in the form of Orbit%	WHERE name LIKE Orbit%
Get name of airports	SELECT name FROM airports
Keep the records that elevation is between -5 X50	WHERE elevation BETWEEN -50 AND 50
Get name of airports	SELECT name FROM airports
Keep the records that elevation is between -5 X50	WHERE elevation BETWEEN -50 AND 50
Get country of airports	SELECT country FROM airports
Order these records based on the elevation and sort them in descending order, and return the top 1 record	ORDER BY elevation DESC LIMIT 1
Get country of airports	SELECT country FROM airports
Order these records based on the elevation and sort them in descending order, and return the top 1 record	ORDER BY elevation DESC LIMIT 1
Get the number of airports	SELECT COUNT ( * ) FROM airports
Keep the records that name is in the form of %International%	WHERE name LIKE %International%
Get the number of airports	SELECT COUNT ( * ) FROM airports
Keep the records that name is in the form of %International%	WHERE name LIKE %International%
Get the number of distinct city of airports	SELECT COUNT ( DISTINCT city ) FROM airports
Keep the records that country is Greenland	WHERE country = Greenland
Get the number of distinct city of airports	SELECT COUNT ( DISTINCT city ) FROM airports
Keep the records that country is Greenland	WHERE country = Greenland
Get the number of airlines that has routes	SELECT COUNT ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Keep the records that name of airlines is American Airlines	WHERE T1.name = American Airlines
Get the number of airlines that has routes	SELECT COUNT ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Keep the records that name of airlines is American Airlines	WHERE T1.name = American Airlines
Get the number of airports that has routes	SELECT COUNT ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Keep the records that country is Canada	WHERE country = Canada
Get the number of airports that has routes	SELECT COUNT ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Keep the records that country is Canada	WHERE country = Canada
Get name and city and country of airports	SELECT name , city , country FROM airports
Order these records based on the elevation, and return the top 1 record	ORDER BY elevation LIMIT 1
Get name and city and country of airports	SELECT name , city , country FROM airports
Order these records based on the elevation, and return the top 1 record	ORDER BY elevation LIMIT 1
Get name and city and country of airports	SELECT name , city , country FROM airports
Order these records based on the elevation and sort them in descending order, and return the top 1 record	ORDER BY elevation DESC LIMIT 1
Get name and city and country of airports	SELECT name , city , country FROM airports
Order these records based on the elevation and sort them in descending order, and return the top 1 record	ORDER BY elevation DESC LIMIT 1
Get name and city and dst apid of airports that has routes	SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Group the records based on dst apid of routes	GROUP BY T2.dst_apid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and city and dst apid of airports that has routes	SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Group the records based on dst apid of routes	GROUP BY T2.dst_apid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and alid of airlines that has routes	SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Group the records based on alid of routes	GROUP BY T2.alid
Order these records based on the the number and sort them in descending order, and return the top 10 records	ORDER BY COUNT ( * ) DESC LIMIT 10
Get name and alid of airlines that has routes	SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Group the records based on alid of routes	GROUP BY T2.alid
Order these records based on the the number and sort them in descending order, and return the top 10 records	ORDER BY COUNT ( * ) DESC LIMIT 10
Get name and city and src apid of airports that has routes	SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Group the records based on src apid of routes	GROUP BY T2.src_apid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and city and src apid of airports that has routes	SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Group the records based on src apid of routes	GROUP BY T2.src_apid
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of distinct dst apid of airlines that has routes	SELECT COUNT ( DISTINCT dst_apid ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Keep the records that name of airlines is American Airlines	WHERE T1.name = American Airlines
Get the number of distinct dst apid of airlines that has routes	SELECT COUNT ( DISTINCT dst_apid ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Keep the records that name of airlines is American Airlines	WHERE T1.name = American Airlines
Get country of airlines	SELECT country FROM airlines
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of airlines	SELECT country FROM airlines
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of airlines	SELECT country FROM airlines
Keep the records that active is Y	WHERE active = Y 
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country of airlines	SELECT country FROM airlines
Keep the records that active is Y	WHERE active = Y 
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and country of airlines	SELECT country , COUNT ( * ) FROM airlines
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and country of airlines	SELECT country , COUNT ( * ) FROM airlines
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and country of airports	SELECT COUNT ( * ) , country FROM airports
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and country of airports	SELECT COUNT ( * ) , country FROM airports
Group the records based on country	GROUP BY country
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and city of airports	SELECT COUNT ( * ) , city FROM airports
Keep the records that country is United States	WHERE country = United States 
Group the records based on city	GROUP BY city
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and city of airports	SELECT COUNT ( * ) , city FROM airports
Keep the records that country is United States	WHERE country = United States 
Group the records based on city	GROUP BY city
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get city of airports	SELECT city FROM airports
Keep the records that country is United States	WHERE country = United States 
Group the records based on the number city 3 that the number is greater than 3	GROUP BY city HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get city of airports	SELECT city FROM airports
Keep the records that country is United States	WHERE country = United States 
Group the records based on the number city 3 that the number is greater than 3	GROUP BY city HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get city of airports	SELECT city FROM airports
Group the records based on the number city 3 that the number is greater than 3	GROUP BY city HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get the number of the first query result	SELECT COUNT ( * ) FROM ( the first query result ) 
Get city of airports	SELECT city FROM airports
Group the records based on the number city 3 that the number is greater than 3	GROUP BY city HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get the number of the first query result	SELECT COUNT ( * ) FROM ( the first query result ) 
Get the number and city of airports	SELECT city , COUNT ( * ) FROM airports
Group the records based on the number city 1 that the number is greater than 1	GROUP BY city HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number and city of airports	SELECT city , COUNT ( * ) FROM airports
Group the records based on the number city 1 that the number is greater than 1	GROUP BY city HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get city of airports	SELECT city FROM airports
Group the records based on the number city 2 that the number is greater than 2	GROUP BY city HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Order these records based on the the number	ORDER BY COUNT ( * ) 
Get city of airports	SELECT city FROM airports
Group the records based on the number city 2 that the number is greater than 2	GROUP BY city HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Order these records based on the the number	ORDER BY COUNT ( * ) 
Get the number and name of airports that has routes	SELECT COUNT ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Group the records based on name of airports	GROUP BY T1.name
Get the number and name of airports that has routes	SELECT COUNT ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Group the records based on name of airports	GROUP BY T1.name
Get the number and name of airports that has routes	SELECT COUNT ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Group the records based on name of airports	GROUP BY T1.name
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the number and name of airports that has routes	SELECT COUNT ( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Group the records based on name of airports	GROUP BY T1.name
Order these records based on the the number and sort them in descending ORDER	ORDER BY COUNT ( * ) DESC 
Get the average value of elevation and country of airports	SELECT AVG ( elevation ) , country FROM airports
Group the records based on country	GROUP BY country
Get the average value of elevation and country of airports	SELECT AVG ( elevation ) , country FROM airports
Group the records based on country	GROUP BY country
Get city of airports	SELECT city FROM airports
Group the records based on the number city 2 that the number is 2	GROUP BY city HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get city of airports	SELECT city FROM airports
Group the records based on the number city 2 that the number is 2	GROUP BY city HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get the number and country and name of airlines that has routes	SELECT T1.country , T1.name , COUNT ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Group the records based on country of airlines name of airlines	GROUP BY T1.country , T1.name
Get the number and country and name of airlines that has routes	SELECT T1.country , T1.name , COUNT ( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Group the records based on country of airlines name of airlines	GROUP BY T1.country , T1.name
Get the number of routes that has airports	SELECT COUNT ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid
Keep the records that country of airports is Italy	WHERE T2.country = Italy
Get the number of routes that has airports	SELECT COUNT ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid
Keep the records that country of airports is Italy	WHERE T2.country = Italy
Get the number of routes that has airports AND airlines	SELECT COUNT ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid
Keep the records that country of airports is Italy AND name of airlines is American Airlines	WHERE T2.country = Italy AND T3.name = American Airlines
Get the number of routes that has airports AND airlines	SELECT COUNT ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid
Keep the records that country of airports is Italy AND name of airlines is American Airlines	WHERE T2.country = Italy AND T3.name = American Airlines
Get the number of airports that has routes	SELECT COUNT ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Keep the records that name of airports is John F Kennedy International Airport	WHERE T1.name = John F Kennedy International Airport
Get the number of airports that has routes	SELECT COUNT ( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Keep the records that name of airports is John F Kennedy International Airport	WHERE T1.name = John F Kennedy International Airport
Get apid of airports	SELECT apid FROM airports
Keep the records that country is Canada	WHERE country = Canada
Get the number of routes	SELECT COUNT ( * ) FROM routes
Keep the records that dst apid is in the first query result AND src apid is in SELECT apid FROM airports WHERE country United States	WHERE dst_apid IN ( the first query result )  AND src_apid IN ( SELECT apid FROM airports WHERE country = United States )
Get apid of airports	SELECT apid FROM airports
Keep the records that country is Canada	WHERE country = Canada
Get the number of routes	SELECT COUNT ( * ) FROM routes
Keep the records that dst apid is in the first query result AND src apid is in SELECT apid FROM airports WHERE country United States	WHERE dst_apid IN ( the first query result )  AND src_apid IN ( SELECT apid FROM airports WHERE country = United States )
Get apid of airports	SELECT apid FROM airports
Keep the records that country is United States	WHERE country = United States
Get rid of routes	SELECT rid FROM routes
Keep the records that dst apid is in the first query result AND src apid is in the first query result	WHERE dst_apid IN ( the first query result )  AND src_apid IN ( ( the first query result )  )
Get apid of airports	SELECT apid FROM airports
Keep the records that country is United States	WHERE country = United States
Get rid of routes	SELECT rid FROM routes
Keep the records that dst apid is in the first query result AND src apid is in the first query result	WHERE dst_apid IN ( the first query result )  AND src_apid IN ( ( the first query result )  )
Get name of airlines that has routes	SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Group the records based on name of airlines	GROUP BY T1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of airlines that has routes	SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid
Group the records based on name of airlines	GROUP BY T1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of airports that has routes	SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Keep the records that country of airports is China	WHERE T1.country = China 
Group the records based on name of airports	GROUP BY T1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of airports that has routes	SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid
Keep the records that country of airports is China	WHERE T1.country = China 
Group the records based on name of airports	GROUP BY T1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of airports that has routes	SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Keep the records that country of airports is China	WHERE T1.country = China 
Group the records based on name of airports	GROUP BY T1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of airports that has routes	SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid
Keep the records that country of airports is China	WHERE T1.country = China 
Group the records based on name of airports	GROUP BY T1.name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get ORDER id of orders	SELECT order_id FROM orders
Order these records based on the date ORDER placed and sort them in descending order, and return the top 1 record	ORDER BY date_order_placed DESC LIMIT 1
Get ORDER id of orders	SELECT order_id FROM orders
Order these records based on the date ORDER placed and sort them in descending order, and return the top 1 record	ORDER BY date_order_placed DESC LIMIT 1
Get ORDER id and customer id of orders	SELECT order_id , customer_id FROM orders
Order these records based on the date ORDER placed, and return the top 1 record	ORDER BY date_order_placed LIMIT 1
Get ORDER id and customer id of orders	SELECT order_id , customer_id FROM orders
Order these records based on the date ORDER placed, and return the top 1 record	ORDER BY date_order_placed LIMIT 1
Get order id of shipments	SELECT order_id FROM shipments
Keep the records that shipment tracking number is 3452	WHERE shipment_tracking_number = 3452
Get order id of shipments	SELECT order_id FROM shipments
Keep the records that shipment tracking number is 3452	WHERE shipment_tracking_number = 3452
Get order item id of order items	SELECT order_item_id FROM order_items
Keep the records that product id is 11	WHERE product_id = 11
Get order item id of order items	SELECT order_item_id FROM order_items
Keep the records that product id is 11	WHERE product_id = 11
Get customer name of customers that has orders	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is Packing	WHERE T2.order_status = Packing
Get customer name of customers that has orders	SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is Packing	WHERE T2.order_status = Packing
Get customer details of customers that has orders	SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is On Road	WHERE T2.order_status = On Road
Get customer details of customers that has orders	SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is On Road	WHERE T2.order_status = On Road
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer id of customers that has orders	SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer id of customers that has orders	SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get order id and order status of customers that has orders	SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer name of customers is Jeramie	WHERE T1.customer_name = Jeramie
Get order id and order status of customers that has orders	SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer name of customers is Jeramie	WHERE T1.customer_name = Jeramie
Get date order placed of customers that has orders	SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer name of customers is Jeramie	WHERE T1.customer_name = Jeramie
Get date order placed of customers that has orders	SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that customer name of customers is Jeramie	WHERE T1.customer_name = Jeramie
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that date order placed of orders is greater than or equal to 2009-01-01 AND date order placed of orders is less than or equal to 2010-01-01	WHERE T2.date_order_placed >= 2009-01-01 AND T2.date_order_placed <= 2010-01-01
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that date order placed of orders is greater than or equal to 2009-01-01 AND date order placed of orders is less than or equal to 2010-01-01	WHERE T2.date_order_placed >= 2009-01-01 AND T2.date_order_placed <= 2010-01-01
Get product id of orders that has order items	SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id
Keep the records that date order placed of orders is greater than or equal to 1975-01-01 AND date order placed of orders is less than or equal to 1976-01-01	WHERE T1.date_order_placed >= 1975-01-01 AND T1.date_order_placed <= 1976-01-01
Get product id of orders that has order items	SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id
Keep the records that date order placed of orders is greater than or equal to 1975-01-01 AND date order placed of orders is less than or equal to 1976-01-01	WHERE T1.date_order_placed >= 1975-01-01 AND T1.date_order_placed <= 1976-01-01
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is On Road	WHERE T2.order_status = On Road
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is Shipped	WHERE T2.order_status = Shipped
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is On Road	WHERE T2.order_status = On Road
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is Shipped	WHERE T2.order_status = Shipped
Get customer id of customers that has orders	SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is On Road	WHERE T2.order_status = On Road
Get customer id of customers that has orders	SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is Shipped	WHERE T2.order_status = Shipped
Get customer id of customers that has orders	SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is On Road	WHERE T2.order_status = On Road
Get customer id of customers that has orders	SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Keep the records that order status of orders is Shipped	WHERE T2.order_status = Shipped
Get date order placed of orders that has shipments	SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id
Keep the records that shipment tracking number of shipments is 3452	WHERE T2.shipment_tracking_number = 3452
Get date order placed of orders that has shipments	SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id
Keep the records that shipment tracking number of shipments is 3452	WHERE T2.shipment_tracking_number = 3452
Get date order placed of orders that has shipments	SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id
Keep the records that invoice number of shipments is 10	WHERE T2.invoice_number = 10
Get date order placed of orders that has shipments	SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id
Keep the records that invoice number of shipments is 10	WHERE T2.invoice_number = 10
Get the number AND product id of orders that has order items AND products	SELECT COUNT ( * ) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id
Group the records based on product id of products	GROUP BY T3.product_id
Get the number AND product id of orders that has order items AND products	SELECT COUNT ( * ) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id
Group the records based on product id of products	GROUP BY T3.product_id
Get the number AND product name of orders that has order items AND products	SELECT T3.product_name , COUNT ( * ) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id
Group the records based on product id of products	GROUP BY T3.product_id
Get the number AND product name of orders that has order items AND products	SELECT T3.product_name , COUNT ( * ) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id
Group the records based on product id of products	GROUP BY T3.product_id
Get order id of shipments	SELECT order_id FROM shipments
Keep the records that shipment date is greater than 2000-01-01	WHERE shipment_date > 2000-01-01
Get order id of shipments	SELECT order_id FROM shipments
Keep the records that shipment date is greater than 2000-01-01	WHERE shipment_date > 2000-01-01
Get the maximum value of shipment date of shipments	SELECT MAX ( shipment_date ) FROM shipments
Get order id of shipments	SELECT order_id FROM shipments
Keep the records that shipment date is the first query result	WHERE shipment_date = ( the first query result ) 
Get the maximum value of shipment date of shipments	SELECT MAX ( shipment_date ) FROM shipments
Get order id of shipments	SELECT order_id FROM shipments
Keep the records that shipment date is the first query result	WHERE shipment_date = ( the first query result ) 
Get product name of products	SELECT DISTINCT product_name FROM products
Order these records based on the product name	ORDER BY product_name 
Get product name of products	SELECT DISTINCT product_name FROM products
Order these records based on the product name	ORDER BY product_name 
Get ORDER id of orders	SELECT DISTINCT order_id FROM orders
Order these records based on the date ORDER placed	ORDER BY date_order_placed 
Get ORDER id of orders	SELECT DISTINCT order_id FROM orders
Order these records based on the date ORDER placed	ORDER BY date_order_placed 
Get ORDER id of orders that has ORDER items	SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id
Group the records based on ORDER id of orders	GROUP BY T1.order_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get ORDER id of orders that has ORDER items	SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id
Group the records based on ORDER id of orders	GROUP BY T1.order_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get customer name of customers that has orders	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id
Group the records based on customer id of customers	GROUP BY T1.customer_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get invoice number of invoices	SELECT invoice_number FROM invoices
Keep the records that invoice date is less than 1989-09-03 OR invoice date is greater than 2007-12-25	WHERE invoice_date < 1989-09-03 OR invoice_date > 2007-12-25
Get invoice number of invoices	SELECT invoice_number FROM invoices
Keep the records that invoice date is less than 1989-09-03 OR invoice date is greater than 2007-12-25	WHERE invoice_date < 1989-09-03 OR invoice_date > 2007-12-25
Get invoice details of invoices	SELECT DISTINCT invoice_details FROM invoices
Keep the records that invoice date is less than 1989-09-03 OR invoice date is greater than 2007-12-25	WHERE invoice_date < 1989-09-03 OR invoice_date > 2007-12-25
Get invoice details of invoices	SELECT DISTINCT invoice_details FROM invoices
Keep the records that invoice date is less than 1989-09-03 OR invoice date is greater than 2007-12-25	WHERE invoice_date < 1989-09-03 OR invoice_date > 2007-12-25
Get the number and customer name of orders that has customers	SELECT T2.customer_name , COUNT ( * ) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of customers 2 that the number is greater than or equal to 2	GROUP BY T2.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number and customer name of orders that has customers	SELECT T2.customer_name , COUNT ( * ) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of customers 2 that the number is greater than or equal to 2	GROUP BY T2.customer_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get customer name of orders that has customers	SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of customers 2 that the number is less than or equal to 2	GROUP BY T2.customer_id HAVING COUNT ( * ) <= 2 HAVING COUNT ( * ) <= 2
Get customer name of orders that has customers	SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id
Group the records based on the number customer id of customers 2 that the number is less than or equal to 2	GROUP BY T2.customer_id HAVING COUNT ( * ) <= 2 HAVING COUNT ( * ) <= 2
Get customer name of customers that has orders AND order items AND products	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id
Keep the records that product name of products is food	WHERE T4.product_name = food 
Group the records based on the number customer id of customers 1 that the number is greater than or equal to 1	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get customer name of customers that has orders AND order items AND products	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id
Keep the records that product name of products is food	WHERE T4.product_name = food 
Group the records based on the number customer id of customers 1 that the number is greater than or equal to 1	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get customer name of customers that has orders AND order items AND products	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id
Keep the records that order item status of order items is Cancel AND product name of products is food	WHERE T3.order_item_status = Cancel AND T4.product_name = food 
Group the records based on the number customer id of customers 1 that the number is greater than or equal to 1	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get customer name of customers that has orders AND order items AND products	SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id
Keep the records that order item status of order items is Cancel AND product name of products is food	WHERE T3.order_item_status = Cancel AND T4.product_name = food 
Group the records based on the number customer id of customers 1 that the number is greater than or equal to 1	GROUP BY T1.customer_id HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get the number of architect	SELECT COUNT ( * ) FROM architect
Keep the records that gender is female	WHERE gender = female
Get name and nationality and id of architect	SELECT name , nationality , id FROM architect
Keep the records that gender is male	WHERE gender = male 
Order these records based on the name	ORDER BY name 
Get the maximum value of length meters and name of bridge that has architect	SELECT MAX ( T1.length_meters ) , T2.name FROM bridge AS T1 JOIN architect AS T2
Get the average value of length feet of bridge	SELECT AVG ( length_feet ) FROM bridge
Get name and built year of mill	SELECT name , built_year FROM mill
Keep the records that is Grondzeiler	WHERE TYPE = Grondzeiler
Get name and nationality of architect that has mill	SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 JOIN mill AS t2
Get name of mill	SELECT name FROM mill
Keep the records that is not Donceel	WHERE LOCATION != Donceel
Get type of mill that has architect	SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id
Keep the records that nationality of T2 is American OR nationality of T2 is Canadian	WHERE T2.nationality = American OR T2.nationality = Canadian
Get id and name of architect that has bridge	SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id
Group the records based on the number id of architect 3 that the number is greater than or equal to 3	GROUP BY T1.id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get id and name and nationality of architect that has mill	SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id
Group the records based on id of architect	GROUP BY T1.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get id and name and gender of architect that has bridge	SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id
Group the records based on the number id of architect 2 that the number is 2	GROUP BY T1.id HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get id and name and gender of architect that has mill	SELECT T1.id , T1.name , T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id
Group the records based on the number id of architect 1 that the number is 1	GROUP BY T1.id HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get of bridge	SELECT LOCATION FROM bridge
Keep the records that name is Kolob Arch OR name is Rainbow Bridge	WHERE name = Kolob Arch OR name = Rainbow Bridge
Get name of mill	SELECT name FROM mill
Keep the records that name is in the form of %Moulin%	WHERE name LIKE %Moulin%
Get name of mill that has architect and bridge	SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id
Keep the records that length meters of bridge is greater than 80	WHERE T3.length_meters > 80
Get the number of mill	SELECT TYPE , COUNT ( * ) FROM mill
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get architect id of mill	SELECT architect_id FROM mill
Keep the records that built year is less than 1850	WHERE built_year < 1850
Get the number of architect	SELECT COUNT ( * ) FROM architect
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get name of bridge that has architect	SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id
Keep the records that nationality of architect is American	WHERE t2.nationality = American 
Order these records based on the length feet of bridge	ORDER BY t1.length_feet 
Get the number of book club	SELECT COUNT ( * ) FROM book_club
Get the number of book club	SELECT COUNT ( * ) FROM book_club
Get book title and author or editor of book club	SELECT book_title , author_or_editor FROM book_club
Keep the records that is greater than 1989	WHERE YEAR > 1989
Get book title and author or editor of book club	SELECT book_title , author_or_editor FROM book_club
Keep the records that is greater than 1989	WHERE YEAR > 1989
Get publisher of book club	SELECT DISTINCT publisher FROM book_club
Get publisher of book club	SELECT DISTINCT publisher FROM book_club
Get book title and publisher of book club	SELECT YEAR , book_title , publisher FROM book_club
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get book title and publisher of book club	SELECT YEAR , book_title , publisher FROM book_club
Order these records based on the and sort them in descending ORDER	ORDER BY DESC 
Get the number and publisher of book club	SELECT publisher , COUNT ( * ) FROM book_club
Group the records based on publisher	GROUP BY publisher
Get the number and publisher of book club	SELECT publisher , COUNT ( * ) FROM book_club
Group the records based on publisher	GROUP BY publisher
Get publisher of book club	SELECT publisher FROM book_club
Group the records based on publisher	GROUP BY publisher
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get publisher of book club	SELECT publisher FROM book_club
Group the records based on publisher	GROUP BY publisher
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and category of book club	SELECT category , COUNT ( * ) FROM book_club
Group the records based on category	GROUP BY category
Get the number and category of book club	SELECT category , COUNT ( * ) FROM book_club
Group the records based on category	GROUP BY category
Get category of book club	SELECT category FROM book_club
Keep the records that is greater than 1989	WHERE YEAR > 1989 
Group the records based on the number category 2 that the number is greater than or equal to 2	GROUP BY category HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get category of book club	SELECT category FROM book_club
Keep the records that is greater than 1989	WHERE YEAR > 1989 
Group the records based on the number category 2 that the number is greater than or equal to 2	GROUP BY category HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get publisher of book club	SELECT publisher FROM book_club
Keep the records that is 1989	WHERE YEAR = 1989
Get publisher of book club	SELECT publisher FROM book_club
Keep the records that is 1990	WHERE YEAR = 1990
Get publisher of book club	SELECT publisher FROM book_club
Keep the records that is 1989	WHERE YEAR = 1989
Get publisher of book club	SELECT publisher FROM book_club
Keep the records that is 1990	WHERE YEAR = 1990
Get publisher of book club	SELECT publisher FROM book_club
Get publisher of book club	SELECT publisher FROM book_club
Keep the records that is 1989	WHERE YEAR = 1989
Get publisher of book club	SELECT publisher FROM book_club
Get publisher of book club	SELECT publisher FROM book_club
Keep the records that is 1989	WHERE YEAR = 1989
Get title and director of movie	SELECT title , YEAR , director FROM movie
Order these records based on the budget million	ORDER BY budget_million 
Get title and director of movie	SELECT title , YEAR , director FROM movie
Order these records based on the budget million	ORDER BY budget_million 
Get the number of distinct director of movie	SELECT COUNT ( DISTINCT director ) FROM movie
Get the number of distinct director of movie	SELECT COUNT ( DISTINCT director ) FROM movie
Get title and director of movie	SELECT title , director FROM movie
Keep the records that is less than or equal to 2000	WHERE YEAR <= 2000 
Order these records based on the gross worldwide and sort them in descending order, and return the top 1 record	ORDER BY gross_worldwide DESC LIMIT 1
Get title and director of movie	SELECT title , director FROM movie
Keep the records that is less than or equal to 2000	WHERE YEAR <= 2000 
Order these records based on the gross worldwide and sort them in descending order, and return the top 1 record	ORDER BY gross_worldwide DESC LIMIT 1
Get director of movie	SELECT director FROM movie
Keep the records that is 2000	WHERE YEAR = 2000
Get director of movie	SELECT director FROM movie
Keep the records that is 1999	WHERE YEAR = 1999
Get director of movie	SELECT director FROM movie
Keep the records that is 2000	WHERE YEAR = 2000
Get director of movie	SELECT director FROM movie
Keep the records that is 1999	WHERE YEAR = 1999
Get director of movie	SELECT director FROM movie
Keep the records that is 1999 OR is 2000	WHERE YEAR = 1999 OR YEAR = 2000
Get director of movie	SELECT director FROM movie
Keep the records that is 1999 OR is 2000	WHERE YEAR = 1999 OR YEAR = 2000
Get the average value of budget million and the maximum value of budget million and the minimum value of budget million of movie	SELECT AVG ( budget_million ) , MAX ( budget_million ) , MIN ( budget_million ) FROM movie
Keep the records that is less than 2000	WHERE YEAR < 2000
Get the average value of budget million and the maximum value of budget million and the minimum value of budget million of movie	SELECT AVG ( budget_million ) , MAX ( budget_million ) , MIN ( budget_million ) FROM movie
Keep the records that is less than 2000	WHERE YEAR < 2000
Get company name of culture company that has book club	SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
Keep the records that publisher of book club is Alyson	WHERE T2.publisher = Alyson
Get company name of culture company that has book club	SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id
Keep the records that publisher of book club is Alyson	WHERE T2.publisher = Alyson
Get title and book title of movie that has culture company and book club	SELECT T1.title , T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id
Keep the records that incorporated in of culture company is China	WHERE T2.incorporated_in = China
Get title and book title of movie that has culture company and book club	SELECT T1.title , T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id
Keep the records that incorporated in of culture company is China	WHERE T2.incorporated_in = China
Get company name of movie that has culture company	SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id
Keep the records that year of movie is 1999	WHERE T1.year = 1999
Get company name of movie that has culture company	SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id
Keep the records that year of movie is 1999	WHERE T1.year = 1999
Get the number of singer	SELECT COUNT ( * ) FROM singer
Get the number of singer	SELECT COUNT ( * ) FROM singer
Get name and country and age of singer	SELECT name , country , age FROM singer
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get name and country and age of singer	SELECT name , country , age FROM singer
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get the average value of age and the minimum value of age and the maximum value of age of singer	SELECT AVG ( age ) , MIN ( age ) , MAX ( age ) FROM singer
Keep the records that country is France	WHERE country = France
Get the average value of age and the minimum value of age and the maximum value of age of singer	SELECT AVG ( age ) , MIN ( age ) , MAX ( age ) FROM singer
Keep the records that country is France	WHERE country = France
Get song name and song release year of singer	SELECT song_name , song_release_year FROM singer
Order these records based on the age, and return the top 1 record	ORDER BY age LIMIT 1
Get song name and song release year of singer	SELECT song_name , song_release_year FROM singer
Order these records based on the age, and return the top 1 record	ORDER BY age LIMIT 1
Get country of singer	SELECT DISTINCT country FROM singer
Keep the records that age is greater than 20	WHERE age > 20
Get country of singer	SELECT DISTINCT country FROM singer
Keep the records that age is greater than 20	WHERE age > 20
Get the number and country of singer	SELECT country , COUNT ( * ) FROM singer
Group the records based on country	GROUP BY country
Get the number and country of singer	SELECT country , COUNT ( * ) FROM singer
Group the records based on country	GROUP BY country
Get the average value of age of singer	SELECT AVG ( age ) FROM singer
Get song name of singer	SELECT song_name FROM singer
Keep the records that age is greater than the first query result	WHERE age > ( the first query result ) 
Get the average value of age of singer	SELECT AVG ( age ) FROM singer
Get song name of singer	SELECT song_name FROM singer
Keep the records that age is greater than the first query result	WHERE age > ( the first query result ) 
Get name of stadium	SELECT LOCATION , name FROM stadium
Keep the records that capacity is between 500 X10000	WHERE capacity BETWEEN 5000 AND 10000
Get name of stadium	SELECT LOCATION , name FROM stadium
Keep the records that capacity is between 500 X10000	WHERE capacity BETWEEN 5000 AND 10000
Get the maximum value of capacity and average of stadium	SELECT MAX ( capacity ) , average FROM stadium
Get the average value of capacity and the maximum value of capacity of stadium	SELECT AVG ( capacity ) , MAX ( capacity ) FROM stadium
Get name and capacity of stadium	SELECT name , capacity FROM stadium
Order these records based on the average and sort them in descending order, and return the top 1 record	ORDER BY average DESC LIMIT 1
Get name and capacity of stadium	SELECT name , capacity FROM stadium
Order these records based on the average and sort them in descending order, and return the top 1 record	ORDER BY average DESC LIMIT 1
Get the number of concert	SELECT COUNT ( * ) FROM concert
Keep the records that is 2014 OR is 2015	WHERE YEAR = 2014 OR YEAR = 2015
Get the number of concert	SELECT COUNT ( * ) FROM concert
Keep the records that is 2014 OR is 2015	WHERE YEAR = 2014 OR YEAR = 2015
Get the number and name of concert that has stadium	SELECT T2.name , COUNT ( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Group the records based on stadium id of concert	GROUP BY T1.stadium_id
Get the number and name of concert that has stadium	SELECT T2.name , COUNT ( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Group the records based on stadium id of concert	GROUP BY T1.stadium_id
Get name and capacity of concert that has stadium	SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that year of concert is greater than or equal to 2014	WHERE T1.year >= 2014 
Group the records based on stadium id of stadium	GROUP BY T2.stadium_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name and capacity of concert that has stadium	SELECT t2.name , t2.capacity FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id
Keep the records that year of concert is greater than 2013	WHERE t1.year > 2013 
Group the records based on stadium id of stadium	GROUP BY t2.stadium_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of concert	SELECT YEAR FROM concert
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of concert	SELECT YEAR FROM concert
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get stadium id of concert	SELECT stadium_id FROM concert
Get name of stadium	SELECT name FROM stadium
Keep the records that stadium id is not in the first query result	WHERE stadium_id NOT IN ( the first query result ) 
Get stadium id of concert	SELECT stadium_id FROM concert
Get name of stadium	SELECT name FROM stadium
Keep the records that stadium id is not in the first query result	WHERE stadium_id NOT IN ( the first query result ) 
Get country of singer	SELECT country FROM singer
Keep the records that age is greater than 40	WHERE age > 40
Get country of singer	SELECT country FROM singer
Keep the records that age is less than 30	WHERE age < 30
Get name of stadium	SELECT name FROM stadium
Get name of concert that has stadium	SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that year of concert is 2014	WHERE T1.year = 2014
Get name of stadium	SELECT name FROM stadium
Get name of concert that has stadium	SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that year of concert is 2014	WHERE T1.year = 2014
Get the number and concert name and theme of singer in concert that has concert	SELECT T2.concert_name , T2.theme , COUNT ( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id
Group the records based on concert id of concert	GROUP BY T2.concert_id
Get the number and concert name and theme of singer in concert that has concert	SELECT t2.concert_name , t2.theme , COUNT ( * ) FROM singer_in_concert AS t1 JOIN concert AS t2 ON t1.concert_id = t2.concert_id
Group the records based on concert id of concert	GROUP BY t2.concert_id
Get the number and name of singer in concert that has singer	SELECT T2.name , COUNT ( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id
Group the records based on singer id of singer	GROUP BY T2.singer_id
Get the number and name of singer in concert that has singer	SELECT T2.name , COUNT ( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id
Group the records based on singer id of singer	GROUP BY T2.singer_id
Get name of singer in concert that has singer and concert	SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id
Keep the records that year of concert is 2014	WHERE T3.year = 2014
Get name of singer in concert that has singer and concert	SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id
Keep the records that year of concert is 2014	WHERE T3.year = 2014
Get name and country of singer	SELECT name , country FROM singer
Keep the records that song name is in the form of %Hey%	WHERE song_name LIKE %Hey%
Get name and country of singer	SELECT name , country FROM singer
Keep the records that song name is in the form of %Hey%	WHERE song_name LIKE %Hey%
Get name and location of concert that has stadium	SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that Year of concert is 2014	WHERE T1.Year = 2014
Get name and location of concert that has stadium	SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that Year of concert is 2015	WHERE T1.Year = 2015
Get name and location of concert that has stadium	SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that Year of concert is 2014	WHERE T1.Year = 2014
Get name and location of concert that has stadium	SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id
Keep the records that Year of concert is 2015	WHERE T1.Year = 2015
Get stadium id of stadium	SELECT stadium_id FROM stadium
Order these records based on the capacity and sort them in descending order, and return the top 1 record	ORDER BY capacity DESC LIMIT 1
Get the number of concert	SELECT COUNT ( * ) FROM concert
Keep the records that stadium id is the first query result	WHERE stadium_id = ( the first query result ) 
Get stadium id of stadium	SELECT stadium_id FROM stadium
Order these records based on the capacity and sort them in descending order, and return the top 1 record	ORDER BY capacity DESC LIMIT 1
Get the number of concert	SELECT COUNT ( * ) FROM concert
Keep the records that stadium id is the first query result	WHERE stadium_id = ( the first query result ) 
Get the number of pets	SELECT COUNT ( * ) FROM pets
Keep the records that weight is greater than 10	WHERE weight > 10
Get the number of pets	SELECT COUNT ( * ) FROM pets
Keep the records that weight is greater than 10	WHERE weight > 10
Get weight of pets	SELECT weight FROM pets
Order these records based on the pet age, and return the top 1 record	ORDER BY pet_age LIMIT 1
Get weight of pets	SELECT weight FROM pets
Order these records based on the pet age, and return the top 1 record	ORDER BY pet_age LIMIT 1
Get the maximum value of weight and petType of pets	SELECT MAX ( weight ) , petType FROM pets
Group the records based on petType	GROUP BY petType
Get the maximum value of weight and petType of pets	SELECT MAX ( weight ) , petType FROM pets
Group the records based on petType	GROUP BY petType
Get the number of student that has has pet	SELECT COUNT ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Keep the records that age of student is greater than 20	WHERE T1.age > 20
Get the number of student that has has pet	SELECT COUNT ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Keep the records that age of student is greater than 20	WHERE T1.age > 20
Get the number of student that has has pet AND pets	SELECT COUNT ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid
Keep the records that sex of student is F AND pettype of pets is dog	WHERE T1.sex = F AND T3.pettype = dog
Get the number of student that has has pet AND pets	SELECT COUNT ( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid
Keep the records that sex of student is F AND pettype of pets is dog	WHERE T1.sex = F AND T3.pettype = dog
Get the number of distinct pettype of pets	SELECT COUNT ( DISTINCT pettype ) FROM pets
Get the number of distinct pettype of pets	SELECT COUNT ( DISTINCT pettype ) FROM pets
Get Fname of student that has has pet and pets	SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat OR pettype of pets is dog	WHERE T3.pettype = cat OR T3.pettype = dog
Get Fname of student that has has pet and pets	SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat OR pettype of pets is dog	WHERE T3.pettype = cat OR T3.pettype = dog
Get fname of student that has has pet and pets	SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid
Keep the records that pettype of pets is cat	WHERE t3.pettype = cat
Get fname of student that has has pet and pets	SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid
Keep the records that pettype of pets is dog	WHERE t3.pettype = dog
Get Fname of student that has has pet and pets	SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get Fname of student that has has pet and pets	SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is dog	WHERE T3.pettype = dog
Get stuid of student that has has pet and pets	SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get major and age of student	SELECT major , age FROM student
Keep the records that stuid is not in the first query result	WHERE stuid NOT IN ( the first query result ) 
Get stuid of student that has has pet and pets	SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get major and age of student	SELECT major , age FROM student
Keep the records that stuid is not in the first query result	WHERE stuid NOT IN ( the first query result ) 
Get stuid of student	SELECT stuid FROM student
Get stuid of student that has has pet and pets	SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get stuid of student	SELECT stuid FROM student
Get stuid of student that has has pet and pets	SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get stuid of student that has has pet and pets	SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get fname AND age of student that has has pet AND pets	SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is dog AND stuid of student is not in the first query result	WHERE T3.pettype = dog AND T1.stuid NOT IN ( the first query result ) 
Get stuid of student that has has pet and pets	SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is cat	WHERE T3.pettype = cat
Get fname AND age of student that has has pet AND pets	SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pettype of pets is dog AND stuid of student is not in the first query result	WHERE T3.pettype = dog AND T1.stuid NOT IN ( the first query result ) 
Get pettype and weight of pets	SELECT pettype , weight FROM pets
Order these records based on the pet age, and return the top 1 record	ORDER BY pet_age LIMIT 1
Get pettype and weight of pets	SELECT pettype , weight FROM pets
Order these records based on the pet age, and return the top 1 record	ORDER BY pet_age LIMIT 1
Get petid and weight of pets	SELECT petid , weight FROM pets
Keep the records that pet age is greater than 1	WHERE pet_age > 1
Get petid and weight of pets	SELECT petid , weight FROM pets
Keep the records that pet age is greater than 1	WHERE pet_age > 1
Get the average value of pet age and the maximum value of pet age and pettype of pets	SELECT AVG ( pet_age ) , MAX ( pet_age ) , pettype FROM pets
Group the records based on pettype	GROUP BY pettype
Get the average value of pet age and the maximum value of pet age and pettype of pets	SELECT AVG ( pet_age ) , MAX ( pet_age ) , pettype FROM pets
Group the records based on pettype	GROUP BY pettype
Get the average value of weight and pettype of pets	SELECT AVG ( weight ) , pettype FROM pets
Group the records based on pettype	GROUP BY pettype
Get the average value of weight and pettype of pets	SELECT AVG ( weight ) , pettype FROM pets
Group the records based on pettype	GROUP BY pettype
Get fname and age of student that has has pet	SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2
Get fname and age of student that has has pet	SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2
Get petid of student that has has pet	SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Keep the records that Lname of student is Smith	WHERE T1.Lname = Smith
Get petid of student that has has pet	SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Keep the records that Lname of student is Smith	WHERE T1.Lname = Smith
Get the number and stuid of student that has has pet	SELECT COUNT ( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Group the records based on stuid of student	GROUP BY T1.stuid
Get the number and stuid of student that has has pet	SELECT COUNT ( * ) , t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid
Group the records based on stuid of student	GROUP BY t1.stuid
Get fname and sex of student that has has pet	SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Group the records based on the number stuid of student 1 that the number is greater than 1	GROUP BY T1.stuid HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get fname and sex of student that has has pet	SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
Group the records based on the number stuid of student 1 that the number is greater than 1	GROUP BY T1.stuid HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get lname of student that has has pet AND pets	SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pet age of pets is 3 AND pettype of pets is cat	WHERE T3.pet_age = 3 AND T3.pettype = cat
Get lname of student that has has pet AND pets	SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid
Keep the records that pet age of pets is 3 AND pettype of pets is cat	WHERE T3.pet_age = 3 AND T3.pettype = cat
Get stuid of has pet	SELECT stuid FROM has_pet
Get the average value of age of student	SELECT AVG ( age ) FROM student
Keep the records that stuid is not in the first query result	WHERE stuid not in ( the first query result ) 
Get stuid of has pet	SELECT stuid FROM has_pet
Get the average value of age of student	SELECT AVG ( age ) FROM student
Keep the records that stuid is not in the first query result	WHERE stuid not in ( the first query result ) 
Get the number of CONTINENTS	SELECT COUNT ( * ) FROM CONTINENTS
Get the number of CONTINENTS	SELECT COUNT ( * ) FROM CONTINENTS
Get the number and ContId and Continent of CONTINENTS that has COUNTRIES	SELECT T1.ContId , T1.Continent , COUNT ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent
Group the records based on ContId of CONTINENTS	GROUP BY T1.ContId
Get the number and ContId and Continent of CONTINENTS that has COUNTRIES	SELECT T1.ContId , T1.Continent , COUNT ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent
Group the records based on ContId of CONTINENTS	GROUP BY T1.ContId
Get the number of COUNTRIES	SELECT COUNT ( * ) FROM COUNTRIES
Get the number of COUNTRIES	SELECT COUNT ( * ) FROM COUNTRIES
Get the number and FullName and Id of CAR MAKERS that has MODEL LIST	SELECT T1.FullName , T1.Id , COUNT ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Group the records based on Id of CAR MAKERS	GROUP BY T1.Id
Get the number and FullName and Id of CAR MAKERS that has MODEL LIST	SELECT T1.FullName , T1.Id , COUNT ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Group the records based on Id of CAR MAKERS	GROUP BY T1.Id
Get Model of CAR NAMES that has CARS DATA	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Order these records based on the horsepower of CARS DATA and sort them in ascending order, and return the top 1 record	ORDER BY T2.horsepower ASC LIMIT 1
Get Model of CAR NAMES that has CARS DATA	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Order these records based on the horsepower of CARS DATA and sort them in ascending order, and return the top 1 record	ORDER BY T2.horsepower ASC LIMIT 1
Get the average value of Weight of CARS DATA	SELECT AVG ( Weight ) FROM CARS_DATA
Get model of CAR NAMES that has CARS DATA	SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that Weight of CARS DATA is less than the first query result	WHERE T2.Weight < ( the first query result ) 
Get the average value of Weight of CARS DATA	SELECT AVG ( Weight ) FROM CARS_DATA
Get model of CAR NAMES that has CARS DATA	SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that Weight of CARS DATA is less than the first query result	WHERE T2.Weight < ( the first query result ) 
Get Maker of CAR MAKERS that has MODEL LIST and CAR NAMES and CARS DATA	SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id
Keep the records that year of CARS DATA is 1970	WHERE T4.year = 1970
Get Maker of CAR MAKERS that has MODEL LIST and CAR NAMES and CARS DATA	SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id
Keep the records that year of CARS DATA is 1970	WHERE T4.year = 1970
Get the minimum value of YEAR of CARS DATA	SELECT MIN ( YEAR ) FROM CARS_DATA
Get Make and Year of CARS DATA that has CAR NAMES	SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Year of CARS DATA is the first query result	WHERE T1.Year = ( the first query result ) 
Get the minimum value of YEAR of CARS DATA	SELECT MIN ( YEAR ) FROM CARS_DATA
Get Make and Year of CARS DATA that has CAR NAMES	SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Year of CARS DATA is the first query result	WHERE T1.Year = ( the first query result ) 
Get model of MODEL LIST that has CAR NAMES and CARS DATA	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id
Keep the records that year of CARS DATA is greater than 1980	WHERE T3.year > 1980
Get model of MODEL LIST that has CAR NAMES and CARS DATA	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id
Keep the records that year of CARS DATA is greater than 1980	WHERE T3.year > 1980
Get the number and Continent of CONTINENTS that has COUNTRIES and car makers	SELECT T1.Continent , COUNT ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country
Group the records based on Continent of CONTINENTS	GROUP BY T1.Continent
Get the number and Continent of CONTINENTS that has COUNTRIES and car makers	SELECT T1.Continent , COUNT ( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country
Group the records based on Continent of CONTINENTS	GROUP BY T1.Continent
Get CountryName of CAR MAKERS that has COUNTRIES	SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
Group the records based on Country of CAR MAKERS	GROUP BY T1.Country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get CountryName of CAR MAKERS that has COUNTRIES	SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
Group the records based on Country of CAR MAKERS	GROUP BY T1.Country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and fullname of model list that has car makers	SELECT COUNT ( * ) , t2.fullname FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id
Group the records based on id of car makers	GROUP BY t2.id
Get the number and FullName and id of MODEL LIST that has CAR MAKERS	SELECT COUNT ( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id
Group the records based on id of CAR MAKERS	GROUP BY T2.id
Get Accelerate of CARS DATA that has CAR NAMES	SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Make of CAR NAMES is amc hornet sportabout (sw)	WHERE T2.Make = amc hornet sportabout (sw)
Get Accelerate of CARS DATA that has CAR NAMES	SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Make of CAR NAMES is amc hornet sportabout (sw)	WHERE T2.Make = amc hornet sportabout (sw)
Get the number of CAR MAKERS that has COUNTRIES	SELECT COUNT ( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
Keep the records that CountryName of COUNTRIES is france	WHERE T2.CountryName = france
Get the number of CAR MAKERS that has COUNTRIES	SELECT COUNT ( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId
Keep the records that CountryName of COUNTRIES is france	WHERE T2.CountryName = france
Get the number of MODEL LIST that has CAR MAKERS and COUNTRIES	SELECT COUNT ( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId
Keep the records that CountryName of COUNTRIES is usa	WHERE T3.CountryName = usa
Get the number of MODEL LIST that has CAR MAKERS and COUNTRIES	SELECT COUNT ( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId
Keep the records that CountryName of COUNTRIES is usa	WHERE T3.CountryName = usa
Get the average value of mpg of CARS DATA	SELECT AVG ( mpg ) FROM CARS_DATA
Keep the records that Cylinders is 4	WHERE Cylinders = 4
Get the average value of mpg of CARS DATA	SELECT AVG ( mpg ) FROM CARS_DATA
Keep the records that Cylinders is 4	WHERE Cylinders = 4
Get the minimum value of weight of cars data	SELECT MIN ( weight ) FROM cars_data
Keep the records that cylinders is 8 AND is 1974	WHERE cylinders = 8 AND YEAR = 1974
Get the minimum value of weight of cars data	SELECT MIN ( weight ) FROM cars_data
Keep the records that cylinders is 8 AND is 1974	WHERE cylinders = 8 AND YEAR = 1974
Get Maker and Model of MODEL LIST	SELECT Maker , Model FROM MODEL_LIST
Get Maker and Model of MODEL LIST	SELECT Maker , Model FROM MODEL_LIST
Get CountryName and CountryId of COUNTRIES that has CAR MAKERS	SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
Group the records based on the number CountryId of COUNTRIES 1 that the number is greater than or equal to 1	GROUP BY T1.CountryId HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get CountryName and CountryId of COUNTRIES that has CAR MAKERS	SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
Group the records based on the number CountryId of COUNTRIES 1 that the number is greater than or equal to 1	GROUP BY T1.CountryId HAVING COUNT ( * ) >= 1 HAVING COUNT ( * ) >= 1
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that horsepower is greater than 150	WHERE horsepower > 150
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that horsepower is greater than 150	WHERE horsepower > 150
Get the average value of Weight of CARS DATA	SELECT AVG ( Weight ) , YEAR FROM CARS_DATA
Group the records based on	GROUP BY
Get the average value of Weight of CARS DATA	SELECT AVG ( Weight ) , YEAR FROM CARS_DATA
Group the records based on	GROUP BY
Get CountryName of COUNTRIES that has CONTINENTS and CAR MAKERS	SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country
Keep the records that Continent of CONTINENTS is europe	WHERE T2.Continent = europe 
Group the records based on the number CountryName of COUNTRIES 3 that the number is greater than or equal to 3	GROUP BY T1.CountryName HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get CountryName of COUNTRIES that has CONTINENTS and CAR MAKERS	SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country
Keep the records that Continent of CONTINENTS is europe	WHERE T2.Continent = europe 
Group the records based on the number CountryName of COUNTRIES 3 that the number is greater than or equal to 3	GROUP BY T1.CountryName HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get horsepower and Make of CAR NAMES that has CARS DATA	SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that cylinders of CARS DATA is 3	WHERE T2.cylinders = 3 
Order these records based on the horsepower of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T2.horsepower DESC LIMIT 1
Get horsepower and Make of CAR NAMES that has CARS DATA	SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that cylinders of CARS DATA is 3	WHERE T2.cylinders = 3 
Order these records based on the horsepower of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T2.horsepower DESC LIMIT 1
Get Model of CAR NAMES that has CARS DATA	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Order these records based on the mpg of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T2.mpg DESC LIMIT 1
Get model of car names that has cars data	SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id
Order these records based on the mpg of cars data and sort them in descending order, and return the top 1 record	ORDER BY t2.mpg DESC LIMIT 1
Get the average value of horsepower of CARS DATA	SELECT AVG ( horsepower ) FROM CARS_DATA
Keep the records that is less than 1980	WHERE YEAR < 1980
Get the average value of horsepower of cars data	SELECT AVG ( horsepower ) FROM cars_data
Keep the records that is less than 1980	WHERE YEAR < 1980
Get the average value of edispl of CAR NAMES that has CARS DATA	SELECT AVG ( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that Model of CAR NAMES is volvo	WHERE T1.Model = volvo
Get the average value of edispl of CAR NAMES that has CARS DATA	SELECT AVG ( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that Model of CAR NAMES is volvo	WHERE T1.Model = volvo
Get the maximum value of Accelerate and Cylinders of CARS DATA	SELECT MAX ( Accelerate ) , Cylinders FROM CARS_DATA
Group the records based on Cylinders	GROUP BY Cylinders
Get the maximum value of Accelerate and Cylinders of CARS DATA	SELECT MAX ( Accelerate ) , Cylinders FROM CARS_DATA
Group the records based on Cylinders	GROUP BY Cylinders
Get Model of CAR NAMES	SELECT Model FROM CAR_NAMES
Group the records based on Model	GROUP BY Model
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Model of CAR NAMES	SELECT Model FROM CAR_NAMES
Group the records based on Model	GROUP BY Model
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that Cylinders is greater than 4	WHERE Cylinders > 4
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that Cylinders is greater than 4	WHERE Cylinders > 4
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that is 1980	WHERE YEAR = 1980
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that is 1980	WHERE YEAR = 1980
Get the number of CAR MAKERS that has MODEL LIST	SELECT COUNT ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Keep the records that FullName of CAR MAKERS is American Motor Company	WHERE T1.FullName = American Motor Company
Get the number of CAR MAKERS that has MODEL LIST	SELECT COUNT ( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Keep the records that FullName of CAR MAKERS is American Motor Company	WHERE T1.FullName = American Motor Company
Get FullName and Id of CAR MAKERS that has MODEL LIST	SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Group the records based on the number Id of CAR MAKERS 3 that the number is greater than 3	GROUP BY T1.Id HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get FullName and Id of CAR MAKERS that has MODEL LIST	SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Group the records based on the number Id of CAR MAKERS 3 that the number is greater than 3	GROUP BY T1.Id HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get Model of CAR NAMES that has MODEL LIST and CAR MAKERS and CARS DATA	SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id
Keep the records that FullName of CAR MAKERS is General Motors OR weight of CARS DATA is greater than 3500	WHERE T3.FullName = General Motors OR T4.weight > 3500
Get Model of CAR NAMES that has MODEL LIST and CAR MAKERS and CARS DATA	SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id
Keep the records that FullName of CAR MAKERS is General Motors OR weight of CARS DATA is greater than 3500	WHERE T3.FullName = General Motors OR T4.weight > 3500
Get of cars data	SELECT DISTINCT YEAR FROM cars_data
Keep the records that weight is between 300 X4000	WHERE weight BETWEEN 3000 AND 4000
Get of cars data	SELECT DISTINCT YEAR FROM cars_data
Keep the records that weight is between 300 X4000	WHERE weight BETWEEN 3000 AND 4000
Get horsepower of CARS DATA	SELECT T1.horsepower FROM CARS_DATA
Order these records based on the accelerate of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T1.accelerate DESC LIMIT 1
Get horsepower of CARS DATA	SELECT T1.horsepower FROM CARS_DATA
Order these records based on the accelerate of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T1.accelerate DESC LIMIT 1
Get cylinders of CARS DATA that has CAR NAMES	SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Model of CAR NAMES is volvo	WHERE T2.Model = volvo 
Order these records based on the accelerate of CARS DATA and sort them in ascending order, and return the top 1 record	ORDER BY T1.accelerate ASC LIMIT 1
Get cylinders of CARS DATA that has CAR NAMES	SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Model of CAR NAMES is volvo	WHERE T2.Model = volvo 
Order these records based on the accelerate of CARS DATA and sort them in ascending order, and return the top 1 record	ORDER BY T1.accelerate ASC LIMIT 1
Get Accelerate of CARS DATA	SELECT Accelerate FROM CARS_DATA
Order these records based on the Horsepower and sort them in descending order, and return the top 1 record	ORDER BY Horsepower DESC LIMIT 1
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that Accelerate is greater than the first query result	WHERE Accelerate > ( the first query result ) 
Get Accelerate of CARS DATA	SELECT Accelerate FROM CARS_DATA
Order these records based on the Horsepower and sort them in descending order, and return the top 1 record	ORDER BY Horsepower DESC LIMIT 1
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that Accelerate is greater than the first query result	WHERE Accelerate > ( the first query result ) 
Get the number of countries that has car makers	SELECT COUNT ( * ) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country
Group the records based on the number countryid of countries 2 that the number is greater than 2	GROUP BY t1.countryid HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of countries that has car makers	SELECT COUNT ( * ) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country
Group the records based on the number countryid of countries 2 that the number is greater than 2	GROUP BY t1.countryid HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that Cylinders is greater than 6	WHERE Cylinders > 6
Get the number of CARS DATA	SELECT COUNT ( * ) FROM CARS_DATA
Keep the records that Cylinders is greater than 6	WHERE Cylinders > 6
Get Model of CAR NAMES that has CARS DATA	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that Cylinders of CARS DATA is 4	WHERE T2.Cylinders = 4 
Order these records based on the horsepower of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T2.horsepower DESC LIMIT 1
Get Model of CAR NAMES that has CARS DATA	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id
Keep the records that Cylinders of CARS DATA is 4	WHERE T2.Cylinders = 4 
Order these records based on the horsepower of CARS DATA and sort them in descending order, and return the top 1 record	ORDER BY T2.horsepower DESC LIMIT 1
Get the minimum value of Horsepower of CARS DATA	SELECT MIN ( Horsepower ) FROM CARS_DATA
Get MakeId AND Make of CARS DATA that has CAR NAMES	SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId
Keep the records that Horsepower of CARS DATA is greater than the first query result AND Cylinders of CARS DATA is less than or equal to 3	WHERE T1.Horsepower > ( the first query result )  AND T1.Cylinders <= 3
Get the minimum value of horsepower of cars data	SELECT MIN ( horsepower ) FROM cars_data
Get makeid AND make of cars data that has car names	SELECT t2.makeid , t2.make FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid
Keep the records that horsepower of cars data is greater than the first query result AND cylinders of cars data is less than 4	WHERE t1.horsepower > ( the first query result )  AND t1.cylinders < 4
Get the maximum value of mpg of cars data	SELECT MAX ( mpg ) FROM cars_data
Keep the records that cylinders is 8 OR is less than 1980	WHERE cylinders = 8 OR YEAR < 1980
Get the maximum value of mpg of cars data	SELECT MAX ( mpg ) FROM cars_data
Keep the records that cylinders is 8 OR is less than 1980	WHERE cylinders = 8 OR YEAR < 1980
Get model of MODEL LIST that has CAR NAMES AND CARS DATA AND CAR MAKERS	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id
Keep the records that weight of CARS DATA is less than 3500 AND FullName of CAR MAKERS is not Ford Motor Company	WHERE T3.weight < 3500 AND T4.FullName != Ford Motor Company
Get model of MODEL LIST that has CAR NAMES AND CARS DATA AND CAR MAKERS	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id
Keep the records that weight of CARS DATA is less than 3500 AND FullName of CAR MAKERS is not Ford Motor Company	WHERE T3.weight < 3500 AND T4.FullName != Ford Motor Company
Get CountryName of countries	SELECT CountryName FROM countries
Get CountryName of countries that has CAR MAKERS	SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2
Get CountryName of countries	SELECT CountryName FROM countries
Get CountryName of countries that has CAR MAKERS	SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2
Get id and maker of car makers that has model list	SELECT t1.id , t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker
Group the records based on the number id of car makers 2 that the number is greater than or equal to 2	GROUP BY t1.id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get id and maker of car makers that has model list and car names	SELECT t1.id , t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model
Group the records based on the number id of car makers 3 that the number is greater than 3	GROUP BY t1.id HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get Id and Maker of CAR MAKERS that has MODEL LIST	SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker
Group the records based on the number Id of CAR MAKERS 2 that the number is greater than or equal to 2	GROUP BY T1.Id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Id and Maker of CAR MAKERS that has MODEL LIST and CAR NAMES	SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model
Group the records based on the number Id of CAR MAKERS 3 that the number is greater than 3	GROUP BY T1.Id HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get countryId and CountryName of Countries that has CAR MAKERS	SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country
Group the records based on the number countryId of Countries 3 that the number is greater than 3	GROUP BY T1.countryId HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get countryId and CountryName of Countries that has CAR MAKERS and MODEL LIST	SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker
Keep the records that Model of MODEL LIST is fiat	WHERE T3.Model = fiat
Get countryid and countryname of countries that has car makers	SELECT t1.countryid , t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country
Group the records based on the number countryid of countries 3 that the number is greater than 3	GROUP BY t1.countryid HAVING COUNT ( * ) > 3 HAVING COUNT ( * ) > 3
Get countryid and countryname of countries that has car makers and model list	SELECT t1.countryid , t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country JOIN model_list AS t3 ON t2.id = t3.maker
Keep the records that model of model list is fiat	WHERE t3.model = fiat
Get Country of AIRLINES	SELECT Country FROM AIRLINES
Keep the records that Airline is JetBlue Airways	WHERE Airline = JetBlue Airways
Get Country of AIRLINES	SELECT Country FROM AIRLINES
Keep the records that Airline is JetBlue Airways	WHERE Airline = JetBlue Airways
Get Abbreviation of AIRLINES	SELECT Abbreviation FROM AIRLINES
Keep the records that Airline is JetBlue Airways	WHERE Airline = JetBlue Airways
Get Abbreviation of AIRLINES	SELECT Abbreviation FROM AIRLINES
Keep the records that Airline is JetBlue Airways	WHERE Airline = JetBlue Airways
Get Airline and Abbreviation of AIRLINES	SELECT Airline , Abbreviation FROM AIRLINES
Keep the records that Country is USA	WHERE Country = USA
Get Airline and Abbreviation of AIRLINES	SELECT Airline , Abbreviation FROM AIRLINES
Keep the records that Country is USA	WHERE Country = USA
Get AirportCode and AirportName of AIRPORTS	SELECT AirportCode , AirportName FROM AIRPORTS
Keep the records that city is Anthony	WHERE city = Anthony
Get AirportCode and AirportName of AIRPORTS	SELECT AirportCode , AirportName FROM AIRPORTS
Keep the records that city is Anthony	WHERE city = Anthony
Get the number of AIRLINES	SELECT COUNT ( * ) FROM AIRLINES
Get the number of AIRLINES	SELECT COUNT ( * ) FROM AIRLINES
Get the number of AIRPORTS	SELECT COUNT ( * ) FROM AIRPORTS
Get the number of AIRPORTS	SELECT COUNT ( * ) FROM AIRPORTS
Get the number of FLIGHTS	SELECT COUNT ( * ) FROM FLIGHTS
Get the number of FLIGHTS	SELECT COUNT ( * ) FROM FLIGHTS
Get Airline of AIRLINES	SELECT Airline FROM AIRLINES
Keep the records that Abbreviation is UAL	WHERE Abbreviation = UAL
Get Airline of AIRLINES	SELECT Airline FROM AIRLINES
Keep the records that Abbreviation is UAL	WHERE Abbreviation = UAL
Get the number of AIRLINES	SELECT COUNT ( * ) FROM AIRLINES
Keep the records that Country is USA	WHERE Country = USA
Get the number of AIRLINES	SELECT COUNT ( * ) FROM AIRLINES
Keep the records that Country is USA	WHERE Country = USA
Get City and Country of AIRPORTS	SELECT City , Country FROM AIRPORTS
Keep the records that AirportName is Alton	WHERE AirportName = Alton
Get City and Country of AIRPORTS	SELECT City , Country FROM AIRPORTS
Keep the records that AirportName is Alton	WHERE AirportName = Alton
Get AirportName of AIRPORTS	SELECT AirportName FROM AIRPORTS
Keep the records that AirportCode is AKO	WHERE AirportCode = AKO
Get AirportName of AIRPORTS	SELECT AirportName FROM AIRPORTS
Keep the records that AirportCode is AKO	WHERE AirportCode = AKO
Get AirportName of AIRPORTS	SELECT AirportName FROM AIRPORTS
Keep the records that City is Aberdeen	WHERE City = Aberdeen
Get AirportName of AIRPORTS	SELECT AirportName FROM AIRPORTS
Keep the records that City is Aberdeen	WHERE City = Aberdeen
Get the number of FLIGHTS	SELECT COUNT ( * ) FROM FLIGHTS
Keep the records that SourceAirport is APG	WHERE SourceAirport = APG
Get the number of FLIGHTS	SELECT COUNT ( * ) FROM FLIGHTS
Keep the records that SourceAirport is APG	WHERE SourceAirport = APG
Get the number of FLIGHTS	SELECT COUNT ( * ) FROM FLIGHTS
Keep the records that DestAirport is ATO	WHERE DestAirport = ATO
Get the number of FLIGHTS	SELECT COUNT ( * ) FROM FLIGHTS
Keep the records that DestAirport is ATO	WHERE DestAirport = ATO
Get the number of FLIGHTS that has AIRPORTS	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get the number of FLIGHTS that has AIRPORTS	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get the number of FLIGHTS that has AIRPORTS	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get the number of FLIGHTS that has AIRPORTS	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get the number of FLIGHTS that has AIRPORTS	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode
Keep the records that City of AIRPORTS is Ashley AND City of AIRPORTS is Aberdeen	WHERE T2.City = Ashley AND T3.City = Aberdeen
Get the number of FLIGHTS that has AIRPORTS	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode
Keep the records that City of AIRPORTS is Ashley AND City of AIRPORTS is Aberdeen	WHERE T2.City = Ashley AND T3.City = Aberdeen
Get the number of FLIGHTS that has AIRLINES	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid
Keep the records that Airline of AIRLINES is JetBlue Airways	WHERE T2.Airline = JetBlue Airways
Get the number of FLIGHTS that has AIRLINES	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid
Keep the records that Airline of AIRLINES is JetBlue Airways	WHERE T2.Airline = JetBlue Airways
Get the number of AIRLINES that has FLIGHTS	SELECT COUNT ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid
Keep the records that Airline of AIRLINES is United Airlines AND DestAirport of FLIGHTS is ASY	WHERE T1.Airline = United Airlines AND T2.DestAirport = ASY
Get the number of AIRLINES that has FLIGHTS	SELECT COUNT ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid
Keep the records that Airline of AIRLINES is United Airlines AND DestAirport of FLIGHTS is ASY	WHERE T1.Airline = United Airlines AND T2.DestAirport = ASY
Get the number of AIRLINES that has FLIGHTS	SELECT COUNT ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid
Keep the records that Airline of AIRLINES is United Airlines AND SourceAirport of FLIGHTS is AHD	WHERE T1.Airline = United Airlines AND T2.SourceAirport = AHD
Get the number of AIRLINES that has FLIGHTS	SELECT COUNT ( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid
Keep the records that Airline of AIRLINES is United Airlines AND SourceAirport of FLIGHTS is AHD	WHERE T1.Airline = United Airlines AND T2.SourceAirport = AHD
Get the number of FLIGHTS that has AIRPORTS AND AIRLINES	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline
Keep the records that City of AIRPORTS is Aberdeen AND Airline of AIRLINES is United Airlines	WHERE T2.City = Aberdeen AND T3.Airline = United Airlines
Get the number of FLIGHTS that has AIRPORTS AND AIRLINES	SELECT COUNT ( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline
Keep the records that City of AIRPORTS is Aberdeen AND Airline of AIRLINES is United Airlines	WHERE T2.City = Aberdeen AND T3.Airline = United Airlines
Get City of AIRPORTS that has FLIGHTS	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
Group the records based on City of AIRPORTS	GROUP BY T1.City
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get City of AIRPORTS that has FLIGHTS	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
Group the records based on City of AIRPORTS	GROUP BY T1.City
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get City of AIRPORTS that has FLIGHTS	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport
Group the records based on City of AIRPORTS	GROUP BY T1.City
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get City of AIRPORTS that has FLIGHTS	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport
Group the records based on City of AIRPORTS	GROUP BY T1.City
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get AirportCode of AIRPORTS that has FLIGHTS	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
Group the records based on AirportCode of AIRPORTS	GROUP BY T1.AirportCode
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get AirportCode of AIRPORTS that has FLIGHTS	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
Group the records based on AirportCode of AIRPORTS	GROUP BY T1.AirportCode
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get AirportCode of AIRPORTS that has FLIGHTS	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
Group the records based on AirportCode of AIRPORTS	GROUP BY T1.AirportCode
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get AirportCode of AIRPORTS that has FLIGHTS	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport
Group the records based on AirportCode of AIRPORTS	GROUP BY T1.AirportCode
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on Airline of AIRLINES	GROUP BY T1.Airline
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on Airline of AIRLINES	GROUP BY T1.Airline
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Abbreviation and Country of AIRLINES that has FLIGHTS	SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on Airline of AIRLINES	GROUP BY T1.Airline
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get Abbreviation and Country of AIRLINES that has FLIGHTS	SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on Airline of AIRLINES	GROUP BY T1.Airline
Order these records based on the the number, and return the top 1 record	ORDER BY COUNT ( * ) LIMIT 1
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is AHD	WHERE T2.SourceAirport = AHD
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is AHD	WHERE T2.SourceAirport = AHD
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that DestAirport of FLIGHTS is AHD	WHERE T2.DestAirport = AHD
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that DestAirport of FLIGHTS is AHD	WHERE T2.DestAirport = AHD
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is APG	WHERE T2.SourceAirport = APG
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is CVO	WHERE T2.SourceAirport = CVO
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is APG	WHERE T2.SourceAirport = APG
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is CVO	WHERE T2.SourceAirport = CVO
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is CVO	WHERE T2.SourceAirport = CVO
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is APG	WHERE T2.SourceAirport = APG
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is CVO	WHERE T2.SourceAirport = CVO
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Keep the records that SourceAirport of FLIGHTS is APG	WHERE T2.SourceAirport = APG
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on the number Airline of AIRLINES 10 that the number is greater than 10	GROUP BY T1.Airline HAVING COUNT ( * ) > 10 HAVING COUNT ( * ) > 10
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on the number Airline of AIRLINES 10 that the number is greater than 10	GROUP BY T1.Airline HAVING COUNT ( * ) > 10 HAVING COUNT ( * ) > 10
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on the number Airline of AIRLINES 200 that the number is less than 200	GROUP BY T1.Airline HAVING COUNT ( * ) < 200 HAVING COUNT ( * ) < 200
Get Airline of AIRLINES that has FLIGHTS	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline
Group the records based on the number Airline of AIRLINES 200 that the number is less than 200	GROUP BY T1.Airline HAVING COUNT ( * ) < 200 HAVING COUNT ( * ) < 200
Get FlightNo of FLIGHTS that has AIRLINES	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline
Keep the records that Airline of AIRLINES is United Airlines	WHERE T2.Airline = United Airlines
Get FlightNo of FLIGHTS that has AIRLINES	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline
Keep the records that Airline of AIRLINES is United Airlines	WHERE T2.Airline = United Airlines
Get FlightNo of FLIGHTS	SELECT FlightNo FROM FLIGHTS
Keep the records that SourceAirport is APG	WHERE SourceAirport = APG
Get FlightNo of FLIGHTS	SELECT FlightNo FROM FLIGHTS
Keep the records that SourceAirport is APG	WHERE SourceAirport = APG
Get FlightNo of FLIGHTS	SELECT FlightNo FROM FLIGHTS
Keep the records that DestAirport is APG	WHERE DestAirport = APG
Get FlightNo of FLIGHTS	SELECT FlightNo FROM FLIGHTS
Keep the records that DestAirport is APG	WHERE DestAirport = APG
Get FlightNo of FLIGHTS that has AIRPORTS	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get FlightNo of FLIGHTS that has AIRPORTS	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get FlightNo of FLIGHTS that has AIRPORTS	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get FlightNo of FLIGHTS that has AIRPORTS	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode
Keep the records that City of AIRPORTS is Aberdeen	WHERE T2.City = Aberdeen
Get the number of Flights that has Airports	SELECT COUNT ( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode
Keep the records that city of Airports is Aberdeen OR city of Airports is Abilene	WHERE T2.city = Aberdeen OR T2.city = Abilene
Get the number of Flights that has Airports	SELECT COUNT ( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode
Keep the records that city of Airports is Aberdeen OR city of Airports is Abilene	WHERE T2.city = Aberdeen OR T2.city = Abilene
Get SourceAirport of Flights	SELECT SourceAirport FROM Flights
Get DestAirport of Flights	SELECT DestAirport FROM Flights
Get AirportName of Airports	SELECT AirportName FROM Airports
Keep the records that AirportCode is not in the third query result	WHERE AirportCode NOT IN ( the third query result ) 
Get SourceAirport of Flights	SELECT SourceAirport FROM Flights
Get DestAirport of Flights	SELECT DestAirport FROM Flights
Get AirportName of Airports	SELECT AirportName FROM Airports
Keep the records that AirportCode is not in the third query result	WHERE AirportCode NOT IN ( the third query result ) 
Get the number of employee	SELECT COUNT ( * ) FROM employee
Get the number of employee	SELECT COUNT ( * ) FROM employee
Get name of employee	SELECT name FROM employee
Order these records based on the age	ORDER BY age 
Get name of employee	SELECT name FROM employee
Order these records based on the age	ORDER BY age 
Get the number and city of employee	SELECT COUNT ( * ) , city FROM employee
Group the records based on city	GROUP BY city
Get the number and city of employee	SELECT COUNT ( * ) , city FROM employee
Group the records based on city	GROUP BY city
Get city of employee	SELECT city FROM employee
Keep the records that age is less than 30	WHERE age < 30 
Group the records based on the number city 1 that the number is greater than 1	GROUP BY city HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get city of employee	SELECT city FROM employee
Keep the records that age is less than 30	WHERE age < 30 
Group the records based on the number city 1 that the number is greater than 1	GROUP BY city HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number of shop	SELECT COUNT ( * ) , LOCATION FROM shop
Group the records based on	GROUP BY
Get the number of shop	SELECT COUNT ( * ) , LOCATION FROM shop
Group the records based on	GROUP BY
Get manager name and district of shop	SELECT manager_name , district FROM shop
Order these records based on the number products and sort them in descending order, and return the top 1 record	ORDER BY number_products DESC LIMIT 1
Get manager name and district of shop	SELECT manager_name , district FROM shop
Order these records based on the number products and sort them in descending order, and return the top 1 record	ORDER BY number_products DESC LIMIT 1
Get the minimum value of Number products and the maximum value of Number products of shop	SELECT MIN ( Number_products ) , MAX ( Number_products ) FROM shop
Get the minimum value of Number products and the maximum value of Number products of shop	SELECT MIN ( Number_products ) , MAX ( Number_products ) FROM shop
Get name and district of shop	SELECT name , LOCATION , district FROM shop
Order these records based on the number products and sort them in descending ORDER	ORDER BY number_products DESC 
Get name and district of shop	SELECT name , LOCATION , district FROM shop
Order these records based on the number products and sort them in descending ORDER	ORDER BY number_products DESC 
Get the average value of number products of shop	SELECT AVG ( number_products ) FROM shop
Get name of shop	SELECT name FROM shop
Keep the records that number products is greater than the first query result	WHERE number_products > ( the first query result ) 
Get the average value of number products of shop	SELECT AVG ( number_products ) FROM shop
Get name of shop	SELECT name FROM shop
Keep the records that number products is greater than the first query result	WHERE number_products > ( the first query result ) 
Get name of employee that has evaluation	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID
Group the records based on Employee ID of evaluation	GROUP BY t2.Employee_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of employee that has evaluation	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID
Group the records based on Employee ID of evaluation	GROUP BY t2.Employee_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of employee that has evaluation	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID
Order these records based on the bonus of evaluation and sort them in descending order, and return the top 1 record	ORDER BY t2.bonus DESC LIMIT 1
Get name of employee that has evaluation	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID
Order these records based on the bonus of evaluation and sort them in descending order, and return the top 1 record	ORDER BY t2.bonus DESC LIMIT 1
Get Employee ID of evaluation	SELECT Employee_ID FROM evaluation
Get name of employee	SELECT name FROM employee
Keep the records that Employee ID is not in the first query result	WHERE Employee_ID NOT IN ( the first query result ) 
Get Employee ID of evaluation	SELECT Employee_ID FROM evaluation
Get name of employee	SELECT name FROM employee
Keep the records that Employee ID is not in the first query result	WHERE Employee_ID NOT IN ( the first query result ) 
Get name of hiring that has shop	SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id
Group the records based on shop id of hiring	GROUP BY t1.shop_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of hiring that has shop	SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id
Group the records based on shop id of hiring	GROUP BY t1.shop_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get shop id of hiring	SELECT shop_id FROM hiring
Get name of shop	SELECT name FROM shop
Keep the records that shop id is not in the first query result	WHERE shop_id NOT IN ( the first query result ) 
Get shop id of hiring	SELECT shop_id FROM hiring
Get name of shop	SELECT name FROM shop
Keep the records that shop id is not in the first query result	WHERE shop_id NOT IN ( the first query result ) 
Get the number and name of hiring that has shop	SELECT COUNT ( * ) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id
Group the records based on name of shop	GROUP BY t2.name
Get the number and name of hiring that has shop	SELECT COUNT ( * ) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id
Group the records based on name of shop	GROUP BY t2.name
Get the SUM of bonus of evaluation	SELECT SUM ( bonus ) FROM evaluation
Get the SUM of bonus of evaluation	SELECT SUM ( bonus ) FROM evaluation
Get all of hiring	SELECT * FROM hiring
Get all of hiring	SELECT * FROM hiring
Get district of shop	SELECT district FROM shop
Keep the records that Number products is less than 3000	WHERE Number_products < 3000
Get district of shop	SELECT district FROM shop
Keep the records that Number products is greater than 10000	WHERE Number_products > 10000
Get district of shop	SELECT district FROM shop
Keep the records that Number products is less than 3000	WHERE Number_products < 3000
Get district of shop	SELECT district FROM shop
Keep the records that Number products is greater than 10000	WHERE Number_products > 10000
Get the number of distinct LOCATION of shop	SELECT COUNT ( DISTINCT LOCATION ) FROM shop
Get the number of distinct LOCATION of shop	SELECT COUNT ( DISTINCT LOCATION ) FROM shop
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Get the number of Documents	SELECT COUNT ( * ) FROM Documents
Get document id and document name and document description of Documents	SELECT document_id , document_name , document_description FROM Documents
Get document id and document name and document description of Documents	SELECT document_id , document_name , document_description FROM Documents
Get document name and template id of Documents	SELECT document_name , template_id FROM Documents
Keep the records that Document Description is in the form of %w%	WHERE Document_Description LIKE %w%
Get document name and template id of Documents	SELECT document_name , template_id FROM Documents
Keep the records that Document Description is in the form of %w%	WHERE Document_Description LIKE %w%
Get document id and template id and Document Description of Documents	SELECT document_id , template_id , Document_Description FROM Documents
Keep the records that document name is Robbin CV	WHERE document_name = Robbin CV
Get document id and template id and Document Description of Documents	SELECT document_id , template_id , Document_Description FROM Documents
Keep the records that document name is Robbin CV	WHERE document_name = Robbin CV
Get the number of distinct template id of Documents	SELECT COUNT ( DISTINCT template_id ) FROM Documents
Get the number of distinct template id of Documents	SELECT COUNT ( DISTINCT template_id ) FROM Documents
Get the number of Documents that has Templates	SELECT COUNT ( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID
Keep the records that Template Type Code of Templates is PPT	WHERE T2.Template_Type_Code = PPT
Get the number of Documents that has Templates	SELECT COUNT ( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID
Keep the records that Template Type Code of Templates is PPT	WHERE T2.Template_Type_Code = PPT
Get the number and template id of Documents	SELECT template_id , COUNT ( * ) FROM Documents
Group the records based on template id	GROUP BY template_id
Get the number and template id of Documents	SELECT template_id , COUNT ( * ) FROM Documents
Group the records based on template id	GROUP BY template_id
Get template id and Template Type Code of Documents that has Templates	SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id
Group the records based on template id of Documents	GROUP BY T1.template_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get template id and Template Type Code of Documents that has Templates	SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id
Group the records based on template id of Documents	GROUP BY T1.template_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get template id of Documents	SELECT template_id FROM Documents
Group the records based on the number template id 1 that the number is greater than 1	GROUP BY template_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get template id of Documents	SELECT template_id FROM Documents
Group the records based on the number template id 1 that the number is greater than 1	GROUP BY template_id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get template id of Templates	SELECT template_id FROM Templates
Get template id of Documents	SELECT template_id FROM Documents
Get template id of Templates	SELECT template_id FROM Templates
Get template id of Documents	SELECT template_id FROM Documents
Get the number of Templates	SELECT COUNT ( * ) FROM Templates
Get the number of Templates	SELECT COUNT ( * ) FROM Templates
Get template id and version number and template type code of Templates	SELECT template_id , version_number , template_type_code FROM Templates
Get template id and version number and template type code of Templates	SELECT template_id , version_number , template_type_code FROM Templates
Get template type code of Templates	SELECT DISTINCT template_type_code FROM Templates
Get template type code of Templates	SELECT DISTINCT template_type_code FROM Templates
Get template id of Templates	SELECT template_id FROM Templates
Keep the records that template type code is PP OR template type code is PPT	WHERE template_type_code = PP OR template_type_code = PPT
Get template id of Templates	SELECT template_id FROM Templates
Keep the records that template type code is PP OR template type code is PPT	WHERE template_type_code = PP OR template_type_code = PPT
Get the number of Templates	SELECT COUNT ( * ) FROM Templates
Keep the records that template type code is CV	WHERE template_type_code = CV
Get the number of Templates	SELECT COUNT ( * ) FROM Templates
Keep the records that template type code is CV	WHERE template_type_code = CV
Get version number and template type code of Templates	SELECT version_number , template_type_code FROM Templates
Keep the records that version number is greater than 5	WHERE version_number > 5
Get version number and template type code of Templates	SELECT version_number , template_type_code FROM Templates
Keep the records that version number is greater than 5	WHERE version_number > 5
Get the number and template type code of Templates	SELECT template_type_code , COUNT ( * ) FROM Templates
Group the records based on template type code	GROUP BY template_type_code
Get the number and template type code of Templates	SELECT template_type_code , COUNT ( * ) FROM Templates
Group the records based on template type code	GROUP BY template_type_code
Get template type code of Templates	SELECT template_type_code FROM Templates
Group the records based on template type code	GROUP BY template_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get template type code of Templates	SELECT template_type_code FROM Templates
Group the records based on template type code	GROUP BY template_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get template type code of Templates	SELECT template_type_code FROM Templates
Group the records based on the number template type code 3 that the number is less than 3	GROUP BY template_type_code HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get template type code of Templates	SELECT template_type_code FROM Templates
Group the records based on the number template type code 3 that the number is less than 3	GROUP BY template_type_code HAVING COUNT ( * ) < 3 HAVING COUNT ( * ) < 3
Get the minimum value of Version Number and template type code of Templates	SELECT MIN ( Version_Number ) , template_type_code FROM Templates
Get the minimum value of Version Number and template type code of Templates	SELECT MIN ( Version_Number ) , template_type_code FROM Templates
Get template type code of Templates that has Documents	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Keep the records that document name of Documents is Data base	WHERE T2.document_name = Data base
Get template type code of Templates that has Documents	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Keep the records that document name of Documents is Data base	WHERE T2.document_name = Data base
Get document name of Templates that has Documents	SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Keep the records that template type code of Templates is BK	WHERE T1.template_type_code = BK
Get document name of Templates that has Documents	SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Keep the records that template type code of Templates is BK	WHERE T1.template_type_code = BK
Get the number and template type code of Templates that has Documents	SELECT T1.template_type_code , COUNT ( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Group the records based on template type code of Templates	GROUP BY T1.template_type_code
Get the number and template type code of Templates that has Documents	SELECT T1.template_type_code , COUNT ( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Group the records based on template type code of Templates	GROUP BY T1.template_type_code
Get template type code of Templates that has Documents	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Group the records based on template type code of Templates	GROUP BY T1.template_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get template type code of Templates that has Documents	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id
Group the records based on template type code of Templates	GROUP BY T1.template_type_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get template type code of Templates	SELECT template_type_code FROM Templates
Get template type code of Templates that has Documents	SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2
Get template type code of Templates	SELECT template_type_code FROM Templates
Get template type code of Templates that has Documents	SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2
Get template type code and template type description of Ref template types	SELECT template_type_code , template_type_description FROM Ref_template_types
Get template type code and template type description of Ref template types	SELECT template_type_code , template_type_description FROM Ref_template_types
Get template type description of Ref template types	SELECT template_type_description FROM Ref_template_types
Keep the records that template type code is AD	WHERE template_type_code = AD
Get template type description of Ref template types	SELECT template_type_description FROM Ref_template_types
Keep the records that template type code is AD	WHERE template_type_code = AD
Get template type code of Ref template types	SELECT template_type_code FROM Ref_template_types
Keep the records that template type description is Book	WHERE template_type_description = Book
Get template type code of Ref template types	SELECT template_type_code FROM Ref_template_types
Keep the records that template type description is Book	WHERE template_type_description = Book
Get template type description of Ref template types that has Templates and Documents	SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3
Get template type description of Ref template types that has Templates and Documents	SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3
Get template id of Ref template types that has Templates	SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code
Keep the records that template type description of Ref template types is Presentation	WHERE T1.template_type_description = Presentation
Get template id of Ref template types that has Templates	SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code
Keep the records that template type description of Ref template types is Presentation	WHERE T1.template_type_description = Presentation
Get the number of Paragraphs	SELECT COUNT ( * ) FROM Paragraphs
Get the number of Paragraphs	SELECT COUNT ( * ) FROM Paragraphs
Get the number of Paragraphs that has Documents	SELECT COUNT ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID
Keep the records that document name of Documents is Summer Show	WHERE T2.document_name = Summer Show
Get the number of Paragraphs that has Documents	SELECT COUNT ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID
Keep the records that document name of Documents is Summer Show	WHERE T2.document_name = Summer Show
Get other details of paragraphs	SELECT other_details FROM paragraphs
Keep the records that paragraph text is in the form of korea	WHERE paragraph_text LIKE korea
Get other details of paragraphs	SELECT other_details FROM paragraphs
Keep the records that paragraph text is in the form of korea	WHERE paragraph_text LIKE korea
Get paragraph id and paragraph text of Paragraphs that has Documents	SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Keep the records that Document Name of Documents is Welcome to NY	WHERE T2.Document_Name = Welcome to NY
Get paragraph id and paragraph text of Paragraphs that has Documents	SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Keep the records that Document Name of Documents is Welcome to NY	WHERE T2.Document_Name = Welcome to NY
Get paragraph text of Paragraphs that has Documents	SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Keep the records that document name of Documents is Customer reviews	WHERE T2.document_name = Customer reviews
Get paragraph text of Paragraphs that has Documents	SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Keep the records that document name of Documents is Customer reviews	WHERE T2.document_name = Customer reviews
Get the number and document id of Paragraphs	SELECT document_id , COUNT ( * ) FROM Paragraphs
Group the records based on document id	GROUP BY document_id
Order these records based on the document id	ORDER BY document_id 
Get the number and document id of Paragraphs	SELECT document_id , COUNT ( * ) FROM Paragraphs
Group the records based on document id	GROUP BY document_id
Order these records based on the document id	ORDER BY document_id 
Get the number and document id and document name of Paragraphs that has Documents	SELECT T1.document_id , T2.document_name , COUNT ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Group the records based on document id of Paragraphs	GROUP BY T1.document_id
Get the number and document id and document name of Paragraphs that has Documents	SELECT T1.document_id , T2.document_name , COUNT ( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Group the records based on document id of Paragraphs	GROUP BY T1.document_id
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Group the records based on the number document id 2 that the number is greater than or equal to 2	GROUP BY document_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Group the records based on the number document id 2 that the number is greater than or equal to 2	GROUP BY document_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get document id and document name of Paragraphs that has Documents	SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Group the records based on document id of Paragraphs	GROUP BY T1.document_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document id and document name of Paragraphs that has Documents	SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id
Group the records based on document id of Paragraphs	GROUP BY T1.document_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Group the records based on document id	GROUP BY document_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Group the records based on document id	GROUP BY document_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Group the records based on the number document id 1 2 that the number is between 1 AND 2	GROUP BY document_id HAVING COUNT ( * ) BETWEEN 1 AND 2 HAVING COUNT ( * ) BETWEEN 1 AND 2
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Group the records based on the number document id 1 2 that the number is between 1 AND 2	GROUP BY document_id HAVING COUNT ( * ) BETWEEN 1 AND 2 HAVING COUNT ( * ) BETWEEN 1 AND 2
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Keep the records that paragraph text is Brazil	WHERE paragraph_text = Brazil
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Keep the records that paragraph text is Ireland	WHERE paragraph_text = Ireland
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Keep the records that paragraph text is Brazil	WHERE paragraph_text = Brazil
Get document id of Paragraphs	SELECT document_id FROM Paragraphs
Keep the records that paragraph text is Ireland	WHERE paragraph_text = Ireland
Get the number of teacher	SELECT COUNT ( * ) FROM teacher
Get the number of teacher	SELECT COUNT ( * ) FROM teacher
Get Name of teacher	SELECT Name FROM teacher
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Name of teacher	SELECT Name FROM teacher
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Age and Hometown of teacher	SELECT Age , Hometown FROM teacher
Get Age and Hometown of teacher	SELECT Age , Hometown FROM teacher
Get name of teacher	SELECT name FROM teacher
Keep the records that hometown is not little lever urban district	WHERE hometown != little lever urban district
Get name of teacher	SELECT name FROM teacher
Keep the records that hometown is not little lever urban district	WHERE hometown != little lever urban district
Get Name of teacher	SELECT Name FROM teacher
Keep the records that Age is 32 OR Age is 33	WHERE Age = 32 OR Age = 33
Get Name of teacher	SELECT Name FROM teacher
Keep the records that Age is 32 OR Age is 33	WHERE Age = 32 OR Age = 33
Get Hometown of teacher	SELECT Hometown FROM teacher
Order these records based on the Age and sort them in ascending order, and return the top 1 record	ORDER BY Age ASC LIMIT 1
Get Hometown of teacher	SELECT Hometown FROM teacher
Order these records based on the Age and sort them in ascending order, and return the top 1 record	ORDER BY Age ASC LIMIT 1
Get the number and Hometown of teacher	SELECT Hometown , COUNT ( * ) FROM teacher
Group the records based on Hometown	GROUP BY Hometown
Get the number and Hometown of teacher	SELECT Hometown , COUNT ( * ) FROM teacher
Group the records based on Hometown	GROUP BY Hometown
Get Hometown of teacher	SELECT Hometown FROM teacher
Group the records based on Hometown	GROUP BY Hometown
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Hometown of teacher	SELECT Hometown FROM teacher
Group the records based on Hometown	GROUP BY Hometown
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Hometown of teacher	SELECT Hometown FROM teacher
Group the records based on the number Hometown 2 that the number is greater than or equal to 2	GROUP BY Hometown HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Hometown of teacher	SELECT Hometown FROM teacher
Group the records based on the number Hometown 2 that the number is greater than or equal to 2	GROUP BY Hometown HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name and Course of course arrange that has course and teacher	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3
Get Name and Course of course arrange that has course and teacher	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3
Get Name and Course of course arrange that has course and teacher	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
Order these records based on the Name of teacher	ORDER BY T3.Name 
Get Name and Course of course arrange that has course and teacher	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
Order these records based on the Name of teacher	ORDER BY T3.Name 
Get Name of course arrange that has course and teacher	SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
Keep the records that Course of course is Math	WHERE T2.Course = Math
Get Name of course arrange that has course and teacher	SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
Keep the records that Course of course is Math	WHERE T2.Course = Math
Get the number and Name of course arrange that has teacher	SELECT T2.Name , COUNT ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID
Group the records based on Name of teacher	GROUP BY T2.Name
Get the number and Name of course arrange that has teacher	SELECT T2.Name , COUNT ( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID
Group the records based on Name of teacher	GROUP BY T2.Name
Get Name of course arrange that has teacher	SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID
Group the records based on the number Name of teacher 2 that the number is greater than or equal to 2	GROUP BY T2.Name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name of course arrange that has teacher	SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID
Group the records based on the number Name of teacher 2 that the number is greater than or equal to 2	GROUP BY T2.Name HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Teacher id of course arrange	SELECT Teacher_id FROM course_arrange
Get Name of teacher	SELECT Name FROM teacher
Keep the records that Teacher id is not in the first query result	WHERE Teacher_id NOT IN ( the first query result ) 
Get Teacher id of course arrange	SELECT Teacher_id FROM course_arrange
Get Name of teacher	SELECT Name FROM teacher
Keep the records that Teacher id is not in the first query result	WHERE Teacher_id NOT IN ( the first query result ) 
Get the number of visitor	SELECT COUNT ( * ) FROM visitor
Keep the records that age is less than 30	WHERE age < 30
Get name of visitor	SELECT name FROM visitor
Keep the records that Level of membership is greater than 4	WHERE Level_of_membership > 4 
Order these records based on the Level of membership and sort them in descending ORDER	ORDER BY Level_of_membership DESC 
Get the average value of age of visitor	SELECT AVG ( age ) FROM visitor
Keep the records that Level of membership is less than or equal to 4	WHERE Level_of_membership <= 4
Get name and Level of membership of visitor	SELECT name , Level_of_membership FROM visitor
Keep the records that Level of membership is greater than 4	WHERE Level_of_membership > 4 
Order these records based on the age and sort them in descending ORDER	ORDER BY age DESC 
Get museum id and name of museum	SELECT museum_id , name FROM museum
Order these records based on the num of staff and sort them in descending order, and return the top 1 record	ORDER BY num_of_staff DESC LIMIT 1
Get the average value of num of staff of museum	SELECT AVG ( num_of_staff ) FROM museum
Keep the records that open year is less than 2009	WHERE open_year < 2009
Get Num of Staff and Open Year of museum	SELECT Num_of_Staff , Open_Year FROM museum
Keep the records that name is Plaza Museum	WHERE name = Plaza Museum
Get the minimum value of num of staff of museum	SELECT MIN ( num_of_staff ) FROM museum
Keep the records that open year is greater than 2010	WHERE open_year > 2010
Get name of museum	SELECT name FROM museum
Keep the records that num of staff is greater than the first query result	WHERE num_of_staff > ( the first query result ) 
Get id and name and age of visitor that has visit	SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id
Group the records based on the number id of visitor 1 that the number is greater than 1	GROUP BY t1.id HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get visitor id and name and Level of membership of visitor that has visit	SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id
Group the records based on visitor id of visit	GROUP BY t2.visitor_id
Order these records based on the the SUM of Total spent of visit and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t2.Total_spent ) DESC LIMIT 1
Get Museum ID and name of museum that has visit	SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID
Group the records based on Museum ID of visit	GROUP BY t2.Museum_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get museum id of visit	SELECT museum_id FROM visit
Get name of museum	SELECT name FROM museum
Keep the records that Museum ID is not in the first query result	WHERE Museum_ID NOT IN ( the first query result ) 
Get name and age of visitor that has visit	SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id
Order these records based on the num of ticket of visit and sort them in descending order, and return the top 1 record	ORDER BY t2.num_of_ticket DESC LIMIT 1
Get the average value of num of ticket and the maximum value of num of ticket of visit	SELECT AVG ( num_of_ticket ) , MAX ( num_of_ticket ) FROM visit
Get the SUM of Total spent of visitor that has visit	SELECT SUM ( t2.Total_spent ) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id
Keep the records that Level of membership of visitor is 1	WHERE t1.Level_of_membership = 1
Get name of visitor that has visit and museum	SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID
Keep the records that open year of museum is less than 2009	WHERE t3.open_year < 2009
Get name of visitor that has visit and museum	SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID
Keep the records that open year of museum is greater than 2011	WHERE t3.open_year > 2011
Get visitor id of museum that has visit	SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID
Keep the records that open year of museum is greater than 2010	WHERE t1.open_year > 2010
Get the number of visitor	SELECT COUNT ( * ) FROM visitor
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get the number of museum	SELECT COUNT ( * ) FROM museum
Keep the records that open year is greater than 2013 OR open year is less than 2008	WHERE open_year > 2013 OR open_year < 2008
Get the number of players	SELECT COUNT ( * ) FROM players
Get the number of players	SELECT COUNT ( * ) FROM players
Get the number of matches	SELECT COUNT ( * ) FROM matches
Get the number of matches	SELECT COUNT ( * ) FROM matches
Get first name and birth date of players	SELECT first_name , birth_date FROM players
Keep the records that country code is USA	WHERE country_code = USA
Get first name and birth date of players	SELECT first_name , birth_date FROM players
Keep the records that country code is USA	WHERE country_code = USA
Get the average value of loser age and the average value of winner age of matches	SELECT AVG ( loser_age ) , AVG ( winner_age ) FROM matches
Get the average value of loser age and the average value of winner age of matches	SELECT AVG ( loser_age ) , AVG ( winner_age ) FROM matches
Get the average value of winner rank of matches	SELECT AVG ( winner_rank ) FROM matches
Get the average value of winner rank of matches	SELECT AVG ( winner_rank ) FROM matches
Get the minimum value of loser rank of matches	SELECT MIN ( loser_rank ) FROM matches
Get the minimum value of loser rank of matches	SELECT MIN ( loser_rank ) FROM matches
Get the number of distinct country code of players	SELECT COUNT ( DISTINCT country_code ) FROM players
Get the number of distinct country code of players	SELECT COUNT ( DISTINCT country_code ) FROM players
Get the number of distinct loser name of matches	SELECT COUNT ( DISTINCT loser_name ) FROM matches
Get the number of distinct loser name of matches	SELECT COUNT ( DISTINCT loser_name ) FROM matches
Get tourney name of matches	SELECT tourney_name FROM matches
Group the records based on the number tourney name 10 that the number is greater than 10	GROUP BY tourney_name HAVING COUNT ( * ) > 10 HAVING COUNT ( * ) > 10
Get tourney name of matches	SELECT tourney_name FROM matches
Group the records based on the number tourney name 10 that the number is greater than 10	GROUP BY tourney_name HAVING COUNT ( * ) > 10 HAVING COUNT ( * ) > 10
Get winner name of matches	SELECT winner_name FROM matches
Keep the records that is 2013	WHERE YEAR = 2013
Get winner name of matches	SELECT winner_name FROM matches
Keep the records that is 2016	WHERE YEAR = 2016
Get winner name of matches	SELECT winner_name FROM matches
Keep the records that is 2013	WHERE YEAR = 2013
Get winner name of matches	SELECT winner_name FROM matches
Keep the records that is 2016	WHERE YEAR = 2016
Get the number of matches	SELECT COUNT ( * ) FROM matches
Keep the records that is 2013 OR is 2016	WHERE YEAR = 2013 OR YEAR = 2016
Get the number of matches	SELECT COUNT ( * ) FROM matches
Keep the records that is 2013 OR is 2016	WHERE YEAR = 2013 OR YEAR = 2016
Get country code and first name of players that has matches	SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id
Keep the records that tourney name of matches is WTA Championships	WHERE T2.tourney_name = WTA Championships
Get country code and first name of players that has matches	SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id
Keep the records that tourney name of matches is Australian Open	WHERE T2.tourney_name = Australian Open
Get country code and first name of players that has matches	SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id
Keep the records that tourney name of matches is WTA Championships	WHERE T2.tourney_name = WTA Championships
Get country code and first name of players that has matches	SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id
Keep the records that tourney name of matches is Australian Open	WHERE T2.tourney_name = Australian Open
Get first name and country code of players	SELECT first_name , country_code FROM players
Order these records based on the birth date, and return the top 1 record	ORDER BY birth_date LIMIT 1
Get first name and country code of players	SELECT first_name , country_code FROM players
Order these records based on the birth date, and return the top 1 record	ORDER BY birth_date LIMIT 1
Get first name and last name of players	SELECT first_name , last_name FROM players
Order these records based on the birth date	ORDER BY birth_date 
Get first name and last name of players	SELECT first_name , last_name FROM players
Order these records based on the birth date	ORDER BY birth_date 
Get first name and last name of players	SELECT first_name , last_name FROM players
Keep the records that hand is L	WHERE hand = L 
Order these records based on the birth date	ORDER BY birth_date 
Get first name and last name of players	SELECT first_name , last_name FROM players
Keep the records that hand is L	WHERE hand = L 
Order these records based on the birth date	ORDER BY birth_date 
Get country code and first name of players that has rankings	SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
Order these records based on the tours of rankings and sort them in descending order, and return the top 1 record	ORDER BY T2.tours DESC LIMIT 1
Get country code and first name of players that has rankings	SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
Order these records based on the tours of rankings and sort them in descending order, and return the top 1 record	ORDER BY T2.tours DESC LIMIT 1
Get of matches	SELECT YEAR FROM matches
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of matches	SELECT YEAR FROM matches
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get winner name and winner rank points of matches	SELECT winner_name , winner_rank_points FROM matches
Group the records based on winner name	GROUP BY winner_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get winner name and winner rank points of matches	SELECT winner_name , winner_rank_points FROM matches
Group the records based on winner name	GROUP BY winner_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get winner name of matches	SELECT winner_name FROM matches
Keep the records that tourney name is Australian Open	WHERE tourney_name = Australian Open 
Order these records based on the winner rank points and sort them in descending order, and return the top 1 record	ORDER BY winner_rank_points DESC LIMIT 1
Get winner name of matches	SELECT winner_name FROM matches
Keep the records that tourney name is Australian Open	WHERE tourney_name = Australian Open 
Order these records based on the winner rank points and sort them in descending order, and return the top 1 record	ORDER BY winner_rank_points DESC LIMIT 1
Get winner name and loser name of matches	SELECT winner_name , loser_name FROM matches
Order these records based on the minutes and sort them in descending order, and return the top 1 record	ORDER BY minutes DESC LIMIT 1
Get winner name and loser name of matches	SELECT winner_name , loser_name FROM matches
Order these records based on the minutes and sort them in descending order, and return the top 1 record	ORDER BY minutes DESC LIMIT 1
Get the average value of ranking and first name of players that has rankings	SELECT AVG ( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
Group the records based on first name of players	GROUP BY T1.first_name
Get the average value of ranking and first name of players that has rankings	SELECT AVG ( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
Group the records based on first name of players	GROUP BY T1.first_name
Get the SUM of ranking points and first name of players that has rankings	SELECT SUM ( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
Group the records based on first name of players	GROUP BY T1.first_name
Get the SUM of ranking points and first name of players that has rankings	SELECT SUM ( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id
Group the records based on first name of players	GROUP BY T1.first_name
Get the number and country code of players	SELECT COUNT ( * ) , country_code FROM players
Group the records based on country code	GROUP BY country_code
Get the number and country code of players	SELECT COUNT ( * ) , country_code FROM players
Group the records based on country code	GROUP BY country_code
Get country code of players	SELECT country_code FROM players
Group the records based on country code	GROUP BY country_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country code of players	SELECT country_code FROM players
Group the records based on country code	GROUP BY country_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get country code of players	SELECT country_code FROM players
Group the records based on the number country code 50 that the number is greater than 50	GROUP BY country_code HAVING COUNT ( * ) > 50 HAVING COUNT ( * ) > 50
Get country code of players	SELECT country_code FROM players
Group the records based on the number country code 50 that the number is greater than 50	GROUP BY country_code HAVING COUNT ( * ) > 50 HAVING COUNT ( * ) > 50
Get the SUM of tours and ranking date of rankings	SELECT SUM ( tours ) , ranking_date FROM rankings
Group the records based on ranking date	GROUP BY ranking_date
Get the SUM of tours and ranking date of rankings	SELECT SUM ( tours ) , ranking_date FROM rankings
Group the records based on ranking date	GROUP BY ranking_date
Get the number of matches	SELECT COUNT ( * ) , YEAR FROM matches
Group the records based on	GROUP BY
Get the number of matches	SELECT COUNT ( * ) , YEAR FROM matches
Group the records based on	GROUP BY
Get winner name and winner rank of matches	SELECT DISTINCT winner_name , winner_rank FROM matches
Order these records based on the winner age, and return the top 3 records	ORDER BY winner_age LIMIT 3
Get winner name and winner rank of matches	SELECT DISTINCT winner_name , winner_rank FROM matches
Order these records based on the winner age, and return the top 3 records	ORDER BY winner_age LIMIT 3
Get the number of distinct winner name of matches	SELECT COUNT ( DISTINCT winner_name ) FROM matches
Keep the records that tourney name is WTA Championships AND winner hand is L	WHERE tourney_name = WTA Championships AND winner_hand = L
Get the number of distinct winner name of matches	SELECT COUNT ( DISTINCT winner_name ) FROM matches
Keep the records that tourney name is WTA Championships AND winner hand is L	WHERE tourney_name = WTA Championships AND winner_hand = L
Get first name and country code and birth date of players that has matches	SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id
Order these records based on the winner rank points of matches and sort them in descending order, and return the top 1 record	ORDER BY T2.winner_rank_points DESC LIMIT 1
Get first name and country code and birth date of players that has matches	SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id
Order these records based on the winner rank points of matches and sort them in descending order, and return the top 1 record	ORDER BY T2.winner_rank_points DESC LIMIT 1
Get the number and hand of players	SELECT COUNT ( * ) , hand FROM players
Group the records based on hand	GROUP BY hand
Get the number and hand of players	SELECT COUNT ( * ) , hand FROM players
Group the records based on hand	GROUP BY hand
Get the number of ship	SELECT COUNT ( * ) FROM ship
Keep the records that disposition of ship is Captured	WHERE disposition_of_ship = Captured
Get name and tonnage of ship	SELECT name , tonnage FROM ship
Order these records based on the name and sort them in descending ORDER	ORDER BY name DESC 
Get name of battle	SELECT name , DATE FROM battle
Get the maximum value of killed and the minimum value of killed of death	SELECT MAX ( killed ) , MIN ( killed ) FROM death
Get the average value of injured of death	SELECT AVG ( injured ) FROM death
Get killed and injured of death that has ship	SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id
Keep the records that tonnage of T2 is t	WHERE T2.tonnage = t
Get name of battle	SELECT name , RESULT FROM battle
Keep the records that bulgarian commander is not Boril	WHERE bulgarian_commander != Boril
Get id and name of battle that has ship	SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle
Keep the records that ship type of ship is Brig	WHERE T2.ship_type = Brig
Get id and name of battle that has ship and death	SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id
Group the records based on the SUM of killed of death id of battle 10 that the SUM of killed of death is greater than 10	GROUP BY T1.id HAVING SUM ( T3.killed ) > 10 HAVING SUM ( T3.killed ) > 10
Get id and name of death that has ship	SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id
Group the records based on id of T2	GROUP BY T2.id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of battle	SELECT name FROM battle
Keep the records that bulgarian commander is Kaloyan AND latin commander is Baldwin I	WHERE bulgarian_commander = Kaloyan AND latin_commander = Baldwin I
Get the number of distinct RESULT of battle	SELECT COUNT ( DISTINCT RESULT ) FROM battle
Get lost in battle of ship	SELECT lost_in_battle FROM ship
Keep the records that tonnage is 225	WHERE tonnage = 225
Get the number of battle	SELECT COUNT ( * ) FROM battle
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get name and date of battle that has ship	SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle
Keep the records that name of ship is Lettice	WHERE T2.name = Lettice
Get name and date of battle that has ship	SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle
Keep the records that name of ship is HMS Atalanta	WHERE T2.name = HMS Atalanta
Get name and bulgarian commander of battle	SELECT name , RESULT , bulgarian_commander FROM battle
Get name and result and bulgarian commander of battle that has ship	SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle
Keep the records that location of ship is English Channel	WHERE T2.location = English Channel
Get note of death	SELECT note FROM death
Keep the records that note is in the form of %East%	WHERE note LIKE %East%
Get line 1 and line 2 of addresses	SELECT line_1 , line_2 FROM addresses
Get line 1 and line 2 of addresses	SELECT line_1 , line_2 FROM addresses
Get the number of Courses	SELECT COUNT ( * ) FROM Courses
Get the number of Courses	SELECT COUNT ( * ) FROM Courses
Get course description of Courses	SELECT course_description FROM Courses
Keep the records that course name is math	WHERE course_name = math
Get course description of Courses	SELECT course_description FROM Courses
Keep the records that course name is math	WHERE course_name = math
Get zip postcode of Addresses	SELECT zip_postcode FROM Addresses
Keep the records that city is Port Chelsea	WHERE city = Port Chelsea
Get zip postcode of Addresses	SELECT zip_postcode FROM Addresses
Keep the records that city is Port Chelsea	WHERE city = Port Chelsea
Get department name and department id of Degree Programs that has Departments	SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id
Group the records based on department id of Degree Programs	GROUP BY T1.department_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get department name and department id of degree programs that has departments	SELECT t2.department_name , t1.department_id FROM degree_programs AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id
Group the records based on department id of degree programs	GROUP BY t1.department_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of distinct department id of Degree Programs	SELECT COUNT ( DISTINCT department_id ) FROM Degree_Programs
Get the number of distinct department id of Degree Programs	SELECT COUNT ( DISTINCT department_id ) FROM Degree_Programs
Get the number of distinct degree summary name of Degree Programs	SELECT COUNT ( DISTINCT degree_summary_name ) FROM Degree_Programs
Get the number of distinct degree summary name of Degree Programs	SELECT COUNT ( DISTINCT degree_summary_name ) FROM Degree_Programs
Get the number of Departments that has Degree Programs	SELECT COUNT ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
Keep the records that department name of Departments is engineer	WHERE T1.department_name = engineer
Get the number of Departments that has Degree Programs	SELECT COUNT ( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
Keep the records that department name of Departments is engineer	WHERE T1.department_name = engineer
Get section name and section description of Sections	SELECT section_name , section_description FROM Sections
Get section name and section description of Sections	SELECT section_name , section_description FROM Sections
Get course name and course id of Courses that has Sections	SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course id of Courses 2 that the number is less than or equal to 2	GROUP BY T1.course_id HAVING COUNT ( * ) <= 2 HAVING COUNT ( * ) <= 2
Get course name and course id of Courses that has Sections	SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id
Group the records based on the number course id of Courses 2 that the number is less than or equal to 2	GROUP BY T1.course_id HAVING COUNT ( * ) <= 2 HAVING COUNT ( * ) <= 2
Get section name of Sections	SELECT section_name FROM Sections
Order these records based on the section name and sort them in descending ORDER	ORDER BY section_name DESC 
Get section name of Sections	SELECT section_name FROM Sections
Order these records based on the section name and sort them in descending ORDER	ORDER BY section_name DESC 
Get semester name and semester id of Semesters that has Student Enrolment	SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id
Group the records based on semester id of Semesters	GROUP BY T1.semester_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get semester name and semester id of Semesters that has Student Enrolment	SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id
Group the records based on semester id of Semesters	GROUP BY T1.semester_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get department description of Departments	SELECT department_description FROM Departments
Keep the records that department name is in the form of %computer%	WHERE department_name LIKE %computer%
Get department description of Departments	SELECT department_description FROM Departments
Keep the records that department name is in the form of %computer%	WHERE department_name LIKE %computer%
Get first name and middle name and last name and student id of Students that has Student Enrolment	SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id
Group the records based on the number student id of Students 2 that the number is 2	GROUP BY T1.student_id HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get first name and middle name and last name and student id of Students that has Student Enrolment	SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id
Group the records based on the number student id of Students 2 that the number is 2	GROUP BY T1.student_id HAVING COUNT ( * ) = 2 HAVING COUNT ( * ) = 2
Get first name and middle name and last name of Students that has Student Enrolment and Degree Programs	SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id
Keep the records that degree summary name of Degree Programs is Bachelor	WHERE T3.degree_summary_name = Bachelor
Get first name and middle name and last name of Students that has Student Enrolment and Degree Programs	SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id
Keep the records that degree summary name of Degree Programs is Bachelor	WHERE T3.degree_summary_name = Bachelor
Get degree summary name of Degree Programs that has Student Enrolment	SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Group the records based on degree summary name of Degree Programs	GROUP BY T1.degree_summary_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get degree summary name of Degree Programs that has Student Enrolment	SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Group the records based on degree summary name of Degree Programs	GROUP BY T1.degree_summary_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get degree program id and degree summary name of Degree Programs that has Student Enrolment	SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Group the records based on degree program id of Degree Programs	GROUP BY T1.degree_program_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get degree program id and degree summary name of Degree Programs that has Student Enrolment	SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Group the records based on degree program id of Degree Programs	GROUP BY T1.degree_program_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and student id and first name and middle name and last name and student id of Students that has Student Enrolment	SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , COUNT ( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Students	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and student id and first name and middle name and last name and student id of Students that has Student Enrolment	SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , COUNT ( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id
Group the records based on student id of Students	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get semester id of Student Enrolment	SELECT semester_id FROM Student_Enrolment
Get semester name of Semesters	SELECT semester_name FROM Semesters
Keep the records that semester id is not in the first query result	WHERE semester_id NOT IN ( the first query result ) 
Get semester id of Student Enrolment	SELECT semester_id FROM Student_Enrolment
Get semester name of Semesters	SELECT semester_name FROM Semesters
Keep the records that semester id is not in the first query result	WHERE semester_id NOT IN ( the first query result ) 
Get course name of Courses that has Student Enrolment Courses	SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2
Get course name of Courses that has Student Enrolment Courses	SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2
Get course name of Courses that has Student Enrolment Courses	SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
Group the records based on course name of Courses	GROUP BY T1.course_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get course name of Courses that has Student Enrolment Courses	SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
Group the records based on course name of Courses	GROUP BY T1.course_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get last name of Students that has Addresses	SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id
Keep the records that state province county of Addresses is NorthCarolina	WHERE T2.state_province_county = NorthCarolina
Get last name of Students that has Student Enrolment	SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4
Get last name of Students that has Addresses	SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id
Keep the records that state province county of Addresses is NorthCarolina	WHERE T2.state_province_county = NorthCarolina
Get last name of Students that has Student Enrolment	SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4
Get transcript date and transcript id of Transcript Contents that has Transcripts	SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id
Group the records based on the number transcript id of Transcript Contents 2 that the number is greater than or equal to 2	GROUP BY T1.transcript_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get transcript date and transcript id of Transcript Contents that has Transcripts	SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id
Group the records based on the number transcript id of Transcript Contents 2 that the number is greater than or equal to 2	GROUP BY T1.transcript_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get cell mobile number of Students	SELECT cell_mobile_number FROM Students
Keep the records that first name is Timmothy AND last name is Ward	WHERE first_name = Timmothy AND last_name = Ward
Get cell mobile number of students	SELECT cell_mobile_number FROM students
Keep the records that first name is timmothy AND last name is ward	WHERE first_name = timmothy AND last_name = ward
Get first name and middle name and last name of Students	SELECT first_name , middle_name , last_name FROM Students
Order these records based on the date first registered and sort them in ascending order, and return the top 1 record	ORDER BY date_first_registered ASC LIMIT 1
Get first name and middle name and last name of Students	SELECT first_name , middle_name , last_name FROM Students
Order these records based on the date first registered and sort them in ascending order, and return the top 1 record	ORDER BY date_first_registered ASC LIMIT 1
Get first name and middle name and last name of Students	SELECT first_name , middle_name , last_name FROM Students
Order these records based on the date left and sort them in ascending order, and return the top 1 record	ORDER BY date_left ASC LIMIT 1
Get first name and middle name and last name of Students	SELECT first_name , middle_name , last_name FROM Students
Order these records based on the date left and sort them in ascending order, and return the top 1 record	ORDER BY date_left ASC LIMIT 1
Get first name of Students	SELECT first_name FROM Students
Keep the records that current address id is not permanent address id	WHERE current_address_id != permanent_address_id
Get first name of Students	SELECT first_name FROM Students
Keep the records that current address id is not permanent address id	WHERE current_address_id != permanent_address_id
Get address id and line 1 and line 2 of Addresses that has Students	SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id
Group the records based on address id of Addresses	GROUP BY T1.address_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get address id and line 1 and line 2 of Addresses that has Students	SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id
Group the records based on address id of Addresses	GROUP BY T1.address_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the average value of transcript date of Transcripts	SELECT AVG ( transcript_date ) FROM Transcripts
Get the average value of transcript date of Transcripts	SELECT AVG ( transcript_date ) FROM Transcripts
Get transcript date and other details of Transcripts	SELECT transcript_date , other_details FROM Transcripts
Order these records based on the transcript date and sort them in ascending order, and return the top 1 record	ORDER BY transcript_date ASC LIMIT 1
Get transcript date and other details of Transcripts	SELECT transcript_date , other_details FROM Transcripts
Order these records based on the transcript date and sort them in ascending order, and return the top 1 record	ORDER BY transcript_date ASC LIMIT 1
Get the number of Transcripts	SELECT COUNT ( * ) FROM Transcripts
Get the number of Transcripts	SELECT COUNT ( * ) FROM Transcripts
Get transcript date of Transcripts	SELECT transcript_date FROM Transcripts
Order these records based on the transcript date and sort them in descending order, and return the top 1 record	ORDER BY transcript_date DESC LIMIT 1
Get transcript date of Transcripts	SELECT transcript_date FROM Transcripts
Order these records based on the transcript date and sort them in descending order, and return the top 1 record	ORDER BY transcript_date DESC LIMIT 1
Get the number and student course id of Transcript Contents	SELECT COUNT ( * ) , student_course_id FROM Transcript_Contents
Group the records based on student course id	GROUP BY student_course_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and student course id of Transcript Contents	SELECT COUNT ( * ) , student_course_id FROM Transcript_Contents
Group the records based on student course id	GROUP BY student_course_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get transcript date and transcript id of Transcript Contents that has Transcripts	SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id
Group the records based on transcript id of Transcript Contents	GROUP BY T1.transcript_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get transcript date and transcript id of Transcript Contents that has Transcripts	SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id
Group the records based on transcript id of Transcript Contents	GROUP BY T1.transcript_id
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get semester id of Degree Programs that has Student Enrolment	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Keep the records that degree summary name is Master	WHERE degree_summary_name = Master
Get semester id of Degree Programs that has Student Enrolment	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Keep the records that degree summary name is Bachelor	WHERE degree_summary_name = Bachelor
Get semester id of Degree Programs that has Student Enrolment	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Keep the records that degree summary name is Master	WHERE degree_summary_name = Master
Get semester id of Degree Programs that has Student Enrolment	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id
Keep the records that degree summary name is Bachelor	WHERE degree_summary_name = Bachelor
Get the number of distinct current address id of Students	SELECT COUNT ( DISTINCT current_address_id ) FROM Students
Get the number of distinct current address id of Students	SELECT COUNT ( DISTINCT current_address_id ) FROM Students
Get other student details of Students	SELECT other_student_details FROM Students
Order these records based on the other student details and sort them in descending ORDER	ORDER BY other_student_details DESC 
Get other student details of Students	SELECT other_student_details FROM Students
Order these records based on the other student details and sort them in descending ORDER	ORDER BY other_student_details DESC 
Get section description of Sections	SELECT section_description FROM Sections
Keep the records that section name is h	WHERE section_name = h
Get section description of Sections	SELECT section_description FROM Sections
Keep the records that section name is h	WHERE section_name = h
Get first name of students that has addresses	SELECT t1.first_name FROM students AS t1 JOIN addresses AS t2 ON t1.permanent_address_id = t2.address_id
Keep the records that country of addresses is haiti OR cell mobile number of students is 09700166582	WHERE t2.country = haiti OR t1.cell_mobile_number = 09700166582
Get first name of students that has addresses	SELECT t1.first_name FROM students AS t1 JOIN addresses AS t2 ON t1.permanent_address_id = t2.address_id
Keep the records that country of addresses is haiti OR cell mobile number of students is 09700166582	WHERE t2.country = haiti OR t1.cell_mobile_number = 09700166582
Get Title of Cartoon	SELECT Title FROM Cartoon
Order these records based on the Title	ORDER BY title 
Get Title of Cartoon	SELECT Title FROM Cartoon
Order these records based on the Title	ORDER BY title 
Get Title of Cartoon	SELECT Title FROM Cartoon
Keep the records that Directed by is Ben Jones	WHERE Directed_by = Ben Jones
Get Title of Cartoon	SELECT Title FROM Cartoon
Keep the records that Directed by is Ben Jones	WHERE Directed_by = Ben Jones
Get the number of Cartoon	SELECT COUNT ( * ) FROM Cartoon
Keep the records that Written by is Joseph Kuhr	WHERE Written_by = Joseph Kuhr
Get the number of Cartoon	SELECT COUNT ( * ) FROM Cartoon
Keep the records that Written by is Joseph Kuhr	WHERE Written_by = Joseph Kuhr
Get title and Directed BY of Cartoon	SELECT title , Directed_by FROM Cartoon
Order these records based on the Original air date	ORDER BY Original_air_date 
Get title and Directed BY of Cartoon	SELECT title , Directed_by FROM Cartoon
Order these records based on the Original air date	ORDER BY Original_air_date 
Get Title of Cartoon	SELECT Title FROM Cartoon
Keep the records that Directed by is Ben Jones OR Directed by is Brandon Vietti	WHERE Directed_by = Ben Jones OR Directed_by = Brandon Vietti
Get Title of Cartoon	SELECT Title FROM Cartoon
Keep the records that Directed by is Ben Jones OR Directed by is Brandon Vietti	WHERE Directed_by = Ben Jones OR Directed_by = Brandon Vietti
Get the number and Country of TV Channel	SELECT Country , COUNT ( * ) FROM TV_Channel
Group the records based on Country	GROUP BY Country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number and Country of TV Channel	SELECT Country , COUNT ( * ) FROM TV_Channel
Group the records based on Country	GROUP BY Country
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the number of distinct series name and the number of distinct content of TV Channel	SELECT COUNT ( DISTINCT series_name ) , COUNT ( DISTINCT content ) FROM TV_Channel
Get the number of distinct series name and the number of distinct content of TV Channel	SELECT COUNT ( DISTINCT series_name ) , COUNT ( DISTINCT content ) FROM TV_Channel
Get Content of TV Channel	SELECT Content FROM TV_Channel
Keep the records that series name is Sky Radio	WHERE series_name = Sky Radio
Get Content of TV Channel	SELECT Content FROM TV_Channel
Keep the records that series name is Sky Radio	WHERE series_name = Sky Radio
Get Package Option of TV Channel	SELECT Package_Option FROM TV_Channel
Keep the records that series name is Sky Radio	WHERE series_name = Sky Radio
Get Package Option of TV Channel	SELECT Package_Option FROM TV_Channel
Keep the records that series name is Sky Radio	WHERE series_name = Sky Radio
Get the number of TV Channel	SELECT COUNT ( * ) FROM TV_Channel
Keep the records that is English	WHERE LANGUAGE = English
Get the number of TV Channel	SELECT COUNT ( * ) FROM TV_Channel
Keep the records that is English	WHERE LANGUAGE = English
Get the number of TV Channel	SELECT LANGUAGE , COUNT ( * ) FROM TV_Channel
Group the records based on	GROUP BY
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number of TV Channel	SELECT LANGUAGE , COUNT ( * ) FROM TV_Channel
Group the records based on	GROUP BY
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number of TV Channel	SELECT LANGUAGE , COUNT ( * ) FROM TV_Channel
Group the records based on	GROUP BY
Get the number of TV Channel	SELECT LANGUAGE , COUNT ( * ) FROM TV_Channel
Group the records based on	GROUP BY
Get series name of TV Channel that has Cartoon	SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel
Keep the records that Title of Cartoon is The Rise of the Blue Beetle!	WHERE T2.Title = The Rise of the Blue Beetle!
Get series name of TV Channel that has Cartoon	SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel
Keep the records that Title of Cartoon is The Rise of the Blue Beetle!	WHERE T2.Title = The Rise of the Blue Beetle!
Get Title of TV Channel that has Cartoon	SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel
Keep the records that series name of TV Channel is Sky Radio	WHERE T1.series_name = Sky Radio
Get Title of TV Channel that has Cartoon	SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel
Keep the records that series name of TV Channel is Sky Radio	WHERE T1.series_name = Sky Radio
Get Episode of TV series	SELECT Episode FROM TV_series
Order these records based on the rating	ORDER BY rating 
Get Episode of TV series	SELECT Episode FROM TV_series
Order these records based on the rating	ORDER BY rating 
Get Episode and Rating of TV series	SELECT Episode , Rating FROM TV_series
Order these records based on the Rating and sort them in descending order, and return the top 3 records	ORDER BY Rating DESC LIMIT 3
Get Episode and Rating of TV series	SELECT Episode , Rating FROM TV_series
Order these records based on the Rating and sort them in descending order, and return the top 3 records	ORDER BY Rating DESC LIMIT 3
Get the maximum value of SHARE and the minimum value of SHARE of TV series	SELECT MAX ( SHARE ) , MIN ( SHARE ) FROM TV_series
Get the maximum value of SHARE and the minimum value of SHARE of TV series	SELECT MAX ( SHARE ) , MIN ( SHARE ) FROM TV_series
Get Air Date of TV series	SELECT Air_Date FROM TV_series
Keep the records that Episode is A Love of a Lifetime	WHERE Episode = A Love of a Lifetime
Get Air Date of TV series	SELECT Air_Date FROM TV_series
Keep the records that Episode is A Love of a Lifetime	WHERE Episode = A Love of a Lifetime
Get Weekly Rank of TV series	SELECT Weekly_Rank FROM TV_series
Keep the records that Episode is A Love of a Lifetime	WHERE Episode = A Love of a Lifetime
Get Weekly Rank of TV series	SELECT Weekly_Rank FROM TV_series
Keep the records that Episode is A Love of a Lifetime	WHERE Episode = A Love of a Lifetime
Get series name of TV Channel that has TV series	SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel
Keep the records that Episode of TV series is A Love of a Lifetime	WHERE T2.Episode = A Love of a Lifetime
Get series name of TV Channel that has TV series	SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel
Keep the records that Episode of TV series is A Love of a Lifetime	WHERE T2.Episode = A Love of a Lifetime
Get Episode of TV Channel that has TV series	SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel
Keep the records that series name of TV Channel is Sky Radio	WHERE T1.series_name = Sky Radio
Get Episode of TV Channel that has TV series	SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel
Keep the records that series name of TV Channel is Sky Radio	WHERE T1.series_name = Sky Radio
Get the number and Directed BY of cartoon	SELECT COUNT ( * ) , Directed_by FROM cartoon
Group the records based on Directed BY	GROUP BY Directed_by
Get the number and Directed BY of cartoon	SELECT COUNT ( * ) , Directed_by FROM cartoon
Group the records based on Directed BY	GROUP BY Directed_by
Get production code and channel of cartoon	SELECT production_code , channel FROM cartoon
Order these records based on the original air date and sort them in descending order, and return the top 1 record	ORDER BY original_air_date DESC LIMIT 1
Get production code and channel of cartoon	SELECT production_code , channel FROM cartoon
Order these records based on the original air date and sort them in descending order, and return the top 1 record	ORDER BY original_air_date DESC LIMIT 1
Get package option and series name of TV Channel	SELECT package_option , series_name FROM TV_Channel
Keep the records that hight definition TV is yes	WHERE hight_definition_TV = yes
Get package option and series name of TV Channel	SELECT package_option , series_name FROM TV_Channel
Keep the records that hight definition TV is yes	WHERE hight_definition_TV = yes
Get country of TV Channel that has cartoon	SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that written by of cartoon is Todd Casey	WHERE T2.written_by = Todd Casey
Get country of TV Channel that has cartoon	SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that written by of cartoon is Todd Casey	WHERE T2.written_by = Todd Casey
Get country of TV Channel	SELECT country FROM TV_Channel
Get country of TV Channel that has cartoon	SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that written by of cartoon is Todd Casey	WHERE T2.written_by = Todd Casey
Get country of TV Channel	SELECT country FROM TV_Channel
Get country of TV Channel that has cartoon	SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that written by of cartoon is Todd Casey	WHERE T2.written_by = Todd Casey
Get series name and country of TV Channel that has cartoon	SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that directed by of cartoon is Michael Chang	WHERE T2.directed_by = Michael Chang
Get series name and country of TV Channel that has cartoon	SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that directed by of cartoon is Ben Jones	WHERE T2.directed_by = Ben Jones
Get series name and country of TV Channel that has cartoon	SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that directed by of cartoon is Michael Chang	WHERE T2.directed_by = Michael Chang
Get series name and country of TV Channel that has cartoon	SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel
Keep the records that directed by of cartoon is Ben Jones	WHERE T2.directed_by = Ben Jones
Get Pixel aspect ratio PAR and country of tv channel	SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel
Keep the records that is not English	WHERE LANGUAGE != English
Get Pixel aspect ratio PAR and country of tv channel	SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel
Keep the records that is not English	WHERE LANGUAGE != English
Get id of tv channel	SELECT id FROM tv_channel
Group the records based on the number country 2 that the number is greater than 2	GROUP BY country HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get id of tv channel	SELECT id FROM tv_channel
Group the records based on the number country 2 that the number is greater than 2	GROUP BY country HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get id of TV Channel	SELECT id FROM TV_Channel
Get channel of cartoon	SELECT channel FROM cartoon
Keep the records that directed by is Ben Jones	WHERE directed_by = Ben Jones
Get id of TV Channel	SELECT id FROM TV_Channel
Get channel of cartoon	SELECT channel FROM cartoon
Keep the records that directed by is Ben Jones	WHERE directed_by = Ben Jones
Get channel of cartoon	SELECT channel FROM cartoon
Keep the records that directed by is Ben Jones	WHERE directed_by = Ben Jones
Get package option of TV Channel	SELECT package_option FROM TV_Channel
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get channel of cartoon	SELECT channel FROM cartoon
Keep the records that directed by is Ben Jones	WHERE directed_by = Ben Jones
Get package option of TV Channel	SELECT package_option FROM TV_Channel
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get the number of poker player	SELECT COUNT ( * ) FROM poker_player
Get the number of poker player	SELECT COUNT ( * ) FROM poker_player
Get Earnings of poker player	SELECT Earnings FROM poker_player
Order these records based on the Earnings and sort them in descending ORDER	ORDER BY Earnings DESC 
Get Earnings of poker player	SELECT Earnings FROM poker_player
Order these records based on the Earnings and sort them in descending ORDER	ORDER BY Earnings DESC 
Get Final Table Made and Best Finish of poker player	SELECT Final_Table_Made , Best_Finish FROM poker_player
Get Final Table Made and Best Finish of poker player	SELECT Final_Table_Made , Best_Finish FROM poker_player
Get the average value of Earnings of poker player	SELECT AVG ( Earnings ) FROM poker_player
Get the average value of Earnings of poker player	SELECT AVG ( Earnings ) FROM poker_player
Get Money Rank of poker player	SELECT Money_Rank FROM poker_player
Order these records based on the Earnings and sort them in descending order, and return the top 1 record	ORDER BY Earnings DESC LIMIT 1
Get Money Rank of poker player	SELECT Money_Rank FROM poker_player
Order these records based on the Earnings and sort them in descending order, and return the top 1 record	ORDER BY Earnings DESC LIMIT 1
Get the maximum value of Final Table Made of poker player	SELECT MAX ( Final_Table_Made ) FROM poker_player
Keep the records that Earnings is less than 200000	WHERE Earnings < 200000
Get the maximum value of Final Table Made of poker player	SELECT MAX ( Final_Table_Made ) FROM poker_player
Keep the records that Earnings is less than 200000	WHERE Earnings < 200000
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Earnings of poker player is greater than 300000	WHERE T2.Earnings > 300000
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Earnings of poker player is greater than 300000	WHERE T2.Earnings > 300000
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Final Table Made of poker player	ORDER BY T2.Final_Table_Made 
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Final Table Made of poker player	ORDER BY T2.Final_Table_Made 
Get Birth Date of people that has poker player	SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Earnings of poker player and sort them in ascending order, and return the top 1 record	ORDER BY T2.Earnings ASC LIMIT 1
Get Birth Date of people that has poker player	SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Earnings of poker player and sort them in ascending order, and return the top 1 record	ORDER BY T2.Earnings ASC LIMIT 1
Get Money Rank of people that has poker player	SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Height of people and sort them in descending order, and return the top 1 record	ORDER BY T1.Height DESC LIMIT 1
Get Money Rank of people that has poker player	SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Height of people and sort them in descending order, and return the top 1 record	ORDER BY T1.Height DESC LIMIT 1
Get the average value of Earnings of people that has poker player	SELECT AVG ( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Height of people is greater than 200	WHERE T1.Height > 200
Get the average value of Earnings of people that has poker player	SELECT AVG ( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Keep the records that Height of people is greater than 200	WHERE T1.Height > 200
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Earnings of poker player and sort them in descending ORDER	ORDER BY T2.Earnings DESC 
Get Name of people that has poker player	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
Order these records based on the Earnings of poker player and sort them in descending ORDER	ORDER BY T2.Earnings DESC 
Get the number and Nationality of people	SELECT Nationality , COUNT ( * ) FROM people
Group the records based on Nationality	GROUP BY Nationality
Get the number and Nationality of people	SELECT Nationality , COUNT ( * ) FROM people
Group the records based on Nationality	GROUP BY Nationality
Get Nationality of people	SELECT Nationality FROM people
Group the records based on Nationality	GROUP BY Nationality
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nationality of people	SELECT Nationality FROM people
Group the records based on Nationality	GROUP BY Nationality
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Nationality of people	SELECT Nationality FROM people
Group the records based on the number Nationality 2 that the number is greater than or equal to 2	GROUP BY Nationality HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Nationality of people	SELECT Nationality FROM people
Group the records based on the number Nationality 2 that the number is greater than or equal to 2	GROUP BY Nationality HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get Name and Birth Date of people	SELECT Name , Birth_Date FROM people
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name and Birth Date of people	SELECT Name , Birth_Date FROM people
Order these records based on the Name and sort them in ascending ORDER	ORDER BY Name ASC 
Get Name of people	SELECT Name FROM people
Keep the records that Nationality is not Russia	WHERE Nationality != Russia
Get Name of people	SELECT Name FROM people
Keep the records that Nationality is not Russia	WHERE Nationality != Russia
Get People ID of poker player	SELECT People_ID FROM poker_player
Get Name of people	SELECT Name FROM people
Keep the records that People ID is not in the first query result	WHERE People_ID NOT IN ( the first query result ) 
Get People ID of poker player	SELECT People_ID FROM poker_player
Get Name of people	SELECT Name FROM people
Keep the records that People ID is not in the first query result	WHERE People_ID NOT IN ( the first query result ) 
Get the number of distinct Nationality of people	SELECT COUNT ( DISTINCT Nationality ) FROM people
Get the number of distinct Nationality of people	SELECT COUNT ( DISTINCT Nationality ) FROM people
Get the number of area code state	SELECT COUNT ( * ) FROM area_code_state
Get contestant number and contestant name of contestants	SELECT contestant_number , contestant_name FROM contestants
Order these records based on the contestant name and sort them in descending ORDER	ORDER BY contestant_name DESC 
Get vote id and phone number and state of votes	SELECT vote_id , phone_number , state FROM votes
Get the maximum value of area code and the minimum value of area code of area code state	SELECT MAX ( area_code ) , MIN ( area_code ) FROM area_code_state
Get the maximum value of created of votes	SELECT MAX ( created ) FROM votes
Keep the records that state is CA	WHERE state = CA
Get contestant name of contestants	SELECT contestant_name FROM contestants
Keep the records that contestant name is not Jessie Alloway	WHERE contestant_name != Jessie Alloway
Get state and created of votes	SELECT DISTINCT state , created FROM votes
Get contestant number and contestant name of contestants that has votes	SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number
Group the records based on the number contestant number of contestants 2 that the number is greater than or equal to 2	GROUP BY T1.contestant_number HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get contestant number and contestant name of contestants that has votes	SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number
Group the records based on contestant number of contestants	GROUP BY T1.contestant_number
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get the number of votes	SELECT COUNT ( * ) FROM votes
Keep the records that state is NY OR state is CA	WHERE state = NY OR state = CA
Get contestant number of votes	SELECT contestant_number FROM votes
Get the number of contestants	SELECT COUNT ( * ) FROM contestants
Keep the records that contestant number is not in the first query result	WHERE contestant_number NOT IN ( the first query result ) 
Get area code of area code state that has votes	SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state
Group the records based on area code of area code state	GROUP BY T1.area_code
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get created and state and phone number of contestants that has votes	SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number
Keep the records that contestant name of contestants is Tabatha Gehling	WHERE T1.contestant_name = Tabatha Gehling
Get area code of contestants that has votes and area code state	SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state
Keep the records that contestant name of contestants is Tabatha Gehling	WHERE T1.contestant_name = Tabatha Gehling
Get area code of contestants that has votes and area code state	SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state
Keep the records that contestant name of contestants is Kelly Clauss	WHERE T1.contestant_name = Kelly Clauss
Get contestant name of contestants	SELECT contestant_name FROM contestants
Keep the records that contestant name is in the form of %al%	WHERE contestant_name LIKE %al%
Get Name of country	SELECT Name FROM country
Keep the records that IndepYear is greater than 1950	WHERE IndepYear > 1950
Get Name of country	SELECT Name FROM country
Keep the records that IndepYear is greater than 1950	WHERE IndepYear > 1950
Get the number of country	SELECT COUNT ( * ) FROM country
Keep the records that GovernmentForm is Republic	WHERE GovernmentForm = Republic
Get the number of country	SELECT COUNT ( * ) FROM country
Keep the records that GovernmentForm is Republic	WHERE GovernmentForm = Republic
Get the SUM of SurfaceArea of country	SELECT SUM ( SurfaceArea ) FROM country
Keep the records that Region is Caribbean	WHERE Region = Caribbean
Get the SUM of SurfaceArea of country	SELECT SUM ( SurfaceArea ) FROM country
Keep the records that Region is Caribbean	WHERE Region = Caribbean
Get Continent of country	SELECT Continent FROM country
Keep the records that Name is Anguilla	WHERE Name = Anguilla
Get Continent of country	SELECT Continent FROM country
Keep the records that Name is Anguilla	WHERE Name = Anguilla
Get Region of country that has city	SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of city is Kabul	WHERE T2.Name = Kabul
Get Region of country that has city	SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of city is Kabul	WHERE T2.Name = Kabul
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of country is Aruba	WHERE T1.Name = Aruba 
Order these records based on the Percentage and sort them in descending order, and return the top 1 record	ORDER BY Percentage DESC LIMIT 1
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of country is Aruba	WHERE T1.Name = Aruba 
Order these records based on the Percentage and sort them in descending order, and return the top 1 record	ORDER BY Percentage DESC LIMIT 1
Get Population and LifeExpectancy of country	SELECT Population , LifeExpectancy FROM country
Keep the records that Name is Brazil	WHERE Name = Brazil
Get Population and LifeExpectancy of country	SELECT Population , LifeExpectancy FROM country
Keep the records that Name is Brazil	WHERE Name = Brazil
Get Population and Region of country	SELECT Population , Region FROM country
Keep the records that Name is Angola	WHERE Name = Angola
Get Population and Region of country	SELECT Population , Region FROM country
Keep the records that Name is Angola	WHERE Name = Angola
Get the average value of LifeExpectancy of country	SELECT AVG ( LifeExpectancy ) FROM country
Keep the records that Region is Central Africa	WHERE Region = Central Africa
Get the average value of LifeExpectancy of country	SELECT AVG ( LifeExpectancy ) FROM country
Keep the records that Region is Central Africa	WHERE Region = Central Africa
Get Name of country	SELECT Name FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia 
Order these records based on the LifeExpectancy, and return the top 1 record	ORDER BY LifeExpectancy LIMIT 1
Get Name of country	SELECT Name FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia 
Order these records based on the LifeExpectancy, and return the top 1 record	ORDER BY LifeExpectancy LIMIT 1
Get the SUM of Population and the maximum value of GNP of country	SELECT SUM ( Population ) , MAX ( GNP ) FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia
Get the SUM of Population and the maximum value of GNP of country	SELECT SUM ( Population ) , MAX ( GNP ) FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia
Get the average value of LifeExpectancy of country	SELECT AVG ( LifeExpectancy ) FROM country
Keep the records that Continent is Africa AND GovernmentForm is Republic	WHERE Continent = Africa AND GovernmentForm = Republic
Get the average value of LifeExpectancy of country	SELECT AVG ( LifeExpectancy ) FROM country
Keep the records that Continent is Africa AND GovernmentForm is Republic	WHERE Continent = Africa AND GovernmentForm = Republic
Get the SUM of SurfaceArea of country	SELECT SUM ( SurfaceArea ) FROM country
Keep the records that Continent is Asia OR Continent is Europe	WHERE Continent = Asia OR Continent = Europe
Get the SUM of SurfaceArea of country	SELECT SUM ( SurfaceArea ) FROM country
Keep the records that Continent is Asia OR Continent is Europe	WHERE Continent = Asia OR Continent = Europe
Get the SUM of Population of city	SELECT SUM ( Population ) FROM city
Keep the records that District is Gelderland	WHERE District = Gelderland
Get the SUM of Population of city	SELECT SUM ( Population ) FROM city
Keep the records that District is Gelderland	WHERE District = Gelderland
Get the average value of GNP and the SUM of population of country	SELECT AVG ( GNP ) , SUM ( population ) FROM country
Keep the records that GovernmentForm is US Territory	WHERE GovernmentForm = US Territory
Get the average value of GNP and the SUM of population of country	SELECT AVG ( GNP ) , SUM ( population ) FROM country
Keep the records that GovernmentForm is US Territory	WHERE GovernmentForm = US Territory
Get the number of distinct LANGUAGE of countrylanguage	SELECT COUNT ( DISTINCT LANGUAGE ) FROM countrylanguage
Get the number of distinct LANGUAGE of countrylanguage	SELECT COUNT ( DISTINCT LANGUAGE ) FROM countrylanguage
Get the number of distinct GovernmentForm of country	SELECT COUNT ( DISTINCT GovernmentForm ) FROM country
Keep the records that Continent is Africa	WHERE Continent = Africa
Get the number of distinct GovernmentForm of country	SELECT COUNT ( DISTINCT GovernmentForm ) FROM country
Keep the records that Continent is Africa	WHERE Continent = Africa
Get the number of Language of country that has countrylanguage	SELECT COUNT ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of country is Aruba	WHERE T1.Name = Aruba
Get the number of Language of country that has countrylanguage	SELECT COUNT ( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of country is Aruba	WHERE T1.Name = Aruba
Get the number of country that has countrylanguage	SELECT COUNT ( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of country is Afghanistan AND IsOfficial is T	WHERE T1.Name = Afghanistan AND IsOfficial = T
Get the number of country that has countrylanguage	SELECT COUNT ( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Name of country is Afghanistan AND IsOfficial is T	WHERE T1.Name = Afghanistan AND IsOfficial = T
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Group the records based on Name of country	GROUP BY T1.Name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Group the records based on Name of country	GROUP BY T1.Name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Continent of country that has countrylanguage	SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Group the records based on Continent of country	GROUP BY T1.Continent
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Continent of country that has countrylanguage	SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Group the records based on Continent of country	GROUP BY T1.Continent
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is Dutch	WHERE T2.Language = Dutch
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is Dutch	WHERE T2.Language = Dutch
Get the number of the third query result	SELECT COUNT ( * ) FROM ( the third query result ) 
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is French	WHERE T2.Language = French
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is French	WHERE T2.Language = French
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English AND IsOfficial of countrylanguage is T	WHERE T2.Language = English AND T2.IsOfficial = T
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is French AND IsOfficial of countrylanguage is T	WHERE T2.Language = French AND T2.IsOfficial = T
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English AND IsOfficial of countrylanguage is T	WHERE T2.Language = English AND T2.IsOfficial = T
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is French AND IsOfficial of countrylanguage is T	WHERE T2.Language = French AND T2.IsOfficial = T
Get the number of distinct Continent of country that has countrylanguage	SELECT COUNT ( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is Chinese	WHERE T2.Language = Chinese
Get the number of distinct Continent of country that has countrylanguage	SELECT COUNT ( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is Chinese	WHERE T2.Language = Chinese
Get Region of country that has countrylanguage	SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English OR Language of countrylanguage is Dutch	WHERE T2.Language = English OR T2.Language = Dutch
Get Region of country that has countrylanguage	SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English OR Language of countrylanguage is Dutch	WHERE T2.Language = English OR T2.Language = Dutch
Get name of country that has countrylanguage	SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode
Keep the records that language of countrylanguage is english AND isofficial is t	WHERE t2.language = english AND isofficial = t
Get name of country that has countrylanguage	SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode
Keep the records that language of countrylanguage is dutch AND isofficial is t	WHERE t2.language = dutch AND isofficial = t
Get all of country that has countrylanguage	SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English AND IsOfficial is T	WHERE T2.Language = English AND IsOfficial = T
Get all of country that has countrylanguage	SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is Dutch AND IsOfficial is T	WHERE T2.Language = Dutch AND IsOfficial = T
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Continent of country is Asia	WHERE T1.Continent = Asia 
Group the records based on Language of countrylanguage	GROUP BY T2.Language
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Continent of country is Asia	WHERE T1.Continent = Asia 
Group the records based on Language of countrylanguage	GROUP BY T2.Language
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that GovernmentForm of country is Republic	WHERE T1.GovernmentForm = Republic 
Group the records based on the number Language of countrylanguage 1 that the number is 1	GROUP BY T2.Language HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that GovernmentForm of country is Republic	WHERE T1.GovernmentForm = Republic 
Group the records based on the number Language of countrylanguage 1 that the number is 1	GROUP BY T2.Language HAVING COUNT ( * ) = 1 HAVING COUNT ( * ) = 1
Get Name and Population of city that has countrylanguage	SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English 
Order these records based on the Population of city and sort them in descending order, and return the top 1 record	ORDER BY T1.Population DESC LIMIT 1
Get Name and Population of city that has countrylanguage	SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English 
Order these records based on the Population of city and sort them in descending order, and return the top 1 record	ORDER BY T1.Population DESC LIMIT 1
Get Name and Population and LifeExpectancy of country	SELECT Name , Population , LifeExpectancy FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia 
Order these records based on the SurfaceArea and sort them in descending order, and return the top 1 record	ORDER BY SurfaceArea DESC LIMIT 1
Get Name and Population and LifeExpectancy of country	SELECT Name , Population , LifeExpectancy FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia 
Order these records based on the SurfaceArea and sort them in descending order, and return the top 1 record	ORDER BY SurfaceArea DESC LIMIT 1
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English AND IsOfficial of countrylanguage is T	WHERE T2.Language = English AND T2.IsOfficial = T
Get the average value of LifeExpectancy of country	SELECT AVG ( LifeExpectancy ) FROM country
Keep the records that Name is not in the first query result	WHERE Name NOT IN ( the first query result ) 
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English AND IsOfficial of countrylanguage is T	WHERE T2.Language = English AND T2.IsOfficial = T
Get the average value of LifeExpectancy of country	SELECT AVG ( LifeExpectancy ) FROM country
Keep the records that Name is not in the first query result	WHERE Name NOT IN ( the first query result ) 
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English
Get the SUM of Population of country	SELECT SUM ( Population ) FROM country
Keep the records that Name is not in the first query result	WHERE Name NOT IN ( the first query result ) 
Get Name of country that has countrylanguage	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that Language of countrylanguage is English	WHERE T2.Language = English
Get the SUM of Population of country	SELECT SUM ( Population ) FROM country
Keep the records that Name is not in the first query result	WHERE Name NOT IN ( the first query result ) 
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that HeadOfState of country is Beatrix AND IsOfficial of countrylanguage is T	WHERE T1.HeadOfState = Beatrix AND T2.IsOfficial = T
Get Language of country that has countrylanguage	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that HeadOfState of country is Beatrix AND IsOfficial of countrylanguage is T	WHERE T1.HeadOfState = Beatrix AND T2.IsOfficial = T
Get the number of distinct Language of country that has countrylanguage	SELECT COUNT ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that IndepYear is less than 1930 AND IsOfficial of countrylanguage is T	WHERE IndepYear < 1930 AND T2.IsOfficial = T
Get the number of distinct Language of country that has countrylanguage	SELECT COUNT ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Keep the records that IndepYear is less than 1930 AND IsOfficial of countrylanguage is T	WHERE IndepYear < 1930 AND T2.IsOfficial = T
Get the minimum value of SurfaceArea of country	SELECT MIN ( SurfaceArea ) FROM country
Keep the records that Continent is Europe	WHERE Continent = Europe
Get Name of country	SELECT Name FROM country
Keep the records that SurfaceArea is greater than the first query result	WHERE SurfaceArea > ( the first query result ) 
Get the minimum value of SurfaceArea of country	SELECT MIN ( SurfaceArea ) FROM country
Keep the records that Continent is Europe	WHERE Continent = Europe
Get Name of country	SELECT Name FROM country
Keep the records that SurfaceArea is greater than the first query result	WHERE SurfaceArea > ( the first query result ) 
Get the maximum value of population of country	SELECT MAX ( population ) FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia
Get Name of country	SELECT Name FROM country
Keep the records that Continent is Africa AND population is less than the first query result	WHERE Continent = Africa AND population < ( the first query result ) 
Get the minimum value of population of country	SELECT MIN ( population ) FROM country
Keep the records that Continent is Asia	WHERE Continent = Asia
Get Name of country	SELECT Name FROM country
Keep the records that Continent is Africa AND population is less than the first query result	WHERE Continent = Africa AND population < ( the first query result ) 
Get the maximum value of population of country	SELECT MAX ( population ) FROM country
Keep the records that Continent is Africa	WHERE Continent = Africa
Get Name of country	SELECT Name FROM country
Keep the records that Continent is Asia AND population is greater than the first query result	WHERE Continent = Asia AND population > ( the first query result ) 
Get the minimum value of population of country	SELECT MIN ( population ) FROM country
Keep the records that Continent is Africa	WHERE Continent = Africa
Get Name of country	SELECT Name FROM country
Keep the records that Continent is Asia AND population is greater than the first query result	WHERE Continent = Asia AND population > ( the first query result ) 
Get CountryCode of countrylanguage	SELECT CountryCode FROM countrylanguage
Get CountryCode of countrylanguage	SELECT CountryCode FROM countrylanguage
Keep the records that is English	WHERE LANGUAGE = English
Get CountryCode of countrylanguage	SELECT CountryCode FROM countrylanguage
Get CountryCode of countrylanguage	SELECT CountryCode FROM countrylanguage
Keep the records that is English	WHERE LANGUAGE = English
Get CountryCode of countrylanguage	SELECT DISTINCT CountryCode FROM countrylanguage
Keep the records that is not English	WHERE LANGUAGE != English
Get CountryCode of countrylanguage	SELECT DISTINCT CountryCode FROM countrylanguage
Keep the records that is not English	WHERE LANGUAGE != English
Get Code of country	SELECT Code FROM country
Keep the records that GovernmentForm is not Republic	WHERE GovernmentForm != Republic
Get CountryCode of countrylanguage	SELECT CountryCode FROM countrylanguage
Keep the records that is English	WHERE LANGUAGE = English
Get Code of country	SELECT Code FROM country
Keep the records that GovernmentForm is not Republic	WHERE GovernmentForm != Republic
Get CountryCode of countrylanguage	SELECT CountryCode FROM countrylanguage
Keep the records that is English	WHERE LANGUAGE = English
Get Name of country that has countrylanguage	SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode
Keep the records that IsOfficial of countrylanguage is T AND Language of countrylanguage is English	WHERE T4.IsOfficial = T AND T4.Language = English
Get Name of country that has city	SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code
Keep the records that Continent of country is Europe AND Name of country is not in the first query result	WHERE T1.Continent = Europe AND T1.Name NOT IN ( the first query result ) 
Get Name of country that has countrylanguage	SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode
Keep the records that IsOfficial of countrylanguage is T AND Language of countrylanguage is English	WHERE T4.IsOfficial = T AND T4.Language = English
Get Name of country that has city	SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code
Keep the records that Continent of country is Europe AND Name of country is not in the first query result	WHERE T1.Continent = Europe AND T1.Name NOT IN ( the first query result ) 
Get name of country that has countrylanguage AND city	SELECT DISTINCT t3.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t1.code = t3.countrycode
Keep the records that isofficial of countrylanguage is t AND language of countrylanguage is chinese AND continent of country is asia	WHERE t2.isofficial = t AND t2.language = chinese AND t1.continent = asia
Get Name of country that has countrylanguage AND city	SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode
Keep the records that IsOfficial of countrylanguage is T AND Language of countrylanguage is Chinese AND Continent of country is Asia	WHERE T2.IsOfficial = T AND T2.Language = Chinese AND T1.Continent = Asia
Get Name and SurfaceArea and IndepYear of country	SELECT Name , SurfaceArea , IndepYear FROM country
Order these records based on the Population, and return the top 1 record	ORDER BY Population LIMIT 1
Get Name and SurfaceArea and IndepYear of country	SELECT Name , SurfaceArea , IndepYear FROM country
Order these records based on the Population, and return the top 1 record	ORDER BY Population LIMIT 1
Get Name and population and HeadOfState of country	SELECT Name , population , HeadOfState FROM country
Order these records based on the SurfaceArea and sort them in descending order, and return the top 1 record	ORDER BY SurfaceArea DESC LIMIT 1
Get Name and population and HeadOfState of country	SELECT Name , population , HeadOfState FROM country
Order these records based on the SurfaceArea and sort them in descending order, and return the top 1 record	ORDER BY SurfaceArea DESC LIMIT 1
Get the number of Language and Name of country that has countrylanguage	SELECT COUNT ( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Group the records based on the number Name of country 2 that the number is greater than 2	GROUP BY T1.Name HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the number of Language and Name of country that has countrylanguage	SELECT COUNT ( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
Group the records based on the number Name of country 2 that the number is greater than 2	GROUP BY T1.Name HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get the average value of Population of city	SELECT AVG ( Population ) FROM city
Get the number and District of city	SELECT COUNT ( * ) , District FROM city
Keep the records that Population is greater than the first query result	WHERE Population > ( the first query result )  
Group the records based on District	GROUP BY District
Get the average value of Population of city	SELECT AVG ( Population ) FROM city
Get the number and District of city	SELECT COUNT ( * ) , District FROM city
Keep the records that Population is greater than the first query result	WHERE Population > ( the first query result )  
Group the records based on District	GROUP BY District
Get the SUM of Population and GovernmentForm of country	SELECT SUM ( Population ) , GovernmentForm FROM country
Group the records based on the average value of LifeExpectancy GovernmentForm 72 that the average value of LifeExpectancy is greater than 72	GROUP BY GovernmentForm HAVING AVG ( LifeExpectancy ) > 72 HAVING AVG ( LifeExpectancy ) > 72
Get the SUM of Population and GovernmentForm of country	SELECT SUM ( Population ) , GovernmentForm FROM country
Group the records based on the average value of LifeExpectancy GovernmentForm 72 that the average value of LifeExpectancy is greater than 72	GROUP BY GovernmentForm HAVING AVG ( LifeExpectancy ) > 72 HAVING AVG ( LifeExpectancy ) > 72
Get the SUM of Population and the average value of LifeExpectancy and Continent of country	SELECT SUM ( Population ) , AVG ( LifeExpectancy ) , Continent FROM country
Group the records based on the average value of LifeExpectancy Continent 72 that the average value of LifeExpectancy is less than 72	GROUP BY Continent HAVING AVG ( LifeExpectancy ) < 72 HAVING AVG ( LifeExpectancy ) < 72
Get the SUM of Population and the average value of LifeExpectancy and Continent of country	SELECT SUM ( Population ) , AVG ( LifeExpectancy ) , Continent FROM country
Group the records based on the average value of LifeExpectancy Continent 72 that the average value of LifeExpectancy is less than 72	GROUP BY Continent HAVING AVG ( LifeExpectancy ) < 72 HAVING AVG ( LifeExpectancy ) < 72
Get Name and SurfaceArea of country	SELECT Name , SurfaceArea FROM country
Order these records based on the SurfaceArea and sort them in descending order, and return the top 5 records	ORDER BY SurfaceArea DESC LIMIT 5
Get Name and SurfaceArea of country	SELECT Name , SurfaceArea FROM country
Order these records based on the SurfaceArea and sort them in descending order, and return the top 5 records	ORDER BY SurfaceArea DESC LIMIT 5
Get Name of country	SELECT Name FROM country
Order these records based on the Population and sort them in descending order, and return the top 3 records	ORDER BY Population DESC LIMIT 3
Get Name of country	SELECT Name FROM country
Order these records based on the Population and sort them in descending order, and return the top 3 records	ORDER BY Population DESC LIMIT 3
Get Name of country	SELECT Name FROM country
Order these records based on the Population and sort them in ascending order, and return the top 3 records	ORDER BY Population ASC LIMIT 3
Get Name of country	SELECT Name FROM country
Order these records based on the Population and sort them in ascending order, and return the top 3 records	ORDER BY Population ASC LIMIT 3
Get the number of country	SELECT COUNT ( * ) FROM country
Keep the records that continent is Asia	WHERE continent = Asia
Get the number of country	SELECT COUNT ( * ) FROM country
Keep the records that continent is Asia	WHERE continent = Asia
Get Name of country	SELECT Name FROM country
Keep the records that continent is Europe AND Population is 80000	WHERE continent = Europe AND Population = 80000
Get Name of country	SELECT Name FROM country
Keep the records that continent is Europe AND Population is 80000	WHERE continent = Europe AND Population = 80000
Get the SUM of population AND the average value of surfacearea of country	SELECT SUM ( population ) , AVG ( surfacearea ) FROM country
Keep the records that continent is north america AND surfacearea is greater than 3000	WHERE continent = north america AND surfacearea > 3000
Get the SUM of population AND the average value of surfacearea of country	SELECT SUM ( population ) , AVG ( surfacearea ) FROM country
Keep the records that continent is north america AND surfacearea is greater than 3000	WHERE continent = north america AND surfacearea > 3000
Get name of city	SELECT name FROM city
Keep the records that Population is between 16000 X900000	WHERE Population BETWEEN 160000 AND 900000
Get name of city	SELECT name FROM city
Keep the records that population is between 16000 X900000	WHERE population BETWEEN 160000 AND 900000
Get of countrylanguage	SELECT LANGUAGE FROM countrylanguage
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get of countrylanguage	SELECT LANGUAGE FROM countrylanguage
Group the records based on	GROUP BY
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the maximum value of Percentage and CountryCode of countrylanguage	SELECT LANGUAGE , CountryCode , MAX ( Percentage ) FROM countrylanguage
Group the records based on CountryCode	GROUP BY CountryCode
Get the maximum value of Percentage and CountryCode of countrylanguage	SELECT LANGUAGE , CountryCode , MAX ( Percentage ) FROM countrylanguage
Group the records based on CountryCode	GROUP BY CountryCode
Get the number and the maximum value of Percentage of countrylanguage	SELECT COUNT ( * ) , MAX ( Percentage ) FROM countrylanguage
Keep the records that is Spanish	WHERE LANGUAGE = Spanish 
Group the records based on CountryCode	GROUP BY CountryCode
Get the number and the maximum value of Percentage of countrylanguage	SELECT COUNT ( * ) , MAX ( Percentage ) FROM countrylanguage
Keep the records that is Spanish	WHERE LANGUAGE = Spanish 
Group the records based on CountryCode	GROUP BY CountryCode
Get the maximum value of Percentage and CountryCode of countrylanguage	SELECT CountryCode , MAX ( Percentage ) FROM countrylanguage
Keep the records that is Spanish	WHERE LANGUAGE = Spanish 
Group the records based on CountryCode	GROUP BY CountryCode
Get the maximum value of Percentage and CountryCode of countrylanguage	SELECT CountryCode , MAX ( Percentage ) FROM countrylanguage
Keep the records that is Spanish	WHERE LANGUAGE = Spanish 
Group the records based on CountryCode	GROUP BY CountryCode
Get the number of conductor	SELECT COUNT ( * ) FROM conductor
Get the number of conductor	SELECT COUNT ( * ) FROM conductor
Get Name of conductor	SELECT Name FROM conductor
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Name of conductor	SELECT Name FROM conductor
Order these records based on the Age and sort them in ascending ORDER	ORDER BY Age ASC 
Get Name of conductor	SELECT Name FROM conductor
Keep the records that Nationality is not USA	WHERE Nationality != USA
Get Name of conductor	SELECT Name FROM conductor
Keep the records that Nationality is not USA	WHERE Nationality != USA
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Order these records based on the Year of Founded and sort them in descending ORDER	ORDER BY Year_of_Founded DESC 
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Order these records based on the Year of Founded and sort them in descending ORDER	ORDER BY Year_of_Founded DESC 
Get the average value of Attendance of	SELECT AVG ( Attendance ) FROM
Get the average value of Attendance of	SELECT AVG ( Attendance ) FROM
Get the maximum value of SHARE and the minimum value of SHARE of performance	SELECT MAX ( SHARE ) , MIN ( SHARE ) FROM performance
Keep the records that is not Live final	WHERE TYPE != Live final
Get the maximum value of SHARE and the minimum value of SHARE of performance	SELECT MAX ( SHARE ) , MIN ( SHARE ) FROM performance
Keep the records that is not Live final	WHERE TYPE != Live final
Get the number of distinct Nationality of conductor	SELECT COUNT ( DISTINCT Nationality ) FROM conductor
Get the number of distinct Nationality of conductor	SELECT COUNT ( DISTINCT Nationality ) FROM conductor
Get Name of conductor	SELECT Name FROM conductor
Order these records based on the Year of Work and sort them in descending ORDER	ORDER BY Year_of_Work DESC 
Get Name of conductor	SELECT Name FROM conductor
Order these records based on the Year of Work and sort them in descending ORDER	ORDER BY Year_of_Work DESC 
Get Name of conductor	SELECT Name FROM conductor
Order these records based on the Year of Work and sort them in descending order, and return the top 1 record	ORDER BY Year_of_Work DESC LIMIT 1
Get Name of conductor	SELECT Name FROM conductor
Order these records based on the Year of Work and sort them in descending order, and return the top 1 record	ORDER BY Year_of_Work DESC LIMIT 1
Get Name and Orchestra of conductor that has orchestra	SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2
Get Name and Orchestra of conductor that has orchestra	SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2
Get Name of conductor that has orchestra	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
Group the records based on the number Conductor ID of orchestra 1 that the number is greater than 1	GROUP BY T2.Conductor_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Name of conductor that has orchestra	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
Group the records based on the number Conductor ID of orchestra 1 that the number is greater than 1	GROUP BY T2.Conductor_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Name of conductor that has orchestra	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
Group the records based on Conductor ID of orchestra	GROUP BY T2.Conductor_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of conductor that has orchestra	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
Group the records based on Conductor ID of orchestra	GROUP BY T2.Conductor_ID
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Name of conductor that has orchestra	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
Keep the records that Year of Founded is greater than 2008	WHERE Year_of_Founded > 2008
Get Name of conductor that has orchestra	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
Keep the records that Year of Founded is greater than 2008	WHERE Year_of_Founded > 2008
Get the number and Record Company of orchestra	SELECT Record_Company , COUNT ( * ) FROM orchestra
Group the records based on Record Company	GROUP BY Record_Company
Get the number and Record Company of orchestra	SELECT Record_Company , COUNT ( * ) FROM orchestra
Group the records based on Record Company	GROUP BY Record_Company
Get Major Record Format of orchestra	SELECT Major_Record_Format FROM orchestra
Group the records based on Major Record Format	GROUP BY Major_Record_Format
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get Major Record Format of orchestra	SELECT Major_Record_Format FROM orchestra
Group the records based on Major Record Format	GROUP BY Major_Record_Format
Order these records based on the the number and sort them in ascending ORDER	ORDER BY COUNT ( * ) ASC 
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Group the records based on Record Company	GROUP BY Record_Company
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Group the records based on Record Company	GROUP BY Record_Company
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get Orchestra ID of performance	SELECT Orchestra_ID FROM performance
Get Orchestra of Orchestra	SELECT Orchestra FROM orchestra
Keep the records that Orchestra ID is not in the first query result	WHERE Orchestra_ID NOT IN ( the first query result ) 
Get Orchestra ID of performance	SELECT Orchestra_ID FROM performance
Get Orchestra of Orchestra	SELECT Orchestra FROM orchestra
Keep the records that Orchestra ID is not in the first query result	WHERE Orchestra_ID NOT IN ( the first query result ) 
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Keep the records that Year of Founded is less than 2003	WHERE Year_of_Founded < 2003
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Keep the records that Year of Founded is greater than 2003	WHERE Year_of_Founded > 2003
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Keep the records that Year of Founded is less than 2003	WHERE Year_of_Founded < 2003
Get Record Company of orchestra	SELECT Record_Company FROM orchestra
Keep the records that Year of Founded is greater than 2003	WHERE Year_of_Founded > 2003
Get the number of orchestra	SELECT COUNT ( * ) FROM orchestra
Keep the records that Major Record Format is CD OR Major Record Format is DVD	WHERE Major_Record_Format = CD OR Major_Record_Format = DVD
Get the number of orchestra	SELECT COUNT ( * ) FROM orchestra
Keep the records that Major Record Format is CD OR Major Record Format is DVD	WHERE Major_Record_Format = CD OR Major_Record_Format = DVD
Get Year of Founded of orchestra that has performance	SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID
Group the records based on the number Orchestra ID of performance 1 that the number is greater than 1	GROUP BY T2.Orchestra_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Year of Founded of orchestra that has performance	SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID
Group the records based on the number Orchestra ID of performance 1 that the number is greater than 1	GROUP BY T2.Orchestra_ID HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the number of Highschooler	SELECT COUNT ( * ) FROM Highschooler
Get the number of Highschooler	SELECT COUNT ( * ) FROM Highschooler
Get name and grade of Highschooler	SELECT name , grade FROM Highschooler
Get name and grade of Highschooler	SELECT name , grade FROM Highschooler
Get grade of Highschooler	SELECT grade FROM Highschooler
Get grade of Highschooler	SELECT grade FROM Highschooler
Get grade of Highschooler	SELECT grade FROM Highschooler
Keep the records that name is Kyle	WHERE name = Kyle
Get grade of Highschooler	SELECT grade FROM Highschooler
Keep the records that name is Kyle	WHERE name = Kyle
Get name of Highschooler	SELECT name FROM Highschooler
Keep the records that grade is 10	WHERE grade = 10
Get name of Highschooler	SELECT name FROM Highschooler
Keep the records that grade is 10	WHERE grade = 10
Get ID of Highschooler	SELECT ID FROM Highschooler
Keep the records that name is Kyle	WHERE name = Kyle
Get ID of Highschooler	SELECT ID FROM Highschooler
Keep the records that name is Kyle	WHERE name = Kyle
Get the number of Highschooler	SELECT COUNT ( * ) FROM Highschooler
Keep the records that grade is 9 OR grade is 10	WHERE grade = 9 OR grade = 10
Get the number of Highschooler	SELECT COUNT ( * ) FROM Highschooler
Keep the records that grade is 9 OR grade is 10	WHERE grade = 9 OR grade = 10
Get the number and grade of Highschooler	SELECT grade , COUNT ( * ) FROM Highschooler
Group the records based on grade	GROUP BY grade
Get the number and grade of Highschooler	SELECT grade , COUNT ( * ) FROM Highschooler
Group the records based on grade	GROUP BY grade
Get grade of Highschooler	SELECT grade FROM Highschooler
Group the records based on grade	GROUP BY grade
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get grade of Highschooler	SELECT grade FROM Highschooler
Group the records based on grade	GROUP BY grade
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get grade of Highschooler	SELECT grade FROM Highschooler
Group the records based on the number grade 4 that the number is greater than or equal to 4	GROUP BY grade HAVING COUNT ( * ) >= 4 HAVING COUNT ( * ) >= 4
Get grade of Highschooler	SELECT grade FROM Highschooler
Group the records based on the number grade 4 that the number is greater than or equal to 4	GROUP BY grade HAVING COUNT ( * ) >= 4 HAVING COUNT ( * ) >= 4
Get the number and student id of Friend	SELECT student_id , COUNT ( * ) FROM Friend
Group the records based on student id	GROUP BY student_id
Get the number and student id of Friend	SELECT student_id , COUNT ( * ) FROM Friend
Group the records based on student id	GROUP BY student_id
Get the number and name of Friend that has Highschooler	SELECT T2.name , COUNT ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Friend	GROUP BY T1.student_id
Get the number and name of Friend that has Highschooler	SELECT T2.name , COUNT ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Friend	GROUP BY T1.student_id
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Friend	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Friend	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on the number student id of Friend 3 that the number is greater than or equal to 3	GROUP BY T1.student_id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on the number student id of Friend 3 that the number is greater than or equal to 3	GROUP BY T1.student_id HAVING COUNT ( * ) >= 3 HAVING COUNT ( * ) >= 3
Get name of Friend that has Highschooler	SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id
Keep the records that name of Highschooler is Kyle	WHERE T2.name = Kyle
Get name of Friend that has Highschooler	SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id
Keep the records that name of Highschooler is Kyle	WHERE T2.name = Kyle
Get the number of Friend that has Highschooler	SELECT COUNT ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Keep the records that name of Highschooler is Kyle	WHERE T2.name = Kyle
Get the number of Friend that has Highschooler	SELECT COUNT ( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Keep the records that name of Highschooler is Kyle	WHERE T2.name = Kyle
Get id of Highschooler	SELECT id FROM Highschooler
Get student id of Friend	SELECT student_id FROM Friend
Get id of Highschooler	SELECT id FROM Highschooler
Get student id of Friend	SELECT student_id FROM Friend
Get name of Highschooler	SELECT name FROM Highschooler
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2
Get name of Highschooler	SELECT name FROM Highschooler
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2
Get student id of Friend	SELECT student_id FROM Friend
Get liked id of Likes	SELECT liked_id FROM Likes
Get student id of Friend	SELECT student_id FROM Friend
Get liked id of Likes	SELECT liked_id FROM Likes
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2
Get name of Likes that has Highschooler	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2
Get name of Likes that has Highschooler	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2
Get the number and student id of Likes	SELECT student_id , COUNT ( * ) FROM Likes
Group the records based on student id	GROUP BY student_id
Get the number and student id of Likes	SELECT student_id , COUNT ( * ) FROM Likes
Group the records based on student id	GROUP BY student_id
Get the number and name of Likes that has Highschooler	SELECT T2.name , COUNT ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Likes	GROUP BY T1.student_id
Get the number and name of Likes that has Highschooler	SELECT T2.name , COUNT ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Likes	GROUP BY T1.student_id
Get name of Likes that has Highschooler	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Likes	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Likes that has Highschooler	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on student id of Likes	GROUP BY T1.student_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get name of Likes that has Highschooler	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on the number student id of Likes 2 that the number is greater than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of Likes that has Highschooler	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Group the records based on the number student id of Likes 2 that the number is greater than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Keep the records that grade of Highschooler is greater than 5	WHERE T2.grade > 5 
Group the records based on the number student id of Friend 2 that the number is greater than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get name of Friend that has Highschooler	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Keep the records that grade of Highschooler is greater than 5	WHERE T2.grade > 5 
Group the records based on the number student id of Friend 2 that the number is greater than or equal to 2	GROUP BY T1.student_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the number of Likes that has Highschooler	SELECT COUNT ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Keep the records that name of Highschooler is Kyle	WHERE T2.name = Kyle
Get the number of Likes that has Highschooler	SELECT COUNT ( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id
Keep the records that name of Highschooler is Kyle	WHERE T2.name = Kyle
Get student id of Friend that has Highschooler	SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2
Get the average value of grade of Highschooler	SELECT AVG ( grade ) FROM Highschooler
Keep the records that id is in the first query result	WHERE id IN ( the first query result ) 
Get student id of Friend that has Highschooler	SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2
Get the average value of grade of Highschooler	SELECT AVG ( grade ) FROM Highschooler
Keep the records that id is in the first query result	WHERE id IN ( the first query result ) 
Get student id of Friend that has Highschooler	SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2
Get the minimum value of grade of Highschooler	SELECT MIN ( grade ) FROM Highschooler
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get student id of Friend that has Highschooler	SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2
Get the minimum value of grade of Highschooler	SELECT MIN ( grade ) FROM Highschooler
Keep the records that id is not in the first query result	WHERE id NOT IN ( the first query result ) 
Get state of Owners	SELECT state FROM Owners
Get state of Professionals	SELECT state FROM Professionals
Get state of Owners	SELECT state FROM Owners
Get state of Professionals	SELECT state FROM Professionals
Get dog id of Treatments	SELECT dog_id FROM Treatments
Get the average value of age of Dogs	SELECT AVG ( age ) FROM Dogs
Keep the records that dog id is in the first query result	WHERE dog_id IN ( the first query result ) 
Get dog id of Treatments	SELECT dog_id FROM Treatments
Get the average value of age of Dogs	SELECT AVG ( age ) FROM Dogs
Keep the records that dog id is in the first query result	WHERE dog_id IN ( the first query result ) 
Get professional id and last name and cell number of Professionals	SELECT professional_id , last_name , cell_number FROM Professionals
Keep the records that state is Indiana	WHERE state = Indiana
Get professional id and last name and cell number of Professionals that has Treatments	SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
Group the records based on the number professional id of Professionals 2 that the number is greater than 2	GROUP BY T1.professional_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get professional id and last name and cell number of Professionals	SELECT professional_id , last_name , cell_number FROM Professionals
Keep the records that state is Indiana	WHERE state = Indiana
Get professional id and last name and cell number of Professionals that has Treatments	SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
Group the records based on the number professional id of Professionals 2 that the number is greater than 2	GROUP BY T1.professional_id HAVING COUNT ( * ) > 2 HAVING COUNT ( * ) > 2
Get dog id of treatments	SELECT dog_id FROM treatments
Group the records based on the SUM of cost of treatment dog id 1000 that the SUM of cost of treatment is greater than 1000	GROUP BY dog_id HAVING SUM ( cost_of_treatment ) > 1000 HAVING SUM ( cost_of_treatment ) > 1000
Get name of dogs	SELECT name FROM dogs
Keep the records that dog id is not in the first query result	WHERE dog_id not in ( the first query result ) 
Get dog id of treatments	SELECT dog_id FROM treatments
Group the records based on the SUM of cost of treatment dog id 1000 that the SUM of cost of treatment is greater than 1000	GROUP BY dog_id HAVING SUM ( cost_of_treatment ) > 1000 HAVING SUM ( cost_of_treatment ) > 1000
Get name of dogs	SELECT name FROM dogs
Keep the records that dog id is not in the first query result	WHERE dog_id not in ( the first query result ) 
Get first name of Professionals	SELECT first_name FROM Professionals
Get first name of Owners	SELECT first_name FROM Owners
Get name of Dogs	SELECT name FROM Dogs
Get first name of Professionals	SELECT first_name FROM Professionals
Get first name of Owners	SELECT first_name FROM Owners
Get name of Dogs	SELECT name FROM Dogs
Get professional id and role code and email address of Professionals	SELECT professional_id , role_code , email_address FROM Professionals
Get professional id and role code and email address of Professionals that has Treatments	SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2
Get professional id and role code and email address of Professionals	SELECT professional_id , role_code , email_address FROM Professionals
Get professional id and role code and email address of Professionals that has Treatments	SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2
Get owner id and first name and last name of Dogs that has Owners	SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id
Group the records based on owner id of Dogs	GROUP BY T1.owner_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get owner id and first name and last name of Dogs that has Owners	SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id
Group the records based on owner id of Dogs	GROUP BY T1.owner_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get professional id and role code and first name of Professionals that has Treatments	SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
Group the records based on the number professional id of Professionals 2 that the number is greater than or equal to 2	GROUP BY T1.professional_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get professional id and role code and first name of Professionals that has Treatments	SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
Group the records based on the number professional id of Professionals 2 that the number is greater than or equal to 2	GROUP BY T1.professional_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get breed name of Breeds that has Dogs	SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code
Group the records based on breed name of Breeds	GROUP BY T1.breed_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get breed name of Breeds that has Dogs	SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code
Group the records based on breed name of Breeds	GROUP BY T1.breed_name
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get owner id and last name of Owners that has Dogs and Treatments	SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id
Group the records based on owner id of Owners	GROUP BY T1.owner_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get owner id and last name of Owners that has Dogs and Treatments	SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id
Group the records based on owner id of Owners	GROUP BY T1.owner_id
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get treatment type description of Treatment types that has Treatments	SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code
Group the records based on treatment type code of Treatment types	GROUP BY T1.treatment_type_code
Order these records based on the the SUM of cost of treatment and sort them in ascending order, and return the top 1 record	ORDER BY SUM ( cost_of_treatment ) ASC LIMIT 1
Get treatment type description of Treatment types that has Treatments	SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code
Group the records based on treatment type code of Treatment types	GROUP BY T1.treatment_type_code
Order these records based on the the SUM of cost of treatment and sort them in ascending order, and return the top 1 record	ORDER BY SUM ( cost_of_treatment ) ASC LIMIT 1
Get owner id and zip code of Owners that has Dogs and Treatments	SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id
Group the records based on owner id of Owners	GROUP BY T1.owner_id
Order these records based on the the SUM of cost of treatment of Treatments and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T3.cost_of_treatment ) DESC LIMIT 1
Get owner id and zip code of Owners that has Dogs and Treatments	SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id
Group the records based on owner id of Owners	GROUP BY T1.owner_id
Order these records based on the the SUM of cost of treatment of Treatments and sort them in descending order, and return the top 1 record	ORDER BY SUM ( T3.cost_of_treatment ) DESC LIMIT 1
Get professional id and cell number of Professionals that has Treatments	SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
Group the records based on the number professional id of Professionals 2 that the number is greater than or equal to 2	GROUP BY T1.professional_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get professional id and cell number of Professionals that has Treatments	SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
Group the records based on the number professional id of Professionals 2 that the number is greater than or equal to 2	GROUP BY T1.professional_id HAVING COUNT ( * ) >= 2 HAVING COUNT ( * ) >= 2
Get the average value of cost of treatment of Treatments	SELECT AVG ( cost_of_treatment ) FROM Treatments
Get first name and last name of Professionals that has Treatments	SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2
Keep the records that cost of treatment is less than the first query result	WHERE cost_of_treatment < ( the first query result ) 
Get the average value of cost of treatment of Treatments	SELECT AVG ( cost_of_treatment ) FROM Treatments
Get first name and last name of Professionals that has Treatments	SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2
Keep the records that cost of treatment is less than the first query result	WHERE cost_of_treatment < ( the first query result ) 
Get date of treatment and first name of Treatments that has Professionals	SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2
Get date of treatment and first name of Treatments that has Professionals	SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2
Get cost of treatment and treatment type description of Treatments that has treatment types	SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2
Get cost of treatment and treatment type description of Treatments that has treatment types	SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2
Get first name and last name and size code of Owners that has Dogs	SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2
Get first name and last name and size code of Owners that has Dogs	SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2
Get first name and name of Owners that has Dogs	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2
Get first name and name of Owners that has Dogs	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2
Get breed code of Dogs	SELECT breed_code FROM Dogs
Group the records based on breed code	GROUP BY breed_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get name and date of treatment of Dogs that has Treatments	SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
Keep the records that breed code of Dogs is the first query result	WHERE T1.breed_code = ( the first query result ) 
Get breed code of Dogs	SELECT breed_code FROM Dogs
Group the records based on breed code	GROUP BY breed_code
Order these records based on the the number and sort them in ascending order, and return the top 1 record	ORDER BY COUNT ( * ) ASC LIMIT 1
Get name and date of treatment of Dogs that has Treatments	SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
Keep the records that breed code of Dogs is the first query result	WHERE T1.breed_code = ( the first query result ) 
Get first name and name of Owners that has Dogs	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
Keep the records that state of Owners is Virginia	WHERE T1.state = Virginia
Get first name and name of Owners that has Dogs	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
Keep the records that state of Owners is Virginia	WHERE T1.state = Virginia
Get date arrived and date departed of Dogs that has Treatments	SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2
Get date arrived and date departed of Dogs that has Treatments	SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2
Get the maximum value of age of Dogs	SELECT MAX ( age ) FROM Dogs
Get last name of Owners that has Dogs	SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
Keep the records that age of Dogs is the first query result	WHERE T2.age = ( the first query result ) 
Get the maximum value of age of Dogs	SELECT MAX ( age ) FROM Dogs
Get last name of Owners that has Dogs	SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
Keep the records that age of Dogs is the first query result	WHERE T2.age = ( the first query result ) 
Get email address of Professionals	SELECT email_address FROM Professionals
Keep the records that state is Hawaii OR state is Wisconsin	WHERE state = Hawaii OR state = Wisconsin
Get email address of Professionals	SELECT email_address FROM Professionals
Keep the records that state is Hawaii OR state is Wisconsin	WHERE state = Hawaii OR state = Wisconsin
Get date arrived and date departed of Dogs	SELECT date_arrived , date_departed FROM Dogs
Get date arrived and date departed of Dogs	SELECT date_arrived , date_departed FROM Dogs
Get the number of distinct dog id of Treatments	SELECT COUNT ( DISTINCT dog_id ) FROM Treatments
Get the number of distinct dog id of Treatments	SELECT COUNT ( DISTINCT dog_id ) FROM Treatments
Get the number of distinct professional id of Treatments	SELECT COUNT ( DISTINCT professional_id ) FROM Treatments
Get the number of distinct professional id of Treatments	SELECT COUNT ( DISTINCT professional_id ) FROM Treatments
Get role code and street and city and state of professionals	SELECT role_code , street , city , state FROM professionals
Keep the records that city is in the form of %West%	WHERE city LIKE %West%
Get role code and street and city and state of professionals	SELECT role_code , street , city , state FROM professionals
Keep the records that city is in the form of %West%	WHERE city LIKE %West%
Get first name and last name and email address of Owners	SELECT first_name , last_name , email_address FROM Owners
Keep the records that state is in the form of %North%	WHERE state LIKE %North%
Get first name and last name and email address of Owners	SELECT first_name , last_name , email_address FROM Owners
Keep the records that state is in the form of %North%	WHERE state LIKE %North%
Get the average value of age of Dogs	SELECT AVG ( age ) FROM Dogs
Get the number of Dogs	SELECT COUNT ( * ) FROM Dogs
Keep the records that age is less than the first query result	WHERE age < ( the first query result ) 
Get the average value of age of Dogs	SELECT AVG ( age ) FROM Dogs
Get the number of Dogs	SELECT COUNT ( * ) FROM Dogs
Keep the records that age is less than the first query result	WHERE age < ( the first query result ) 
Get cost of treatment of Treatments	SELECT cost_of_treatment FROM Treatments
Order these records based on the date of treatment and sort them in descending order, and return the top 1 record	ORDER BY date_of_treatment DESC LIMIT 1
Get cost of treatment of Treatments	SELECT cost_of_treatment FROM Treatments
Order these records based on the date of treatment and sort them in descending order, and return the top 1 record	ORDER BY date_of_treatment DESC LIMIT 1
Get dog id of Treatments	SELECT dog_id FROM Treatments
Get the number of Dogs	SELECT COUNT ( * ) FROM Dogs
Keep the records that dog id is not in the first query result	WHERE dog_id NOT IN ( the first query result ) 
Get dog id of treatments	SELECT dog_id FROM treatments
Get the number of dogs	SELECT COUNT ( * ) FROM dogs
Keep the records that dog id is not in the first query result	WHERE dog_id not in ( the first query result ) 
Get owner id of Dogs	SELECT owner_id FROM Dogs
Get the number of Owners	SELECT COUNT ( * ) FROM Owners
Keep the records that owner id is not in the first query result	WHERE owner_id NOT IN ( the first query result ) 
Get owner id of Dogs	SELECT owner_id FROM Dogs
Get the number of Owners	SELECT COUNT ( * ) FROM Owners
Keep the records that owner id is not in the first query result	WHERE owner_id NOT IN ( the first query result ) 
Get professional id of Treatments	SELECT professional_id FROM Treatments
Get the number of Professionals	SELECT COUNT ( * ) FROM Professionals
Keep the records that professional id is not in the first query result	WHERE professional_id NOT IN ( the first query result ) 
Get professional id of Treatments	SELECT professional_id FROM Treatments
Get the number of Professionals	SELECT COUNT ( * ) FROM Professionals
Keep the records that professional id is not in the first query result	WHERE professional_id NOT IN ( the first query result ) 
Get name and age and weight of Dogs	SELECT name , age , weight FROM Dogs
Keep the records that abandoned yn is 1	WHERE abandoned_yn = 1
Get name and age and weight of Dogs	SELECT name , age , weight FROM Dogs
Keep the records that abandoned yn is 1	WHERE abandoned_yn = 1
Get the average value of age of Dogs	SELECT AVG ( age ) FROM Dogs
Get the average value of age of Dogs	SELECT AVG ( age ) FROM Dogs
Get the maximum value of age of Dogs	SELECT MAX ( age ) FROM Dogs
Get the maximum value of age of Dogs	SELECT MAX ( age ) FROM Dogs
Get charge type and charge amount of Charges	SELECT charge_type , charge_amount FROM Charges
Get charge type and charge amount of Charges	SELECT charge_type , charge_amount FROM Charges
Get the maximum value of charge amount of Charges	SELECT MAX ( charge_amount ) FROM Charges
Get the maximum value of charge amount of Charges	SELECT MAX ( charge_amount ) FROM Charges
Get email address and cell number and home phone of professionals	SELECT email_address , cell_number , home_phone FROM professionals
Get email address and cell number and home phone of professionals	SELECT email_address , cell_number , home_phone FROM professionals
Get breed code and size code of dogs	SELECT DISTINCT breed_code , size_code FROM dogs
Get breed code and size code of dogs	SELECT DISTINCT breed_code , size_code FROM dogs
Get first name and treatment type description of professionals that has Treatments and Treatment types	SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3
Get first name and treatment type description of professionals that has Treatments and Treatment types	SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3
Get the number of singer	SELECT COUNT ( * ) FROM singer
Get the number of singer	SELECT COUNT ( * ) FROM singer
Get Name of singer	SELECT Name FROM singer
Order these records based on the Net Worth Millions and sort them in ascending ORDER	ORDER BY Net_Worth_Millions ASC 
Get Name of singer	SELECT Name FROM singer
Order these records based on the Net Worth Millions and sort them in ascending ORDER	ORDER BY Net_Worth_Millions ASC 
Get Birth Year and Citizenship of singer	SELECT Birth_Year , Citizenship FROM singer
Get Birth Year and Citizenship of singer	SELECT Birth_Year , Citizenship FROM singer
Get Name of singer	SELECT Name FROM singer
Keep the records that Citizenship is not France	WHERE Citizenship != France
Get Name of singer	SELECT Name FROM singer
Keep the records that Citizenship is not France	WHERE Citizenship != France
Get Name of singer	SELECT Name FROM singer
Keep the records that Birth Year is 1948 OR Birth Year is 1949	WHERE Birth_Year = 1948 OR Birth_Year = 1949
Get Name of singer	SELECT Name FROM singer
Keep the records that Birth Year is 1948 OR Birth Year is 1949	WHERE Birth_Year = 1948 OR Birth_Year = 1949
Get Name of singer	SELECT Name FROM singer
Order these records based on the Net Worth Millions and sort them in descending order, and return the top 1 record	ORDER BY Net_Worth_Millions DESC LIMIT 1
Get Name of singer	SELECT Name FROM singer
Order these records based on the Net Worth Millions and sort them in descending order, and return the top 1 record	ORDER BY Net_Worth_Millions DESC LIMIT 1
Get the number and Citizenship of singer	SELECT Citizenship , COUNT ( * ) FROM singer
Group the records based on Citizenship	GROUP BY Citizenship
Get the number and Citizenship of singer	SELECT Citizenship , COUNT ( * ) FROM singer
Group the records based on Citizenship	GROUP BY Citizenship
Get Citizenship of singer	SELECT Citizenship FROM singer
Group the records based on Citizenship	GROUP BY Citizenship
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get citizenship of singer	SELECT citizenship FROM singer
Group the records based on citizenship	GROUP BY citizenship
Order these records based on the the number and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( * ) DESC LIMIT 1
Get the maximum value of Net Worth Millions and Citizenship of singer	SELECT Citizenship , MAX ( Net_Worth_Millions ) FROM singer
Group the records based on Citizenship	GROUP BY Citizenship
Get the maximum value of Net Worth Millions and Citizenship of singer	SELECT Citizenship , MAX ( Net_Worth_Millions ) FROM singer
Group the records based on Citizenship	GROUP BY Citizenship
Get Title and Name of singer that has song	SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2
Get Title and Name of singer that has song	SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2
Get Name of singer that has song	SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
Keep the records that Sales of song is greater than 300000	WHERE T2.Sales > 300000
Get Name of singer that has song	SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
Keep the records that Sales of song is greater than 300000	WHERE T2.Sales > 300000
Get Name of singer that has song	SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
Group the records based on the number Name of singer 1 that the number is greater than 1	GROUP BY T1.Name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get Name of singer that has song	SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
Group the records based on the number Name of singer 1 that the number is greater than 1	GROUP BY T1.Name HAVING COUNT ( * ) > 1 HAVING COUNT ( * ) > 1
Get the SUM of Sales and Name of singer that has song	SELECT T1.Name , SUM ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
Group the records based on Name of singer	GROUP BY T1.Name
Get the SUM of Sales and Name of singer that has song	SELECT T1.Name , SUM ( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
Group the records based on Name of singer	GROUP BY T1.Name
Get Singer ID of song	SELECT Singer_ID FROM song
Get Name of singer	SELECT Name FROM singer
Keep the records that Singer ID is not in the first query result	WHERE Singer_ID NOT IN ( the first query result ) 
Get Singer ID of song	SELECT Singer_ID FROM song
Get Name of singer	SELECT Name FROM singer
Keep the records that Singer ID is not in the first query result	WHERE Singer_ID NOT IN ( the first query result ) 
Get Citizenship of singer	SELECT Citizenship FROM singer
Keep the records that Birth Year is less than 1945	WHERE Birth_Year < 1945
Get Citizenship of singer	SELECT Citizenship FROM singer
Keep the records that Birth Year is greater than 1955	WHERE Birth_Year > 1955
Get Citizenship of singer	SELECT Citizenship FROM singer
Keep the records that Birth Year is less than 1945	WHERE Birth_Year < 1945
Get Citizenship of singer	SELECT Citizenship FROM singer
Keep the records that Birth Year is greater than 1955	WHERE Birth_Year > 1955
Get the number of Other Available Features	SELECT COUNT ( * ) FROM Other_Available_Features
Get feature type name of Other Available Features that has Ref Feature Types	SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code
Keep the records that feature name of Other Available Features is AirCon	WHERE T1.feature_name = AirCon
Get property type description of Properties that has Ref Property Types	SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code
Group the records based on property type code of Properties	GROUP BY T1.property_type_code
Get property name of Properties	SELECT property_name FROM Properties
Keep the records that property type code is House	WHERE property_type_code = House
Get property name of Properties	SELECT property_name FROM Properties
Keep the records that property type code is Apartment AND room count is greater than 1	WHERE property_type_code = Apartment AND room_count > 1
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is wyoming	WHERE population = ( the first query result )  AND state_name = wyoming
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get area of state	SELECT area FROM state
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get area of state	SELECT area FROM state
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get area of state	SELECT area FROM state
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get area of state	SELECT area FROM state
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get area of state	SELECT area FROM state
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get area of state	SELECT area FROM state
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get population of state	SELECT population FROM state
Keep the records that state name is california	WHERE state_name = california
Get the minimum value of population of state	SELECT MIN ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the minimum value of population of state	SELECT MIN ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the minimum value of population of state	SELECT MIN ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get city name of city	SELECT city_name FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get city name of city	SELECT city_name FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get city name of city	SELECT city_name FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get city name of city	SELECT city_name FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get city name of city	SELECT city_name FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get area of state	SELECT area FROM state
Keep the records that capital is albany	WHERE capital = albany
Get lake name of lake	SELECT lake_name FROM lake
Keep the records that state name is california	WHERE state_name = california
Get lake name of lake	SELECT lake_name FROM lake
Keep the records that area is greater than 750 AND state name is michigan	WHERE area > 750 AND state_name = michigan
Get state name of state	SELECT state_name FROM state
Get state name of state	SELECT state_name FROM state
Get state name of state	SELECT state_name FROM state
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is ohio	WHERE river_name = ohio
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get lowest elevation of highlow	SELECT lowest_elevation FROM highlow
Keep the records that state name is pennsylvania	WHERE state_name = pennsylvania
Get highest point and state name of highlow	SELECT highest_point , state_name FROM highlow
Keep the records that lowest elevation is 0	WHERE lowest_elevation = 0
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get of river	SELECT LENGTH FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get of river	SELECT LENGTH FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is idaho	WHERE traverse = idaho
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get border of border info	SELECT border FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is illinois	WHERE traverse = illinois
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get state name of city	SELECT state_name FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get population of state	SELECT population FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get population of state	SELECT population FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get population of city	SELECT population FROM city
Keep the records that city name is boulder	WHERE city_name = boulder
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Keep the records that state name is alaska	WHERE state_name = alaska
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result AND state name is alaska	WHERE population = ( the first query result )  AND state_name = alaska
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get density of state	SELECT density FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get density of state	SELECT density FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is colorado	WHERE state_name = colorado
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is greater than the first query result	WHERE highest_elevation > ( the first query result ) 
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is colorado	WHERE state_name = colorado
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is greater than the first query result	WHERE highest_elevation > ( the first query result ) 
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is colorado	WHERE state_name = colorado
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is greater than the first query result	WHERE highest_elevation > ( the first query result ) 
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is delaware	WHERE state_name = delaware
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is delaware	WHERE state_name = delaware
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is delaware	WHERE state_name = delaware
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is delaware	WHERE state_name = delaware
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is delaware	WHERE state_name = delaware
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is the third query result AND state name is in SELECT state name FROM state WHERE area ( SELECT MAX ( area SELECT MAX ( area the maximum value of area	WHERE population = ( the third query result )  AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) )
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is mississippi	WHERE state_name = mississippi
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is mississippi	WHERE state_name = mississippi
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is colorado	WHERE state_name = colorado
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the highest elevation and sort them in descending order, and return the top 1 record	ORDER BY highest_elevation DESC LIMIT 1
Get border of border info	SELECT border FROM border_info
Keep the records that state name is colorado	WHERE state_name = colorado
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the highest elevation and sort them in descending order, and return the top 1 record	ORDER BY highest_elevation DESC LIMIT 1
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is texas	WHERE state_name = texas
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is texas	WHERE state_name = texas
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is texas	WHERE state_name = texas
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is texas	WHERE state_name = texas
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is texas	WHERE state_name = texas
Get state name of border info	SELECT state_name FROM border_info
Get state name of state	SELECT state_name FROM state
Keep the records that state name is not in the first query result	WHERE state_name NOT IN ( the first query result ) 
Get state name of border info	SELECT state_name FROM border_info
Get state name of state	SELECT state_name FROM state
Keep the records that state name is not in the first query result	WHERE state_name NOT IN ( the first query result ) 
Get state name of border info	SELECT state_name FROM border_info
Get state name of state	SELECT state_name FROM state
Keep the records that state name is not in the first query result	WHERE state_name NOT IN ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get area of state	SELECT area FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get lowest elevation of highlow	SELECT lowest_elevation FROM highlow
Keep the records that state name is alabama	WHERE state_name = alabama
Get the number of state name of highlow	SELECT COUNT ( state_name ) FROM highlow
Keep the records that lowest elevation is less than the first query result	WHERE lowest_elevation < ( the first query result ) 
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that highest point is guadalupe peak	WHERE highest_point = guadalupe peak
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that highest point is guadalupe peak	WHERE highest_point = guadalupe peak
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that highest point is guadalupe peak	WHERE highest_point = guadalupe peak
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get of river	SELECT LENGTH FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get of river	SELECT LENGTH FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get of river	SELECT LENGTH FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get of river	SELECT LENGTH FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get of river	SELECT LENGTH FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get of river	SELECT LENGTH FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get of river	SELECT LENGTH FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get of river	SELECT LENGTH FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the number of capital of state	SELECT COUNT ( capital ) FROM state
Keep the records that state name is rhode island	WHERE state_name = rhode island
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that population is greater than 150000	WHERE population > 150000
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get population of city	SELECT population FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that river name is colorado	WHERE river_name = colorado
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that river name is colorado	WHERE river_name = colorado
Get population of city	SELECT population FROM city
Keep the records that city name is seattle AND state name is washington	WHERE city_name = seattle AND state_name = washington
Get population of city	SELECT population FROM city
Keep the records that city name is seattle AND state name is washington	WHERE city_name = seattle AND state_name = washington
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is alaska	WHERE state_name = alaska
Get population of city	SELECT population FROM city
Keep the records that population is the first query result AND state name is alaska	WHERE population = ( the first query result )  AND state_name = alaska
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is alaska	WHERE state_name = alaska
Get population of city	SELECT population FROM city
Keep the records that population is the first query result AND state name is alaska	WHERE population = ( the first query result )  AND state_name = alaska
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get population of city	SELECT population FROM city
Keep the records that city name is the first query result	WHERE city_name = ( the first query result ) 
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get population of city	SELECT population FROM city
Keep the records that city name is the first query result	WHERE city_name = ( the first query result ) 
Get the SUM of population of state	SELECT SUM ( population ) FROM state
Get the SUM of population of state	SELECT SUM ( population ) FROM state
Get the number of state name of state	SELECT COUNT ( state_name ) FROM state
Get the number of state name of state	SELECT COUNT ( state_name ) FROM state
Get the number of state name of state	SELECT COUNT ( state_name ) FROM state
Get the number of state name of state	SELECT COUNT ( state_name ) FROM state
Get the number of state name of state	SELECT COUNT ( state_name ) FROM state
Get the number of state name of state	SELECT COUNT ( state_name ) FROM state
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is kentucky	WHERE state_name = kentucky
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get traverse of river	SELECT traverse FROM river
Get the number of distinct state name of state	SELECT COUNT ( DISTINCT state_name ) FROM state
Keep the records that state name is not in the first query result	WHERE state_name NOT IN ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that capital is the second query result	WHERE capital = ( the second query result ) 
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Keep the records that state name is the third query result	WHERE state_name = ( the third query result ) 
Get the number of state name of highlow	SELECT COUNT ( state_name ) FROM highlow
Keep the records that highest elevation is greater than the fourth query result	WHERE highest_elevation > ( the fourth query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is greater than 750 AND traverse is illinois	WHERE LENGTH > 750 AND traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that is greater than 750 AND traverse is illinois	WHERE LENGTH > 750 AND traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that is greater than 750 AND traverse is illinois	WHERE LENGTH > 750 AND traverse = illinois
Get river name of river	SELECT river_name FROM river
Keep the records that is greater than 750 AND traverse is illinois	WHERE LENGTH > 750 AND traverse = illinois
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get capital of state	SELECT capital FROM state
Keep the records that state name is texas	WHERE state_name = texas
Get capital of state that has border info	SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border
Keep the records that state name of border info is texas	WHERE t1.state_name = texas
Get capital of state that has border info	SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border
Keep the records that state name of border info is texas	WHERE t1.state_name = texas
Get capital of state that has border info	SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border
Keep the records that state name of border info is texas	WHERE t1.state_name = texas
Get capital of state that has border info	SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border
Keep the records that state name of border info is texas	WHERE t1.state_name = texas
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get city name of city	SELECT city_name FROM city
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get highest point of highlow	SELECT highest_point FROM highlow
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is kansas	WHERE population > 150000 AND state_name = kansas
Get traverse of river	SELECT traverse FROM river
Keep the records that is greater than 750 AND river name is mississippi	WHERE LENGTH > 750 AND river_name = mississippi
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is in the first query result	WHERE population > 150000 AND state_name IN ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000	WHERE population > 150000
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000	WHERE population > 150000
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000	WHERE population > 150000
Get density of state	SELECT density FROM state
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get population of state	SELECT population FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get population of state that has border info	SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border
Keep the records that state name of border info is texas	WHERE t1.state_name = texas
Get population of city	SELECT population FROM city
Keep the records that population is greater than 150000 AND state name is wisconsin	WHERE population > 150000 AND state_name = wisconsin
Get population of city	SELECT population FROM city
Keep the records that population is greater than 150000 AND state name is wisconsin	WHERE population > 150000 AND state_name = wisconsin
Get population of city	SELECT population FROM city
Keep the records that population is greater than 150000 AND state name is wisconsin	WHERE population > 150000 AND state_name = wisconsin
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get capital of state that has city	SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name = t1.state_name
Keep the records that city name of city is durham	WHERE t1.city_name = durham
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get capital of state	SELECT DISTINCT capital FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get capital of state	SELECT capital FROM state
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get the SUM of area of state	SELECT SUM ( area ) FROM state
Get the SUM of area of state	SELECT SUM ( area ) FROM state
Get the SUM of area of state	SELECT SUM ( area ) FROM state
Get the SUM of area of state	SELECT SUM ( area ) FROM state
Get density of state	SELECT density FROM state
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get density of state	SELECT density FROM state
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get density of state	SELECT density FROM state
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Get mountain name of mountain	SELECT mountain_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Get mountain name of mountain	SELECT mountain_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Get mountain name of mountain	SELECT mountain_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Get mountain name of mountain	SELECT mountain_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that capital is des moines	WHERE capital = des moines
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that capital is des moines	WHERE capital = des moines
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the minimum value of density of state	SELECT MIN ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get highest point of highlow	SELECT highest_point FROM highlow
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get state name of state	SELECT state_name FROM state
Keep the records that state name is in the first query result AND area is SELECT MIN ( area the minimum value of area the first query result	WHERE state_name IN ( the first query result )  AND area = ( SELECT MIN ( area ) FROM state WHERE state_name IN ( ( the first query result )  ) )
Get city name of city	SELECT city_name FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result )  
Order these records based on the population and sort them in descending order, and return the top 1 record	ORDER BY population DESC LIMIT 1
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is the third query result AND state name is in SELECT state name FROM state WHERE area ( SELECT MIN ( area SELECT MIN ( area the minimum value of area	WHERE population = ( the third query result )  AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) )
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is the third query result AND state name is in SELECT state name FROM state WHERE area ( SELECT MIN ( area SELECT MIN ( area the minimum value of area	WHERE population = ( the third query result )  AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is california	WHERE state_name = california
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name california	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = california )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is california	WHERE state_name = california
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name california	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = california )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is california	WHERE state_name = california
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name california	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = california )
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is the third query result AND traverse is in SELECT state name FROM state WHERE area ( SELECT MAX ( area SELECT MAX ( area the maximum value of area	WHERE LENGTH = ( the third query result )  AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is tennessee	WHERE state_name = tennessee
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is the second query result AND traverse is in SELECT border FROM border info WHERE state name tennessee	WHERE LENGTH = ( the second query result )  AND traverse IN ( SELECT border FROM border_info WHERE state_name = tennessee )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is tennessee	WHERE state_name = tennessee
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is the second query result AND traverse is in SELECT border FROM border info WHERE state name tennessee	WHERE LENGTH = ( the second query result )  AND traverse IN ( SELECT border FROM border_info WHERE state_name = tennessee )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is tennessee	WHERE state_name = tennessee
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is the second query result AND traverse is in SELECT border FROM border info WHERE state name tennessee	WHERE LENGTH = ( the second query result )  AND traverse IN ( SELECT border FROM border_info WHERE state_name = tennessee )
Get state name of city	SELECT state_name FROM city
Keep the records that population is greater than 150000	WHERE population > 150000 
Group the records based on state name	GROUP BY state_name
Order these records based on the the number of city name and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( city_name ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is the first query result	WHERE traverse = ( the first query result )  
Order these records based on the and sort them in descending order, and return the top 1 record	ORDER BY DESC LIMIT 1
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is iowa	WHERE state_name = iowa
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is iowa	WHERE state_name = iowa
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is iowa	WHERE state_name = iowa
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is iowa	WHERE state_name = iowa
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is iowa	WHERE state_name = iowa
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is iowa	WHERE state_name = iowa
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the lowest elevation, and return the top 1 record	ORDER BY lowest_elevation LIMIT 1
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get lowest point of highlow	SELECT lowest_point FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the lowest elevation, and return the top 1 record	ORDER BY lowest_elevation LIMIT 1
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that population is the second query result AND state name is in SELECT traverse FROM river WHERE river name mississippi	WHERE population = ( the second query result )  AND state_name IN ( SELECT traverse FROM river WHERE river_name = mississippi )
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that population is the second query result AND state name is in SELECT traverse FROM river WHERE river name mississippi	WHERE population = ( the second query result )  AND state_name IN ( SELECT traverse FROM river WHERE river_name = mississippi )
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get density of state	SELECT density FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get population of city	SELECT population FROM city
Keep the records that population is the third query result AND state name is in SELECT state name FROM state WHERE area ( SELECT MAX ( area SELECT MAX ( area the maximum value of area	WHERE population = ( the third query result )  AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MAX ( area ) FROM state ) )
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get population of state	SELECT population FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get population of state	SELECT population FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the maximum value of density of state	SELECT MAX ( density ) FROM state
Get population of state	SELECT population FROM state
Keep the records that density is the first query result	WHERE density = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name texas	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = texas )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name texas	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = texas )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name texas	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = texas )
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT traverse FROM river WHERE river name mississippi	WHERE area = ( the second query result )  AND state_name IN ( SELECT traverse FROM river WHERE river_name = mississippi )
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the SUM of LENGTH of river	SELECT SUM ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Group the records based on river name	GROUP BY ( river_name )
Order these records based on the the number of distinct traverse and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1
Get border of border info	SELECT border FROM border_info
Keep the records that state name is alabama	WHERE state_name = alabama
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is alabama	WHERE state_name = alabama
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is alabama	WHERE state_name = alabama
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is oklahoma	WHERE state_name = oklahoma
Get state name of state	SELECT state_name FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the population and sort them in descending order, and return the top 1 record	ORDER BY population DESC LIMIT 1
Get border of border info	SELECT border FROM border_info
Keep the records that state name is oklahoma	WHERE state_name = oklahoma
Get state name of state	SELECT state_name FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the population and sort them in descending order, and return the top 1 record	ORDER BY population DESC LIMIT 1
Get border of border info	SELECT border FROM border_info
Keep the records that state name is oklahoma	WHERE state_name = oklahoma
Get state name of state	SELECT state_name FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the population and sort them in descending order, and return the top 1 record	ORDER BY population DESC LIMIT 1
Get border of border info	SELECT border FROM border_info
Keep the records that state name is oklahoma	WHERE state_name = oklahoma
Get state name of state	SELECT state_name FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result )  
Order these records based on the population and sort them in descending order, and return the top 1 record	ORDER BY population DESC LIMIT 1
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is colorado	WHERE river_name = colorado
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the second query result	WHERE highest_elevation = ( the second query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of population of state that has city	SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of distinct LENGTH of river	SELECT MAX ( DISTINCT LENGTH ) FROM river
Get traverse of river	SELECT DISTINCT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get state name of city	SELECT state_name FROM city
Group the records based on state name	GROUP BY state_name
Order these records based on the the SUM of population, and return the top 1 record	ORDER BY SUM ( population ) LIMIT 1
Get border of border info	SELECT border FROM border_info
Keep the records that state name is colorado	WHERE state_name = colorado
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that is greater than 750	WHERE LENGTH > 750
Get state name of border info	SELECT state_name FROM border_info
Keep the records that border is texas AND state name is in the first query result	WHERE border = texas AND state_name IN ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is the second query result	WHERE state_name = ( the second query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is the second query result	WHERE state_name = ( the second query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is the second query result	WHERE state_name = ( the second query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is the second query result	WHERE state_name = ( the second query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that is greater than 750	WHERE LENGTH > 750
Get state name of mountain	SELECT state_name FROM mountain
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Get state name of mountain	SELECT state_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Get state name of mountain	SELECT state_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get density of state	SELECT density FROM state
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get the maximum value of mountain altitude of mountain	SELECT MAX ( mountain_altitude ) FROM mountain
Keep the records that state name is not alaska	WHERE state_name != alaska
Get mountain name of mountain	SELECT mountain_name FROM mountain
Keep the records that mountain altitude is the first query result	WHERE mountain_altitude = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is tennessee	WHERE traverse = tennessee
Get river name of river	SELECT river_name FROM river
Keep the records that river name is not in the first query result	WHERE river_name NOT IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is tennessee	WHERE traverse = tennessee
Get river name of river	SELECT river_name FROM river
Keep the records that river name is not in the first query result	WHERE river_name NOT IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that country name is not usa	WHERE country_name != usa
Get state name of state	SELECT state_name FROM state
Keep the records that capital is atlanta	WHERE capital = atlanta
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that capital is atlanta	WHERE capital = atlanta
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get the minimum value of population of state that has city	SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1
Get city name of city	SELECT city_name FROM city
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that highest elevation is the first query result	WHERE highest_elevation = ( the first query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is idaho	WHERE state_name = idaho
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that lowest elevation is the second query result AND state name is in SELECT border FROM border info WHERE state name idaho	WHERE lowest_elevation = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = idaho )
Get state name of city	SELECT state_name FROM city
Group the records based on state name	GROUP BY state_name
Order these records based on the the average value of population, and return the top 1 record	ORDER BY AVG ( population ) LIMIT 1
Get state name of mountain	SELECT state_name FROM mountain
Keep the records that mountain name is whitney	WHERE mountain_name = whitney
Get state name of mountain	SELECT state_name FROM mountain
Keep the records that mountain name is whitney	WHERE mountain_name = whitney
Get state name of mountain	SELECT state_name FROM mountain
Keep the records that mountain name is whitney	WHERE mountain_name = whitney
Get state name of mountain	SELECT state_name FROM mountain
Keep the records that mountain name is whitney	WHERE mountain_name = whitney
Get traverse of river	SELECT traverse FROM river
Get traverse of river	SELECT traverse FROM river
Get state name of city	SELECT state_name FROM city
Keep the records that city name is austin AND population is greater than 150000	WHERE city_name = austin AND population > 150000
Get border of border info	SELECT border FROM border_info
Keep the records that state name is california	WHERE state_name = california
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is the second query result AND state name is in SELECT border FROM border info WHERE state name california	WHERE population = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = california )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is california	WHERE state_name = california
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is the second query result AND state name is in SELECT border FROM border info WHERE state name california	WHERE population = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = california )
Get state name of state	SELECT state_name FROM state
Keep the records that capital is albany	WHERE capital = albany
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is not in the first query result	WHERE traverse NOT IN ( the first query result ) 
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Keep the records that traverse is texas	WHERE traverse = texas
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result AND traverse is texas	WHERE LENGTH = ( the first query result )  AND traverse = texas
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is the second query result	WHERE population > 150000 AND state_name = ( the second query result ) 
Get the maximum value of area of state that has river	SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name = t2.traverse
Keep the records that river name of river is mississippi	WHERE t2.river_name = mississippi
Get capital of state	SELECT capital FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get population of city	SELECT population FROM city
Keep the records that city name is the second query result	WHERE city_name = ( the second query result ) 
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get river name of river	SELECT river_name FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get capital of state	SELECT capital FROM state
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the minimum value of population of city	SELECT MIN ( population ) FROM city
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is the third query result AND state name is in SELECT state name FROM state WHERE area ( SELECT MIN ( area SELECT MIN ( area the minimum value of area	WHERE population = ( the third query result )  AND state_name IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get population of state	SELECT population FROM state
Keep the records that area is the second query result AND state name is in SELECT border FROM border info WHERE state name texas	WHERE area = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = texas )
Get state name of state	SELECT state_name FROM state
Keep the records that capital is salem	WHERE capital = salem
Get state name of state	SELECT state_name FROM state
Keep the records that capital is salem	WHERE capital = salem
Get state name of state	SELECT state_name FROM state
Keep the records that capital is salem	WHERE capital = salem
Get state name of state	SELECT state_name FROM state
Keep the records that capital is salem	WHERE capital = salem
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get state name of border info	SELECT state_name FROM border_info
Keep the records that border is in the second query result	WHERE border IN ( the second query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the third query result	WHERE state_name IN ( the third query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the fourth query result AND state name is in SELECT state name FROM border info WHERE border ( SELECT state name FROM state WHERE population ( SELECT MAX ( population SELECT state name FROM state WHERE population ( SELECT MAX ( population SELECT MAX ( population the maximum value of population	WHERE area = ( the fourth query result )  AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population = ( SELECT MAX ( population ) FROM state ) ) )
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Get capital of state	SELECT DISTINCT capital FROM state
Get the number of state name of city	SELECT COUNT ( state_name ) FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get the number of state name of city	SELECT COUNT ( state_name ) FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get the number of state name of city	SELECT COUNT ( state_name ) FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get the number of state name of city	SELECT COUNT ( state_name ) FROM city
Keep the records that city name is springfield	WHERE city_name = springfield
Get the minimum value of population of state	SELECT MIN ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get lake name of lake	SELECT lake_name FROM lake
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that population is greater than 150000 AND state name is texas	WHERE population > 150000 AND state_name = texas
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that population is greater than 150000 AND state name is texas	WHERE population > 150000 AND state_name = texas
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that population is greater than 150000 AND state name is texas	WHERE population > 150000 AND state_name = texas
Get highest elevation of highlow	SELECT highest_elevation FROM highlow
Get the number of traverse of river	SELECT COUNT ( traverse ) FROM river
Keep the records that river name is missouri	WHERE river_name = missouri
Get the number of traverse of river	SELECT COUNT ( traverse ) FROM river
Keep the records that river name is missouri	WHERE river_name = missouri
Get the number of traverse of river	SELECT COUNT ( traverse ) FROM river
Keep the records that river name is missouri	WHERE river_name = missouri
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is the third query result AND traverse is in SELECT state name FROM state WHERE area ( SELECT MIN ( area SELECT MIN ( area the minimum value of area	WHERE LENGTH = ( the third query result )  AND traverse IN ( SELECT state_name FROM state WHERE area = ( SELECT MIN ( area ) FROM state ) )
Get population and area of state	SELECT population / area FROM state
Keep the records that state name is pennsylvania	WHERE state_name = pennsylvania
Get border of border info	SELECT border FROM border_info
Keep the records that state name is florida	WHERE state_name = florida
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get the number of distinct state name of border info	SELECT COUNT ( DISTINCT state_name ) FROM border_info
Get the maximum value of distinct highest elevation of highlow	SELECT MAX ( DISTINCT highest_elevation ) FROM highlow
Keep the records that state name is texas	WHERE state_name = texas
Get border of border info	SELECT border FROM border_info
Keep the records that state name is new mexico	WHERE state_name = new mexico
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that border is in the first query result AND state name is colorado	WHERE border IN ( the first query result )  AND state_name = colorado
Get border of border info	SELECT border FROM border_info
Keep the records that state name is nebraska	WHERE state_name = nebraska
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that population is greater than 150000 AND state name is in the first query result	WHERE population > 150000 AND state_name IN ( the first query result ) 
Get the SUM of population of state that has border info	SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name = t1.border
Keep the records that state name of border info is texas	WHERE t1.state_name = texas
Get lake name of lake	SELECT lake_name FROM lake
Keep the records that area is greater than 750	WHERE area > 750
Get lake name of lake	SELECT lake_name FROM lake
Keep the records that area is greater than 750	WHERE area > 750
Get lake name of lake	SELECT lake_name FROM lake
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that is greater than 750 AND traverse is ohio	WHERE LENGTH > 750 AND traverse = ohio
Get the minimum value of distinct LENGTH of river	SELECT MIN ( DISTINCT LENGTH ) FROM river
Get traverse of river	SELECT DISTINCT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the number of distinct traverse of river	SELECT COUNT ( DISTINCT traverse ) FROM river
Keep the records that is greater than 750	WHERE LENGTH > 750
Get mountain altitude of mountain	SELECT mountain_altitude FROM mountain
Keep the records that mountain name is mckinley	WHERE mountain_name = mckinley
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of population of state	SELECT MIN ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get highest point of state that has highlow	SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name
Keep the records that state name of state is in the second query result	WHERE t1.state_name IN ( the second query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get state name of highlow	SELECT state_name FROM highlow
Keep the records that lowest elevation is the first query result	WHERE lowest_elevation = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get mountain name of mountain	SELECT mountain_name FROM mountain
Keep the records that state name is alaska	WHERE state_name = alaska
Get the number of traverse of river	SELECT COUNT ( traverse ) FROM river
Keep the records that is greater than 750	WHERE LENGTH > 750
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the third query result AND state name is in SELECT traverse FROM river WHERE LENGTH ( SELECT MAX ( LENGTH SELECT MAX ( LENGTH the maximum value of LENGTH	WHERE area = ( the third query result )  AND state_name IN ( SELECT traverse FROM river WHERE LENGTH = ( SELECT MAX ( LENGTH ) FROM river ) )
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT traverse FROM river WHERE river name rio grande	WHERE area = ( the second query result )  AND state_name IN ( SELECT traverse FROM river WHERE river_name = rio grande )
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is rio grande	WHERE river_name = rio grande
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state	SELECT state_name FROM state
Keep the records that area is the second query result AND state name is in SELECT traverse FROM river WHERE river name rio grande	WHERE area = ( the second query result )  AND state_name IN ( SELECT traverse FROM river WHERE river_name = rio grande )
Get border of border info	SELECT border FROM border_info
Keep the records that state name is colorado	WHERE state_name = colorado
Get the number of river name of river	SELECT COUNT ( river_name ) FROM river
Keep the records that traverse is in the first query result	WHERE traverse IN ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Get state name of state	SELECT state_name FROM state
Keep the records that state name is not in the first query result	WHERE state_name NOT IN ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that state name is texas	WHERE state_name = texas
Get area of state	SELECT area FROM state
Get the minimum value of distinct LENGTH of river	SELECT MIN ( DISTINCT LENGTH ) FROM river
Get the number of distinct traverse of river	SELECT COUNT ( DISTINCT traverse ) FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the third query result	WHERE traverse IN ( the third query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is the second query result	WHERE population > 150000 AND state_name = ( the second query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get area of state	SELECT area FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the maximum value of LENGTH of river	SELECT MAX ( LENGTH ) FROM river
Get traverse of river	SELECT traverse FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is in the second query result	WHERE state_name IN ( the second query result ) 
Get the minimum value of population of state	SELECT MIN ( population ) FROM state
Get density of state	SELECT density FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is mississippi	WHERE river_name = mississippi
Get the number of distinct border of border info	SELECT COUNT ( DISTINCT border ) FROM border_info
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get state name of state that has highlow	SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get population of city	SELECT population FROM city
Keep the records that city name is the second query result	WHERE city_name = ( the second query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get capital of state	SELECT capital FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get population of city	SELECT population FROM city
Keep the records that city name is the second query result	WHERE city_name = ( the second query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get lowest point of state that has highlow	SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name
Keep the records that state name of state is in the second query result	WHERE t1.state_name IN ( the second query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get border of border info that has border info	SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name
Keep the records that state name of border info is in the second query result	WHERE t2.state_name IN ( the second query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get capital of state that has city	SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital = t1.city_name
Keep the records that population of city is less than or equal to 150000	WHERE t1.population <= 150000
Get city name of city	SELECT city_name FROM city
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get highest point of state that has highlow	SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name = t2.state_name
Keep the records that state name of state is in the second query result	WHERE t1.state_name IN ( the second query result ) 
Get country name of state	SELECT country_name FROM state
Keep the records that state name is massachusetts	WHERE state_name = massachusetts
Get state name of city	SELECT state_name FROM city
Group the records based on state name	GROUP BY state_name
Order these records based on the the SUM of population and sort them in descending order, and return the top 1 record	ORDER BY SUM ( population ) DESC LIMIT 1
Get river name of river	SELECT river_name FROM river
Get the number of city name of city	SELECT COUNT ( city_name ) FROM city
Keep the records that city name is austin	WHERE city_name = austin
Get border of border info	SELECT border FROM border_info
Keep the records that state name is wyoming	WHERE state_name = wyoming
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Keep the records that state name is in the first query result	WHERE state_name IN ( the first query result ) 
Get population of state	SELECT population FROM state
Keep the records that population is the second query result AND state name is in SELECT border FROM border info WHERE state name wyoming	WHERE population = ( the second query result )  AND state_name IN ( SELECT border FROM border_info WHERE state_name = wyoming )
Get of river	SELECT LENGTH FROM river
Keep the records that river name is colorado AND traverse is texas	WHERE river_name = colorado AND traverse = texas
Get density of state	SELECT density FROM state
Keep the records that capital is austin	WHERE capital = austin
Get the minimum value of LENGTH of river	SELECT MIN ( LENGTH ) FROM river
Get of river	SELECT LENGTH FROM river
Keep the records that is the first query result	WHERE LENGTH = ( the first query result ) 
Get lowest elevation of highlow	SELECT lowest_elevation FROM highlow
Keep the records that lowest point is death valley	WHERE lowest_point = death valley
Get the average value of population of state	SELECT AVG ( population ) FROM state
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that traverse is in the second query result	WHERE traverse IN ( the second query result ) 
Get border of border info that has border info	SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border = t1.state_name JOIN border_info AS t3 ON t3.border = t2.state_name JOIN border_info AS t4 ON t4.border = t3.state_name
Keep the records that state name of border info is texas	WHERE t4.state_name = texas
Get state name of state	SELECT state_name FROM state
Keep the records that capital is boston	WHERE capital = boston
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is the first query result	WHERE state_name = ( the first query result ) 
Get river name of river	SELECT river_name FROM river
Keep the records that is greater than 750 AND traverse is virginia	WHERE LENGTH > 750 AND traverse = virginia
Get traverse of river	SELECT traverse FROM river
Keep the records that river name is in the first query result	WHERE river_name IN ( the first query result ) 
Get city name of city	SELECT city_name FROM city
Keep the records that population is greater than 150000 AND state name is in the second query result	WHERE population > 150000 AND state_name IN ( the second query result ) 
Get border of border info	SELECT border FROM border_info
Keep the records that state name is texas	WHERE state_name = texas
Get state name of state	SELECT state_name FROM state
Keep the records that state name is not in the first query result	WHERE state_name NOT IN ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that area is the first query result	WHERE area = ( the first query result ) 
Get the number of border of border info	SELECT COUNT ( border ) FROM border_info
Keep the records that state name is the second query result	WHERE state_name = ( the second query result ) 
Get the maximum value of population of city	SELECT MAX ( population ) FROM city
Keep the records that state name is montana	WHERE state_name = montana
Get state name of city	SELECT state_name FROM city
Keep the records that population is the first query result AND state name is montana	WHERE population = ( the first query result )  AND state_name = montana
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get capital of highlow that has state	SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name
Keep the records that lowest elevation of highlow is the first query result	WHERE t2.lowest_elevation = ( the first query result ) 
Get the maximum value of population of river that has city	SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1
Get city name of city that has river	SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse = t1.state_name
Keep the records that population of city is the first query result	WHERE t1.population = ( the first query result ) 
Get the maximum value of population of state	SELECT MAX ( population ) FROM state
Get state name of state	SELECT state_name FROM state
Keep the records that population is the first query result	WHERE population = ( the first query result ) 
Get the number of river name of river that has state	SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name = t2.traverse
Keep the records that state name of state is the second query result	WHERE t1.state_name = ( the second query result ) 
Get the minimum value of lowest elevation of highlow	SELECT MIN ( lowest_elevation ) FROM highlow
Get state name of highlow that has border info and state	SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name = t1.border JOIN state AS t2 ON t2.state_name = t1.border
Keep the records that lowest elevation of highlow is the first query result	WHERE t3.lowest_elevation = ( the first query result )  
Order these records based on the area of state and sort them in descending order, and return the top 1 record	ORDER BY t2.area DESC LIMIT 1
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get capital of highlow that has state	SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name
Keep the records that highest elevation of highlow is the first query result	WHERE t2.highest_elevation = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get capital of highlow that has state	SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name
Keep the records that highest elevation of highlow is the first query result	WHERE t2.highest_elevation = ( the first query result ) 
Get the minimum value of area of state	SELECT MIN ( area ) FROM state
Get highest point of highlow that has state	SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name
Keep the records that area of state is the first query result	WHERE t1.area = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get the number of river name of highlow that has river	SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name
Keep the records that highest elevation of highlow is the first query result	WHERE t2.highest_elevation = ( the first query result ) 
Get the maximum value of area of state	SELECT MAX ( area ) FROM state
Get highest elevation of highlow that has state	SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name = t2.state_name
Keep the records that area of state is the first query result	WHERE t1.area = ( the first query result ) 
Get the maximum value of highest elevation of highlow	SELECT MAX ( highest_elevation ) FROM highlow
Get river name of highlow that has river	SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse = t2.state_name
Keep the records that highest elevation of highlow is the first query result	WHERE t2.highest_elevation = ( the first query result )  
Order these records based on the length of river and sort them in descending order, and return the top 1 record	ORDER BY t1.length DESC LIMIT 1
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get paperid of writes that has author AND writes	SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens AND authorname of author is Dina Barbian	WHERE t2.authorname = Peter Mertens AND t1.authorname = Dina Barbian
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid and authorid of paperkeyphrase that has keyphrase and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is syntactic parsing	WHERE t2.keyphrasename = syntactic parsing 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get the number of citedpaperid of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is noah a smith	WHERE t1.authorname = noah a smith
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is chi	WHERE t2.venuename = chi
Get the number of paperid AND authorid of writes that has author AND paper	SELECT DISTINCT COUNT ( t3.paperid ) , t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is mirella lapata AND year of paper is 2016	WHERE t1.authorname = mirella lapata AND t3.year = 2016 
Group the records based on authorid of writes	GROUP BY t2.authorid
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is sharon goldwater	WHERE t1.authorname = sharon goldwater
Get paperid of writes that has author and paper	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid of writes that has author and paper	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid of writes that has author and paper	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid of writes that has author and paper	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid of writes that has author and paper	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid of writes that has author and paper	SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is monte carlo simulation AND year of paper is greater than 2011	WHERE t1.keyphrasename = monte carlo simulation AND t3.year > 2011
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is monte carlo simulation AND year of paper is greater than 2011	WHERE t1.keyphrasename = monte carlo simulation AND t3.year > 2011
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is monte carlo simulation AND year of paper is greater than 2011	WHERE t1.keyphrasename = monte carlo simulation AND t3.year > 2011
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is monte carlo simulation AND year of paper is greater than 2011	WHERE t1.keyphrasename = monte carlo simulation AND t3.year > 2011
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is monte carlo simulation AND year of paper is greater than 2011	WHERE t1.keyphrasename = monte carlo simulation AND t3.year > 2011
Get the number of paperid of writes that has author and paper	SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is ras bodik	WHERE t1.authorname = ras bodik
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get the number of paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is David M. Blei AND venuename of venue is AISTATS	WHERE t1.authorname = David M. Blei AND t4.venuename = AISTATS
Get paperid of paper	SELECT DISTINCT paperid FROM paper
Keep the records that title is machine networks for one shot learning	WHERE title = machine networks for one shot learning
Get paperid of paper	SELECT DISTINCT paperid FROM paper
Keep the records that title is machine networks for one shot learning	WHERE title = machine networks for one shot learning
Get the number of citedpaperid AND citedpaperid of paper that has cite AND venue	SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2010 AND venuename of venue is EMNLP	WHERE t1.year = 2010 AND t2.venuename = EMNLP 
Group the records based on citedpaperid of cite	GROUP BY t3.citedpaperid
Order these records based on the the number of citedpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( t3.citedpaperid ) DESC 
Get the number of citedpaperid AND citedpaperid of paper that has cite AND venue	SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2010 AND venuename of venue is EMNLP	WHERE t1.year = 2010 AND t2.venuename = EMNLP 
Group the records based on citedpaperid of cite	GROUP BY t3.citedpaperid
Order these records based on the the number of citedpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( t3.citedpaperid ) DESC 
Get the number of citedpaperid AND citedpaperid of paper that has cite AND venue	SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2010 AND venuename of venue is EMNLP	WHERE t1.year = 2010 AND t2.venuename = EMNLP 
Group the records based on citedpaperid of cite	GROUP BY t3.citedpaperid
Order these records based on the the number of citedpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( t3.citedpaperid ) DESC 
Get the number of citedpaperid AND citedpaperid of paper that has cite AND venue	SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2010 AND venuename of venue is EMNLP	WHERE t1.year = 2010 AND t2.venuename = EMNLP 
Group the records based on citedpaperid of cite	GROUP BY t3.citedpaperid
Order these records based on the the number of citedpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( t3.citedpaperid ) DESC 
Get paperid of paperdataset that has dataset AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that datasetname of dataset is RGB-D Object Dataset AND title of paper is Class consistent multi-modal fusion with binary features AND year of paper is 2016 AND venuename of venue is CVPR	WHERE t1.datasetname = RGB-D Object Dataset AND t3.title = Class consistent multi-modal fusion with binary features AND t3.year = 2016 AND t4.venuename = CVPR
Get paperid of paperdataset that has dataset AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that datasetname of dataset is RGB-D Object Dataset AND title of paper is Class consistent multi-modal fusion with binary features AND year of paper is 2016 AND venuename of venue is CVPR	WHERE t1.datasetname = RGB-D Object Dataset AND t3.title = Class consistent multi-modal fusion with binary features AND t3.year = 2016 AND t4.venuename = CVPR
Get the number of distinct paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning
Get the number of distinct paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning
Get the number of distinct paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning
Get the number of distinct paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get the number of distinct paperid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Christopher D. Manning	WHERE t1.authorname = Christopher D. Manning
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and aLuke Zettlemoyerhor	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN aLuke Zettlemoyerhor AS t5 ON t4.aLuke Zettlemoyerhorid = t5.aLuke Zettlemoyerhorid
Keep the records that aLuke Zettlemoyerhorname of aLuke Zettlemoyerhor is Luke Zettlemoyer	WHERE t5.aLuke Zettlemoyerhorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get keyphraseid of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Luke Zettlemoyer	WHERE t5.authorname = Luke Zettlemoyer
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get venueid of writes that has author and paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Daniella Coelho	WHERE t1.authorname = Daniella Coelho
Get the number of distinct paperid of paper	SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper
Get the number of distinct paperid of paperkeyphrase that has keyphrase AND writes AND author	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid
Keep the records that authorname of author is Ed Desmond AND keyphrasename of keyphrase is Semantic Parsing	WHERE t2.authorname = Ed Desmond AND t4.keyphrasename = Semantic Parsing
Get the number of distinct paperid of paperkeyphrase that has keyphrase AND writes AND author	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid
Keep the records that authorname of author is Ed Desmond AND keyphrasename of keyphrase is Semantic Parsing	WHERE t2.authorname = Ed Desmond AND t4.keyphrasename = Semantic Parsing
Get the number of distinct paperid of paperkeyphrase that has keyphrase AND writes AND author	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid
Keep the records that authorname of author is Ed Desmond AND keyphrasename of keyphrase is Semantic Parsing	WHERE t2.authorname = Ed Desmond AND t4.keyphrasename = Semantic Parsing
Get the number of distinct paperid of paperkeyphrase that has keyphrase AND writes AND author	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t1.paperid JOIN author AS t2 ON t3.authorid = t2.authorid
Keep the records that authorname of author is Ed Desmond AND keyphrasename of keyphrase is Semantic Parsing	WHERE t2.authorname = Ed Desmond AND t4.keyphrasename = Semantic Parsing
Get venueid of writes that has author AND paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is li dong AND year of paper is 2016	WHERE t1.authorname = li dong AND t3.year = 2016
Get venueid of writes that has author AND paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is li dong AND year of paper is 2016	WHERE t1.authorname = li dong AND t3.year = 2016
Get venueid of writes that has author AND paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is li dong AND year of paper is 2016	WHERE t1.authorname = li dong AND t3.year = 2016
Get venueid of writes that has author AND paper	SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is li dong AND year of paper is 2016	WHERE t1.authorname = li dong AND t3.year = 2016
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Parsing AND year of paper is 2012 AND venuename of venue is acl	WHERE t1.keyphrasename = Parsing AND t3.year = 2012 AND t4.venuename = acl
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is dependent types	WHERE t1.keyphrasename = dependent types
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is dependent types	WHERE t1.keyphrasename = dependent types
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is dependent types	WHERE t1.keyphrasename = dependent types
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get paperid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Question Answering	WHERE t1.keyphrasename = Question Answering
Get keyphraseid and year of paper that has paperkeyphrase and writes and author	SELECT DISTINCT t2.keyphraseid , t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Luke S Zettlemoyer	WHERE t1.authorname = Luke S Zettlemoyer 
Order these records based on the year of paper keyphraseid of paperkeyphrase	ORDER BY t3.year , t2.keyphraseid 
Get keyphrasename and year of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphrasename , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is sanjeev arora	WHERE t5.authorname = sanjeev arora 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get keyphrasename and year of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphrasename , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is sanjeev arora	WHERE t5.authorname = sanjeev arora 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get keyphrasename and year of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphrasename , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is sanjeev arora	WHERE t5.authorname = sanjeev arora 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of writes that has author and paper	SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is balakrishnan prabhakaran	WHERE t1.authorname = balakrishnan prabhakaran
Get paperid and year of writes that has author and paper	SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is zachary tatlock	WHERE t1.authorname = zachary tatlock
Get paperid of writes that has author and paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is subhasis chaudhuri	WHERE t1.authorname = subhasis chaudhuri
Get paperid of writes that has author and paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is subhasis chaudhuri	WHERE t1.authorname = subhasis chaudhuri
Get paperid of writes that has author and paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is subhasis chaudhuri	WHERE t1.authorname = subhasis chaudhuri
Get paperid of writes that has author and paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is subhasis chaudhuri	WHERE t1.authorname = subhasis chaudhuri
Get the number of paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t1.keyphrasename = parsing AND t3.year = 2014 AND t4.venuename = ACL
Get the number of paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t1.keyphrasename = parsing AND t3.year = 2014 AND t4.venuename = ACL
Get the number of paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t1.keyphrasename = parsing AND t3.year = 2014 AND t4.venuename = ACL
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get authorid AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorid , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is brian curless AND keyphrasename of keyphrase is convolution	WHERE t1.authorname = brian curless AND t5.keyphrasename = convolution
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Liwen Xiong AND year of paper is 2015	WHERE t1.authorname = Liwen Xiong AND t3.year = 2015
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is TAIL AND venuename of venue is NIPS	WHERE t1.keyphrasename = TAIL AND t4.venuename = NIPS
Get paperid of writes that has author	SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Mark Steedman	WHERE t1.authorname = Mark Steedman
Get the number of distinct authorid of writes that has author	SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is not Mark Steedman AND paperid of writes is in the first query result	WHERE t1.authorname != Mark Steedman AND t2.paperid IN ( the first query result ) 
Get keyphraseid of paper that has paperkeyphrase AND writes AND author	SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Christof Dallermassl AND year of paper is 2000	WHERE t1.authorname = Christof Dallermassl AND t3.year = 2000
Get keyphraseid of paper that has paperkeyphrase AND writes AND author	SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Christof Dallermassl AND year of paper is 2000	WHERE t1.authorname = Christof Dallermassl AND t3.year = 2000
Get keyphraseid of paper that has paperkeyphrase AND writes AND author	SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Christof Dallermassl AND year of paper is 2000	WHERE t1.authorname = Christof Dallermassl AND t3.year = 2000
Get keyphraseid of paper that has paperkeyphrase AND writes AND author	SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Christof Dallermassl AND year of paper is 2000	WHERE t1.authorname = Christof Dallermassl AND t3.year = 2000
Get the number of citingpaperid and authorname of writes that has author and cite	SELECT DISTINCT t1.authorname , COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid
Group the records based on authorname of author	GROUP BY t1.authorname
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t3.citingpaperid ) DESC 
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is mohammad rastegari AND journalid of paper is greater than or equal to 0	WHERE t1.authorname = mohammad rastegari AND t3.journalid >= 0
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is mohammad rastegari AND journalid of paper is greater than or equal to 0	WHERE t1.authorname = mohammad rastegari AND t3.journalid >= 0
Get the number of distinct citingpaperid AND paperid of paper that has cite AND venue	SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid ) , t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2014 AND venuename of venue is TACL	WHERE t1.year = 2014 AND t2.venuename = TACL 
Group the records based on paperid of paper	GROUP BY t1.paperid
Order these records based on the the number of distinct citingpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC 
Get the number of distinct citingpaperid AND paperid of paper that has cite AND venue	SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid ) , t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2014 AND venuename of venue is TACL	WHERE t1.year = 2014 AND t2.venuename = TACL 
Group the records based on paperid of paper	GROUP BY t1.paperid
Order these records based on the the number of distinct citingpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC 
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get authorid of venue that has paper AND writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2016 AND venuename of venue is acl	WHERE t2.year = 2016 AND t3.venuename = acl
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Multiuser Receiver in the Decision Feedback AND year of paper is 2016	WHERE t1.keyphrasename = Multiuser Receiver in the Decision Feedback AND t3.year = 2016 
Group the records based on the number of distinct keyphrasename of keyphrase paperid of paper 1 that the number of distinct keyphrasename of keyphrase is greater than 1	GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename ) > 1 HAVING COUNT ( DISTINCT t1.keyphrasename ) > 1
Get the number of distinct paperid of paperdataset that has dataset and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is in the form of ImageNet	WHERE t1.datasetname LIKE ImageNet
Get the number of distinct paperid of paperdataset that has dataset and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is in the form of ImageNet	WHERE t1.datasetname LIKE ImageNet
Get the number of distinct paperid of paperdataset that has dataset and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is in the form of ImageNet	WHERE t1.datasetname LIKE ImageNet
Get the number of distinct paperid of paperdataset that has dataset and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is in the form of ImageNet	WHERE t1.datasetname LIKE ImageNet
Get the number of distinct paperid of paperdataset that has dataset and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is in the form of ImageNet	WHERE t1.datasetname LIKE ImageNet
Get the number of citedpaperid of writes that has author and cite	SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid
Keep the records that authorname of author is Mirella Lapata	WHERE t1.authorname = Mirella Lapata
Get the number of citedpaperid of writes that has author and cite	SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid
Keep the records that authorname of author is Mirella Lapata	WHERE t1.authorname = Mirella Lapata
Get the number of citedpaperid of writes that has author and cite	SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t3 ON t2.paperid = t3.citingpaperid
Keep the records that authorname of author is Mirella Lapata	WHERE t1.authorname = Mirella Lapata
Get year of venue that has paper AND writes AND author	SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Michael Stonebraker AND venuename of venue is VLDB	WHERE t1.authorname = Michael Stonebraker AND t4.venuename = VLDB 
Order these records based on the year of paper	ORDER BY t3.year 
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get datasetid of paperdataset that has dataset and paperkeyphrase and keyphrase	SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid = t4.keyphraseid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t4.keyphrasename = semantic parsing
Get journalid and venueid of venue that has paper and writes and author	SELECT DISTINCT t3.journalid , t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens	WHERE t1.authorname = Peter Mertens
Get journalid and venueid of venue that has paper and writes and author	SELECT DISTINCT t3.journalid , t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens	WHERE t1.authorname = Peter Mertens
Get journalid and venueid of venue that has paper and writes and author	SELECT DISTINCT t3.journalid , t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Peter Mertens	WHERE t1.authorname = Peter Mertens
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is nature communications	WHERE t1.year = 2015 AND t2.venuename = nature communications
Get datasetid and year of paperdataset that has dataset and paperkeyphrase and paper and keyphrase	SELECT DISTINCT t2.datasetid , t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t5.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in ascending ORDER	ORDER BY t4.year ASC 
Get datasetid and year of paperdataset that has dataset and paperkeyphrase and paper and keyphrase	SELECT DISTINCT t2.datasetid , t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid = t3.paperid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t5.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in ascending ORDER	ORDER BY t4.year ASC 
Get datasetid of paperdataset that has dataset and paper and venue	SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that venuename of venue is ACL	WHERE t4.venuename = ACL
Get datasetid of paperdataset that has dataset and paper and venue	SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that venuename of venue is ACL	WHERE t4.venuename = ACL
Get paperid of paperkeyphrase that has keyphrase AND paper AND venue AND writes AND author	SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN paper AS t2 ON t2.paperid = t5.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is li dong AND keyphrasename of keyphrase is semantic parsing AND year of paper is 2016 AND venuename of venue is acl	WHERE t1.authorname = li dong AND t3.keyphrasename = semantic parsing AND t2.year = 2016 AND t6.venuename = acl
Get the number of paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is convolutional neural networks AND year of paper is 2016	WHERE t1.keyphrasename = convolutional neural networks AND t3.year = 2016
Get the number of paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is convolutional neural networks AND year of paper is 2016	WHERE t1.keyphrasename = convolutional neural networks AND t3.year = 2016
Get the number of paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is convolutional neural networks AND year of paper is 2016	WHERE t1.keyphrasename = convolutional neural networks AND t3.year = 2016
Get the number of paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is convolutional neural networks AND year of paper is 2016	WHERE t1.keyphrasename = convolutional neural networks AND t3.year = 2016
Get the number of paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is convolutional neural networks AND year of paper is 2016	WHERE t1.keyphrasename = convolutional neural networks AND t3.year = 2016
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is question answering AND year of paper is 2016	WHERE t1.keyphrasename = question answering AND t3.year = 2016
Get the number of paperid and year of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is NIPS	WHERE t2.venuename = NIPS 
Group the records based on year of paper	GROUP BY t1.year
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t1.paperid ) DESC 
Get the number of paperid and year of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is NIPS	WHERE t2.venuename = NIPS 
Group the records based on year of paper	GROUP BY t1.year
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t1.paperid ) DESC 
Get the number of paperid and year of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is NIPS	WHERE t2.venuename = NIPS 
Group the records based on year of paper	GROUP BY t1.year
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t1.paperid ) DESC 
Get the number of paperid and year of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) , t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is NIPS	WHERE t2.venuename = NIPS 
Group the records based on year of paper	GROUP BY t1.year
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t1.paperid ) DESC 
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get authorid of writes that has author and writes	SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Noah A Smith	WHERE t2.authorname = Noah A Smith
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get datasetid of paper that has paperdataset and writes and author	SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is jitendra malik	WHERE t1.authorname = jitendra malik
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.paperid , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get year of writes that has author and paper	SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Pedro Domingos	WHERE t1.authorname = Pedro Domingos 
Group the records based on year of paper	GROUP BY t3.year
Get year of writes that has author and paper	SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Pedro Domingos	WHERE t1.authorname = Pedro Domingos 
Group the records based on year of paper	GROUP BY t3.year
Get paperid and year of writes that has author and paper	SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is jamie callan	WHERE t1.authorname = jamie callan 
Order these records based on the year of paper	ORDER BY t3.year 
Get the number of paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is jamie callan	WHERE t1.authorname = jamie callan 
Group the records based on year of paper	GROUP BY t3.year
Get the number of paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is jamie callan	WHERE t1.authorname = jamie callan 
Group the records based on year of paper	GROUP BY t3.year
Get the number of paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is jamie callan	WHERE t1.authorname = jamie callan 
Group the records based on year of paper	GROUP BY t3.year
Get paperid of paper that has cite and writes and author	SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni
Get paperid of paper that has cite and writes and author	SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni
Get paperid of paper that has cite and writes and author	SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Daniel Jurafsky	WHERE t1.authorname = Daniel Jurafsky
Get paperid of paper that has cite and writes and author	SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Daniel Jurafsky	WHERE t1.authorname = Daniel Jurafsky
Get paperid of paper that has cite and writes and author	SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Daniel Jurafsky	WHERE t1.authorname = Daniel Jurafsky
Get paperid of paper that has cite and writes and author	SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citingpaperid JOIN writes AS t2 ON t2.paperid = t4.citedpaperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Daniel Jurafsky	WHERE t1.authorname = Daniel Jurafsky
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is instance segmentation AND journalid of paper is greater than or equal to 0	WHERE t1.keyphrasename = instance segmentation AND t3.journalid >= 0
Get the number of paperid AND authorid of paperkeyphrase that has keyphrase AND paper AND writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is semantic parsing AND year of paper is greater than 2005	WHERE t2.keyphrasename = semantic parsing AND t4.year > 2005 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid AND authorid of paperkeyphrase that has keyphrase AND paper AND writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is semantic parsing AND year of paper is greater than 2005	WHERE t2.keyphrasename = semantic parsing AND t4.year > 2005 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of paperid AND authorid of paperkeyphrase that has keyphrase AND paper AND writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is semantic parsing AND year of paper is greater than 2005	WHERE t2.keyphrasename = semantic parsing AND t4.year > 2005 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get the number of citingpaperid of paperkeyphrase that has keyphrase AND writes AND cite AND author	SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN cite AS t5 ON t4.paperid = t5.citedpaperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Dan Makumbi AND keyphrasename of keyphrase is Genetic Identity	WHERE t1.authorname = Dan Makumbi AND t3.keyphrasename = Genetic Identity
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is character recognition AND year of paper is less than 2010	WHERE t1.keyphrasename = character recognition AND t3.year < 2010
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is character recognition AND year of paper is less than 2010	WHERE t1.keyphrasename = character recognition AND t3.year < 2010
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is character recognition AND year of paper is less than 2010	WHERE t1.keyphrasename = character recognition AND t3.year < 2010
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is character recognition AND year of paper is less than 2010	WHERE t1.keyphrasename = character recognition AND t3.year < 2010
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is character recognition AND year of paper is less than 2010	WHERE t1.keyphrasename = character recognition AND t3.year < 2010
Get the number of keyphraseid and keyphraseid of paper that has paperkeyphrase and writes and author	SELECT DISTINCT COUNT ( t2.keyphraseid ) , t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is oren etzioni	WHERE t1.authorname = oren etzioni 
Group the records based on keyphraseid of paperkeyphrase	GROUP BY t2.keyphraseid
Order these records based on the the number of keyphraseid of paperkeyphrase and sort them in descending ORDER	ORDER BY COUNT ( t2.keyphraseid ) DESC 
Get the number of paperid of paperdataset that has dataset AND paper AND paperkeyphrase AND keyphrase	SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid = t2.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid = t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid = t5.keyphraseid
Keep the records that datasetname of dataset is ImageNet AND keyphrasename of keyphrase is deep learning	WHERE t2.datasetname = ImageNet AND t5.keyphrasename = deep learning
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get year AND paperid of writes that has author AND paper	SELECT DISTINCT t3.year , t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is in the form of Michael Armstrong AND year of paper is in the form of 199	WHERE t1.authorname LIKE Michael Armstrong AND t3.year LIKE 199
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of citedpaperid and citedpaperid of paper that has cite and writes and author	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ohad shamir	WHERE t1.authorname = ohad shamir 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citedpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citedpaperid ) DESC 
Get the number of paperid of writes that has author AND paper	SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is michael i. jordan AND year of paper is 2016	WHERE t1.authorname = michael i. jordan AND t3.year = 2016
Get the number of paperid of writes that has author AND paper	SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is michael i. jordan AND year of paper is 2016	WHERE t1.authorname = michael i. jordan AND t3.year = 2016
Get the number of paperid of writes that has author AND paper	SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is michael i. jordan AND year of paper is 2016	WHERE t1.authorname = michael i. jordan AND t3.year = 2016
Get the number of paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is ACL	WHERE t3.venuename = ACL 
Group the records based on authorid of writes	GROUP BY t1.authorid
Get the number of paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is ACL	WHERE t3.venuename = ACL 
Group the records based on authorid of writes	GROUP BY t1.authorid
Get the number of paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is ACL	WHERE t3.venuename = ACL 
Group the records based on authorid of writes	GROUP BY t1.authorid
Get the number of paperid AND authorid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2007 AND venuename of venue is CVPR	WHERE t2.year = 2007 AND t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t2.paperid ) DESC 
Get the number of paperid AND authorid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2007 AND venuename of venue is CVPR	WHERE t2.year = 2007 AND t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t2.paperid ) DESC 
Get the number of paperid AND authorid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2007 AND venuename of venue is CVPR	WHERE t2.year = 2007 AND t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t2.paperid ) DESC 
Get the number of paperid AND authorid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2007 AND venuename of venue is CVPR	WHERE t2.year = 2007 AND t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t2.paperid ) DESC 
Get the number of paperid AND authorid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2007 AND venuename of venue is CVPR	WHERE t2.year = 2007 AND t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t2.paperid ) DESC 
Get the number of paperid AND authorid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2007 AND venuename of venue is CVPR	WHERE t2.year = 2007 AND t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t2.paperid ) DESC 
Get the number of distinct paperid of venue that has paper	SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is ACL	WHERE t1.year = 2015 AND t2.venuename = ACL
Get the number of distinct paperid of venue that has paper	SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is ACL	WHERE t1.year = 2015 AND t2.venuename = ACL
Get paperid of paper	SELECT DISTINCT paperid FROM paper
Keep the records that is 2014	WHERE YEAR = 2014
Get paperid of paper	SELECT DISTINCT paperid FROM paper
Keep the records that is 2014	WHERE YEAR = 2014
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Richard Ladner AND venuename of venue is chi	WHERE t1.authorname = Richard Ladner AND t4.venuename = chi
Get the number of citingpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is Artificial Intelligence	WHERE t1.keyphrasename = Artificial Intelligence 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citingpaperid ) DESC 
Get the number of citingpaperid and citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid , COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is Artificial Intelligence	WHERE t1.keyphrasename = Artificial Intelligence 
Group the records based on citedpaperid of cite	GROUP BY t4.citedpaperid
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citingpaperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2014 AND venuename of venue is ACL	WHERE t3.year = 2014 AND t4.venuename = ACL 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2015 AND venuename of venue is NIPS	WHERE t3.year = 2015 AND t4.venuename = NIPS 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2015 AND venuename of venue is NIPS	WHERE t3.year = 2015 AND t4.venuename = NIPS 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2015 AND venuename of venue is NIPS	WHERE t3.year = 2015 AND t4.venuename = NIPS 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2015 AND venuename of venue is NIPS	WHERE t3.year = 2015 AND t4.venuename = NIPS 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2015 AND venuename of venue is NIPS	WHERE t3.year = 2015 AND t4.venuename = NIPS 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid AND keyphraseid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) , t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that year of paper is 2015 AND venuename of venue is NIPS	WHERE t3.year = 2015 AND t4.venuename = NIPS 
Group the records based on keyphraseid of keyphrase	GROUP BY t1.keyphraseid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid of paperkeyphrase that has keyphrase AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is deep reinforcement learning AND venuename of venue is nips	WHERE t1.keyphrasename = deep reinforcement learning AND t4.venuename = nips
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get paperid of paperdataset that has dataset and paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is WebKB	WHERE t1.datasetname = WebKB
Get venueid of paper	SELECT DISTINCT venueid FROM paper
Keep the records that is 2013	WHERE YEAR = 2013
Get the number of distinct citingpaperid and authorid of venue that has paper and writes and cite	SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid JOIN cite AS t4 ON t1.paperid = t4.citedpaperid
Keep the records that venuename of venue is CVPR	WHERE t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of distinct citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC 
Get the number of distinct citingpaperid and authorid of venue that has paper and writes and cite	SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid JOIN cite AS t4 ON t1.paperid = t4.citedpaperid
Keep the records that venuename of venue is CVPR	WHERE t3.venuename = CVPR 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of distinct citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC 
Get authorname AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorname , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is not chris dyer AND keyphrasename of keyphrase is syntactic parsing	WHERE t1.authorname != chris dyer AND t5.keyphrasename = syntactic parsing
Get authorname AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorname , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is not chris dyer AND keyphrasename of keyphrase is syntactic parsing	WHERE t1.authorname != chris dyer AND t5.keyphrasename = syntactic parsing
Get authorname AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorname , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is not chris dyer AND keyphrasename of keyphrase is syntactic parsing	WHERE t1.authorname != chris dyer AND t5.keyphrasename = syntactic parsing
Get authorname AND paperid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t1.authorname , t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is not chris dyer AND keyphrasename of keyphrase is syntactic parsing	WHERE t1.authorname != chris dyer AND t5.keyphrasename = syntactic parsing
Get the maximum value of YEAR of paper	SELECT MAX ( YEAR ) FROM paper
Get paperid of paper	SELECT DISTINCT paperid FROM paper
Keep the records that is the first query result	WHERE YEAR = ( the first query result ) 
Get the number of paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is benjamin mako hill	WHERE t1.authorname = benjamin mako hill 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper	ORDER BY t3.year 
Get the number of paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is benjamin mako hill	WHERE t1.authorname = benjamin mako hill 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper	ORDER BY t3.year 
Get the number of paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is ameet soni	WHERE t1.authorname = ameet soni 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper	ORDER BY t3.year 
Get the number of citingpaperid and authorid of writes that has author and cite and writes	SELECT DISTINCT COUNT ( t4.citingpaperid ) , t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN writes AS t3 ON t3.paperid = t4.citingpaperid
Keep the records that authorname of author is Daniel A Reed	WHERE t1.authorname = Daniel A Reed 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citingpaperid ) DESC 
Get the number of citingpaperid and authorid of writes that has author and cite and writes	SELECT DISTINCT COUNT ( t4.citingpaperid ) , t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN writes AS t3 ON t3.paperid = t4.citingpaperid
Keep the records that authorname of author is Daniel A Reed	WHERE t1.authorname = Daniel A Reed 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t4.citingpaperid ) DESC 
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is sigir	WHERE t2.venuename = sigir
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is sigir	WHERE t2.venuename = sigir
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is sigir	WHERE t2.venuename = sigir
Get the number of paperid of venue that has paper	SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is sigir	WHERE t2.venuename = sigir
Get citingpaperid of paper that has cite and venue	SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is ACL	WHERE t2.venuename = ACL 
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 5 that the number of distinct citedpaperid of cite is less than 5	GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5 HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5
Get citingpaperid of paper that has cite and venue	SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is ACL	WHERE t2.venuename = ACL 
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 5 that the number of distinct citedpaperid of cite is less than 5	GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5 HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5
Get citingpaperid of paper that has cite and venue	SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is ACL	WHERE t2.venuename = ACL 
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 5 that the number of distinct citedpaperid of cite is less than 5	GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5 HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5
Get citingpaperid of paper that has cite and venue	SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is ACL	WHERE t2.venuename = ACL 
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 5 that the number of distinct citedpaperid of cite is less than 5	GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5 HAVING COUNT ( DISTINCT t3.citedpaperid ) < 5
Get paperid and year of writes that has author and paper	SELECT DISTINCT t3.paperid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Mirella Lapata	WHERE t1.authorname = Mirella Lapata 
Order these records based on the year of paper and sort them in descending order, and return the top 5 records	ORDER BY t3.year DESC LIMIT 5
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2015 AND venuename of venue is pldi	WHERE t1.year = 2015 AND t2.venuename = pldi
Get journalid of paper	SELECT DISTINCT journalid FROM paper
Keep the records that is 2011	WHERE YEAR = 2011 
Group the records based on journalid	GROUP BY journalid
Get journalid of paper	SELECT DISTINCT journalid FROM paper
Keep the records that is 2011	WHERE YEAR = 2011 
Group the records based on journalid	GROUP BY journalid
Get paperid of venue that has paper	SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid = t1.venueid
Keep the records that title of paper is in the form of neural attention AND year of paper is 2016 AND venuename of venue is ACL	WHERE t1.title LIKE neural attention AND t1.year = 2016 AND t2.venuename = ACL
Get authorname of paperkeyphrase that has keyphrase and writes and author	SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid
Keep the records that keyphrasename of keyphrase is Machine Learning	WHERE t4.keyphrasename = Machine Learning 
Group the records based on authorname of author	GROUP BY t1.authorname
Order these records based on the the number of distinct paperid of writes and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t3.paperid ) DESC 
Get authorname of paperkeyphrase that has keyphrase and writes and author	SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid
Keep the records that keyphrasename of keyphrase is in the form of sensor fusion	WHERE t4.keyphrasename LIKE sensor fusion
Get authorname of paperkeyphrase that has keyphrase and writes and author	SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid
Keep the records that keyphrasename of keyphrase is in the form of sensor fusion	WHERE t4.keyphrasename LIKE sensor fusion
Get authorname of paperkeyphrase that has keyphrase and writes and author	SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid
Keep the records that keyphrasename of keyphrase is in the form of sensor fusion	WHERE t4.keyphrasename LIKE sensor fusion
Get authorname of paperkeyphrase that has keyphrase and writes and author	SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid
Keep the records that keyphrasename of keyphrase is in the form of sensor fusion	WHERE t4.keyphrasename LIKE sensor fusion
Get authorname of paperkeyphrase that has keyphrase and writes and author	SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid JOIN writes AS t3 ON t3.paperid = t2.paperid JOIN author AS t1 ON t3.authorid = t1.authorid
Keep the records that keyphrasename of keyphrase is in the form of sensor fusion	WHERE t4.keyphrasename LIKE sensor fusion
Get the number of citingpaperid of writes that has author AND cite AND writes	SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN cite AS t5 ON t3.paperid = t5.citedpaperid JOIN writes AS t4 ON t4.paperid = t5.citingpaperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is michael i. jordan AND authorname of author is dan klein	WHERE t2.authorname = michael i. jordan AND t1.authorname = dan klein
Get the number of citingpaperid of writes that has author AND cite AND writes	SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN cite AS t5 ON t3.paperid = t5.citedpaperid JOIN writes AS t4 ON t4.paperid = t5.citingpaperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is michael i. jordan AND authorname of author is dan klein	WHERE t2.authorname = michael i. jordan AND t1.authorname = dan klein
Get authorid of writes that has author AND writes	SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid = t2.authorid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN writes AS t5 ON t5.paperid = t4.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Ameet Soni AND authorname of author is Ras Bodik	WHERE t2.authorname = Ameet Soni AND t1.authorname = Ras Bodik
Get paperid of paperdataset that has dataset AND paper	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is ImageNet AND year of paper is 2014	WHERE t1.datasetname = ImageNet AND t3.year = 2014
Get journalid of writes that has author and paper	SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Takashi Matsumoto	WHERE t1.authorname = Takashi Matsumoto 
Group the records based on journalid of paper	GROUP BY t3.journalid
Get journalid of writes that has author and paper	SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Takashi Matsumoto	WHERE t1.authorname = Takashi Matsumoto 
Group the records based on journalid of paper	GROUP BY t3.journalid
Get journalid of writes that has author and paper	SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Takashi Matsumoto	WHERE t1.authorname = Takashi Matsumoto 
Group the records based on journalid of paper	GROUP BY t3.journalid
Get authorid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid JOIN author AS t5 ON t3.authorid = t5.authorid
Keep the records that keyphrasename of keyphrase is Bacterial Wilt AND year of paper is 2016	WHERE t2.keyphrasename = Bacterial Wilt AND t4.year = 2016
Get authorid of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid JOIN author AS t5 ON t3.authorid = t5.authorid
Keep the records that keyphrasename of keyphrase is Bacterial Wilt AND year of paper is 2016	WHERE t2.keyphrasename = Bacterial Wilt AND t4.year = 2016
Get year of writes that has author and paper	SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Luke S Zettlemoyer	WHERE t1.authorname = Luke S Zettlemoyer 
Order these records based on the year of paper	ORDER BY t3.year 
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is question answering AND year of paper is 2016	WHERE t1.keyphrasename = question answering AND t3.year = 2016
Get paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is question answering AND year of paper is 2016	WHERE t1.keyphrasename = question answering AND t3.year = 2016
Get the number of citingpaperid and keyphrasename of paperkeyphrase that has keyphrase and cite	SELECT DISTINCT COUNT ( t3.citingpaperid ) , t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t3 ON t2.paperid = t3.citedpaperid
Group the records based on keyphrasename of keyphrase	GROUP BY t1.keyphrasename
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t3.citingpaperid ) DESC 
Get journalid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Temporal Data	WHERE t1.keyphrasename = Temporal Data 
Group the records based on journalid of paper	GROUP BY t3.journalid
Get journalid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Temporal Data	WHERE t1.keyphrasename = Temporal Data 
Group the records based on journalid of paper	GROUP BY t3.journalid
Get paperid of paperdataset that has dataset AND paperkeyphrase AND paper AND venue AND keyphrase	SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid
Keep the records that datasetname of dataset is Jeopardy! Questions AND keyphrasename of keyphrase is Parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t5.datasetname = Jeopardy! Questions AND t1.keyphrasename = Parsing AND t2.year = 2014 AND t6.venuename = ACL
Get paperid of paperdataset that has dataset AND paperkeyphrase AND paper AND venue AND keyphrase	SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid
Keep the records that datasetname of dataset is Jeopardy! Questions AND keyphrasename of keyphrase is Parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t5.datasetname = Jeopardy! Questions AND t1.keyphrasename = Parsing AND t2.year = 2014 AND t6.venuename = ACL
Get paperid of paperdataset that has dataset AND paperkeyphrase AND paper AND venue AND keyphrase	SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid
Keep the records that datasetname of dataset is Jeopardy! Questions AND keyphrasename of keyphrase is Parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t5.datasetname = Jeopardy! Questions AND t1.keyphrasename = Parsing AND t2.year = 2014 AND t6.venuename = ACL
Get papeParsingd of paperdataset that has dataset AND paperkeyphrase AND paper AND venue AND keyphrase	SELECT DISTINCT t2.papeParsingd FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.papeParsingd = t3.papeParsingd JOIN paper AS t2 ON t2.papeParsingd = t3.papeParsingd JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid
Keep the records that datasetname of dataset is Jeopardy! Questions AND keyphrasename of keyphrase is Parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t5.datasetname = Jeopardy! Questions AND t1.keyphrasename = Parsing AND t2.year = 2014 AND t6.venuename = ACL
Get paperid of paperdataset that has dataset AND paperkeyphrase AND paper AND venue AND keyphrase	SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid = t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid = t3.paperid JOIN paper AS t2 ON t2.paperid = t3.paperid JOIN venue AS t6 ON t6.venueid = t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid = t1.keyphraseid
Keep the records that datasetname of dataset is Jeopardy! Questions AND keyphrasename of keyphrase is Parsing AND year of paper is 2014 AND venuename of venue is ACL	WHERE t5.datasetname = Jeopardy! Questions AND t1.keyphrasename = Parsing AND t2.year = 2014 AND t6.venuename = ACL
Get journalid of paper that has journal and writes and author	SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is linda shapiro	WHERE t1.authorname = linda shapiro
Get journalid of paper that has journal and writes and author	SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is linda shapiro	WHERE t1.authorname = linda shapiro
Get authorid of venue that has paper and writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is NIPS	WHERE t3.venuename = NIPS
Get authorid of venue that has paper and writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is NIPS	WHERE t3.venuename = NIPS
Get authorid of venue that has paper and writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is NIPS	WHERE t3.venuename = NIPS
Get authorid of venue that has paper and writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is NIPS	WHERE t3.venuename = NIPS
Get authorid of venue that has paper and writes	SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is NIPS	WHERE t3.venuename = NIPS
Get the number of paperid and venueid of paperkeyphrase that has keyphrase and paper and venue	SELECT DISTINCT COUNT ( t3.paperid ) , t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Group the records based on venueid of venue	GROUP BY t4.venueid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t3.paperid ) DESC 
Get the number of paperid of paper that has journal AND paperkeyphrase	SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid = t1.paperid
Keep the records that journalname of journal is Cell AND year of paper is 2015	WHERE t2.journalname = Cell AND t3.year = 2015
Get the number of paperid of paper that has journal AND paperkeyphrase	SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid = t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid = t1.paperid
Keep the records that journalname of journal is Cell AND year of paper is 2015	WHERE t2.journalname = Cell AND t3.year = 2015
Get title of writes that has author and paper	SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Donald E Knuth	WHERE t1.authorname = Donald E Knuth
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ali farhadi AND year of paper is 2016 AND venuename of venue is eccv	WHERE t1.authorname = ali farhadi AND t3.year = 2016 AND t4.venuename = eccv
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ali farhadi AND year of paper is 2016 AND venuename of venue is eccv	WHERE t1.authorname = ali farhadi AND t3.year = 2016 AND t4.venuename = eccv
Get paperid of venue that has paper AND writes AND author	SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is ali farhadi AND year of paper is 2016 AND venuename of venue is eccv	WHERE t1.authorname = ali farhadi AND t3.year = 2016 AND t4.venuename = eccv
Get paperid of paperdataset that has dataset AND paperkeyphrase AND keyphrase	SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid = t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid = t4.keyphraseid
Keep the records that datasetname of dataset is YAGO AND keyphrasename of keyphrase is Semantic Data	WHERE t1.datasetname = YAGO AND t4.keyphrasename = Semantic Data
Get the number of distinct paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is chi	WHERE t3.venuename = chi 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of distinct paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t2.paperid ) DESC 
Get the number of distinct paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is chi	WHERE t3.venuename = chi 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of distinct paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t2.paperid ) DESC 
Get the number of distinct paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is chi	WHERE t3.venuename = chi 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of distinct paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t2.paperid ) DESC 
Get the number of distinct paperid and authorid of venue that has paper and writes	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is chi	WHERE t3.venuename = chi 
Group the records based on authorid of writes	GROUP BY t1.authorid
Order these records based on the the number of distinct paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t2.paperid ) DESC 
Get the number of distinct paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is in the form of Ye Cao	WHERE t1.authorname LIKE Ye Cao 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the the number of distinct paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t3.paperid ) DESC 
Get the number of distinct paperid and year of writes that has author and paper	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is in the form of Ye Cao	WHERE t1.authorname LIKE Ye Cao 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the the number of distinct paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t3.paperid ) DESC 
Get venueid of paperdataset that has dataset and paper	SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that datasetname of dataset is ImageNet	WHERE t1.datasetname = ImageNet
Get year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper and sort them in ascending ORDER	ORDER BY t3.year ASC 
Get year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper and sort them in ascending ORDER	ORDER BY t3.year ASC 
Get year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper and sort them in ascending ORDER	ORDER BY t3.year ASC 
Get year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is deep learning	WHERE t1.keyphrasename = deep learning 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper and sort them in ascending ORDER	ORDER BY t3.year ASC 
Get paperid of paper that has journal	SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid = t1.journalid
Keep the records that journalname of journal is Academic radiology AND year of paper is 1995	WHERE t1.journalname = Academic radiology AND t2.year = 1995
Get citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citingpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing
Get citedpaperid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citingpaperid
Keep the records that keyphrasename of keyphrase is parsing	WHERE t1.keyphrasename = parsing
Get venueid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Trophic Cascade	WHERE t1.keyphrasename = Trophic Cascade
Get venueid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Trophic Cascade	WHERE t1.keyphrasename = Trophic Cascade
Get venueid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Trophic Cascade	WHERE t1.keyphrasename = Trophic Cascade
Get venueid of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Trophic Cascade	WHERE t1.keyphrasename = Trophic Cascade
Get the number of paperid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is question answering AND year of paper is greater than or equal to 2011	WHERE t1.keyphrasename = question answering AND t3.year >= 2011
Get the number of distinct citingpaperid and venueid of paperkeyphrase that has keyphrase and paper and cite	SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN cite AS t4 ON t3.paperid = t4.citedpaperid
Keep the records that keyphrasename of keyphrase is NLP	WHERE t1.keyphrasename = NLP 
Group the records based on venueid of paper	GROUP BY t3.venueid
Order these records based on the the number of distinct citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC 
Get paperid and authorid of venue that has paper and writes	SELECT DISTINCT t2.paperid , t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that venuename of venue is ACL	WHERE t3.venuename = ACL
Get citingpaperid of paper that has cite	SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 10 that the number of distinct citedpaperid of cite is greater than 10	GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) > 10 HAVING COUNT ( DISTINCT t2.citedpaperid ) > 10
Get authorid of writes that has paper	SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2015	WHERE t2.year = 2015
Get authorid of writes that has paper	SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2015	WHERE t2.year = 2015
Get the SUM of numcitedby and keyphrasename of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphrasename , SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Brian DeRenzi	WHERE t5.authorname = Brian DeRenzi 
Group the records based on keyphrasename of keyphrase	GROUP BY t1.keyphrasename
Order these records based on the the SUM of numcitedby of paper and sort them in descending ORDER	ORDER BY SUM ( t3.numcitedby ) DESC 
Get the SUM of numcitedby and keyphrasename of paperkeyphrase that has keyphrase and paper and writes and author	SELECT DISTINCT t1.keyphrasename , SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t5 ON t4.authorid = t5.authorid
Keep the records that authorname of author is Brian DeRenzi	WHERE t5.authorname = Brian DeRenzi 
Group the records based on keyphrasename of keyphrase	GROUP BY t1.keyphrasename
Order these records based on the the SUM of numcitedby of paper and sort them in descending ORDER	ORDER BY SUM ( t3.numcitedby ) DESC 
Get the number of paperid and authorid of writes that has paper	SELECT DISTINCT COUNT ( t2.paperid ) , t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid = t2.paperid
Group the records based on the number of paperid of paper authorid of writes 5 that the number of paperid of paper is greater than or equal to 5	GROUP BY t1.authorid HAVING COUNT ( t2.paperid ) >= 5 HAVING COUNT ( t2.paperid ) >= 5
Get paperid of paper	SELECT DISTINCT paperid FROM paper
Keep the records that is not 2015	WHERE YEAR != 2015
Get year of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Michael Stonebraker AND keyphrasename of keyphrase is GIS Database	WHERE t1.authorname = Michael Stonebraker AND t5.keyphrasename = GIS Database
Get year of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Michael Stonebraker AND keyphrasename of keyphrase is GIS Database	WHERE t1.authorname = Michael Stonebraker AND t5.keyphrasename = GIS Database
Get year of paperkeyphrase that has keyphrase AND paper AND writes AND author	SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN writes AS t4 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is Michael Stonebraker AND keyphrasename of keyphrase is GIS Database	WHERE t1.authorname = Michael Stonebraker AND t5.keyphrasename = GIS Database
Get journalid of paperkeyphrase that has keyphrase AND paper	SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is Trophic Cascade AND year of paper is 2010	WHERE t1.keyphrasename = Trophic Cascade AND t3.year = 2010 
Group the records based on journalid of paper	GROUP BY t3.journalid
Get the number of citingpaperid AND citedpaperid of paper that has cite AND venue	SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2016 AND venuename of venue is CVPR	WHERE t1.year = 2016 AND t2.venuename = CVPR 
Group the records based on citedpaperid of cite	GROUP BY t3.citedpaperid
Order these records based on the the number of citingpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( t3.citingpaperid ) DESC 
Get the number of citedpaperid and year of paper that has cite and writes and author	SELECT DISTINCT COUNT ( t4.citedpaperid ) , t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid = t4.citedpaperid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is luke zettlemoyer	WHERE t1.authorname = luke zettlemoyer 
Group the records based on year of paper	GROUP BY t3.year
Get paperid of paperdataset that has dataset and paper and writes	SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t3.paperid JOIN writes AS t2 ON t2.paperid = t4.paperid
Keep the records that datasetname of dataset is ImageNet	WHERE t1.datasetname = ImageNet 
Group the records based on paperid of writes	GROUP BY t2.paperid
Get paperid AND title of paper	SELECT DISTINCT paperid , title FROM paper
Keep the records that title is in the form of the effects of juicing for cancer patients AND is greater than 2006	WHERE title LIKE the effects of juicing for cancer patients AND YEAR > 2006
Get paperid of paperkeyphrase that has keyphrase AND writes AND paper AND author AND venue	SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid
Keep the records that authorname of author is Eric C. Kerrigan AND keyphrasename of keyphrase is Liquid AND venuename of venue is Automatica	WHERE t1.authorname = Eric C. Kerrigan AND t3.keyphrasename = Liquid AND t6.venuename = Automatica
Get venueid and year of writes that has author and paper	SELECT DISTINCT t3.venueid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is sergey levine	WHERE t1.authorname = sergey levine 
Group the records based on venueid of paper year of paper	GROUP BY t3.venueid , t3.year
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get keyphraseid of paper that has paperkeyphrase AND venue AND writes AND author	SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid JOIN writes AS t5 ON t5.paperid = t3.paperid JOIN author AS t1 ON t5.authorid = t1.authorid
Keep the records that authorname of author is dan klein AND venuename of venue is emnlp	WHERE t1.authorname = dan klein AND t4.venuename = emnlp
Get the number of paperid AND authorid of paperkeyphrase that has keyphrase AND paper AND writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid = t2.keyphraseid JOIN paper AS t4 ON t4.paperid = t1.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that keyphrasename of keyphrase is Neutralizing Antibody AND year of paper is 2012	WHERE t2.keyphrasename = Neutralizing Antibody AND t4.year = 2012 
Group the records based on authorid of writes	GROUP BY t3.authorid
Order these records based on the the number of paperid of paper AND sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get paperid of paperdataset that has dataset AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that datasetname of dataset is ImageNet AND year of paper is 2014 AND venuename of venue is eccv	WHERE t1.datasetname = ImageNet AND t3.year = 2014 AND t4.venuename = eccv
Get paperid of paperdataset that has dataset AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that datasetname of dataset is ImageNet AND year of paper is 2014 AND venuename of venue is eccv	WHERE t1.datasetname = ImageNet AND t3.year = 2014 AND t4.venuename = eccv
Get paperid of paperdataset that has dataset AND paper AND venue	SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that datasetname of dataset is ImageNet AND year of paper is 2014 AND venuename of venue is eccv	WHERE t1.datasetname = ImageNet AND t3.year = 2014 AND t4.venuename = eccv
Get citingpaperid of paperkeyphrase that has keyphrase AND cite AND paper AND venue	SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN cite AS t5 ON t2.paperid = t5.citingpaperid JOIN paper AS t3 ON t3.paperid = t5.citedpaperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that keyphrasename of keyphrase is Euclidean Distance AND venuename of venue is NIPS	WHERE t1.keyphrasename = Euclidean Distance AND t4.venuename = NIPS
Get the number of paperid and paperid of paperdataset that has dataset and paper and writes	SELECT DISTINCT COUNT ( t4.paperid ) , t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t4 ON t4.paperid = t2.paperid JOIN writes AS t3 ON t3.paperid = t4.paperid
Keep the records that datasetname of dataset is ImageNet	WHERE t1.datasetname = ImageNet 
Group the records based on paperid of writes	GROUP BY t3.paperid
Order these records based on the the number of paperid of paper and sort them in descending ORDER	ORDER BY COUNT ( t4.paperid ) DESC 
Get paperid AND the number of citingpaperid of paper that has cite AND venue	SELECT DISTINCT ( t1.paperid ) , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that year of paper is 2012 AND venuename of venue is ACL	WHERE t1.year = 2012 AND t2.venuename = ACL 
Group the records based on the number of citingpaperid of cite paperid of paper 7 that the number of citingpaperid of cite is greater than 7	GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid ) > 7 HAVING COUNT ( t3.citingpaperid ) > 7
Get the number of distinct citingpaperid AND keyphraseid AND paperid of paper that has cite AND paperkeyphrase AND venue	SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid ) , t1.keyphraseid , t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid = t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid = t1.paperid JOIN venue AS t3 ON t3.venueid = t2.venueid
Keep the records that year of paper is 2012 AND venuename of venue is EMNLP-CoNLL	WHERE t2.year = 2012 AND t3.venuename = EMNLP-CoNLL 
Group the records based on paperid of paper keyphraseid of paperkeyphrase	GROUP BY t2.paperid , t1.keyphraseid
Order these records based on the the number of distinct citingpaperid of cite AND sort them in descending ORDER	ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC 
Get paperid of writes that has author	SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is in the form of Noah Smith	WHERE t1.authorname LIKE Noah Smith
Get the number of distinct paperid of writes that has author AND paper	SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is not Noah Smith AND year of paper is greater than 2009 AND paperid of writes is in the first query result	WHERE t1.authorname != Noah Smith AND t3.year > 2009 AND t2.paperid IN ( the first query result ) 
Get the number of citingpaperid of paper that has cite and venue	SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is ACL	WHERE t2.venuename = ACL 
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 2 that the number of distinct citedpaperid of cite is greater than 2	GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid ) > 2 HAVING COUNT ( DISTINCT t3.citedpaperid ) > 2
Get title of paperkeyphrase that has keyphrase AND writes AND paper AND author AND venue	SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t5.paperid JOIN paper AS t2 ON t4.paperid = t2.paperid JOIN author AS t1 ON t4.authorid = t1.authorid JOIN venue AS t6 ON t6.venueid = t2.venueid
Keep the records that authorname of author is in the form of Eric C. Kerrigan AND keyphrasename of keyphrase is Liquid AND venuename of venue is Automatica	WHERE t1.authorname LIKE Eric C. Kerrigan AND t3.keyphrasename = Liquid AND t6.venuename = Automatica
Get the number of paperid of paperdataset that has dataset AND paper AND venue	SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid = t1.datasetid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that datasetname of dataset is ImageNet AND venuename of venue is cvpr	WHERE t1.datasetname = ImageNet AND t4.venuename = cvpr
Get venueid of venue	SELECT DISTINCT venueid FROM venue
Keep the records that venuename is Neuroscience	WHERE venuename = Neuroscience
Get the maximum value of year of writes that has author and paper	SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Mary Crainie	WHERE t1.authorname = Mary Crainie
Get authorid of paperkeyphrase that has keyphrase AND writes AND author	SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid = t3.keyphraseid JOIN writes AS t4 ON t4.paperid = t6.paperid JOIN writes AS t5 ON t5.paperid = t4.paperid JOIN author AS t1 ON t5.authorid = t1.authorid JOIN author AS t2 ON t4.authorid = t2.authorid
Keep the records that authorname of author is Philipp Koehn AND keyphrasename of keyphrase is Machine Translation Output	WHERE t2.authorname = Philipp Koehn AND t3.keyphrasename = Machine Translation Output
Get the number of distinct paperid of venue that has paper AND writes AND author	SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid = t3.venueid JOIN writes AS t2 ON t2.paperid = t3.paperid JOIN author AS t1 ON t2.authorid = t1.authorid
Keep the records that authorname of author is Samuel Madden AND venuename of venue is not PVLDB	WHERE t1.authorname = Samuel Madden AND t4.venuename != PVLDB
Get journalid and year of writes that has author and paper	SELECT DISTINCT t3.journalid , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Donald E Knuth	WHERE t1.authorname = Donald E Knuth 
Group the records based on journalid of paper year of paper	GROUP BY t3.journalid , t3.year
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get venueid of paper	SELECT DISTINCT venueid FROM paper
Keep the records that title is Fracture of acrylic bone cement	WHERE title = Fracture of acrylic bone cement
Get the number of paperid of venue that has paper AND writes	SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid = t2.venueid JOIN writes AS t1 ON t1.paperid = t2.paperid
Keep the records that year of paper is 2010 AND venuename of venue is sigcse	WHERE t2.year = 2010 AND t3.venuename = sigcse
Get title of paper	SELECT DISTINCT title , YEAR FROM paper
Keep the records that title is A Switching Architecture For ISDN	WHERE title = A Switching Architecture For ISDN
Get keyphraseid of paperkeyphrase that has keyphrase and paper and venue	SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid JOIN venue AS t4 ON t4.venueid = t3.venueid
Keep the records that venuename of venue is uist	WHERE t4.venuename = uist
Get paperid of writes that has author AND paper	SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid = t1.authorid JOIN paper AS t3 ON t2.paperid = t3.paperid
Keep the records that authorname of author is Su-In Lee AND year of paper is less than 2012	WHERE t1.authorname = Su-In Lee AND t3.year < 2012
Get the number of paperid and year of paperkeyphrase that has keyphrase and paper	SELECT DISTINCT COUNT ( t3.paperid ) , t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid = t1.keyphraseid JOIN paper AS t3 ON t3.paperid = t2.paperid
Keep the records that keyphrasename of keyphrase is semantic parsing	WHERE t1.keyphrasename = semantic parsing 
Group the records based on year of paper	GROUP BY t3.year
Order these records based on the year of paper and sort them in descending ORDER	ORDER BY t3.year DESC 
Get citingpaperid of paper that has cite	SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 5 that the number of distinct citedpaperid of cite is greater than or equal to 5	GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5 HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5
Get citingpaperid of paper that has cite	SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid = t2.citedpaperid
Group the records based on the number of distinct citedpaperid of cite citingpaperid of cite 5 that the number of distinct citedpaperid of cite is greater than or equal to 5	GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5 HAVING COUNT ( DISTINCT t2.citedpaperid ) >= 5
Get the number of citingpaperid and citedpaperid of paper that has cite and venue	SELECT DISTINCT t3.citedpaperid , COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid = t3.citedpaperid JOIN venue AS t2 ON t2.venueid = t1.venueid
Keep the records that venuename of venue is sigcomm	WHERE t2.venuename = sigcomm 
Group the records based on citedpaperid of cite	GROUP BY t3.citedpaperid
Order these records based on the the number of citingpaperid of cite and sort them in descending ORDER	ORDER BY COUNT ( t3.citingpaperid ) DESC 
Get title of paperkeyphrase that has keyphrase AND writes AND paper AND author	SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid = t5.keyphraseid JOIN writes AS t4 ON t4.paperid = t2.paperid JOIN paper AS t3 ON t4.paperid = t3.paperid JOIN author AS t1 ON t4.authorid = t1.authorid
Keep the records that authorname of author is in the form of Ranjit Jhala AND keyphrasename of keyphrase is Liquid Haskell	WHERE t1.authorname LIKE Ranjit Jhala AND t5.keyphrasename = Liquid Haskell
Get name of business	SELECT name FROM business
Keep the records that rating is greater than	WHERE rating > 4.5
Get name of business	SELECT name FROM business
Keep the records that rating is	WHERE rating = 3.5
Get USER id of	SELECT user_id FROM
Keep the records that name is Michelle	WHERE name = Michelle
Get state of business	SELECT state FROM business
Keep the records that name is Whataburger	WHERE name = Whataburger
Get city of category that has business	SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is MGM Grand Buffet AND category name of category is category_category_name0	WHERE t1.name = MGM Grand Buffet AND t2.category_name = category_category_name0
Get city of business	SELECT city FROM business
Keep the records that rating is less than	WHERE rating < 1.5
Get city of business	SELECT city FROM business
Keep the records that name is Taj Mahal	WHERE name = Taj Mahal
Get of review	SELECT TEXT FROM review
Keep the records that rating is less than 1	WHERE rating < 1
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that rating of business is greater than 3.5 AND category name of category is restaurant	WHERE t1.rating > 3.5 AND t2.category_name = restaurant
Get city of category that has business	SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Taj Mahal AND category name of category is restaurant	WHERE t1.name = Taj Mahal AND t2.category_name = restaurant
Get text of USER that has review	SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Keep the records that name of USER is Niloofar	WHERE t2.name = Niloofar
Get name of review that has business and USER	SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that name of USER is Niloofar	WHERE t3.name = Niloofar
Get name of review that has business AND USER	SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that rating of review is 5 AND name of USER is Niloofar	WHERE t2.rating = 5 AND t3.name = Niloofar
Get text of category that has business AND category AND review AND USER	SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN review AS t4 ON t4.business_id = t1.business_id JOIN USER AS t5 ON t5.user_id = t4.user_id
Keep the records that category name of category is Italian AND category name of category is category_category_name1 AND name of USER is Michelle	WHERE t2.category_name = Italian AND t3.category_name = category_category_name1 AND t5.name = Michelle
Get the number of distinct text of category that has business AND review	SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id
Keep the records that name of business is Cafe Zinho AND state of business is Texas AND category name of category is restaurant	WHERE t1.name = Cafe Zinho AND t1.state = Texas AND t2.category_name = restaurant
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that rating of business is 5 AND category name of category is Italian AND category name of category is restaurant	WHERE t1.rating = 5 AND t2.category_name = Italian AND t3.category_name = restaurant
Get neighbourhood name of category that has business AND category AND neighbourhood	SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id
Keep the records that city of business is Madison AND category name of category is Italian AND category name of category is restaurant	WHERE t2.city = Madison AND t3.category_name = Italian AND t4.category_name = restaurant
Get neighbourhood name of category that has business AND category AND neighbourhood	SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN category AS t4 ON t4.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id
Keep the records that city of business is Madison AND rating of business is less than 2.5 AND category name of category is Italian AND category name of category is restaurant	WHERE t2.city = Madison AND t2.rating < 2.5 AND t3.category_name = Italian AND t4.category_name = restaurant
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that state of business is Pennsylvania AND category name of category is restaurant	WHERE t1.state = Pennsylvania AND t2.category_name = restaurant
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that state of business is Pennsylvania AND category name of category is restaurant	WHERE t1.state = Pennsylvania AND t2.category_name = restaurant
Get text of category that has business AND review	SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id
Keep the records that review count of business is greater than 100 AND category name of category is Pet Groomers	WHERE t1.review_count > 100 AND t2.category_name = Pet Groomers
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is breweries	WHERE t1.city = Los Angeles AND t2.category_name = breweries
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is breweries	WHERE t1.city = Los Angeles AND t2.category_name = breweries
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is breweries	WHERE t1.city = Los Angeles AND t2.category_name = breweries
Get name of category that has business AND review AND USER	SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that name of business is Mesa Grill AND category name of category is restaurant	WHERE t1.name = Mesa Grill AND t2.category_name = restaurant
Get full address of business	SELECT full_address FROM business
Keep the records that city is Los Angeles AND name is Walmart	WHERE city = Los Angeles AND name = Walmart
Get name of category that has business AND review AND USER	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that city of business is Dallas AND category name of category is restaurant AND name of USER is Patrick	WHERE t1.city = Dallas AND t2.category_name = restaurant AND t4.name = Patrick
Get name of category that has business AND review AND USER	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that city of business is Dallas AND category name of category is restaurant AND name of USER is Patrick	WHERE t1.city = Dallas AND t2.category_name = restaurant AND t4.name = Patrick
Get name of category that has business AND review AND USER	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that category name of category is Bars AND name of USER is Patrick	WHERE t2.category_name = Bars AND t4.name = Patrick
Get name of category that has business AND review AND USER	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that rating of business is greater than or equal to 3 AND category name of category is Bars AND name of USER is Patrick	WHERE t1.rating >= 3 AND t2.category_name = Bars AND t4.name = Patrick
Get name of tip that has business AND USER	SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that name of business is Barrio Cafe AND year of tip is 2015	WHERE t1.name = Barrio Cafe AND t2.year = 2015
Get name of business	SELECT name FROM business
Keep the records that rating is less than 2 AND state is Texas	WHERE rating < 2 AND state = Texas
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is Seafood AND category name of category is restaurant	WHERE t1.city = Los Angeles AND t2.category_name = Seafood AND t3.category_name = restaurant
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is Seafood AND category name of category is restaurant	WHERE t1.city = Los Angeles AND t2.category_name = Seafood AND t3.category_name = restaurant
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is Seafood AND category name of category is restaurant	WHERE t1.city = Los Angeles AND t2.category_name = Seafood AND t3.category_name = restaurant
Get text of USER that has review	SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Keep the records that rating of review is greater than 4 AND name of USER is Patrick	WHERE t1.rating > 4 AND t2.name = Patrick
Get business id of business	SELECT business_id FROM business
Keep the records that city is Los Angeles AND name is Apple Store	WHERE city = Los Angeles AND name = Apple Store
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Dallas AND rating of business is greater than 4.5 AND category name of category is restaurant	WHERE t1.city = Dallas AND t1.rating > 4.5 AND t2.category_name = restaurant
Get neighbourhood name of category that has business AND neighbourhood	SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id = t2.business_id JOIN neighbourhood AS t1 ON t1.business_id = t2.business_id
Keep the records that name of business is Flat Top Grill AND category name of category is category_category_name0	WHERE t2.name = Flat Top Grill AND t3.category_name = category_category_name0
Get text of tip that has business	SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Vintner Grill AND likes of tip is greater than 9	WHERE t1.name = Vintner Grill AND t2.likes > 9
Get text of review that has business	SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Kabob Palace AND year of review is 2014	WHERE t1.name = Kabob Palace AND t2.year = 2014
Get name of tip that has business and USER	SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that city of business is Dallas	WHERE t1.city = Dallas
Get city of category that has business	SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is MGM Grand Buffet AND state of business is Texas AND category name of category is restaurant	WHERE t1.name = MGM Grand Buffet AND t1.state = Texas AND t2.category_name = restaurant
Get name of category that has business and tip and USER	SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN tip AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that category name of category is Pet Groomers	WHERE t2.category_name = Pet Groomers
Get text of tip that has business	SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Cafe Zinho AND state of business is Texas	WHERE t1.name = Cafe Zinho AND t1.state = Texas
Get name of category that has business and review and USER	SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that category name of category is restaurant	WHERE t2.category_name = restaurant
Get text of tip that has business	SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Cafe Zinho AND state of business is Pennsylvania AND year of tip is 2010	WHERE t1.name = Cafe Zinho AND t1.state = Pennsylvania AND t2.year = 2010
Get name of category that has business AND review AND USER	SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that category name of category is restaurant AND year of review is 2010	WHERE t2.category_name = restaurant AND t3.year = 2010
Get text of USER that has review and tip	SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id = t1.user_id JOIN tip AS t2 ON t3.user_id = t2.user_id
Keep the records that year of review is 2012	WHERE t1.year = 2012
Get text of review that has business	SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that rating of business is	WHERE t1.rating = 2.5
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND category name of category is escape games	WHERE t1.city = Madison AND t2.category_name = escape games
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND category name of category is escape games	WHERE t1.city = Madison AND t2.category_name = escape games
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND category name of category is escape games	WHERE t1.city = Madison AND t2.category_name = escape games
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND category name of category is escape games	WHERE t1.city = Madison AND t2.category_name = escape games
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND category name of category is escape games	WHERE t1.city = Madison AND t2.category_name = escape games
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that rating of business is greater than 3.5 AND category name of category is restaurant	WHERE t1.rating > 3.5 AND t2.category_name = restaurant
Get the SUM of count of category that has business AND category AND checkin	SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is restaurant AND category name of category is Moroccan	WHERE t1.city = Los Angeles AND t2.category_name = restaurant AND t3.category_name = Moroccan
Get the SUM of count of category that has business AND category AND checkin	SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is Moroccan AND category name of category is restaurant AND day of checkin is Friday	WHERE t1.city = Los Angeles AND t2.category_name = Moroccan AND t3.category_name = restaurant AND t4.day = Friday
Get the SUM of count AND day of category that has business AND category AND checkin	SELECT t4.day , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND category name of category is Moroccan AND category name of category is restaurant	WHERE t1.city = Los Angeles AND t2.category_name = Moroccan AND t3.category_name = restaurant 
Group the records based on day of checkin	GROUP BY t4.day
Get the SUM of count AND state of category that has business AND category AND checkin	SELECT t1.state , SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id JOIN checkin AS t4 ON t4.business_id = t1.business_id
Keep the records that category name of category is Italian AND category name of category is Delis AND day of checkin is Sunday	WHERE t2.category_name = Italian AND t3.category_name = Delis AND t4.day = Sunday 
Group the records based on state of business	GROUP BY t1.state
Get the number of distinct text of USER that has review	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Keep the records that year of review is 2015 AND name of USER is Niloofar	WHERE t1.year = 2015 AND t2.name = Niloofar
Get the average value of rating of USER that has review	SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Keep the records that name of USER is Michelle	WHERE t2.name = Michelle
Get count of checkin that has business	SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Cafe Zinho AND day of checkin is Friday	WHERE t1.name = Cafe Zinho AND t2.day = Friday
Get the number of distinct name of review that has business AND USER	SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that city of business is Pittsburgh AND name of business is Sushi Too	WHERE t1.city = Pittsburgh AND t1.name = Sushi Too
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Pittsburgh AND rating of business is 4.5 AND category name of category is restaurant	WHERE t1.city = Pittsburgh AND t1.rating = 4.5 AND t2.category_name = restaurant
Get the number of distinct TEXT of tip	SELECT COUNT ( DISTINCT TEXT ) FROM tip
Keep the records that is 2015	WHERE YEAR = 2015
Get the SUM of likes of USER that has tip	SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id
Keep the records that name of USER is Niloofar	WHERE t2.name = Niloofar
Get the SUM of likes of tip that has business	SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that name of business is Cafe Zinho	WHERE t1.name = Cafe Zinho
Get the SUM of likes of tip that has business AND USER	SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.uCafe Zinhor_id = t2.uCafe Zinhor_id
Keep the records that name of business is Cafe Zinho AND name of USER is Niloofar	WHERE t1.name = Cafe Zinho AND t3.name = Niloofar
Get the number of distinct text of USER that has tip	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id
Keep the records that year of tip is 2010 AND name of USER is Michelle	WHERE t1.year = 2010 AND t2.name = Michelle
Get the number of distinct text of USER that has tip	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id
Keep the records that year of tip is 2010 AND name of USER is Michelle	WHERE t1.year = 2010 AND t2.name = Michelle
Get the number of distinct text of USER that has tip	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id
Keep the records that month of tip is April AND name of USER is Michelle	WHERE t1.month = April AND t2.name = Michelle
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that state of business is Texas AND category name of category is restaurant	WHERE t1.state = Texas AND t2.category_name = restaurant
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Dallas AND rating of business is greater than 3.5 AND category name of category is Bars	WHERE t1.city = Dallas AND t1.rating > 3.5 AND t2.category_name = Bars
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Dallas AND rating of business is greater than 3.5 AND category name of category is Bars	WHERE t1.city = Dallas AND t1.rating > 3.5 AND t2.category_name = Bars
Get the number of distinct name of category that has business AND review AND USER	SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that city of business is Dallas AND name of business is Texas de Brazil AND state of business is Texas AND category name of category is restaurant	WHERE t1.city = Dallas AND t1.name = Texas de Brazil AND t1.state = Texas AND t2.category_name = restaurant
Get the number of distinct name of review that has business AND USER	SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that name of business is Bistro Di Napoli AND year of review is 2015	WHERE t1.name = Bistro Di Napoli AND t2.year = 2015
Get the number of distinct name of category that has business AND neighbourhood	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id
Keep the records that city of business is Dallas AND category name of category is restaurant AND neighbourhood name of neighbourhood is Hazelwood	WHERE t1.city = Dallas AND t3.category_name = restaurant AND t2.neighbourhood_name = Hazelwood
Get the number of distinct business id of business	SELECT COUNT ( DISTINCT business_id ) FROM business
Keep the records that city is Dallas AND name is Starbucks AND state is Texas	WHERE city = Dallas AND name = Starbucks AND state = Texas
Get review count of business	SELECT review_count FROM business
Keep the records that name is Acacia Cafe	WHERE name = Acacia Cafe
Get the average value of count AND day of category that has business AND checkin	SELECT AVG ( t3.count ) , t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN checkin AS t3 ON t3.business_id = t1.business_id
Keep the records that name of business is Barrio Cafe AND category name of category is restaurant	WHERE t1.name = Barrio Cafe AND t2.category_name = restaurant 
Group the records based on day of checkin	GROUP BY t3.day
Get the number of distinct name of neighbourhood that has business	SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND neighbourhood name of neighbourhood is Stone Meadows	WHERE t1.city = Madison AND t2.neighbourhood_name = Stone Meadows
Get the number of distinct text of USER that has review	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Keep the records that name of USER is Adrienne	WHERE t2.name = Adrienne
Get the number of distinct text of USER that has review	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Keep the records that month of review is March AND year of review is 2014 AND name of USER is Michelle	WHERE t1.month = March AND t1.year = 2014 AND t2.name = Michelle
Get the number of distinct name of review that has business AND USER	SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that year of review is 2010 AND name of USER is Michelle	WHERE t2.year = 2010 AND t3.name = Michelle
Get the number of distinct name of review that has business AND USER	SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN USER AS t3 ON t3.user_id = t2.user_id
Keep the records that city of business is San Diego AND year of review is 2010 AND name of USER is Christine	WHERE t1.city = San Diego AND t2.year = 2010 AND t3.name = Christine
Get the number of distinct business id of business	SELECT COUNT ( DISTINCT business_id ) FROM business
Keep the records that city is Los Angeles AND name is Target	WHERE city = Los Angeles AND name = Target
Get the number of distinct name of category that has business AND review AND USER	SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that city of business is Dallas AND category name of category is Irish Pub	WHERE t1.city = Dallas AND t2.category_name = Irish Pub
Get the average value of rating of review	SELECT AVG ( rating ) FROM review
Keep the records that is 2014	WHERE YEAR = 2014
Get the number of distinct name of category that has business AND review AND USER	SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN review AS t3 ON t3.business_id = t1.business_id JOIN USER AS t4 ON t4.user_id = t3.user_id
Keep the records that name of business is Vintner Grill AND category name of category is category_category_name0 AND year of review is 2010	WHERE t1.name = Vintner Grill AND t2.category_name = category_category_name0 AND t3.year = 2010
Get the number of distinct text of neighbourhood that has business and review	SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id JOIN review AS t3 ON t3.business_id = t2.business_id
Keep the records that neighbourhood name of neighbourhood is South Summerlin	WHERE t1.neighbourhood_name = South Summerlin
Get the number of distinct name of	SELECT COUNT ( DISTINCT name ) FROM
Keep the records that name is Michelle	WHERE name = Michelle
Get the number of distinct name of category that has business	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that category name of category is restaurant	WHERE t2.category_name = restaurant
Get the number of distinct city of business	SELECT COUNT ( DISTINCT city ) FROM business
Keep the records that name is Panda Express	WHERE name = Panda Express
Get the number of distinct text of USER that has tip	SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id = t1.user_id
Keep the records that name of USER is Michelle	WHERE t2.name = Michelle
Get the SUM of count of checkin that has business and neighbourhood	SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id
Keep the records that neighbourhood name of neighbourhood is Brighton Heights	WHERE t2.neighbourhood_name = Brighton Heights
Get the number of distinct TEXT of review	SELECT COUNT ( DISTINCT TEXT ) FROM review
Keep the records that is March	WHERE MONTH = March
Get the number of distinct TEXT of tip	SELECT COUNT ( DISTINCT TEXT ) , MONTH FROM tip
Group the records based on	GROUP BY
Get the number of distinct neighbourhood name of neighbourhood that has business	SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id
Keep the records that city of business is Madison AND rating of business is 5	WHERE t2.city = Madison AND t2.rating = 5
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that state of business is Texas AND category name of category is Moroccan AND category name of category is restaurant	WHERE t1.state = Texas AND t2.category_name = Moroccan AND t3.category_name = restaurant
Get name of checkin that has business	SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Group the records based on name of business	GROUP BY t1.name
Order these records based on the the SUM of count of checkin and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t2.count ) DESC LIMIT 1
Get neighbourhood name of neighbourhood that has business	SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id = t2.business_id
Keep the records that city of business is Madison	WHERE t2.city = Madison 
Group the records based on neighbourhood name of neighbourhood	GROUP BY t1.neighbourhood_name
Order these records based on the the number of distinct name of business and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Dallas AND rating of business is greater than 3.5 AND category name of category is Mexican AND category name of category is restaurant	WHERE t1.city = Dallas AND t1.rating > 3.5 AND t2.category_name = Mexican AND t3.category_name = restaurant
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Dallas AND rating of business is greater than 3.5 AND category name of category is Mexican AND category name of category is restaurant	WHERE t1.city = Dallas AND t1.rating > 3.5 AND t2.category_name = Mexican AND t3.category_name = restaurant
Get name of category that has business AND category	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Dallas AND state of business is Texas AND category name of category is Valet Service AND category name of category is restaurant	WHERE t1.city = Dallas AND t1.state = Texas AND t2.category_name = Valet Service AND t3.category_name = restaurant
Get name of category that has business AND category AND neighbourhood	SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id = t1.business_id JOIN category AS t4 ON t4.business_id = t1.business_id JOIN neighbourhood AS t2 ON t2.business_id = t1.business_id
Keep the records that city of business is Madison AND category name of category is Italian AND category name of category is restaurant AND neighbourhood name of neighbourhood is Meadowood	WHERE t1.city = Madison AND t3.category_name = Italian AND t4.category_name = restaurant AND t2.neighbourhood_name = Meadowood
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that city of business is Los Angeles AND rating of business is greater than 3 AND review count of business is greater than 30 AND category name of category is Bars	WHERE t1.city = Los Angeles AND t1.rating > 3 AND t1.review_count > 30 AND t2.category_name = Bars
Get the number of distinct name of category that has business AND category	SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id JOIN category AS t3 ON t3.business_id = t1.business_id
Keep the records that city of business is Edinburgh AND category name of category is restaurant AND category name of category is Egyptian	WHERE t1.city = Edinburgh AND t2.category_name = restaurant AND t3.category_name = Egyptian
Get name of USER that has review	SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id = t1.user_id
Group the records based on the average value of rating of review name of USER 3 that the average value of rating of review is less than 3	GROUP BY t2.name HAVING AVG ( t1.rating ) < 3 HAVING AVG ( t1.rating ) < 3
Get name of review that has business	SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Keep the records that month of review is April	WHERE t2.month = April 
Group the records based on name of business	GROUP BY t1.name
Order these records based on the the number of distinct text of review and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1
Get name of category that has business	SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id = t1.business_id
Group the records based on name of business	GROUP BY t1.name
Order these records based on the the number of distinct category name of category and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1
Get homepage of journal	SELECT homepage FROM journal
Keep the records that name is PVLDB	WHERE name = PVLDB
Get homepage of author	SELECT homepage FROM author
Keep the records that name is H. V. Jagadish	WHERE name = H. V. Jagadish
Get abstract of publication	SELECT abstract FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get of publication	SELECT YEAR FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get of publication	SELECT YEAR FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get title of publication	SELECT title FROM publication
Keep the records that is greater than 2000	WHERE YEAR > 2000
Get homepage of conference	SELECT homepage FROM conference
Keep the records that name is VLDB	WHERE name = VLDB
Get keyword of keyword	SELECT keyword FROM keyword
Get name of organization	SELECT name FROM organization
Get name of organization	SELECT name FROM organization
Keep the records that continent is North America	WHERE continent = North America
Get homepage of organization	SELECT homepage FROM organization
Keep the records that name is University of Michigan	WHERE name = University of Michigan
Get reference num of publication	SELECT reference_num FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get reference num of publication	SELECT reference_num FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get citation num of publication	SELECT citation_num FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get citation num of publication	SELECT citation_num FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable
Get title of publication	SELECT title FROM publication
Keep the records that citation num is greater than 200	WHERE citation_num > 200
Get name of publication that has journal AND writes AND author	SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of journal is PVLDB AND year of publication is 2010	WHERE t2.name = PVLDB AND t4.year = 2010
Get name of publication that has journal AND writes AND author	SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of journal is PVLDB AND year of publication is greater than 2010	WHERE t2.name = PVLDB AND t4.year > 2010
Get name of publication that has conference AND writes AND author	SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB AND year of publication is 2002	WHERE t2.name = VLDB AND t4.year = 2002
Get name of publication that has conference AND writes AND author	SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB AND year of publication is less than 2002	WHERE t2.name = VLDB AND t4.year < 2002
Get name of publication that has conference AND writes AND author	SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB AND year of publication is less than 2002 AND year of publication is greater than 1995	WHERE t2.name = VLDB AND t4.year < 2002 AND t4.year > 1995
Get name of DOMAIN that has DOMAIN journal and journal	SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did = t1.did JOIN journal AS t2 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t2.name = PVLDB
Get name of publication that has journal and writes and author	SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of journal is PVLDB	WHERE t2.name = PVLDB
Get name of organization that has author	SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get name of publication that has conference and writes and author	SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get name of publication that has journal and writes and author	SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get name of DOMAIN author that has author and DOMAIN	SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid = t1.aid JOIN DOMAIN AS t2 ON t2.did = t3.did
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get name of writes that has author and publication	SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that title of publication is Making database systems usable	WHERE t3.title = Making database systems usable
Get name of publication that has conference	SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that title of publication is Making database systems usable	WHERE t2.title = Making database systems usable
Get title of writes that has author and publication	SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get title of publication that has conference	SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB
Get title of publication that has journal	SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB
Get title of publication that has journal	SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND year of publication is greater than 2000	WHERE t1.name = PVLDB AND t2.year > 2000
Get title of publication that has conference	SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND year of publication is greater than 2000	WHERE t1.name = VLDB AND t2.year > 2000
Get title of publication that has journal AND writes AND author	SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of journal is PVLDB	WHERE t1.name = H. V. Jagadish AND t2.name = PVLDB
Get title of publication that has conference AND writes AND author	SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of conference is VLDB	WHERE t1.name = H. V. Jagadish AND t2.name = VLDB
Get title of writes that has author AND publication	SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t3.year > 2000
Get title of publication that has journal AND writes AND author	SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of journal is PVLDB AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t2.name = PVLDB AND t4.year > 2000
Get title of publication that has conference AND writes AND author	SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of conference is VLDB AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t2.name = VLDB AND t4.year > 2000
Get name of DOMAIN conference that has conference and DOMAIN	SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid = t1.cid JOIN DOMAIN AS t2 ON t2.did = t3.did
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB
Get name of publication that has conference and writes and author	SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB
Get keyword of DOMAIN that has DOMAIN keyword and keyword	SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did = t2.did JOIN keyword AS t1 ON t1.kid = t2.kid
Keep the records that name of DOMAIN is Databases	WHERE t3.name = Databases
Get title of publication keyword that has keyword and publication	SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid
Keep the records that keyword of keyword is Natural Language	WHERE t1.keyword = Natural Language
Get keyword of publication keyword that has keyword and publication	SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t2 ON t2.pid = t3.pid
Keep the records that title of publication is Making database systems usable	WHERE t2.title = Making database systems usable
Get keyword of publication keyword that has keyword and publication and writes and author	SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that name of author is H. V. Jagadish	WHERE t2.name = H. V. Jagadish
Get keyword of publication keyword that has keyword and publication and conference	SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB
Get keyword of publication keyword that has keyword and publication and journal	SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that name of journal is PVLDB	WHERE t3.name = PVLDB
Get keyword of organization that has author and writes and publication and publication keyword and keyword	SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid = t2.oid JOIN writes AS t4 ON t4.aid = t2.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN publication_keyword AS t3 ON t5.pid = t3.pid JOIN keyword AS t1 ON t3.kid = t1.kid
Keep the records that name of organization is University of Michigan	WHERE t6.name = University of Michigan
Get title of publication keyword that has keyword AND publication AND writes AND author	SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t5 ON t5.pid = t3.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that name of author is H. V. Jagadish AND keyword of keyword is User Study	WHERE t2.name = H. V. Jagadish AND t1.keyword = User Study
Get title of publication keyword that has keyword AND publication AND journal	SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t4 ON t4.pid = t2.pid JOIN journal AS t3 ON t4.jid = t3.jid
Keep the records that name of journal is PVLDB AND keyword of keyword is Keyword search	WHERE t3.name = PVLDB AND t1.keyword = Keyword search
Get title of publication keyword that has keyword AND publication AND conference	SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t4 ON t4.pid = t3.pid JOIN conference AS t2 ON t4.cid = t2.cid
Keep the records that name of conference is VLDB AND keyword of keyword is Information Retrieval	WHERE t2.name = VLDB AND t1.keyword = Information Retrieval
Get name of publication keyword that has keyword and publication and writes and author	SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database
Get name of DOMAIN author that has author and DOMAIN and organization	SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid
Keep the records that name of DOMAIN is Databases	WHERE t3.name = Databases
Get name of DOMAIN author that has author AND DOMAIN AND organization	SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid
Keep the records that name of DOMAIN is Databases AND continent of organization is North America	WHERE t3.name = Databases AND t2.continent = North America
Get name of organization that has author	SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan
Get name of DOMAIN author that has author AND DOMAIN AND organization	SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid
Keep the records that name of DOMAIN is Databases AND name of organization is University of Michigan	WHERE t3.name = Databases AND t2.name = University of Michigan
Get title of organization that has author and writes and publication	SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan
Get title of organization that has author AND writes AND publication	SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan AND year of publication is greater than 2000	WHERE t2.name = University of Michigan AND t4.year > 2000
Get title of organization that has author AND writes AND publication AND conference	SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN conference AS t2 ON t5.cid = t2.cid
Keep the records that name of conference is VLDB AND name of organization is University of Michigan	WHERE t2.name = VLDB AND t3.name = University of Michigan
Get title of organization that has author AND writes AND publication AND journal	SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid
Keep the records that name of journal is PVLDB AND name of organization is University of Michigan	WHERE t3.name = PVLDB AND t2.name = University of Michigan
Get title of organization that has author AND writes AND publication AND journal	SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid
Keep the records that name of journal is PVLDB AND name of organization is University of Michigan AND year of publication is greater than 2000	WHERE t3.name = PVLDB AND t2.name = University of Michigan AND t5.year > 2000
Get title of DOMAIN that has DOMAIN publication AND publication	SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid
Keep the records that name of DOMAIN is Databases AND citation num of publication is greater than 200	WHERE t2.name = Databases AND t3.citation_num > 200
Get title of publication that has journal	SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND citation num of publication is greater than 200	WHERE t1.name = PVLDB AND t2.citation_num > 200
Get title of publication that has conference	SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND citation num of publication is greater than 200	WHERE t1.name = VLDB AND t2.citation_num > 200
Get title of writes that has author AND publication	SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish AND citation num of publication is greater than 200	WHERE t1.name = H. V. Jagadish AND t3.citation_num > 200
Get title of publication that has journal AND writes AND author	SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of journal is PVLDB AND citation num of publication is greater than 200	WHERE t1.name = H. V. Jagadish AND t2.name = PVLDB AND t4.citation_num > 200
Get title of publication that has conference AND writes AND author	SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of conference is VLDB AND citation num of publication is greater than 200	WHERE t1.name = H. V. Jagadish AND t2.name = VLDB AND t4.citation_num > 200
Get title of publication	SELECT title FROM publication
Keep the records that citation num is greater than 200 AND is greater than 2000	WHERE citation_num > 200 AND YEAR > 2000
Get title of DOMAIN that has DOMAIN publication AND publication	SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid
Keep the records that name of DOMAIN is Databases AND citation num of publication is greater than 200 AND year of publication is greater than 2000	WHERE t2.name = Databases AND t3.citation_num > 200 AND t3.year > 2000
Get title of publication that has journal	SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND citation num of publication is greater than 200 AND year of publication is greater than 2000	WHERE t1.name = PVLDB AND t2.citation_num > 200 AND t2.year > 2000
Get title of publication that has conference	SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND citation num of publication is greater than 200 AND year of publication is greater than 2000	WHERE t1.name = VLDB AND t2.citation_num > 200 AND t2.year > 2000
Get the number of distinct name of publication that has conference and writes and author	SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get the number of distinct name of publication that has journal and writes and author	SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get the number of distinct title and year of writes that has author and publication	SELECT COUNT ( DISTINCT t3.title ) , t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish 
Group the records based on year of publication	GROUP BY t3.year
Get the number of distinct name of writes that has author and publication	SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that title of publication is Making database systems usable	WHERE t3.title = Making database systems usable
Get the SUM of citation num of publication	SELECT YEAR , SUM ( citation_num ) FROM publication
Keep the records that title is Making database systems usable	WHERE title = Making database systems usable 
Group the records based on	GROUP BY
Get the number of distinct title of publication that has cite AND publication	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid = t1.cited JOIN publication AS t2 ON t2.pid = t1.citing
Keep the records that title of publication is Making database systems usable AND year of publication is less than 2010	WHERE t3.title = Making database systems usable AND t2.year < 2010
Get the number of distinct title of writes that has author and publication	SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get the number of distinct title of publication that has conference	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB
Get the number of distinct title of publication that has journal	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB
Get the number of distinct title of publication	SELECT COUNT ( DISTINCT title ) FROM publication
Keep the records that is greater than 2000	WHERE YEAR > 2000
Get the number of distinct title of publication that has journal	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND year of publication is greater than 2000	WHERE t1.name = PVLDB AND t2.year > 2000
Get the number of distinct title of publication that has conference	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND year of publication is greater than 2000	WHERE t1.name = VLDB AND t2.year > 2000
Get the number of distinct title of publication that has journal AND writes AND author	SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of journal is PVLDB	WHERE t1.name = H. V. Jagadish AND t2.name = PVLDB
Get the number of distinct title of publication that has conference AND writes AND author	SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of conference is VLDB	WHERE t1.name = H. V. Jagadish AND t2.name = VLDB
Get the number of distinct title of writes that has author AND publication	SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t3.year > 2000
Get the number of distinct title of publication that has journal AND writes AND author	SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of journal is PVLDB AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t2.name = PVLDB AND t4.year > 2000
Get the number of distinct title of publication that has conference AND writes AND author	SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of conference is VLDB AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t2.name = VLDB AND t4.year > 2000
Get the number of distinct keyword of keyword	SELECT COUNT ( DISTINCT keyword ) FROM keyword
Get the number of distinct keyword of DOMAIN that has DOMAIN keyword and keyword	SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did = t2.did JOIN keyword AS t1 ON t1.kid = t2.kid
Keep the records that name of DOMAIN is Databases	WHERE t3.name = Databases
Get the number of distinct title of publication keyword that has keyword and publication	SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid
Keep the records that keyword of keyword is Natural Language	WHERE t1.keyword = Natural Language
Get the number of distinct keyword of publication keyword that has keyword and publication	SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t2 ON t2.pid = t3.pid
Keep the records that title of publication is Making database systems usable	WHERE t2.title = Making database systems usable
Get the number of distinct keyword of publication keyword that has keyword and publication and writes and author	SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that name of author is H. V. Jagadish	WHERE t2.name = H. V. Jagadish
Get the number of distinct keyword of publication keyword that has keyword and publication and conference	SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB
Get the number of distinct keyword of publication keyword that has keyword and publication and journal	SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that name of journal is PVLDB	WHERE t3.name = PVLDB
Get the number of distinct keyword of organization that has author and writes and publication and publication keyword and keyword	SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid = t2.oid JOIN writes AS t4 ON t4.aid = t2.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN publication_keyword AS t3 ON t5.pid = t3.pid JOIN keyword AS t1 ON t3.kid = t1.kid
Keep the records that name of organization is University of Michigan	WHERE t6.name = University of Michigan
Get the number of distinct title of publication keyword that has keyword AND publication AND writes AND author	SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t5 ON t5.pid = t3.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that name of author is H. V. Jagadish AND keyword of keyword is User Study	WHERE t2.name = H. V. Jagadish AND t1.keyword = User Study
Get the number of distinct title of publication keyword that has keyword AND publication AND journal	SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t4 ON t4.pid = t2.pid JOIN journal AS t3 ON t4.jid = t3.jid
Keep the records that name of journal is PVLDB AND keyword of keyword is Keyword search	WHERE t3.name = PVLDB AND t1.keyword = Keyword search
Get the number of distinct title of publication keyword that has keyword AND publication AND conference	SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid = t1.kid JOIN publication AS t4 ON t4.pid = t3.pid JOIN conference AS t2 ON t4.cid = t2.cid
Keep the records that name of conference is VLDB AND keyword of keyword is Information Retrieval	WHERE t2.name = VLDB AND t1.keyword = Information Retrieval
Get the number of distinct name of publication keyword that has keyword and publication and writes and author	SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database
Get the SUM of citation num of publication keyword that has keyword and publication	SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid = t1.kid JOIN publication AS t3 ON t3.pid = t2.pid
Keep the records that keyword of keyword is Natural Language	WHERE t1.keyword = Natural Language
Get the number of distinct name of organization	SELECT COUNT ( DISTINCT name ) FROM organization
Get the number of distinct nNorth Americae of organization	SELECT COUNT ( DISTINCT nNorth Americae ) FROM organization
Keep the records that continent is North America	WHERE continent = North America
Get the number of distinct name of DOMAIN author that has author and DOMAIN and organization	SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid
Keep the records that name of DOMAIN is Databases	WHERE t3.name = Databases
Get the number of distinct name of DOMAIN author that has author AND DOMAIN AND organization	SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid
Keep the records that name of DOMAIN is Databases AND continent of organization is North America	WHERE t3.name = Databases AND t2.continent = North America
Get the number of distinct title of organization that has author and writes and publication	SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan
Get the number of distinct title of DOMAIN author that has author AND DOMAIN AND DOMAIN publication AND organization AND publication	SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t6.did JOIN domain_publication AS t2 ON t3.did = t2.did JOIN organization AS t5 ON t5.oid = t1.oid JOIN publication AS t4 ON t4.pid = t2.pid
Keep the records that name of DOMAIN is Databases AND name of organization is University of Michigan	WHERE t3.name = Databases AND t5.name = University of Michigan
Get the number of distinct title of organization that has author AND writes AND publication	SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan AND year of publication is greater than 2000	WHERE t2.name = University of Michigan AND t4.year > 2000
Get the number of distinct title of organization that has author AND writes AND publication AND conference	SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN conference AS t2 ON t5.cid = t2.cid
Keep the records that name of conference is VLDB AND name of organization is University of Michigan	WHERE t2.name = VLDB AND t3.name = University of Michigan
Get the number of distinct title of organization that has author AND writes AND publication AND journal	SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid
Keep the records that name of journal is PVLDB AND name of organization is University of Michigan	WHERE t3.name = PVLDB AND t2.name = University of Michigan
Get the number of distinct title of organization that has author AND writes AND publication AND journal	SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t4 ON t4.aid = t1.aid JOIN publication AS t5 ON t4.pid = t5.pid JOIN journal AS t3 ON t5.jid = t3.jid
Keep the records that name of journal is PVLDB AND name of organization is University of Michigan AND year of publication is greater than 2000	WHERE t3.name = PVLDB AND t2.name = University of Michigan AND t5.year > 2000
Get the SUM of citation num of organization that has author and writes and publication	SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan
Get the number of distinct name of organization that has author	SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan
Get the number of distinct naUniversity of Michigan of DOMAIN author that has author AND DOMAIN AND organization	SELECT COUNT ( DISTINCT t1.naUniversity of Michigan ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t4.did JOIN organization AS t2 ON t2.oid = t1.oid
Keep the records that naUniversity of Michigan of DOMAIN is Databases AND naUniversity of Michigan of organization is University of Michigan	WHERE t3.naUniversity of Michigan = Databases AND t2.naUniversity of Michigan = University of Michigan
Get the number of distinct name of publication that has journal and writes and author	SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of journal is PVLDB	WHERE t2.name = PVLDB
Get the number of distinct name of publication that has conference and writes and author	SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB
Get the number of distinct title of publication that has journal	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND year of publication is less than 2000	WHERE t1.name = PVLDB AND t2.year < 2000
Get the number of distinct title of publication that has conference	SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND year of publication is less than 2000	WHERE t1.name = VLDB AND t2.year < 2000
Get the SUM of citation num of publication that has journal	SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB
Get citation num of publication that has journal	SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB
Get the SUM of citation num of publication that has journal	SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND year of publication is 2005	WHERE t1.name = PVLDB AND t2.year = 2005
Get the SUM of citation num of publication that has journal	SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND year of publication is less than 2005	WHERE t1.name = PVLDB AND t2.year < 2005
Get the SUM of citation num and year of publication that has journal	SELECT t2.year , SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB 
Group the records based on year of publication	GROUP BY t2.year
Get the number of distinct title and year of publication that has journal	SELECT COUNT ( DISTINCT t2.title ) , t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB 
Group the records based on year of publication	GROUP BY t2.year
Get the SUM of citation num of publication that has conference	SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB
Get citation num of publication that has conference	SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB
Get the SUM of citation num of publication that has conference	SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND year of publication is 2005	WHERE t1.name = VLDB AND t2.year = 2005
Get the SUM of citation num of publication that has conference	SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND year of publication is less than 2005	WHERE t1.name = VLDB AND t2.year < 2005
Get the SUM of citation num and year of publication that has conference	SELECT t2.year , SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB 
Group the records based on year of publication	GROUP BY t2.year
Get the number of distinct title and year of publication that has conference	SELECT COUNT ( DISTINCT t2.title ) , t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB 
Group the records based on year of publication	GROUP BY t2.year
Get name of writes that has author AND publication AND writes	SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid = t2.aid JOIN publication AS t7 ON t4.pid = t7.pid JOIN writes AS t5 ON t5.pid = t7.pid JOIN writes AS t6 ON t6.pid = t7.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t3 ON t6.aid = t3.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Divesh Srivastava	WHERE t1.name = H. V. Jagadish AND t3.name = Divesh Srivastava
Get name of writes that has author AND publication AND writes	SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND year of publication is greater than 2000	WHERE t1.name = H. V. Jagadish AND t5.year > 2000
Get title of writes that has author AND publication AND writes	SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Divesh Srivastava	WHERE t2.name = H. V. Jagadish AND t1.name = Divesh Srivastava
Get title of writes that has author AND publication AND writes	SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Yunyao Li AND year of publication is greater than 2005	WHERE t2.name = H. V. Jagadish AND t1.name = Yunyao Li AND t5.year > 2005
Get title of publication that has journal AND writes AND author	SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid = t4.jid JOIN writes AS t3 ON t3.pid = t6.pid JOIN writes AS t5 ON t5.pid = t6.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t2 ON t3.aid = t2.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Yunyao Li AND name of journal is PVLDB	WHERE t2.name = H. V. Jagadish AND t1.name = Yunyao Li AND t4.name = PVLDB
Get title of publication that has journal AND writes AND author	SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid = t4.jid JOIN writes AS t3 ON t3.pid = t6.pid JOIN writes AS t5 ON t5.pid = t6.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t2 ON t3.aid = t2.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Yunyao Li AND name of journal is PVLDB AND year of publication is greater than 2005	WHERE t2.name = H. V. Jagadish AND t1.name = Yunyao Li AND t4.name = PVLDB AND t6.year > 2005
Get name of writes that has author and publication and writes	SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get title of writes that has author AND publication AND writes	SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Divesh Srivastava AND year of publication is less than 2000	WHERE t2.name = H. V. Jagadish AND t1.name = Divesh Srivastava AND t5.year < 2000
Get name of publication that has cite and publication and writes and author	SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid = t5.citing JOIN publication AS t6 ON t6.pid = t5.cited JOIN writes AS t3 ON t3.pid = t7.pid JOIN writes AS t4 ON t4.pid = t6.pid JOIN author AS t2 ON t3.aid = t2.aid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get the number of distinct title of writes that has author AND publication AND writes	SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Divesh Srivastava	WHERE t2.name = H. V. Jagadish AND t1.name = Divesh Srivastava
Get the number of distinct title of writes that has author AND publication AND writes	SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Divesh Srivastava AND year of publication is less than 2000	WHERE t2.name = H. V. Jagadish AND t1.name = Divesh Srivastava AND t5.year < 2000
Get the number of distinct title of writes that has author AND publication AND writes	SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid = t2.aid JOIN publication AS t7 ON t4.pid = t7.pid JOIN writes AS t5 ON t5.pid = t7.pid JOIN writes AS t6 ON t6.pid = t7.pid JOIN author AS t1 ON t5.aid = t1.aid JOIN author AS t3 ON t6.aid = t3.aid
Keep the records that name of author is Cong Yu AND name of author is H. V. Jagadish AND name of author is Yunyao Li	WHERE t2.name = Cong Yu AND t1.name = H. V. Jagadish AND t3.name = Yunyao Li
Get the number of distinct name of writes that has author and publication and writes	SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get the number of distinct name of publication that has cite and publication and writes and author	SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid = t5.citing JOIN publication AS t6 ON t6.pid = t5.cited JOIN writes AS t3 ON t3.pid = t7.pid JOIN writes AS t4 ON t4.pid = t6.pid JOIN author AS t2 ON t3.aid = t2.aid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish
Get title of writes that has author AND publication AND writes	SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is H. V. Jagadish AND name of author is Divesh Srivastava AND citation num of publication is greater than 200	WHERE t2.name = H. V. Jagadish AND t1.name = Divesh Srivastava AND t5.citation_num > 200
Get name of publication keyword that has keyword and publication and writes and author	SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on name of author	GROUP BY t2.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
Get name of publication keyword that has keyword and publication and conference	SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on name of conference	GROUP BY t2.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
Get name of publication keyword that has keyword and publication and conference	SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on name of conference	GROUP BY t2.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
Get name of publication keyword that has keyword and publication and journal	SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on name of journal	GROUP BY t3.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1
Get name of publication keyword that has keyword and publication and journal	SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on name of journal	GROUP BY t3.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1
Get keyword of publication keyword that has keyword and publication and conference	SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB 
Group the records based on keyword of keyword	GROUP BY t1.keyword
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
Get keyword of publication keyword that has keyword and publication and journal	SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that name of journal is PVLDB	WHERE t3.name = PVLDB 
Group the records based on keyword of keyword	GROUP BY t1.keyword
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1
Get keyword of publication keyword that has keyword and publication and writes and author	SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that name of author is H. V. Jagadish	WHERE t2.name = H. V. Jagadish 
Group the records based on keyword of keyword	GROUP BY t1.keyword
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
Get name of organization that has author and writes and publication	SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan 
Group the records based on name of author	GROUP BY t1.name
Order these records based on the the SUM of citation num of publication and sort them in descending order, and return the top 1 record	ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1
Get name of DOMAIN that has DOMAIN publication AND publication AND writes AND author AND organization	SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did = t2.did JOIN publication AS t5 ON t5.pid = t2.pid JOIN writes AS t3 ON t3.pid = t5.pid JOIN author AS t1 ON t3.aid = t1.aid JOIN organization AS t6 ON t6.oid = t1.oid
Keep the records that name of DOMAIN is Databases AND name of organization is University of Michigan	WHERE t4.name = Databases AND t6.name = University of Michigan 
Group the records based on name of author	GROUP BY t1.name
Order these records based on the the SUM of citation num of publication AND sort them in descending order, AND return the top 1 record	ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1
Get title of writes that has author AND publication AND writes	SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid = t2.aid JOIN publication AS t5 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t5.pid JOIN author AS t1 ON t4.aid = t1.aid
Keep the records that name of author is Divesh Srivastava AND name of author is H. V. Jagadish	WHERE t2.name = Divesh Srivastava AND t1.name = H. V. Jagadish 
Order these records based on the citation num of publication AND sort them in descending order, AND return the top 1 record	ORDER BY t5.citation_num DESC LIMIT 1
Get name of publication that has conference and writes and author	SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish 
Group the records based on the number of distinct title of publication name of conference 10 that the number of distinct title of publication is greater than 10	GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title ) > 10 HAVING COUNT ( DISTINCT t4.title ) > 10
Get name of publication that has conference and writes and author	SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish 
Group the records based on name of conference	GROUP BY t2.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
Get name of publication that has journal and writes and author	SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish 
Group the records based on the number of distinct title of publication name of journal 10 that the number of distinct title of publication is greater than 10	GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title ) > 10 HAVING COUNT ( DISTINCT t4.title ) > 10
Get name of publication that has journal and writes and author	SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish 
Group the records based on name of journal	GROUP BY t2.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
Get title of publication	SELECT title FROM publication
Order these records based on the citation num and sort them in descending order, and return the top 1 record	ORDER BY citation_num DESC LIMIT 1
Get title of DOMAIN that has DOMAIN publication and publication	SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid
Keep the records that name of DOMAIN is Databases	WHERE t2.name = Databases 
Order these records based on the citation num of publication and sort them in descending order, and return the top 1 record	ORDER BY t3.citation_num DESC LIMIT 1
Get title of publication that has journal	SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB	WHERE t1.name = PVLDB 
Order these records based on the citation num of publication and sort them in descending order, and return the top 1 record	ORDER BY t2.citation_num DESC LIMIT 1
Get title of publication that has conference	SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB	WHERE t1.name = VLDB 
Order these records based on the citation num of publication and sort them in descending order, and return the top 1 record	ORDER BY t2.citation_num DESC LIMIT 1
Get title of writes that has author and publication	SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid = t1.aid JOIN publication AS t3 ON t2.pid = t3.pid
Keep the records that name of author is H. V. Jagadish	WHERE t1.name = H. V. Jagadish 
Order these records based on the citation num of publication and sort them in descending order, and return the top 1 record	ORDER BY t3.citation_num DESC LIMIT 1
Get title of publication	SELECT title FROM publication
Keep the records that is greater than 2000	WHERE YEAR > 2000 
Order these records based on the citation num and sort them in descending order, and return the top 1 record	ORDER BY citation_num DESC LIMIT 1
Get title of DOMAIN that has DOMAIN publication AND publication	SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did = t1.did JOIN publication AS t3 ON t3.pid = t1.pid
Keep the records that name of DOMAIN is Databases AND year of publication is greater than 2000	WHERE t2.name = Databases AND t3.year > 2000 
Order these records based on the citation num of publication AND sort them in descending order, AND return the top 1 record	ORDER BY t3.citation_num DESC LIMIT 1
Get title of publication that has journal	SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid = t1.jid
Keep the records that name of journal is PVLDB AND year of publication is greater than 2000	WHERE t1.name = PVLDB AND t2.year > 2000 
Order these records based on the citation num of publication AND sort them in descending order, AND return the top 1 record	ORDER BY t2.citation_num DESC LIMIT 1
Get title of publication that has conference	SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid = t1.cid
Keep the records that name of conference is VLDB AND year of publication is greater than 2000	WHERE t1.name = VLDB AND t2.year > 2000 
Order these records based on the citation num of publication AND sort them in descending order, AND return the top 1 record	ORDER BY t2.citation_num DESC LIMIT 1
Get name of publication that has journal and writes and author	SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of journal is PVLDB	WHERE t2.name = PVLDB 
Group the records based on the number of distinct title of publication name of author 10 that the number of distinct title of publication is greater than 10	GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title ) > 10 HAVING COUNT ( DISTINCT t4.title ) > 10
Get name of publication that has journal and writes and author	SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid = t2.jid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of journal is PVLDB	WHERE t2.name = PVLDB 
Group the records based on name of author	GROUP BY t1.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
Get name of publication keyword that has keyword and publication and writes and author	SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on the number of distinct title of publication name of author 10 that the number of distinct title of publication is greater than 10	GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title ) > 10 HAVING COUNT ( DISTINCT t3.title ) > 10
Get name of publication keyword that has keyword and publication and conference	SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on the number of distinct title of publication name of conference 60 that the number of distinct title of publication is greater than 60	GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title ) > 60 HAVING COUNT ( DISTINCT t3.title ) > 60
Get name of publication keyword that has keyword and publication and journal	SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that keyword of keyword is Relational Database	WHERE t1.keyword = Relational Database 
Group the records based on the number of distinct title of publication name of journal 60 that the number of distinct title of publication is greater than 60	GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title ) > 60 HAVING COUNT ( DISTINCT t2.title ) > 60
Get keyword of publication keyword that has keyword and publication and conference	SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t3 ON t3.pid = t4.pid JOIN conference AS t2 ON t3.cid = t2.cid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB 
Group the records based on the number of distinct title of publication keyword of keyword 100 that the number of distinct title of publication is greater than 100	GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title ) > 100 HAVING COUNT ( DISTINCT t3.title ) > 100
Get keyword of publication keyword that has keyword and publication and journal	SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid = t1.kid JOIN publication AS t2 ON t2.pid = t4.pid JOIN journal AS t3 ON t2.jid = t3.jid
Keep the records that name of journal is PVLDB	WHERE t3.name = PVLDB 
Group the records based on the number of distinct title of publication keyword of keyword 100 that the number of distinct title of publication is greater than 100	GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title ) > 100 HAVING COUNT ( DISTINCT t2.title ) > 100
Get keyword of publication keyword that has keyword and publication and writes and author	SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid = t1.kid JOIN publication AS t3 ON t3.pid = t5.pid JOIN writes AS t4 ON t4.pid = t3.pid JOIN author AS t2 ON t4.aid = t2.aid
Keep the records that name of author is H. V. Jagadish	WHERE t2.name = H. V. Jagadish 
Group the records based on the number of distinct title of publication keyword of keyword 10 that the number of distinct title of publication is greater than 10	GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title ) > 10 HAVING COUNT ( DISTINCT t3.title ) > 10
Get name of publication that has conference and writes and author	SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB 
Group the records based on the number of distinct title of publication name of author 10 that the number of distinct title of publication is greater than 10	GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title ) > 10 HAVING COUNT ( DISTINCT t4.title ) > 10
Get name of publication that has conference and writes and author	SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid = t2.cid JOIN writes AS t3 ON t3.pid = t4.pid JOIN author AS t1 ON t3.aid = t1.aid
Keep the records that name of conference is VLDB	WHERE t2.name = VLDB 
Group the records based on name of author	GROUP BY t1.name
Order these records based on the the number of distinct title of publication and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
Get name of organization that has author and writes and publication	SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid = t1.oid JOIN writes AS t3 ON t3.aid = t1.aid JOIN publication AS t4 ON t3.pid = t4.pid
Keep the records that name of organization is University of Michigan	WHERE t2.name = University of Michigan 
Group the records based on the SUM of citation num of publication name of author 5000 that the SUM of citation num of publication is greater than 5000	GROUP BY t1.name HAVING SUM ( t4.citation_num ) > 5000 HAVING SUM ( t4.citation_num ) > 5000
Get name of DOMAIN author that has author AND DOMAIN AND organization AND writes AND publication	SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid = t1.aid JOIN DOMAIN AS t3 ON t3.did = t6.did JOIN organization AS t5 ON t5.oid = t1.oid JOIN writes AS t2 ON t2.aid = t1.aid JOIN publication AS t4 ON t2.pid = t4.pid
Keep the records that name of DOMAIN is Databases AND name of organization is University of Michigan	WHERE t3.name = Databases AND t5.name = University of Michigan 
Group the records based on the SUM of citation num of publication name of author 5000 that the SUM of citation num of publication is greater than 5000	GROUP BY t1.name HAVING SUM ( t4.citation_num ) > 5000 HAVING SUM ( t4.citation_num ) > 5000
Get release year of movie	SELECT release_year FROM movie
Keep the records that title is The Imitation Game	WHERE title = The Imitation Game
Get release year of movie	SELECT release_year FROM movie
Keep the records that title is The Imitation Game	WHERE title = The Imitation Game
Get birth year of actor	SELECT birth_year FROM actor
Keep the records that name is Benedict Cumberbatch	WHERE name = Benedict Cumberbatch
Get birth year of actor	SELECT birth_year FROM actor
Keep the records that name is Benedict Cumberbatch	WHERE name = Benedict Cumberbatch
Get nationality of actor	SELECT nationality FROM actor
Keep the records that name is Christoph Waltz	WHERE name = Christoph Waltz
Get nationality of actor	SELECT nationality FROM actor
Keep the records that name is Christoph Waltz	WHERE name = Christoph Waltz
Get title of movie	SELECT title FROM movie
Keep the records that release year is 2015	WHERE release_year = 2015
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Tehran	WHERE birth_city = Tehran
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Tehran	WHERE birth_city = Tehran
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Tehran	WHERE birth_city = Tehran
Get name of actor	SELECT name FROM actor
Keep the records that nationality is Afghanistan	WHERE nationality = Afghanistan
Get name of actor	SELECT name FROM actor
Keep the records that nationality is Afghanistan	WHERE nationality = Afghanistan
Get name of actor	SELECT name FROM actor
Keep the records that nationality is Afghanistan	WHERE nationality = Afghanistan
Get name of actor	SELECT name FROM actor
Keep the records that birth year is 1984	WHERE birth_year = 1984
Get birth year of actor	SELECT birth_year FROM actor
Keep the records that name is actor_name0	WHERE name = actor_name0
Get birth year of actor	SELECT birth_year FROM actor
Keep the records that name is actor_name0	WHERE name = actor_name0
Get birth city of director	SELECT birth_city FROM director
Keep the records that name is director_name0	WHERE name = director_name0
Get birth city of director	SELECT birth_city FROM director
Keep the records that name is director_name0	WHERE name = director_name0
Get nationality of director	SELECT nationality FROM director
Keep the records that name is director_name0	WHERE name = director_name0
Get budget of movie	SELECT budget FROM movie
Keep the records that title is Finding Nemo	WHERE title = Finding Nemo
Get title of director that has directed by AND movie	SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Steven Spielberg AND release year of movie is greater than 2006	WHERE t2.name = Steven Spielberg AND t3.release_year > 2006
Get name of director that has directed by and movie	SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that title of movie is James Bond	WHERE t3.title = James Bond
Get name of director that has directed by and movie	SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that title of movie is James Bond	WHERE t3.title = James Bond
Get name of director that has directed by and movie	SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that title of movie is James Bond	WHERE t3.title = James Bond
Get naThe Imitation Game of CAST that has actor AND movie	SELECT t1.naThe Imitation Game FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that role of CAST is Alan Turing AND title of movie is The Imitation Game	WHERE t2.role = Alan Turing AND t3.title = The Imitation Game
Get name of CAST that has actor AND movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that role of CAST is Alan Turing AND title of movie is The Imitation Game	WHERE t2.role = Alan Turing AND t3.title = The Imitation Game
Get name of CAST that has actor AND movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that role of CAST is Alan Turing AND title of movie is The Imitation Game	WHERE t2.role = Alan Turing AND t3.title = The Imitation Game
Get name of CAST that has actor AND movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that role of CAST is Alan Turing AND title of movie is The Imitation Game	WHERE t2.role = Alan Turing AND t3.title = The Imitation Game
Get name of CAST that has actor AND movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that role of CAST is Alan Turing AND title of movie is The Imitation Game	WHERE t2.role = Alan Turing AND t3.title = The Imitation Game
Get genre of genre that has classification and movie	SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that title of movie is Jurassic Park	WHERE t3.title = Jurassic Park
Get name of director that has directed by AND movie	SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that release year of movie is 2015 AND title of movie is Joy	WHERE t3.release_year = 2015 AND t3.title = Joy
Get title of written by that has movie and writer	SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid
Keep the records that name of writer is Matt Damon	WHERE t2.name = Matt Damon
Get title of movie that has made by AND producer AND written by AND writer	SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid = t3.msid JOIN producer AS t1 ON t1.pid = t3.pid JOIN written_by AS t5 ON t5.msid = t2.mid JOIN writer AS t4 ON t5.wid = t4.wid
Keep the records that name of producer is Woody Allen AND name of writer is Woody Allen	WHERE t1.name = Woody Allen AND t4.name = Woody Allen
Get title of CAST that has actor and movie	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Robin Wright	WHERE t1.name = Robin Wright
Get title of CAST that has actor and movie	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Robin Wright	WHERE t1.name = Robin Wright
Get title of CAST that has actor and movie	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Robin Wright	WHERE t1.name = Robin Wright
Get budget of movie	SELECT budget FROM movie
Keep the records that release year is 2007 AND title is Juno	WHERE release_year = 2007 AND title = Juno
Get title of genre that has classification AND movie	SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that genre of genre is Sci-Fi AND release year of movie is 2010	WHERE t2.genre = Sci-Fi AND t3.release_year = 2010
Get title of genre that has classification AND movie	SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that genre of genre is Sci-Fi AND release year of movie is 2010	WHERE t2.genre = Sci-Fi AND t3.release_year = 2010
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Austin AND birth year is greater than 1980	WHERE birth_city = Austin AND birth_year > 1980
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Austin AND birth year is greater than 1980	WHERE birth_city = Austin AND birth_year > 1980
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Austin AND birth year is greater than 1980	WHERE birth_city = Austin AND birth_year > 1980
Get title of director that has directed by and movie	SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that birth city of director is Los Angeles	WHERE t2.birth_city = Los Angeles
Get name of actor	SELECT name FROM actor
Keep the records that birth city is New York City AND birth year is 1984	WHERE birth_city = New York City AND birth_year = 1984
Get title of tags that has keyword and movie	SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid
Keep the records that keyword of keyword is nuclear weapons	WHERE t1.keyword = nuclear weapons
Get title of tags that has keyword and movie	SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid
Keep the records that keyword of keyword is nuclear weapons	WHERE t1.keyword = nuclear weapons
Get title of director that has directed by and movie	SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Alfred Hitchcock	WHERE t2.name = Alfred Hitchcock
Get title of CAST that has actor AND movie AND directed by AND director	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that name of actor is Taraneh Alidoosti AND name of director is Asghar Farhadi	WHERE t1.name = Taraneh Alidoosti AND t3.name = Asghar Farhadi
Get title of CAST that has actor AND movie AND directed by AND director	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that name of actor is Taraneh Alidoosti AND name of director is Asghar Farhadi	WHERE t1.name = Taraneh Alidoosti AND t3.name = Asghar Farhadi
Get title of CAST that has actor AND movie AND directed by AND director	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that name of actor is Taraneh Alidoosti AND name of director is Asghar Farhadi	WHERE t1.name = Taraneh Alidoosti AND t3.name = Asghar Farhadi
Get title of CAST that has actor AND movie AND directed by AND director	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN directed_by AS t2 ON t4.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that name of actor is Taraneh Alidoosti AND name of director is Asghar Farhadi	WHERE t1.name = Taraneh Alidoosti AND t3.name = Asghar Farhadi
Get title of producer that has made by and tv series	SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid = t3.pid JOIN tv_series AS t2 ON t2.sid = t3.msid
Keep the records that name of producer is Shonda Rhimes	WHERE t1.name = Shonda Rhimes
Get name of CAST that has actor AND tv series	SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid
Keep the records that role of CAST is Olivia Pope AND title of tv series is Scandal	WHERE t3.role = Olivia Pope AND t2.title = Scandal
Get name of written by that has movie and writer	SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid
Keep the records that title of movie is The Truman Show	WHERE t1.title = The Truman Show
Get name of written by that has movie and writer	SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid = t1.mid JOIN writer AS t2 ON t3.wid = t2.wid
Keep the records that title of movie is The Truman Show	WHERE t1.title = The Truman Show
Get title of CAST that has actor and tv series	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid
Keep the records that name of actor is Scott Foley	WHERE t1.name = Scott Foley
Get title of CAST that has actor and tv series	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN tv_series AS t2 ON t2.sid = t3.msid
Keep the records that name of actor is Scott Foley	WHERE t1.name = Scott Foley
Get name of CAST that has actor and movie and directed by and director	SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that name of actor is Kate Winslet	WHERE t1.name = Kate Winslet
Get name of CAST that has actor and movie and made by and producer	SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid = t2.aid JOIN movie AS t5 ON t5.mid = t3.msid JOIN made_by AS t4 ON t5.mid = t4.msid JOIN producer AS t1 ON t1.pid = t4.pid
Keep the records that name of actor is Kate Winslet	WHERE t2.name = Kate Winslet
Get name of director that has directed by AND tv series	SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN tv_series AS t3 ON t3.sid = t1.msid
Keep the records that release year of tv series is 2013 AND title of tv series is House of Cards	WHERE t3.release_year = 2013 AND t3.title = House of Cards
Get name of actor	SELECT name FROM actor
Keep the records that birth city is Austin AND gender is female	WHERE birth_city = Austin AND gender = female
Get name of actor	SELECT name FROM actor
Keep the records that birth year is greater than 1980 AND nationality is Italy	WHERE birth_year > 1980 AND nationality = Italy
Get name of actor	SELECT name FROM actor
Keep the records that birth city is New York City AND birth year is greater than 1980 AND gender is female	WHERE birth_city = New York City AND birth_year > 1980 AND gender = female
Get name of CAST that has actor AND movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that gender of actor is female AND title of movie is Saving Private Ryan	WHERE t1.gender = female AND t3.title = Saving Private Ryan
Get name of director	SELECT name FROM director
Keep the records that nationality is Afghanistan	WHERE nationality = Afghanistan
Get name of CAST that has actor and movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that title of movie is Camp X-Ray	WHERE t3.title = Camp X-Ray
Get name of CAST that has actor AND movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that nationality of actor is Canada AND title of movie is James Bond	WHERE t1.nationality = Canada AND t3.title = James Bond
Get title of CAST that has actor AND movie	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Rowan Atkinson AND role of CAST is Mr. Bean	WHERE t1.name = Rowan Atkinson AND t3.role = Mr. Bean
Get birth city of director that has directed by and movie	SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that title of movie is The Past	WHERE t3.title = The Past
Get name of CAST that has actor	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid
Keep the records that role of CAST is Mr. Bean	WHERE t2.role = Mr. Bean
Get genre of director that has directed by and movie and classification and genre	SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN classification AS t1 ON t4.mid = t1.msid JOIN genre AS t3 ON t3.gid = t1.gid
Keep the records that name of director is Asghar Farhadi	WHERE t5.name = Asghar Farhadi
Get title of movie that has CAST	SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid = t2.msid
Keep the records that role of CAST is Daffy Duck	WHERE t2.role = Daffy Duck
Get role of CAST that has actor and movie	SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that title of movie is Daddy Long Legs	WHERE t3.title = Daddy Long Legs
Get name of director that has directed by and movie and tags and keyword	SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN tags AS t5 ON t5.msid = t4.mid JOIN keyword AS t1 ON t5.kid = t1.id
Keep the records that keyword of keyword is nuclear weapons	WHERE t1.keyword = nuclear weapons
Get the number of distinct title of CAST that has actor AND movie	SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Jennifer Aniston AND release year of movie is greater than 2010	WHERE t1.name = Jennifer Aniston AND t2.release_year > 2010
Get the number of distinct name of CAST that has actor and movie	SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that title of movie is Saving Private Ryan	WHERE t3.title = Saving Private Ryan
Get the number of distinct name of CAST that has actor and movie	SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that title of movie is Saving Private Ryan	WHERE t3.title = Saving Private Ryan
Get the number of distinct title of director that has directed by and movie	SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Steven Spielberg	WHERE t2.name = Steven Spielberg
Get the number of distinct title of movie	SELECT COUNT ( DISTINCT title ) FROM movie
Keep the records that release year is 2013	WHERE release_year = 2013
Get the number of distinct title of movie	SELECT COUNT ( DISTINCT title ) FROM movie
Keep the records that release year is 2013	WHERE release_year = 2013
Get the number of distinct title and release year of director that has directed BY and movie	SELECT COUNT ( DISTINCT t3.title ) , t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Woody Allen	WHERE t2.name = Woody Allen 
Group the records based on release year of movie	GROUP BY t3.release_year
Get the number of distinct title of CAST that has actor and movie	SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Shahab Hosseini	WHERE t1.name = Shahab Hosseini
Get the number of distinct title of CAST that has actor and movie	SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Shahab Hosseini	WHERE t1.name = Shahab Hosseini
Get the number of distinct title of CAST that has actor and movie	SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Shahab Hosseini	WHERE t1.name = Shahab Hosseini
Get the number of distinct title of CAST that has actor and movie	SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Shahab Hosseini	WHERE t1.name = Shahab Hosseini
Get the number of distinct name of actor	SELECT COUNT ( DISTINCT name ) FROM actor
Keep the records that birth city is Los Angeles AND birth year is greater than 2000	WHERE birth_city = Los Angeles AND birth_year > 2000
Get the number of distinct title of CAST that has actor AND movie	SELECT COUNT ( DISTINCT t2.title ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Humphrey Bogart AND release year of movie is less than 1942	WHERE t1.name = Humphrey Bogart AND t2.release_year < 1942
Get the number of distinct title and release year of CAST that has actor and movie	SELECT COUNT ( DISTINCT t2.title ) , t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that name of actor is Brad Pitt	WHERE t1.name = Brad Pitt 
Group the records based on release year of movie	GROUP BY t2.release_year
Get the number of distinct title of tags that has keyword AND movie	SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid
Keep the records that keyword of keyword is Iraq war AND release year of movie is 2015	WHERE t1.keyword = Iraq war AND t3.release_year = 2015
Get the number of distinct title of tags that has keyword AND movie	SELECT COUNT ( DISTINCT t3.title ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid = t1.id JOIN movie AS t3 ON t2.msid = t3.mid
Keep the records that keyword of keyword is Persians AND release year of movie is greater than 1990	WHERE t1.keyword = Persians AND t3.release_year > 1990
Get the number of distinct title of director that has directed by AND movie	SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Quentin Tarantino AND release year of movie is greater than 2010	WHERE t2.name = Quentin Tarantino AND t3.release_year > 2010
Get the number of distinct title of director that has directed by AND movie	SELECT COUNT ( DISTINCT t3.title ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Quentin Tarantino AND release year of movie is less than 2010	WHERE t2.name = Quentin Tarantino AND t3.release_year < 2010
Get the number of distinct title of director that has directed by AND movie AND made by AND producer	SELECT COUNT ( DISTINCT t4.title ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid
Keep the records that name of director is Quentin Tarantino AND release year of movie is less than 2010 AND release year of movie is greater than 2002	WHERE t3.name = Quentin Tarantino AND t4.release_year < 2010 AND t4.release_year > 2002
Get the number of distinct name of actor	SELECT COUNT ( DISTINCT name ) FROM actor
Keep the records that birth city is New York City AND birth year is greater than 1980 AND gender is female	WHERE birth_city = New York City AND birth_year > 1980 AND gender = female
Get the number of distinct name of CAST that has actor AND movie AND directed by AND director	SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that nationality of actor is Iran AND name of director is Jim Jarmusch	WHERE t1.nationality = Iran AND t3.name = Jim Jarmusch
Get the number of distinct name of CAST that has actor AND movie	SELECT COUNT ( DISTINCT t1.name ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that nationality of actor is China AND title of movie is Rush Hour 3	WHERE t1.nationality = China AND t3.title = Rush Hour 3
Get title of CAST that has actor AND movie AND CAST	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid
Keep the records that name of actor is Woody Strode AND name of actor is Jason Robards	WHERE t1.name = Woody Strode AND t2.name = Jason Robards
Get title of CAST that has actor AND movie AND CAST	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid
Keep the records that name of actor is Woody Strode AND name of actor is Jason Robards	WHERE t1.name = Woody Strode AND t2.name = Jason Robards
Get title of CAST that has actor AND movie AND CAST	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid
Keep the records that name of actor is Woody Strode AND name of actor is Jason Robards	WHERE t1.name = Woody Strode AND t2.name = Jason Robards
Get title of CAST that has actor AND movie AND CAST	SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid = t1.aid JOIN movie AS t4 ON t4.mid = t5.msid JOIN CAST AS t3 ON t4.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid
Keep the records that name of actor is Woody Strode AND name of actor is Jason Robards	WHERE t1.name = Woody Strode AND t2.name = Jason Robards
Get name of CAST that has actor and movie and CAST	SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN CAST AS t3 ON t5.mid = t3.msid JOIN actor AS t2 ON t3.aid = t2.aid
Keep the records that name of actor is Tom Hanks	WHERE t2.name = Tom Hanks
Get title of director that has directed by and movie	SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did = t2.did JOIN directed_by AS t1 ON t5.did = t1.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that title of movie is Revolutionary Road	WHERE t4.title = Revolutionary Road
Get title of genre that has classification and movie	SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid = t1.gid JOIN movie AS t3 ON t3.mid = t1.msid
Group the records based on title of movie	GROUP BY t3.title
Order these records based on the the number of distinct genre of genre and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t2.genre ) DESC LIMIT 1
Get title of CAST that has actor and movie	SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid = t1.aid JOIN movie AS t2 ON t2.mid = t3.msid
Keep the records that nationality of actor is China	WHERE t1.nationality = China 
Group the records based on title of movie	GROUP BY t2.title
Order these records based on the the number of distinct name of actor and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t1.name ) DESC LIMIT 1
Get name of CAST that has actor and movie and directed BY and director	SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid = t1.aid JOIN movie AS t5 ON t5.mid = t4.msid JOIN directed_by AS t2 ON t5.mid = t2.msid JOIN director AS t3 ON t3.did = t2.did
Keep the records that name of director is Quentin Tarantino	WHERE t3.name = Quentin Tarantino 
Order these records based on the release year of movie and sort them in descending order, and return the top 1 record	ORDER BY t5.release_year DESC LIMIT 1
Get budget and title of director that has directed BY and movie	SELECT t3.budget , t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Quentin Tarantino	WHERE t2.name = Quentin Tarantino 
Order these records based on the release year of movie and sort them in descending order, and return the top 1 record	ORDER BY t3.release_year DESC LIMIT 1
Get title of director that has directed BY and movie	SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did = t1.did JOIN movie AS t3 ON t3.mid = t1.msid
Keep the records that name of director is Jim Jarmusch	WHERE t2.name = Jim Jarmusch 
Order these records based on the release year of movie and sort them in descending order, and return the top 1 record	ORDER BY t3.release_year DESC LIMIT 1
Get name of director that has directed BY and movie and made BY and producer	SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did = t2.did JOIN movie AS t4 ON t4.mid = t2.msid JOIN made_by AS t5 ON t4.mid = t5.msid JOIN producer AS t1 ON t1.pid = t5.pid
Group the records based on name of producer	GROUP BY t1.name
Order these records based on the the number of distinct name of director and sort them in descending order, and return the top 1 record	ORDER BY COUNT ( DISTINCT t3.name ) DESC LIMIT 1
Get name of CAST that has actor and movie	SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid = t1.aid JOIN movie AS t3 ON t3.mid = t2.msid
Keep the records that name of actor is Gabriele Ferzetti	WHERE t1.name = Gabriele Ferzetti 
Order these records based on the release year of movie and sort them in descending order, and return the top 1 record	ORDER BY t3.release_year DESC LIMIT 1
Get the number of restaurant that has LOCATION	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND name of restaurant is buttercup kitchen	WHERE t2.city_name = san francisco AND t1.name = buttercup kitchen
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is chinese	WHERE t2.region = bay area AND t1.food_type = chinese
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is chinese	WHERE t2.region = bay area AND t1.food_type = chinese
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is chinese	WHERE t2.region = bay area AND t1.food_type = chinese
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is chinese	WHERE t2.region = bay area AND t1.food_type = chinese
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that county of geographic is santa cruz county AND name of restaurant is jamerican cuisine	WHERE t2.county = santa cruz county AND t1.name = jamerican cuisine
Get house number and name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that name of restaurant is jamerican cuisine	WHERE t1.name = jamerican cuisine
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has LOCATION	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french	WHERE t2.city_name = san francisco AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND food type of restaurant is french AND rating of restaurant is the first query result	WHERE t2.city_name = san francisco AND t1.food_type = french AND t1.rating = ( the first query result ) 
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND name of restaurant is denny	WHERE t2.region = bay area AND t1.name = denny
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd AND rating of restaurant is greater than	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd AND rating of restaurant is greater than	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd AND rating of restaurant is greater than	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd AND rating of restaurant is greater than	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd AND t1.rating > 2.5
Get house number and name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda	WHERE t2.city_name = alameda
Get house number and name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda	WHERE t2.city_name = alameda
Get house number and name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda	WHERE t2.city_name = alameda
Get house number and name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda	WHERE t2.city_name = alameda
Get house number and name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda	WHERE t2.city_name = alameda
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that food type of restaurant is french AND rating of restaurant is greater than	WHERE t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that food type of restaurant is french AND rating of restaurant is greater than	WHERE t1.food_type = french AND t1.rating > 2.5
Get the number of restaurant that has LOCATION	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is palo alto AND food type of restaurant is french	WHERE t2.city_name = palo alto AND t1.food_type = french
Get the number of restaurant that has LOCATION	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is palo alto AND food type of restaurant is french	WHERE t2.city_name = palo alto AND t1.food_type = french
Get the number of restaurant that has LOCATION	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is palo alto AND food type of restaurant is french	WHERE t2.city_name = palo alto AND t1.food_type = french
Get the number of restaurant that has LOCATION	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is palo alto AND food type of restaurant is french	WHERE t2.city_name = palo alto AND t1.food_type = french
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that county of geographic is yolo county AND food type of restaurant is italian	WHERE t2.county = yolo county AND t1.food_type = italian
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is french	WHERE t2.city_name = mountain view AND t1.food_type = french
Get the number of restaurant that has geographic	SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND name of restaurant is denny	WHERE t2.region = bay area AND t1.name = denny
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda AND rating of restaurant is greater than	WHERE t2.city_name = alameda AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda AND rating of restaurant is greater than	WHERE t2.city_name = alameda AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda AND rating of restaurant is greater than	WHERE t2.city_name = alameda AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is alameda AND rating of restaurant is greater than	WHERE t2.city_name = alameda AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND street name of LOCATION is buchanan AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = san francisco AND t2.street_name = buchanan AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is french	WHERE t2.region = bay area AND t1.food_type = french
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is bethel island AND street name of LOCATION is bethel island rd	WHERE t2.city_name = bethel island AND t2.street_name = bethel island rd
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get the maximum value of rating of restaurant that has geographic	SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name
Keep the records that region of geographic is bay area AND food type of restaurant is american	WHERE t2.region = bay area AND t1.food_type = american
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is bay area AND food type of restaurant is american AND rating of restaurant is the first query result	WHERE t2.region = bay area AND t1.food_type = american AND t1.rating = ( the first query result ) 
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has geographic AND LOCATION	SELECT t3.house_number , t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name = t2.city_name JOIN LOCATION AS t3 ON t1.id = t3.restaurant_id
Keep the records that region of geographic is yosemite and mono lake area AND food type of restaurant is french AND rating of restaurant is greater than	WHERE t2.region = yosemite and mono lake area AND t1.food_type = french AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is mountain view AND food type of restaurant is arabic AND rating of restaurant is greater than	WHERE t2.city_name = mountain view AND t1.food_type = arabic AND t1.rating > 2.5
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND name of restaurant is jamerican cuisine	WHERE t2.city_name = san francisco AND t1.name = jamerican cuisine
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND name of restaurant is jamerican cuisine	WHERE t2.city_name = san francisco AND t1.name = jamerican cuisine
Get house number AND name of restaurant that has LOCATION	SELECT t2.house_number , t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id = t2.restaurant_id
Keep the records that city name of LOCATION is san francisco AND name of restaurant is jamerican cuisine	WHERE t2.city_name = san francisco AND t1.name = jamerican cuisine
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is bay area	WHERE region = bay area
Get house number and name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result	WHERE t1.city_name IN ( the first query result ) 
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is bay area	WHERE region = bay area
Get house number and name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result	WHERE t1.city_name IN ( the first query result ) 
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is bay area	WHERE region = bay area
Get house number and name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result	WHERE t1.city_name IN ( the first query result ) 
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is bay area	WHERE region = bay area
Get house number and name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result	WHERE t1.city_name IN ( the first query result ) 
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is region0	WHERE region = region0
Get house number AND name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result AND rating of restaurant is greater than	WHERE t1.city_name IN ( the first query result )  AND t1.rating > 2.5
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is region0	WHERE region = region0
Get house number AND name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result AND rating of restaurant is greater than	WHERE t1.city_name IN ( the first query result )  AND t1.rating > 2.5
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is region0	WHERE region = region0
Get house number AND name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result AND rating of restaurant is greater than	WHERE t1.city_name IN ( the first query result )  AND t1.rating > 2.5
Get city name of geographic	SELECT city_name FROM geographic
Keep the records that region is region0	WHERE region = region0
Get house number AND name of LOCATION that has restaurant	SELECT t2.house_number , t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id = t2.restaurant_id
Keep the records that city name of restaurant is in the first query result AND rating of restaurant is greater than	WHERE t1.city_name IN ( the first query result )  AND t1.rating > 2.5
